[

{

"title"    : "Page Not Found",
"category" : "",
"tags"     : "",
"url"      : "/404.html",
"date"     : "",
"content"  : "Sorry, but the page you were trying to view does not exist."

} ,

{

"title"    : "FAQ",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/FAQ.html",
"date"     : "",
"content"  : "FAQ"

} ,

{

"title"    : "Abstraccion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/abstraccion.html",
"date"     : "",
"content"  : "Programar implica muchas veces manejar grandes cantidades de informacin, un programa es una entidad muy compleja y por lo tanto es muy difcil abarcarlo en su totalidad. Por eso necesitamos herramientas que nos permitan manejar esa complejidad.Gran parte de esas ideas trabajan con el principio de dividir y conquistar, esto es, tomar una parte ms pequea del programa y poder comprenderla olvidndonos momentneamente del resto del programa. Sin embargo, siempre que uno tome una parte de un programa ms grande, esa parte tendr relaciones con otras partes del sistema. Para entenderlo yo debo poder incorporar esas otras partes a mi anlisis pero sin tener que comprender todos sus detalles. Las herramientas que nos permiten eso las denominamos abstracciones.Una abstraccin es una forma de interpretar y conceptualizar lo que resulta ms importante de una entidad compleja, sin tener que tener en cuenta todos sus detalles. Me permite quedarme con lo esencial descartando lo que (para m, en ese momento) es accesorio.Una abstraccin es un concepto o una idea que no est asociado a ningn caso concreto. Abstraer es formar una idea general a partir de casos particulares. En la vida cotidiana usamos abstracciones todo el tiempo y gracias a eso, por ejemplo, podemos saber que una mesa es una mesa ms all de si es cuadrada o redonda, de madera o de plstico, con 4, 3 o 6 patas. Cuando programamos tambin es importante encontrar buenas abstracciones.Cada uno de los paradigmas que vamos a aprender, nos va a brindar sus propias formas de abstraccin. Las abstracciones de cada paradigma van a ser conceptos fundamentales en esta materia. Para los que vienen de programar estructurado, la forma de abstraccin ms conocida es el procedimiento. Un procedimiento permite tomar un conjunto de instrucciones y darles un nombre para poder utilizarla en otro contexto. Quien invoca el procedimiento se concentra en qu es lo que necesita resolver, el procedimiento es el que implementa el cmo se resuelve un determinado problema.La Declaratividad es una forma de abstraccin muy poderosa, que nos permite describir el conocimiento relativo a un problema desentendindonos de los algoritmos necesarios para manipular esa lgica, que son provistos por el motor.Alto nivel y Bajo nivelMuchas veces se habla de lenguajes de alto y bajo nivel, trminos que se refieren al nivel de abstraccin de cada lenguaje. Esta clasificacin no es un blanco y negro, sino que sirve para comparar entre diferentes lenguajes respecto a qu tan cercanas son sus abstracciones a la mquina (bajo nivel) o al programador (alto nivel).A Assembler (trabaja directamente con instrucciones de mquina y los registros de la computadora) podemos considerarlo como de ms bajo nivel que C por ejemplo (que es un lenguaje que se compila a cdigo de mquina y nos permite trabajar con procedimientos y estructuras complejas), sin embargo se puede ir ms a bajo nivel que con Assembler (siempre hay unos y ceros ms abajo) y ms alto nivel que C (todos los lenguajes que usamos en la materia tienen estas caractersticas, un ejemplo de ello es que no necesitamos manejar nuestra propia memoria, existen mecanismos para ello sobre los cuales nos paramos)."

} ,

{

"title"    : "Temario de Algoritmos II",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/algo2-temario.html",
"date"     : "",
"content"  : "Software  Entorno Kotlin  JDK vs. JRE  Gradle  Cmo trabajar con TravisPginas  Testeo unitario avanzado  Cmo corregir un error en runtime, a partir de un ejemplo en githubLinks  Sitio oficial de la materia"

} ,

{

"title"    : "Temario de Algoritmos III",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/algo3-temario.html",
"date"     : "",
"content"  : "El sitio oficial de la materia es http://algo3.uqbar-project.orgUnidad 1 - Introduccin a las UI  Definiciones Iniciales sobre interfaces de usuario  Clasificacin  Integracin de la UI en una arquitectura de un sistema de software  Elementos a tener en cuenta al programar una UIUnidad 2 - Web EstticoEntorno  Entorno HTML - CSSArtculos  Introduccin a la arquitectura web  HTML  CSS  Taller de maquetado web  Introduccin a SASS  ResponsivenessMaterial  Pgina de maquetado.Unidad 3 - Web Client Side MVC.Entorno  Instalacin de Entorno Angular  Manejo de dependencias con NPMMaterial  Diapositivas Angular  Pgina de Typescript  Pgina de Angular  Pgina de SpringbootUnidad 4 - Web Client Side FRP.Entorno  Instalacin del entorno ReactMaterial  Pgina de ReactAnexo A - Cliente pesado. MVC. (deprecado)Este anexo fue deprecado a partir del ao 2020. Dejamos el material por razones histricas.Contenidos principalesEn esta unidad se vern los conceptos principales que permiten organizar el diseo de una interfaz de usuario. Estos conceptos pueden resumirse en:  Introduccin a UI: componentes, organizacin espacial de la vista (layout), patrn MVC, binding  Navegacin. Relacin entre la navegacin y los casos de uso del sistema.  Taller inicial de Arena (hands-on interactivo), a partir de dos ejemplos se cuenta cmo se implementa el layout, algunos componentes visuales y el binding bidireccional, adems del esquema MVC.  Application model. Extendiendo el MVC  Validaciones y manejo de errores en la UIMaterial de lectura complementario  Notas sobre MVC. El patrn MVC tiene multiples interpretaciones, de ellas la que nos parece ms interesante es la que contempla el concepto de Application Model, tambin llamado MMVC, Presentation Model de Martin Fowler, MVVM o MVB (Model-View-Binder). Otras lecturas recomendadas son:          Discusin sobre las mltiples interpretaciones y variantes del patrn.      Historia del patrn MVC      Finalmente una discusin sobre el elemento ms controversial del patrn: el controller.        Binding: Vinculacin entre la vista y el modeloEntorno  Gua de Componentes  Bindings y dems controllers. Binding avanzado  Layouts  Navegacin y manejo del estado  Manejo de Transacciones  Qu pasa cuando no tenemos bindingEjemplos en Internet  React Rocks  Ejemplos de la pgina de ReactAnexo B - Aplicaciones mvilesEntorno  Preparacion de un entorno de desarrollo Android  Herramientas de desarrollo con AndroidMaterial  Introduccin al desarrollo con Android  Cambiando el cono / ttulo de la app  Ciclo de vida de las actividadesEjemplosKotlin  Conversor bsico de millas a kilmetros: primera activity y binding manual          versin con Data Binding        Listado de pelculas bsico          y la versin REST (hay otro branch para ver cmo se trabajaba en REST hasta la SDK 26 Oreo)        Primer ejemplo bsico de un servicio REST  Prstamos de libros (y de cosas) en base a los contactos del celularJavaPods hacer esta bsqueda en los repositorios de la organizacin UqbarIonic  Carga de Productos: se integra con el reconocedor de cdigo de barras del celular.  TODO List o lista de cosas para hacer, versin histrica en Ionic 1Ejemplos de Internet  Ejemplos de la pgina Developer Android  Catlogo de aplicaciones Android de Java2S  Ejemplos de Google  Repositorios con ejemplos en Googlesource de Android"

} ,

{

"title"    : "Amigandonos con el entorno de desarrollo",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/amigandonos-con-el-entorno-de-desarrollo.html",
"date"     : "",
"content"  : "Algunas buenas prcticas para tener en cuenta:Control de versiones  No todos los archivos deben subirse al repo. Como regla general no deberan subir archivos que se puedan generar a partir de otros, por ejemplo:          los binarios que se generan a partir del cdigo fuente de ustedes. Ocupan espacio en el repositorio y se corre el riesgo de estar trabajando con versiones desactualizadas.      archivos de configuracin propios de cada uno (por ejemplo el .settings que genera el Eclipse). Si alguno tiene una configuracin diferente (que es muy muy muy probable) la van a estar pisando a cada rato, e incluso es probable que les genere conflictos.        Nunca deberan subir nuevos fuentes al repositorio sin explicar brevemente qu cambiaron. Si los mensajes son descriptivos (y fix, asdsadsa o arreglo una cosita definitivamente no lo son) rpidamente puedo detectar qu modificaron mis compaeros con slo leer lo que escribieron en los commits. Una buena descripcin me ayuda tambin a entender qu es lo que se modific y por qu razn, especialmente til a la hora de solucionar un conflicto o entender por qu se rompieron los tests.  Establecer criterios de trabajo en grupo, algunos muy usados:          los tests tienen que estar en verde      los tests son de todos y todos somos responsables por mantenerlos      si encontramos un bug y no haba un test que lo probaba agregamos uno      los tests son rpidos de correr        Establecer formas de trabajo y organizar el trabajo nuestro con el de los dems:          Cuando empiezo el da primero sincronizo el repositorio para ver los cambios que no tengo en el cdigo      Acepto los cambios entrantes y en caso de ser necesario resuelvo conflictos      Corro los tests y veo que todo anda sobre ruedas      Vuelvo a sincronizar y veo que ya no quedan ni conflictos ni cambios sin aceptar      Subo mis cambios al repositorio remoto para que mis compaeros lo vean      Esto mismo lo hacemos varias veces al da y antes de subir algo nuevo al repositorio. Siempre corro los tests y si alguno da error, bueno, alguien subi algo indebido. Los tests y el repositorio nos ayudan a entender cundo se rompi y por qu.Git  A la hora de ignorar archivos, git nos provee una forma muy sencilla y a la vez poderosa de hacerlo: los .gitignore. Estos son archivos que podemos crear en cualquier carpeta de nuestra estructura (usualmente en el directorio raz) y especificar en ellos qu archivos o patrones deberan quedar fuera del versionado. Cada lnea del .gitignore representa algo que queremos ignorar, por ejemplo enunciado.pdf nos ignorara ese archivo, mientras que *.class va a ignorar todos los .class que tengamos en el directorio actual y en todos sus subdirectorios. Pueden encontrar versiones de .gitignore para la mayora de los lenguajes en https://github.com/github/gitignoreA continuacin te damos una lista de posibles recursos que deberan estar en el archivo .gitignore:  /target/  .classpath  .project  bin  generated*  .settingsEclipse  Cmo organizar los archivos: Convention Over Configuration, el cdigo productivo debera estar en src/main y el cdigo de test en src/test. Qu gano usando estas convenciones? Me corren los tests, me integro con el mundo y eventualmente puedo usar herramientas externas sin tener que configurar nada, ya que respetan estas convenciones (como Maven).  Formatear el cdigo! Nunca nos olvidemos de que nuestro cdigo tiene que ser entendible para el resto de la humanidad. Adems, el Eclipse lo hace solo (Ctrl + Shift + F).  Utilizacin de packages (paquetes). Es una buena prctica agrupar las clases afines en paquetes para organizar semnticamente el cdigo. No hay una gua firme a seguir con respecto a cmo organizar nuestro cdigo, ya que suele depender del contexto en el cul estamos trabajando, pero es muy comn respetar convenciones para mantener la simplicidad y flexibilidad ahorrando al desarrollador de tomar estas decisiones (Convention over Configuration).Por ejemplo, en un proyecto completo tener paquetes para el dominio, controllers y vista (si correspondiese) es una convencin comn. Cada uno de stos agrupa las clases que tienen un concepto afn. Se podra seguir ahondando en la definicin de subpaquetes agrupando, por ejemplo, por componente:domain/homeregistrationProfile.javaUser.javasettingsCustomPrivacy.javaDefaultPrivacy.javaPrivacy.javaSetting.javaDe esta manera, logramos mayor granularidad en la organizacin de nuestras clases.Otro uso de los paquetes, tambin relacionado con el concepto anteriormente mencionado Convention over Configuration, es el de identificar unvocamente a una aplicacin. Qu significa sto? Que las clases que yo defina formen parte de un meta grupo que los identifique, y as evitar colisiones en los nombres que yo les ponga. Por ejemplo: yo puedo definir la clase Color, pero la api de Java AWT ya define una clase Color.Es por este motivo que se utiliza el dominio de internet de la organizacin, pero dado vuelta. Por ejemplo si trabajamos para Google sera comn encontrar paquetes del estilo com.google.blah. Para el ejemplo de Color, la api de Java la define como java.awt.Color. En nuestro caso podramos usar, por ejemplo: ar.edu.materiaQueCursan.paquete."

} ,

{

"title"    : "Android - cómo cambiar ícono y título de la app",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/android-cambiar-icono.html",
"date"     : "",
"content"  : "ObjetivoPor defecto cuando creamos desde cero una actividad en blanco (Blank Activity) con el Android Studio, nos genera la pgina con una toolbar que muestra el label de la aplicacin.Vista DefaultLa actividad principal define una toolbar&amp;lt;android.support.design.widget.AppBarLayout  android:id=&quot;@+id/app_bar&quot;  android:layout_width=&quot;match_parent&quot;  android:layout_height=&quot;wrap_content&quot;  android:theme=&quot;@style/AppTheme.AppBarOverlay&quot;&amp;gt;  &amp;lt;LinearLayout    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;wrap_content&quot;&amp;gt;    &amp;lt;android.support.v7.widget.Toolbar      android:id=&quot;@+id/toolbar&quot;El id/toolbar se asigna en el mtodo onCreate() al heredar de AppCompatActivity:override fun onCreate(savedInstanceState: Bundle?) {  super.onCreate(savedInstanceState)  setContentView(R.layout.activity_pelicula_app_bar)  val toolbar = findViewById(R.id.toolbar) as Toolbar  setSupportActionBar(toolbar)En nuestro AndroidManifest.xml definimos el label de la aplicacin, mediante una indireccin a una constante:&amp;lt;activity  android:name=&quot;.ConversorActivity&quot;  android:label=&quot;@string/app_name&quot;  &amp;gt;Esa constante entonces, debemos verla en el archivo res/values/strings.xml:&amp;lt;resources&amp;gt;  &amp;lt;string name=&quot;app_name&quot;&amp;gt;ConversorApp&amp;lt;/string&amp;gt; Cambiando el ttuloPrimero lo ms sencillo: cambiaremos el nombre de la aplicacin.&amp;lt;resources&amp;gt;  &amp;lt;string name=&quot;app_name&quot;&amp;gt;Conversor de medidas&amp;lt;/string&amp;gt;Otra opcin es definir una nueva constante y apuntar la propiedad android:label de la activity principal de nuestra aplicacin hacia esta constante, en todo caso dejamos esta tarea al lector.Agregando un cono a nuestra aplicacinSi adems queremos visualizar un cono en la toolbar, debemos modificar el layout default  la toolbar ahora debe incluir          una imagen      y un textview con tamao de ttulo        y debemos redefinir la asignacin heredada en el mtodo onCreateEncontrar un conoLa imagen debe tener un cono, hay algunas opciones  construirlo nosotros mediante algn programa open-source  buscar un cono de licencia libre en InternetVamos por la segunda opcin, ingresamos a esta pgina y seleccionamos , por ejemplo, esta URL: cambiamos el color de fondo y al hacer Download zip vemos que tenemos el mismo png con diferentes tamaos en directorios especiales, uno para cada tipo de resolucin:Copiamos entonces el directorio res a nuestra aplicacin:  abrimos el zip  extract    al directorio donde est la aplicacinAhora s generamos la ImageView y el TextView (activity_conversor.xml):&amp;lt;android.support.v7.widget.Toolbar  android:layout_width=&quot;match_parent&quot;  android:layout_height=&quot;?attr/actionBarSize&quot;  android:background=&quot;?attr/colorPrimary&quot;  app:popupTheme=&quot;@style/AppTheme.PopupOverlay&quot;&amp;gt;&amp;lt;ImageView   android:layout_width=&quot;wrap_content&quot;  android:layout_height=&quot;wrap_content&quot;  android:src=&quot;@drawable/ic_action&quot; /&amp;gt;&amp;lt;TextView  android:id=&quot;@+id/toolbar&quot;  android:layout_width=&quot;wrap_content&quot;  android:layout_height=&quot;wrap_content&quot; /&amp;gt;&amp;lt;/android.support.v7.widget.Toolbar&amp;gt;Hicimos un pequeo cambio: el id/toolbar se lo asignamos al TextView en lugar de a la toolbar.Ejecutamos la aplicacin y nos aparece un mensaje de error en el LogCat:11-10 15:21:52.540 8720-8720/? E/AndroidRuntime:  Caused by: java.lang.ClassCastException: android.support.v7.widget.AppCompatTextView cannot be cast to android.support.v7.widget.Toolbar11-10 15:21:52.540 8720-8720/? E/AndroidRuntime:     at org.uqbar.conversor.ConversorActivity.onCreate(ConversorActivity.java:23)Ajustamos entonces el mtodo onCreate, para asignar manualmente el valor del textview (ConversorActivity.java):override fun onCreate(savedInstanceState: Bundle?) {  super.onCreate(savedInstanceState)  setContentView(R.layout.activity_pelicula_app_bar)  val toolbar = findViewById(R.id.toolbar) as Toolbar  setSupportActionBar(toolbar)  toolbar.text = R.string.app_nameAhora s, se visualiza el cono y el ttulo:Pero sera bueno que resaltara un poco ms el ttulo, para eso configuramos la propiedad textSize:&amp;lt;TextView  android:id=&quot;@+id/toolbar&quot;  android:layout_width=&quot;wrap_content&quot;  android:layout_height=&quot;wrap_content&quot;  android:textAppearance=&quot;?  android:attr/textAppearanceLarge&quot;/&amp;gt;Resultado finalY vemos reflejado el cambio en la aplicacin"

} ,

{

"title"    : "Ciclo de vida de una actividad en Android",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/android-ciclo-de-vida.html",
"date"     : "",
"content"  : "Si hablamos del ciclo de vida de las activities de una aplicacin Android, tenemos dos diagramas que lo explican muy bien:FuenteFuenteEsto es importante tenerlo en cuenta para manejar la navegacin entre las actividades, en especial cuando stas comparten datos entre s y se van solapando. Cuando hay actividades que consumen una gran cantidad de recursos, la VM guarda el estado de las actividades que estn en segundo plano y las saca del stack de aplicaciones en memoria para luego volverlas a la vida cuando sea necesario. Esto implica definir cul es ese estado que debe recuperarse o actualizarse cuando la actividad est nuevamente disponible."

} ,

{

"title"    : "Preparacion de un entorno de desarrollo android",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/android-instalacion.html",
"date"     : "",
"content"  : "Download e instalacin baseLa instalacin que nosotros recomendamos es la siguiente:  Android Studio          Al descargarlo para tu sistema operativo, se abre un asistente      En la presentacin, dar Next (Siguiente)      Elegir el tipo de instalacin Standard (por defecto) y presionar Next (Siguiente)      Se visualizan las opciones elegidas, presionamos Next (Siguiente)      y un ltimo Finish hace las descargas necesarias (esperar pacientemente)        Android SDK          Si vas a trabajar con tu celular como dispositivo de pruebas descargate entonces sa misma versin del SDK (ver ms abajo en Configuraciones)      Si vas a trabajar con un emulador, descargate la ltima versin      Seguir los pasos que se explican en la URL de descarga (se adapta al sistema operativo e idioma de la mquina)      Importante: ConfiguracionesLas configuraciones que te recomendamos son:  Si ests familiarizado con los shortcuts del Eclipse: File &amp;gt; Settings &amp;gt; Keymap y en el combo Keymaps seleccionar Eclipse      Para hacer las pruebas tienen dos opciones: utilizar un dispositivo Android conectado a USB (algo que recomendamos si tens una mquina con menos de 4GB de memoria) o bien configurar un emulador mediante el Android Virtual Device (AVD). El AVD Manager aparece desde el men Tools &amp;gt; Android &amp;gt; AVD Manager.    AVD Name: El nombre que quieran  Device: Nexus 5 4.95 1080x1920 420dpi  Nougat: Android 7.0 x86_64  Scale: Auto  Emulated Performance: Use Host GPU chequeado, Store a snapshot for faster startup deschequeadoIgualmente pueden configurar cualquier otro dispositivo (Phone o Tablet recomendado, no Wear porque tiene caractersticas muy diferentes)  IMPORTANTE: Si uss tu celular como dispositivo de pruebas, tienen que coincidir la versin de tu celular con la que vas a configurar en el proyecto.Cmo bajarse los ejemplos  Para bajarte los ejemplos o bien uss la opcin Check out project from Version Control y escribs la direccin de los ejemplos, o bien descargs el repositorio Git como un zip y lo descomprims aparte, para luego hacer Import Project.  Luego reapuntar el SDK al directorio donde se instal: Tools &amp;gt; Android &amp;gt; SDK Manager: ubican ese directorio Android SDK Location (el que estuvo en el paso $Android_SDK_Path). Adems deben tener instalada alguna API (API Level xx, Revision x, Status: deben marcarla y luego seleccionar Apply). Una vez instalado reiniciar.Troubleshootingcould not find SDK folderImplica que no estn apuntando al SDK que instalaron o bien que no instalaron el Android SDK. Solucin: Tools &amp;gt; Android &amp;gt; SDK Manager, filtran por Android y marcan el SDK Location que corresponda.No se puede ejecutar una app: no devicesSi al correr ven un mensaje de error que indica que no tienen devices, deben configurar un dispositivo para correr la aplicacin Android (Android Virtual Device Manager del men Window) o bien utilizar un dispositivo real conectado a USB.NO System images installed for this targetSi aparece ese error cuando quieren configurar un device y no les habilita el botn Ok, esto implica que falta descargar del Android SDK Manager las VM (imgenes) de los dispositivos que quieren emular.  Vayan entonces al Android SDK Manager y fjense qu packages hay disponibles para instalar segn la versin de Android que estn ejecutando.You cant combine swipe dismissal with ActionBar #1Si al correr la aplicacin aparece en el LogCat ese siguiente mensaje revisar si el device es Android Wear, porque no es compatible con los ejemplos.Cmo empezar  http://developer.android.com/index.html  http://www.vogella.com/android.html  Un tutorial de youtube que va bien tranquiloHerramientas de desarrollo  Herramientas de desarrollo con AndroidLinks relacionados  Temario Algoritmos III"

} ,

{

"title"    : "Introducción al desarrollo con Android",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/android-introduccion.html",
"date"     : "",
"content"  : "Antes de comenzarSi les interesa algo de historia, pueden revisar la pgina de WikipediaQu es AndroidAndroid es un conjunto de tecnologas open source que vienen con  un Sistema Operativo (Linux)  una Virtual Machine (VM) hecha en Java que se llama Android Runtime (ART, anteriormente tena el nombre Dalvik)sobre la cual corren aplicaciones. Funciona en dispositivos mviles, esto incluye telfonos celulares, tablets, smart TVs, etc.La arquitectura incluye funciones de bajo, medio y alto nivel:En la figura aparecen los servicios ordenados arriba por los de ms alto nivel y yendo hacia los de ms bajo nivel (ms cercanos al hardware del dispositivo)Desarrollar en AndroidPara desarrollar en Android, necesits  una SDK o Kit para desarrollar  un IDE, que puede ser Android Studio (basado en IntelliJ IDEA) o bien el Eclipse con plugins  un entorno (runtime) en el cual instalar y probar tus aplicaciones. Si no ests programando en un dispositivo mvil, hay una diferencia entre la VM en la que desarrolls y la VM en la que efectivamente corre la aplicacin (por eso no vas a poder utilizar LocalDate, entre algunas otras cosas). Las opciones son          utilizar un emulador de dispositivos, como el AVD: Android Virtual Device (que promete ser ms liviano que sus predecesores) o Genymotion      o bien conectar un dispositivo real con Android a tu mquina y deployar las aplicaciones en ese entorno.      Para ms informacin pods ver esta pgina.Algunas consecuencias que surgen  es difcil el testeo de una aplicacin  aqu ms que nunca es importante poder separar los componentes tecnolgicos y los del negocio, que son ms fciles de testear en forma unitaria, aislada e independiente  tambin tenemos que conocer las diferencias entre el emulador y el dispositivo realTipos de Desarrollo en AndroidExisten diferentes formas de desarrollar aplicaciones para dispositivos Android:  web adaptado a dispositivos mviles  desarrollos hbridos  desarrollos nativosVeamos a grandes rasgos de qu se trata cada una.Desarrollo web adaptado a mobileConsiste en adaptar (o crear desde cero) una aplicacin web, es decir HTML + CSS, pero teniendo en mente que va a ser utilizada desde un dispositivo mvil. Por ejemplo  la vista puede tener una interfaz tctil  la vista ser ms pequea que una computadora de escritorio,o bien que mientras en el escritorio la relacin ancho:alto es 16:9, 4:3,- en el dispositivo mvil la pantalla suele tener por defecto disposicin vertical (pantalla ms alta que ancha), pero podramos querer rotar a una disposicin apaisada (portrait vs. landscape)Para esto existen varias bibliotecas javascript especficas como:  Ionic  React Native  jQT  Sencha ExtJSAdems de las limitaciones propias de las aplicaciones web -cuya naturaleza es stateless- requiere estar permanentemente conectado a una red mvil para que la aplicacin pueda funcionar: no hay ningn tipo de procesamiento local. Esto implica que al relegar toda la carga en el servidor  se est desaprovechando las capacidades del dispositivo  el servidor debe tener capacidad para soportar esa cargaPor otro lado, tiene las ventajas conocidas de las aplicaciones web: administracin centralizada en el servidor, utiliza la misma tecnologa para hacer una nica aplicacin. De todas maneras cabe destacar que el esfuerzo de adaptacin en la interfaz no es menor y depende mucho del tipo de aplicacin.Desarrollo nativoEn el desarrollo nativo se trabaja utilizando la misma tecnologa que provee el dispositivo en el cual se trabaja, esto incluye no slo iOS, Windows Phone, Android sino diferentes tipos de dispositivo y versiones de sistema operativo.Mientras que esto acopla la aplicacin a la plataforma utilizada, y requiere de un desarrollador especializado en esa tecnologa, hay dos grandes ventajas al respecto:  se aprovechan al mximo las capacidades y features de ese dispositivo  es posible trabajar en forma local (offline) por un cierto tiempo y sincronizar la informacin entre cliente y servidorMs adelante hablaremos de la forma de distribuir las aplicaciones.Desarrollo hbridoEn este tipo de desarrollo se trabaja en parte web y en parte con desarrollo nativo. Tambin suelen incluirse en esta categora los desarrollos generados con productos que soportan varias plataformas mviles (como SAP Fiori, o Appcelerator que son libres y open source). Estos productos limitan los features a utilizar a favor de tener una nica aplicacin global para todas las plataformas.FuenteComparacin entre ArquitecturasEste diagrama comparativo muestra pros y contras entre webmobile apps y aplicaciones nativas.FuenteDistribucin de aplicaciones nativasUno de los grandes dolores de cabeza al construir aplicaciones de cliente rico es que tenan un alto costo la instalacin y el posterior mantenimiento de versiones. Por ese motivo la mayora de los vendedores desarrollaron el concepto de tienda donde se centraliza el deploy de las aplicaciones y la posterior instalacin en cada uno de los clientes. As tenemos Apple Store para iOS, Play Store para Android, Windows Store para Windows Phone, BlackBerry World, etc.La publicacin de nuestra aplicacin en la tienda sigue un circuito de aprobacin previo por parte de los proveedores de la plataforma (en algunos casos como Apple ese circuito puede transformarse en algo bastante burocrtico, que incluya revisiones de cdigo, el pago o la suscripcin como desarrollador a esa plataforma, etc.)La ventaja es que una vez lograda la publicacin, la aplicacin local del dispositivo se encarga de verificar si la aplicacin soporta la versin del aparato, los temas de licenciamiento y la instalacin en s."

} ,

{

"title"    : "Instalacion de Entorno Angular",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/angular-instalacion.html",
"date"     : "",
"content"  : "EntornoEs necesario que instales las siguientes herramientas, en este orden:  Si ests en entorno Windows te recomendamos instalarte Git Bash  Seguimos con NodeJS.          Si ests en entorno Linux/Mac recomendamos que descargues Node desde nvm (Node Version Manager) y luego instales esta versin: nvm install 20.4.0      Si ests en Windows instalate la versin actual        Luego NPM (Node Package Manager), con el que vamos a hacer los builds de nuestras aplicaciones.          Para familiarizarte con el manejo de dependencias, te dejamos este artculo        El Angular CLI (Command line interface) se instala con npm:npm install -g @angular/cliEditor de TextoVisual Studio Code  El editor de texto que vamos a soportar en la cursada es Visual Studio Code (hay una versin portable si ests en una mquina sin privilegios de administrador).Dentro de Visual Studio Code, te recomendamos que crees un perfil vaco y lo asocies a tus nuevos proyectos Angular (pods ver cmo se trabaja con perfiles en VSCode en este video. Tambin te dejamos este tutorial muy piola - en ingls y la documentacin oficial).Instalacin  Opcin 1: pods importar este archivo que trae todas las extensiones para AngularO si no, pods instalar las extensiones del Visual Studio Code manualmente. Para 2024 son los que ya instalaste para trabajar con HTML/CSS y los siguientes:Necesarios  Angular Language Service (Angular): autocompletado dentro del template html  Angular Snippets (Version 18) (John Papa): los snippets permiten generar cdigo para servicios y componentes en forma rpida  ESLint (Microsoft): para disparar el linter de la sintaxis de TS  Git Lens (GitKraken), para ver el historial de Git integrado con tu Visual Studio Code  Prettier ESLint (Rebecca Vest): es el plugin que vamos a utilizar para aplicar el formato y ejecutar el proceso linter con la sintaxis de la cursada, que define          no usar puntos y coma al final de cada sentencia      utilizar comillas simples para strings, un estndar en el mundo Javascript/Typescript      evitar imports innecesarios o definiciones de variables que luego no se usen      etc. Ms abajo te indicamos los dos archivos que definen esta configuracin: .eslintrc.json y .prettierrc.json.        Pretty TypeScript Errors: mejora tu experiencia con los errores de TypescriptOpcionales  Import Cost (Wix): permite calcular cuntos KB pesa cada import  Material Icon Theme (Philipp Kief)Alternativa a Visual Studio CodeOtra opcin es utilizar Web Storm (de la suite de IntelliJ), si tienen una cuenta de la facultad pueden solicitar una licencia educativa. Solo que como no vamos a aprovechar todas las herramientas de este IDE poderoso quizs convenga ir por el Visual Studio Code.Aprendiendo TypescriptTypescript es el lenguaje de programacin base para Angular. Tranquilo, es muy similar a los lenguajes orientados a objetos en los que ya trabajaste. Para iniciarte o para hacer consultas te dejamos estos links:  Documentacin oficial de Typescript: tiene una intro de 5 minutos, otros tutoriales cortos y el Handbook para sacarse dudas  Aprendiendo Typescript en 30 minutos: muy buen tutorial para comenzar explicando los conceptos ms salientes  El cheatsheet o gua rpida para tener a mano mientras programan  Tips: Typing destructured objects parametersCrear un proyecto Angular desde ceroEn la consola Git Bash o bien desde una terminal de Linux hacemosng new nombre-de-tu-appcd nombre-de-tu-appnpm startCorrer los tests de un proyectoPara ejecutar los tests de un proyecto, te posicions en el directorio raz y ejecuts desde la consolanpm testArchivo de configuracin para Visual Studio CodeTe recomendamos que dentro del proyecto crees una carpeta .vscode y dentro un archivo settings.json que tenga este contenido:{    &quot;[javascript]&quot;: {      &quot;editor.defaultFormatter&quot;: &quot;rvest.vs-code-prettier-eslint&quot;,      &quot;editor.formatOnPaste&quot;: false, // required       &quot;editor.formatOnType&quot;: false, // required      &quot;editor.formatOnSave&quot;: true, // optional       &quot;editor.formatOnSaveMode&quot;: &quot;file&quot;, // required to format on save    },    &quot;[typescript]&quot;: {      &quot;editor.defaultFormatter&quot;: &quot;rvest.vs-code-prettier-eslint&quot;,      &quot;editor.formatOnPaste&quot;: false, // required       &quot;editor.formatOnType&quot;: false, // required      &quot;editor.formatOnSave&quot;: true, // optional       &quot;editor.formatOnSaveMode&quot;: &quot;file&quot;, // required to format on save    },    &quot;[json]&quot;: {      &quot;editor.defaultFormatter&quot;: &quot;rvest.vs-code-prettier-eslint&quot;,      &quot;editor.formatOnPaste&quot;: false, // required       &quot;editor.formatOnType&quot;: false, // required      &quot;editor.formatOnSave&quot;: true, // optional       &quot;editor.formatOnSaveMode&quot;: &quot;file&quot;, // required to format on save    },    &quot;editor.codeActionsOnSave&quot;: {      &quot;source.fixAll&quot;: &quot;explicit&quot;    }}Cambios al package.jsonDentro del archivo package.json del raz de tu proyecto debs tener estos scripts (los ltimos 4 son los que agregamos):  &quot;scripts&quot;: {    &quot;ng&quot;: &quot;ng&quot;,    &quot;start&quot;: &quot;ng serve&quot;,    &quot;build&quot;: &quot;ng build&quot;,    &quot;watch&quot;: &quot;ng build --watch --configuration development&quot;,    &quot;test&quot;: &quot;ng test&quot;,    &quot;lint&quot;: &quot;eslint &amp;#92;&quot;**/*.{ts,tsx}&amp;#92;&quot; &quot;,    &quot;lint:fix&quot;: &quot;eslint --fix &amp;#92;&quot;**/*.{ts,tsx}&amp;#92;&quot; &quot;,    &quot;build:prod&quot;: &quot;ng build --prod&quot;,    &quot;test:prod&quot;: &quot;ng test --browsers=ChromeHeadless --watch=false --code-coverage&quot;  },Agregando DependenciasInstalaremos algunas dependencias adicionales:# Installar ESLintnpm install --save-dev eslint @typescript-eslint/parser# Instalar plugins adicionalesnpm install --save-dev @typescript-eslint/eslint-plugin eslint-plugin-prettier# Instalar Prettier y sus dependenciasnpm install --save-dev prettier prettier-eslint eslint-config-prettierArchivo .nvmrcTener un archivo .nvmrc es conveniente si todo el equipo trabaja con NVM (el versionador de Node). El contenido especifica qu versin de Node vamos a utilizar:20.4.0Ejemplo de .gitignoreTe recomendamos que configures tu archivo .gitignore de la siguiente manera:# See http://help.github.com/ignore-files/ for more about ignoring files.# compiled output/dist/tmp/out-tsc# Only exists if Bazel was run/bazel-out# dependencies/node_modules# profiling fileschrome-profiler-events*.json# IDEs and editors/.idea.project.classpath.c9/*.launch.settings/*.sublime-workspace# IDE - VSCode.vscode/*!.vscode/settings.json!.vscode/tasks.json!.vscode/launch.json!.vscode/extensions.json.history/*# misc/.sass-cache/connect.lock/coverage/libpeerconnection.lognpm-debug.logyarn-error.logtestem.log/typings# System Files.DS_StoreThumbs.db# Angular cache.angularConfiguracin del linterEl linter es el proceso que genera advertencias o errores en base a la sintaxis y semntica de nuestros componentes. Lo interesante es que podemos configurar, por ejemplo, que escribir console.log o debugger no es cdigo que queremos que est en el ambiente productivo, pero s podramos admitirlo en desarrollo. Tambin se puede configurar validaciones como el uso de let en lugar de const, variables sin utilizar, etc. Te dejamos la configuracin recomendada en el archivo .eslintrc.json que debe estar en el directorio raz:{  &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,  &quot;extends&quot;: [    &quot;plugin:@typescript-eslint/recommended&quot;  ],  &quot;parserOptions&quot;: {    &quot;ecmaVersion&quot;: 2021,    &quot;sourceType&quot;: &quot;module&quot;  },  &quot;rules&quot;: {    &quot;semi&quot;: [      2,      &quot;never&quot;    ],    &quot;@typescript-eslint/explicit-function-return-type&quot;: &quot;off&quot;,    &quot;@typescript-eslint/explicit-module-boundary-types&quot;: &quot;off&quot;,    &quot;@typescript-eslint/no-var-requires&quot;: &quot;off&quot;  }}Para ejecutar el linter desde la lnea de comandos, pods escribirnpm run lintcon el archivo package.json que contenga los scripts que arriba te dejamos. Es importante hacerlo ya que el CI de Github Actions lo va a ejecutar para pasar el build, para arreglar automticamente todos los problemas que detecta el linter pods hacernpm run lint:fixConfiguracin del archivo de testAl archivo karma.conf.js que est en el directorio raz hay que agregarle la opcin para que genere el porcentaje de cobertura en formato json tambin:    coverageReporter: {      dir: require(&#39;path&#39;).join(__dirname, &#39;./coverage/XXXXXX&#39;), // &amp;lt;-- reemplazar XXXXXX por nombre del proyecto      subdir: &#39;.&#39;,      reporters: [        { type: &#39;html&#39; },        { type: &#39;text-summary&#39; }, // &amp;lt;-- agregar una coma al final        { type: &#39;lcov&#39; }          // &amp;lt;-- agregar esta lnea      ]    },  Si no tens un archivo karma.conf.js lo pods generar desde el Angular CLI: ng generate config karma.Otros archivos tilesEn la carpeta raz cre los siguientes archivos  .htmlhintrc (configuracin del Linter para HTML), con el siguiente contenido{  &quot;tagname-lowercase&quot;: false,  &quot;attr-lowercase&quot;: false}  .prettierrc.json (configuracin de Prettier para eliminar puntos y coma, definir tab de 2 espacios, utilizar single quote, etc.) Es importante que tod@s tengan esta configuracin para que no haya un montn de conflictos en git a la hora de pushear.{  &quot;singleQuote&quot;: true,  &quot;trailingComma&quot;: &quot;none&quot;,  &quot;endOfLine&quot;: &quot;auto&quot;,  &quot;tabWidth&quot;: 2,  &quot;semi&quot;: false}Ejemplo de un archivo para Github ActionsTe dejamos este archivo de ejemplo que tens que guardar en .github/workflows/build.yml. Descargalo y reemplaz XXXXXXXXX por el nombre de la carpeta donde est tu proyecto.Cmo configurar los badges en tu README      Para agregar el badge del build de Github Actions, segu estas instrucciones        Para agregar el badge del porcentaje de cobertura, tens que agregar la imagen que genera el mismo build de Github Actions (reemplazando XXXXXXX por el nombre de la carpeta donde est tu proyecto):  ![Coverage](./badges/XXXXXXX/coverage.svg)"

} ,

{

"title"    : "Aplicacion parcial",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/aplicacion-parcial.html",
"date"     : "",
"content"  : "Por aplicacin parcial se entiende a la aplicacin de una funcin, pero suministrando menos parmetros que los que esta requiere. El resultado de aplicar parcialmente una funcin es otra funcin que espera menos parmetros que la original, ya que puede realizar reemplazos en su definicin por expresiones o valores concretos. La aplicacin parcial es muy til para componer funciones y para parametrizar funciones de Orden Superior.Por ejemplo, las siguientes expresiones presentan aplicacin parcial:  take 3  (+1)  max &quot;hola&quot;Para visualizar mejor la transformacin que ocurre al aplicar parcialmente una funcin pueden consultar el tipo de las funciones sin aplicar y parcialmente aplicadas usando :t en el editor de Haskell. Podemos realizar un anlisis en funcin del tipo de las expresiones anteriores, cuantos ms parmetros se aplican menor aridad (cantidad de parmetros) tiene la funcin resultante:*Main&amp;gt;:ttaketake:: Int -&amp;gt; [a] -&amp;gt; [a]*Main&amp;gt;:ttake 3take 3 :: [a] -&amp;gt; [a]*Main&amp;gt;:t(+)(+)::Numa=&amp;gt;a-&amp;gt;a-&amp;gt;a*Main&amp;gt;:t(+1)(+1)::Numa=&amp;gt;a-&amp;gt;a*Main&amp;gt;:tmaxmax :: Ord a =&amp;gt; a -&amp;gt; a -&amp;gt; a*Main&amp;gt;:tmax &quot;hola&quot;max &quot;hola&quot; :: [Char] -&amp;gt; [Char]En el caso de max hola vemos tambin que no slo disminuy la cantidad de parmetros, sino que el tipo de la funcin resultante es ms particular, ya que hola obliga a que el otro valor esperado por el max tambin sea de tipo String para poder compararlos y determinar cul es mayor en orden alfabtico.Las siguientes funciones no estn aplicadas parcialmente:  take (no est aplicada)  odd (no est aplicada)  odd 3 (est completamente aplicada, esta expresin no es de tipo funcin sino que es un booleano)  max 0 3 (est completamente aplicada, esta expresin no es de tipo funcin sino que es un nmero)Una consecuencia de esto es que slo pueden aplicarse parcialmente funciones de 2 o ms argumentos. Para que la aplicacin parcial exista, es necesario que las funciones estn currificadas (ver Currificacin).Puedo aplicar parcialmente el segundo parmetro en vez del primero?En ocasiones sucede que no podemos aplicar parcialmente una funcin ya que el valor que le queremos pasar no es el primero que espera sino otro, por ejemplo si quiero saber si un nombre es extico, que se cumple si tiene x, k, q o w, no sera correcto intentar hacer:esExoticonombre=any(elem&quot;XKQWxkqw&quot;)nombreYa que xkqw que es la lista en la cual quiero verificar si se encuentra uno de los caracteres del nombre, no es correcto tratar de aplicrselo a elem porque debera ser el segundo parmetro, no el primero. De hecho esa funcin va a compilar correctamente, pero no va a funcionar como esperamos, ya que al intentar usarla de esta forma:&amp;gt;esExotico&quot;Xiomara&quot;Nosotros esperaramos que nos diga True, pero vamos a tener un error de tipos:Couldn&#39;tmatchexpectedtype`[[Char]]&#39;withactualtype`Char&#39;Esto sucede porque si a elem le aplicamos un String (equivalente a [Char]), el resultado va a ser una funcin de tipo [ [Char] ] -&amp;gt; BoolFormas posibles de resolverlo:Usando una expresin lambdaesExoticonombre=any(&amp;#92;letra-&amp;gt;elemletra&quot;XKQWxkqw&quot;)nombreUsando notacin infija (como los operadores) en vez de prefija: En ocasiones nos parece ms natural usar las funciones de dos argumentos de forma infija, por ejemplo:&amp;gt;10`mod`2Podemos aprovechar ese feature para aplicar el segundo parmetro y no el primero como hacemos con los operadores, por ej. (/2)esExoticonombre=any(`elem`&quot;XKQWxkqw&quot;)nombreUsando la funcin flipEn Haskell existe una funcin de Orden Superior llamada flip cuyo tipo es (a -&amp;gt; b -&amp;gt; c) -&amp;gt; b -&amp;gt; a -&amp;gt; c, y sirve justamente para resolver esta clase de problemas ya que lo que hace es aplicar la funcin que recibe con los parmetros en el orden inverso al que le llegan. Podramos usar flip parcialmente aplicada para lograr nuestro objetivo.esExoticonombre=any(flipelem&quot;XKQWxkqw&quot;)nombreEjemplos de aplicacin parcialUsoSuponiendo que se tiene una funcin genrica como el between, genrica porque tiene bocha de parmetros:between menor mayor nro = menor &amp;lt;= nro &amp;amp;&amp;amp; nro &amp;lt;= mayorY se usa as:&amp;gt; between 5 10 7TruePods hacer nuevas funciones a partir de esa, aplicando parcialmente.Por ejemplo, pods hacer una funcin ms especfica, que tome, en vez de tres cosas, slo una:(between 18 65)Porque le falta un parmetro!Y se puede usar para componer:debeVotar persona = (between 18 65 . edad) personaEjemploSupongamos que trabajamos para Spotify. Recin estamos empezando, y tenemos que modelar las canciones y los usuarios en Haskell.Elegimos modelarlos con data, donde cada cancin tiene un nombre, la cantidad de likes y dislikes; y cada usuario tiene un nombre de usuario y un nmero que representa hace cuntos aos usa Spotify:data Cancion = UnaCancion String Float Floatdata Usuario = UnUsuario String FloatPara decidir si poner una cancin en la pantalla de inicio de un usuario, el Sr. Spotify nos comenta que usan un algoritmo muy raro, con un clculo llamado tasaDeRecomendabilidad, que depende tanto de la cancin como del usuario; y ponen una cancin en la pantalla de inicio de alguien si esa tasa da mayor a 1000. El clculo de la tasaDeRecomendabilidad es una formulita que nos dan ellos, y nos dicen que se calcula as:tasaDeRecomendabilidad (UnUsuario _ antiguedad) (UnaCancion _ likes dislikes) = likes / dislikes * antiguedad + likes * pi / 29Notar que el clculo es ridculamente extrao (pero nosotros nos abstraemos de l). Y deciden si la tasa pasa su evaluacin as:esTasaRecomendable tasa = tasa &amp;gt; 1000Nos delegan escribir cmo decidir si una cancin se pone en la pantalla de inicio de un usuario. Entonces hacemos:vaEnPantallaDeInicioDe usuario cancion = (esTasaRecomendable.tasaDeRecomendabilidad usuario) cancionAc, tasaDeRecomendabilidad es una funcin de 2 parmetros, pero como ya le pasamos uno, tasaDeRecomendabilidad usuario es una funcin de 1 parmetro. Porque ahora slo espera 1 parmetro, no 2 (el primero ya lo tiene)."

} ,

{

"title"    : "Aplicacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/aplicacion.html",
"date"     : "",
"content"  : "Cuando se aplica una funcin a unos argumentos, el resultado se obtiene sustituyendo esos argumentos en el cuerpo de la funcin respetando el nombre que se les dio a cada uno. Es posible que esto produzca un resultado que no puede ser simplificado (e.g. un nmero); pero es ms comn que el resultado de esa sustitucin sea otra expresin que contenga otra aplicacin de funciones, entonces se vuelve a hacer el mismo proceso hasta producir un resultado que no pueda ser simplificado (un resultado final).Por ej., siendo doble:doblex=x+xEl resultado de aplicar doble 3 (o sea, la funcin doble aplicada al nmero 3) se puede obtener de la siguiente manera:doble3={aplicamoslafuncindoble}3+3={aplicamoslafuncin+}6Si queremos obtener el resultado de doble (doble 2) en donde la funcin doble es aplicada 2 veces, podemos hacer:doble(doble2)={aplicamoslafuncindoblequeestdentrodelparntesis}doble(2+2)={aplicamoslafuncin+}doble4={aplicamoslafuncindoble}4+4={aplicamoslafuncin+}8Tambin podemos obtener el mismo resultado aplicando primero la funcin doble de ms afuera:doble(doble2)={aplicamoslafuncindoblequeestafueradelparntesis}doble2+doble2={aplicamoslaprimerfuncindoble}(2+2)+doble2={aplicamoslaprimerfuncin+}4+doble2={aplicamoslafuncindoble}4+(2+2)={aplicamoslasegundafuncin+}4+4={aplicamoslafuncin+}8El orden en que realicemos las reducciones (basta de decirle simplificar) no afecta al resultado final pero s a la eficiencia. Lo copado es que hay un motor que se encarga de esto (se llama motor de reducciones CUAC!). Para entender un poco ms lo que pasa detrs de escenas hace falta meterse en la estrategia de evaluacin usada por el motor.Aplicacin de funciones en HaskellNotacion matemticaf(a,b)+cdEn Haskellfab+c*d  La aplicacin se denota solo poniendo espacio entre la funcin y sus argumentos.  Adems, la aplicacin de funciones que no son operadores tiene una precedencia mayor que la de los operadores (un operador es una funcin que recibe 2 parmetros y se usa de forma infija ya sea un chirimbolo o una funcin con `)Las siguientes definiciones son equivalentes, podemos ver la precedencia para la aplicacin de div de forma infija y prefija:promedions=(sumns)`div`(lengthns)promedio&#39;ns=sumns`div`lengthnspromedio&#39;&#39;ns=div(sumns)(lengthns)"

} ,

{

"title"    : "Append como  foldr f a",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/append-como--foldr-f-a-.html",
"date"     : "",
"content"  : "El desafoSe trata de escribir la funcin append en Haskell a partir de la funcin foldr. Hay tres versiones:      append =  expresion     donde en la expresin dice foldr en algn lado, y realmente se usa. Se puede hacer usando nicamente tres funciones, foldr y dos ms.        append = foldr f a    donde f puede ser una expresin lambda        append = foldr f a    donde f no puede ser una expresin lambda  Solucionesby Nicols Perez Santoro (lo que sigue a continuacin es una transcripcin del proceso mental en base al cual llegu a las soluciones).Primeroappend::[a]-&amp;gt;[a]-&amp;gt;[a]foldr::(a-&amp;gt;b-&amp;gt;b)-&amp;gt;b-&amp;gt;[a]-&amp;gt;bSi defino append = foldr f, si tengo la lista [1,2,3] `append` [4,5,6] el foldr f me va a hacer4`f`(5`f`(6`f`[1,2,3]))Pero si pudiera hacer un flip de los argumentos, sera1`f`(2`f`(3`f`[4,5,6]))Entonces la primer versin del append esappend=flip(foldr(:))SegundoLa segunda versin tiene la formaappend=foldrfaPero miro el tipo de foldrfoldr::(a-&amp;gt;b-&amp;gt;b)-&amp;gt;b-&amp;gt;[a]-&amp;gt;bOkay, y el tipo de foldr f a ?foldrfa::[a]-&amp;gt;bPero yo quiero que foldr f a :: [a] -&amp;gt; [a] -&amp;gt; [a], que es el tipo de append. entonces b es ([a]-&amp;gt;[a]). Entonces foldr en este caso queda instanciado asfoldr::(a-&amp;gt;([a]-&amp;gt;[a])-&amp;gt;([a]-&amp;gt;[a]))-&amp;gt;([a]-&amp;gt;[a])-&amp;gt;[a]-&amp;gt;([a]-&amp;gt;[a])Es bastante largo eso. En fin, quiero que foldr, a partir del valor inicial, que va a ser una funcion, y la primer lista me devuelva una funcin que dada la segunda lista del append, me de la concatenacion de las listas. complicado. Pero pienso, si la lista de la izquierda est vaca, entonces foldr me tiene que devolver la funcin id. entonces digoappend2=foldrfidPero que es f? tiene que ser una funcin que dado un elemento y una funcion que dada una lista devuelve otra lista, devuelva otra funcion que dada una lista devuelva la lista que devolvera la funcin esta, pero con el elemento al principio.f::a-&amp;gt;([a]-&amp;gt;[a])-&amp;gt;([a]-&amp;gt;[a])feg=&amp;#92;l-&amp;gt;e:glY esta es la segunda versin. Un tanto complicaditoTerceroLa tercer versin claramente tiene que ser como la segunda, pero sin lambda expresions .!!! Si reduzco un poco, llego a estof&#39;e=(.)(e:)Donde(.)::([a]-&amp;gt;[a])-&amp;gt;([a]-&amp;gt;[a])-&amp;gt;([a]-&amp;gt;[a])(e:)::([a]-&amp;gt;[a])pero(:)::(a-&amp;gt;[a]-&amp;gt;[a])f&#39;::([a]-&amp;gt;[a])-&amp;gt;([a]-&amp;gt;[a])Los tipos me dicen que componga! pero como compongo?(:)::a-&amp;gt;([a]-&amp;gt;[a])(.)::([a]-&amp;gt;[a])-&amp;gt;([a]-&amp;gt;[a])-&amp;gt;([a]-&amp;gt;[a])entonces(.).(:)::a-&amp;gt;([a]-&amp;gt;[a])-&amp;gt;([a]-&amp;gt;[a])entoncesappend3=foldr((.).(:))idMORALEJA:LOS TIPOS SON MIS AMIGOS. Guan todo el razonamiento"

} ,

{

"title"    : "Configuracion de arena",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/arena-configuracion.html",
"date"     : "",
"content"  : "Estructura de un proyecto ArenaEn general una aplicacin arena consta de dos componentes o partes:  el dominio  la vistaSi bien podemos tener todas las clases de ambas partes en un nico proyecto, lo ms prolijo es plasmar esa separacin en dos proyectos. Porque por ejemplo, para el TP podrn reutilizar el dominio entre las diferentes tecnologas.Dependencias de los proyectosEntonces en ese esquema si seguimos con la idea de que el dominio no debe estar acoplado a la tecnologa de la vista directamente, nuestro proyecto dominio no depender del artefacto arena, pero s de otro artefacto ms abstracto que establece contratos de los objetos de negocio: uqbar-domain.Por otro lado, nuestro proyecto que tendr la vista en arena s, lgicamente depender del artefacto arena.La siguiente figura resume esto:Nota: si hacemos un nico proyecto con dominio + ui arena, podemos slo depender de arena y transitivamente veramos a uqbar-domain.Lo que deben tener tus pom.xmlDependencias para proyectos de UI - XtendSi vas a definir tus objetos de dominio en un proyecto aparte (cosa que recomendamos) tens que definir esta dependencia&amp;lt;dependency&amp;gt;  &amp;lt;groupId&amp;gt;org.uqbar-project&amp;lt;/groupId&amp;gt;  &amp;lt;artifactId&amp;gt;uqbar-domain&amp;lt;/artifactId&amp;gt;  &amp;lt;version&amp;gt;3.6.3&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;Crear un proyecto de Arena en XtendSi ests trabajando Arena-UI desde xtend, esta configuracin contiene todas las dependencias que necesits (JUnit, el compilador Xtend, Arena UI, Uqbar Domain, etc.):&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;    &amp;lt;artifactId&amp;gt;****ACA PONES EL NOMBRE DE TU PROYECTO****&amp;lt;/artifactId&amp;gt;    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;    &amp;lt;name&amp;gt;****UNA VEZ MAS EL NOMBRE DE TU PROYECTO****&amp;lt;/name&amp;gt;    &amp;lt;description&amp;gt;****DESCRIPCION DE TU PROYECTO****&amp;lt;/description&amp;gt;    &amp;lt;parent&amp;gt;        &amp;lt;groupId&amp;gt;org.uqbar-project&amp;lt;/groupId&amp;gt;        &amp;lt;artifactId&amp;gt;arena-xtend-parent&amp;lt;/artifactId&amp;gt;        &amp;lt;version&amp;gt;3.6.3&amp;lt;/version&amp;gt;    &amp;lt;/parent&amp;gt;  &amp;lt;!-- Si tens dependencias con tu proyecto de dominio --&amp;gt;    &amp;lt;dependencies&amp;gt;        &amp;lt;dependency&amp;gt;            &amp;lt;groupId&amp;gt;GRUPO-PROYECTO-DE-DOMINIO&amp;lt;/groupId&amp;gt;            &amp;lt;artifactId&amp;gt;NOMBRE-PROYECTO-DE-DOMINIO&amp;lt;/artifactId&amp;gt;            &amp;lt;version&amp;gt;VERSION-ACTUAL-PROYECTO-DE-DOMINIO&amp;lt;/version&amp;gt;        &amp;lt;/dependency&amp;gt;    &amp;lt;/dependencies&amp;gt;  &amp;lt;!-- fin de dependencias con proyecto de dominio --&amp;gt;    &amp;lt;repositories&amp;gt;        &amp;lt;repository&amp;gt;            &amp;lt;id&amp;gt;uqbar-wiki.org-releases&amp;lt;/id&amp;gt;            &amp;lt;name&amp;gt;uqbar-wiki.org-releases&amp;lt;/name&amp;gt;            &amp;lt;url&amp;gt;http://maven.uqbar.org/releases&amp;lt;/url&amp;gt;        &amp;lt;/repository&amp;gt;        &amp;lt;repository&amp;gt;            &amp;lt;snapshots /&amp;gt;            &amp;lt;id&amp;gt;uqbar-wiki.org-snapshots&amp;lt;/id&amp;gt;            &amp;lt;name&amp;gt;uqbar-wiki.org-snapshots&amp;lt;/name&amp;gt;            &amp;lt;url&amp;gt;http://maven.uqbar.org/snapshots&amp;lt;/url&amp;gt;        &amp;lt;/repository&amp;gt;    &amp;lt;/repositories&amp;gt;    &amp;lt;build&amp;gt;        &amp;lt;plugins&amp;gt;            &amp;lt;plugin&amp;gt;                &amp;lt;groupId&amp;gt;org.eclipse.xtend&amp;lt;/groupId&amp;gt;                &amp;lt;artifactId&amp;gt;xtend-maven-plugin&amp;lt;/artifactId&amp;gt;                &amp;lt;version&amp;gt;2.19.0.M1&amp;lt;/version&amp;gt;            &amp;lt;/plugin&amp;gt;            &amp;lt;plugin&amp;gt;                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;                &amp;lt;version&amp;gt;3.5.1&amp;lt;/version&amp;gt;                &amp;lt;configuration&amp;gt;                    &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;                    &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;                &amp;lt;/configuration&amp;gt;            &amp;lt;/plugin&amp;gt;        &amp;lt;/plugins&amp;gt;    &amp;lt;/build&amp;gt;&amp;lt;/project&amp;gt;Dependencias para proyectos de UI - JavaAgregar dos referencias en el pom  al framework Arena (consideramos Arena = Arena-JFace como predeterminado)  al proyecto de dominio (asumimos que vamos a tener dos proyectos separados, uno para el dominio y otro para la ui).Por ejemplo, las dependencias en nuestro pom podran quedar as:&amp;lt;dependencies&amp;gt;  &amp;lt;dependency&amp;gt;    &amp;lt;groupId&amp;gt;org.uqbar-project&amp;lt;/groupId&amp;gt;    &amp;lt;artifactId&amp;gt;arena-jface&amp;lt;/artifactId&amp;gt;    &amp;lt;version&amp;gt;3.6.3&amp;lt;/version&amp;gt;  &amp;lt;/dependency&amp;gt;  &amp;lt;dependency&amp;gt;    &amp;lt;groupId&amp;gt;uqbar-project.org&amp;lt;/groupId&amp;gt;    &amp;lt;artifactId&amp;gt;videoclub-domain&amp;lt;/artifactId&amp;gt;    &amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt;  &amp;lt;/dependency&amp;gt;&amp;lt;/dependencies&amp;gt;Las otras dependencias como JUnit se toman de la definicin del parent project, en caso de ser necesario se debe agregar a mano:&amp;lt;dependency&amp;gt;  &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;  &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;  &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt;  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&amp;lt;/dependency&amp;gt;Si no quers tocar el pom.xml a mano, pods agregarlo a travs del plugin M2clipse: botn derecho sobre el proyecto, Maven &amp;gt; Add Dependency &amp;gt; buscs arena y tiene que aparecer arena-jface, buscs la versin que quers (o si tens dudas la ltima) y acepts. Entonces el plugin va a descargarlo (si no lo tiene en tu repositorio local). Lo mismo con las dems dependencias que necesites.Configurar launcherEn Run &amp;gt; Run Configurations &amp;gt; Java Application &amp;gt; New launch configuration (busc el botn de la toolbar que est a la izquierda) y en la solapa Arguments, tens que indicarle en VM Arguments que use el Launcher propio de Arena:-Djava.system.class.loader=org.uqbar.apo.APOClassLoaderde lo contrario te va a aparecer un mensaje de error:Exceptioninthread&quot;main&quot;java.lang.RuntimeException:EstaaplicacinnoestcorriendoconelClassLoadernecesario.CorralaaplicacinconelsiguienteparmetroparalaVM:-Djava.system.class.loader=org.uqbar.apo.APOClassLoader.ElClassLoaderactuales:sun.misc.Launcher$AppClassLoader@6fd3633catorg.uqbar.arena.Application.validateClassLoader(Application.java:32)atorg.uqbar.arena.Application.`&amp;lt;init&amp;gt;`(Application.java:24)En muchos ejemplos tenemos un archivo .launch que tiene esta configuracin ya cargada.TroubleshootingQu hacer cuando nos bajamos ejemplos (o desarrollamos uno nuevo) y no nos andan? Chequear esta listaMaven - versinRevis que Maven est correctamente instalado en tu mquina y que tens el settings.xml correctamente configurado. Cualquier duda fijate en el tutorial de instalacin de Maven.Tambin asegurate que la versin de Maven sea 3.0.x o posterior, o vas a tener un mensaje de error similar a ste:[INFO]UnabletoinitialiseextensionsComponentdescriptorrole:&#39;com.jcraft.jsch.UIKeyboardInteractive&#39;,implementation:&#39;org.apache.maven.wagon.providers.ssh.jsch.interactive.PrompterUIKeyboardInteractive&#39;,rolehint:&#39;default&#39;hasahint,butthereareotherimplementationsthatdon&#39;tMaven - error de dependenciasMaven tiene un solo gran inconveniente: si al tratar de descargar una dependencia tens un problema de conexin, despus de una cierta cantidad de reintentos queda el archivo de la dependencia corrupto y tu entorno no va a funcionar. Las palabras que hay que buscar en la solapa Problems es resolution will not be reattempted until the update interval of central has elapsed or updates are forced.La solucin es ir a tu carpeta C:&amp;#92;users&amp;#92;tuUsuario&amp;#92;.m2 (o ~/.m2 de Linux/Mac), verificar la carpeta del componente que te dice que no puede bajar, verificar que no hay un archivo .jar y borrar la carpeta padre. Por ejemplo, nos aparece este mensaje:CoreException: Could not get the value for parameter compilerId for plugin execution default-testCompile: PluginResolutionException: Plugin org.apache.maven.plugins:maven-compiler-plugin:3.5.1 or one of its dependencies could not be resolved:Failure to transfer org.codehaus.plexus:plexus-component-annotations:jar:1.5.5 from https://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced.Original error: Could not transfer artifact org.codehaus.plexus:plexus-component-annotations:jar:1.5.5 from/to central (https://repo.maven.apache.org/maven2): The operation was cancelled.        pom.xml    /2    line 46    Maven Project Build Lifecycle Mapping ProblemEso est en la carpetaC:&amp;#92;users&amp;#92;tuUsuario&amp;#92;.m2&amp;#92;    org&amp;#92;       codehaus&amp;#92;           plexus&amp;#92;              plexus-component-annotationsY adentro seguro que falta un jar, debe haber un archivo con extension .lastUpdated que indica el momento en el que intent bajarse la dependencia y fall. Lo mismo hay que hacer con cada uno de los componentes que marque el error.Borrar todos los hijos de .m2 es lo ms fcil, pero tambin les va a llevar infinito tiempo y si la conexin de Internet es mala, les puede volver a pasar el mismo error con distintos componentes.  Moraleja: cuando uno se baja dependencias (con Maven o cualquier otra herramienta), hay que asegurarse de tener buena conexin de Internet.Source folders del proyectoLos source folders de los proyectos (que tienen maven como estructura central del proyecto) deben sersrc/main/java y src/test/java (para proyectos Xtend o Java)Si te aparece como source folder slo el src, o bien si no tens source folders:      corr el plugin de maven: botn derecho sobre el proyecto &amp;gt; Configure &amp;gt; Maven project (o mvn compile)        si el proyecto tiene la naturaleza Maven (aparece una M sobre el nodo del proyecto en el Project Explorer), prob hacer un Maven &amp;gt; Update project        revis si efectivamente tens una estructura de directorio src/main/lenguaje, en base al lenguaje que ests utilizando. Esa estructura debe respetarse.  JDKRevis que tengas instalada una JDK (no JRE, tiene que ser JDK con las herramientas para desarrollar en Java como el compilador, debug, etc.) y que la versin de ese JDK sea 1.8  superior. Si quers usar una JDK 1.7  inferior te va a aparecer el siguiente mensaje de errorjava.lang.UnsupportedClassVersionError:---aplicacindeArena---:Unsupportedmajor.minorversion51.0porque Arena est compilado con una JDK 1.8Problemas para encontrar la ventana ejecutableSi te aparece un error similar a ste al correr un launcher:Error:nosehaencontradoocargadolaclaseprincipalorg.uqbar.arena.examples.conversor.xtend.ConversorWindowRevis  si tens correctamente definidos los source folders (punto anterior): al abrir los archivos tiene que aparecer correctamente coloreado y sin errores de compilacin  y si tens apuntado en tu proyecto un JDK vlido (que apunte a un directorio que exista en tu PC, revis Window &amp;gt; Preferences &amp;gt; Installed JREs)APOClassLoader not foundOtro problema que puede aparecer es:ErroroccurredduringinitializationofVMjava.lang.Error:java.lang.ClassNotFoundException:....APOClassLoaderentonces el problema puede darse porque no te descarg las dependencias de Maven correctamente. Revis los directorios de tu usuario/.m2/repository porque seguramente te falte bajar dependencias, pods probar haciendo Maven &amp;gt; Update project (forzando el check Update snapshots), es poco probable que eso lo solucione pero al menos te puede ayudar a encontrar el origen de la dependencia errnea.Errores de launchersOtro problema que te puede ocurrir cuando corras un launcher que te descargaste de nuestros ejemplos es que te aparezca un error de este tipo:Launchconfigurationreferencesnon-existingprojectcelulares-ui-arena-scalaEn este caso el problema es que te descargaste el proyecto del repositorio utilizando otro nombre que el que originalmente definimos. Entonces fijate cul es el nombre del proyecto que est esperando y renombralo a ese, o bien entr por el men Run Configuration y apunt el launcher al proyecto que vos definiste. Otra opcin puede ser que no hayas ejecutado el comando mvn compile (Run As &amp;gt; Maven build Goal compile)Links relacionados  Temario Algoritmos III  Instalacin de Arena"

} ,

{

"title"    : "Instalacion de arena",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/arena-instalacion.html",
"date"     : "",
"content"  : "Para instalar el entorno de Arena en Xtend  Necesits una JDK (Java Development Kit) 1.8, no puede ser superior ya que no se lleva bien con el Class Loader de Arena.  Recomendamos usar la ltima versin de Eclipse (2019-06) para Java (puede ser la versin anterior pero siempre es mejor trabajar con la ltima)          con el plugin Xtend 2.18 (el Update Site es http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases/)        Y la ltima versin de Maven (no es tan importante que sea la ltima pero s que sea 1.3.x)  Si ests trabajando en Windows, descargate el Git Bash  El archivo .travis.yml te lo pods bajar de cualquiera de nuestros ejemplos, o generalo desde cero con este contenidodist: trustylanguage: javajdk:  - oraclejdk8Links relacionados  Temario Algoritmos III  Configuracin de Arena"

} ,

{

"title"    : "Aritmetica en prolog",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/aritmetica-en-prolog.html",
"date"     : "",
"content"  : "El predicado isEn Prolog no pasa como en Haskell que tengo funciones que me devuelven cosas, sino que tengo predicados que relacionan individuos Entonces qu sucede cuando quiero hacer cuentas? Si probamos esto en el intrprete de Prolog, que est pensado para evaluar predicados, vamos a ver que falla:?- 2+2.ERROR: Undefined procedure: (+)/2 (DWIM could not correct goal)Eso no es porque no sea posible sumar nmeros, sino que el + no es un predicado. De hecho, si probamos esto otro, s funciona:?- 2+2 &amp;gt; 1.YesEso demuestra que la suma anda, y que el predicado (&amp;gt;)/2 se encarg de reducir esa expresin y compararla con el 1, lo cual dio un resultado booleano como hubiramos esperado.Y como me puedo saber cul es el resultado de una cuenta? O si una cuenta da un determinado resultado?Bueno, para esos casos, existe el predicado is, que es un predicado de aridad 2 que se puede escribir de forma infija. Al ser un predicado, sabemos que podemos hacer consultas individuales como la siguiente, para saber si es cierto que se verifica que una cuenta da un determinado resultado:?-5is2+3.YesPero ojo, la cuenta slo puede ir a la derecha:?- 4 + 1 is 2 + 3.No.A la derecha del is se escribe una operacin aritmtica. A la izquierda del is se escribe el resultado de esa operacin aritmtica.Luego podemos ver qu tan inversible es para determinar qu otros usos se le puede dar. El is slo es inversible por el primer parmetroEsto funciona:?-Xis6/2.X=3Pero esto no:?- 3 is X / 2.ERROR: is/2: Arguments are not sufficiently instantiatedErrores comunes con el isAc vienen una serie de warnings que deben tener MUY en cuenta:Error: usar = en vez de isUsar = para resolver operaciones aritmticas no es correcto. Por qu no se puede usar = para aritmtica? Veamos un ejemplo:?-3+5=2+6.No?-3+5=5+3.No?-3+5=8.NoEl muy simptico slo nos va a decir true cuando las dos expresiones de ambos lados del igual sean idnticas, no va a intentar resolver la igualdad:?-3+5=3+5.YesMuy til, no? :PEn general en la materia no vamos a usar el = ya que preferimos el uso de pattern matching y consultas individuales cuando eso nos sirva para resolver el problema que tenemos.Error: tratar de acumularComo ya saben, en lgico no hay asignacin sino unificacin; una vez que las variables se ligan, permanecen ligadas hasta que termine la consulta, por ende no hay que pensar al is como un mecanismo para asignar. Es decir, no vale preguntar algo como:?-edad(pepe,E),EisE+1.NoNo existe ningn nmero E que sea igual a E + 1. Supongamos que la edad de pepe era 15, el motivo por el cual es falso es porque 15 no es 16. Bsicamente lo que estara pasando es esto:?-15is15+1.NoError: Usar is para verificar igualdad de valoresEl is es slo para operaciones aritmticas. Si bien funciona, lo siguiente es un error conceptual:edad(juan,Edad):-  Edadis10.La manera correcta de hacerlo es aprovechando que al hacer pattern matching, prolog verifica que el valor sea ese, sin usar el igual  el is:edad(juan,10).Y listo!Ver Sobre el uso del igual en Prolog para ms informacin.Error: Usar is para igualar variablesEsto es el mismo caso que el error anterior. El is es slo para operaciones aritmticas. Si bien funciona, lo siguiente es un error conceptual:mismaEdad(PersonaA,PersonaB):-  edad(PersonaA,EdadA),  edad(PersonaB,EdadB),  EdadAisEdadBLo mismo sucede aqu:mismaEdad(PersonaA,PersonaB):-  edad(PersonaA,EdadA),  edad(PersonaB,EdadB),  EdadA=EdadBLa manera correcta de hacerlo es:mismaEdad(PersonaA,PersonaB):-  edad(PersonaA,Edad),  edad(PersonaB,Edad).Porque si dos individuos deben ser el mismo, entonces alcanza con escribirlos con la misma variable, no como otra condicin. De esta forma estamos haciendo una consulta existencial respecto a la edad de la PersonaA y luego una consulta individual para validar si es cierto que la edad de PersonaB es esa que ya conocemos. Vemos que de sta manera mejoramos la declaratividad (leo qu es lo que quiero, y hay menos detalles algortmicos: si la edad es la misma lo escribo igual y listo). El motor de Prolog se encarga del resto.Ver Sobre el uso del igual en Prolog para ms informacin.Error: Usar is para resolver ecuacionesComo dijimos arriba, el predicado is/2 no es completamente inversible, es inversible solo para el primer argumento, lo que va a la izquierda. O sea, no vale preguntar:?-3isX+1.ERROR: is/2: Arguments are not sufficiently instantiatedPorque el motor de Prolog no sabe resolver ecuaciones. En ste caso, el error dir algo como Arguments are not sufficiently instantiated, lo cual es otra manera de decir No soy inversible a derecha, slo me pods poner algo sin unificar a izquierda"

} ,

{

"title"    : "Arquitecturas",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/arquitecturas.html",
"date"     : "",
"content"  : "Un artculo interesante de fowler: http://martinfowler.com/bliki/DatabaseThaw.htmlClasificacin general de las partes de una aplicacinNormalmente uno habla de tres capas, pero hay distintas formas de dividir y las divisiones principales son 4 que las gente agrupa de una u otra manera segn distintas escuelas:PresentacinPersistenciaDominioAplicacinTransformacin de los datos de entrada para hacerlos llegar hasta el dominioQue la presentacin no conozca al dominioQue el dominio no conozca a la presentacinHay un lugar intermedio de almacenamiento:Wrapper del requestVolcar los datos del request en un mapaVolcar los datos en un dto (bean)Estructura oficial de una aplicacin  El struts llena un bean o mapa.  El controller (action de struts) recibe ese bean, invoca a un servicio.  El servicio es la fachada de la aplicacin (facade) y esconde y proteje a los objetos de negocio*Permitetenermuchasinterfacesdeusuariosobreelmismodominio*Permiteinterponercomportamientogenricocomomanejodetransaccionesyseguridadyremoticidad.*Manejalapersistencia*Proveeunainterfazsimplificadadelaaplicacin*Decidequ&quot;casosdeuso&quot;publicaryqucosasno"

} ,

{

"title"    : "Arrays literales en smalltalk",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/arrays-literales-en-smalltalk.html",
"date"     : "",
"content"  : "Por si les sirve les comento un toque como funciona el tema de los arrays en smalltalk.Acurdense que en Smalltalk vale usar arrays literales.Array: coleccin de tamao fijo.Literal: objetos especiales como nmeros, caracteres, strings, nil, booleanos, arrays literales (cuac), etc.Para usar un Array literal los elementos del array deben ser literales, ejemplos:#(&#39;brujula&#39;&#39;mapa&#39;&#39;botellaDeGrogXD&#39;)Escribir eso, genera un array que tiene 3 strings, si necesitan un Bag pueden escribir#(&#39;brujula&#39;&#39;mapa&#39;&#39;botellaDeGrogXD&#39;)asBagEl tema est cuando queremos un array que tiene objetos que deben obtenerse a travs de mensajes, ejemplo:#(4+3)Uno ingenuamente se pensara que eso da un array de un elemento (el objeto 7), pero Smalltalk piensa que quisimos hacer un array que tiene 3 elementos (el 4, el smbolo +, y el 3)Para crear arrays con objetos que no son literales, se deben utilizar arrays dinmicos (en vez de escribir #() se escribe { }, en vez de separarse los elementos con espacio se separan con punto){4+3}&quot;Estoesunarrayconunsoloelemento,elnmero7&quot;{4+3.&#39;hola&#39;size.Datetodayyear}&quot;Estoesunarraycontreselementos:7,4y2011&quot;De todas formas, en los parciales no suele ser habitual el uso de Arrays (ya que queremos colecciones con tamao variable y los elementos que componen dicha coleccin son desconocidos al escribir el cdigo)."

} ,

{

"title"    : "wiki.template landing page",
"category" : "",
"tags"     : "",
"url"      : "/articles.html",
"date"     : "",
"content"  : "Articulos de la wiki      FAQ        Abstraccion        Temario de Algoritmos II        Temario de Algoritmos III        Amigandonos con el entorno de desarrollo        Android - cmo cambiar cono y ttulo de la app        Ciclo de vida de una actividad en Android        Preparacion de un entorno de desarrollo android        Introduccin al desarrollo con Android        Instalacion de Entorno Angular        Aplicacion parcial        Aplicacion        Append como  foldr f a        Configuracion de arena        Instalacion de arena        Aritmetica en prolog        Arquitecturas        Arrays literales en smalltalk        Ast abstract syntax tree        Atributos de calidad        Backtracking        Bagna cauda        Bajar un proyecto maven de un repositorio git        Bibliografia sobre programacion avanzada orientada a objetos        Binding  polimorfismo y sobrecarga        Bloques        Brownies        C ++        C        Calculo del tipo de una funcion en haskell        Calidad de las pruebas unitarias        Cannot construct the infinite type        Cantidad de parametros de una funcion en haskell        Ciclo de vida de un objeto        Clase abstracta vs interfaces        Clase abstracta vs interfaz        Clases anonimas en java        Clases vs instancias        Clases        Coeficiente de felicidad docente        Comidas        Como bajar y correr un ejemplo en wicket        Como crear una subclase en squeak        Como contribuir a la wiki        Como hacer para que de un objeto muestre lo que yo quiero        Como hacer predicados de orden superior        Composicion  oop        Composicion        Comunicacion        Concepto de funcion        Conceptos basicos del diseno        Conceptos de ingenieria de software y de sistemas        Configuracion de maven para poder utilizar las herramientas de uqbar        Configuraciones generales para cualquier eclipse        Conocimiento de dominio y refactoring        Creacion de objetos  con parametros        Creacion de un proyecto maven basico        Crear un proyecto en xp dev        Instalacion de Entorno para HTML y CSS        Css        cual es la diferencia entre una tupla y una lista        Cuando usar parentesis        Cuestiones basicas para resolver el parcial de objetos        Currificacion        Data  definiendo nuestros tipos en haskell        Declaratividad vs  expresividad        Declaratividad        Definiciones locales  where        Deploy en maven central        Deploy componentes Uqbar        Desafio  Construir esta sucesin        Desafio  find con notacion point free        Desafio  hacer que un data propio sea enum        Desafio  ordenar con rbol B        Desafio  pirmide de nmeros        Desafio  suma de distancias        Desafio  Suma Par        Desafio  triada uqbariana        Desafios cafe con leche        Design temario        Diagrama de clases        Diccionarios        Diferencia entre objetos y procedural   con un ejercicio de la guia 1        Diferencias entre polimorfismo  abstraccion y encapsulamiento        Diseno iterativo        Diseno y sistemas de tipos        Diseno y tecnologia        Paradigma logico,  Predicado distinct        Dont Cross the Beams by Kent Beck        Double dispatch        Dsl        Efectos y diseno        El papel del diseno en la metodologia de desarrollo        Uso del signo pesos ($) en haskell        Elementos teoricos para comparar tecnologias de presentacion        Encapsulamiento        Entradas al proceso de diseno        Errores comunes  usar un predicado como si fuera una variable        Errores comunes al comenzar a trabajar con haskell        Errores comunes con select  y collect        Errores comunes        Errores en haskell        Errores frecuentes al programar en logico        Escribiendo un paper        Esquemas de tipado        Estado  identidad y diseno        Estado y diseno        Estereotipos de objetos        Estrategias de evaluacion        Evaluacion diferida y diseno        Excepciones - Resumen avanzado        Excepciones        Expresiones lambda        Expresividad        Fideos        Flattening vs linearization        Fold        Formato de un paper        Frases teadepeanas        Funciones por partes        Function object        Garbage collector        Git  un versionador distribuido        Introduccin a Gradle        Groovy vs scala        Guia de instalacion de maven        Guia de instalacion de rails        Guia de instalacion de ruby        Guiso de Lentejas        Herencia        Herramientas de desarrollo con android        Herramientas de instanciacin        Herramientas utiles        Orden superior y calculo variacional (Referencia Externa)        Home        Html        Hugs trex insertfield not in scope        Igualdad vs. Identidad        Inferencia de tipos        Inject into        Inmutabilidad        Intro a colecciones        Introduccion a las metodologias de desarrollo de software        Java        Javascript        JDK vs. JRE        json        Juegos de estrategia        Testeo unitario avanzado        Kotlin - control de versiones        Bajar un proyecto Kotlin - Gradle de un repositorio git        Integracin continua para materias con Kotlin        Kotlin - Cmo generar un proyecto desde cero        Guia rapida de Kotlin        Kotlin - Preparacion del entorno de desarrollo        Kotlin - pagina principal        Lambdas en java 8        Lectura de un paper        Lenguajes del paradigma logico        Lenguajes especificos de dominio        Lenguajes para centrales nucleares        Lenguajes        Ley de demeter        Libreria y framework        Lista de proyectos        Listas por comprension        Locro        Logico   trabajo con valores        Lombardizacion        Macros en Scala        Manejo de booleanos en haskell        Manejo de booleanos en smalltalk        Manejo de booleanos        Manejo de errores        Manejo de memoria en c        Maquina virtual        Masa de pizza        Introduccin a Maven        Mejorar la experiencia del pharoer        Mensajes de colecciones        Mensajes y metodos        Metamodelo        Metaprogramacion        Method lookup        Method missing        Metodos de clase para crear objetos inicializados        Min  y max        Mixins        Modelando objetos   responsabilidades y delegacion        Monada        No hay instancias para el Show        Nombres de clases        Normalizacion en objetos        Notacion point free        Manejo de dependencias con NPM        Objective c        Observer en pharo smalltalk        Objetos factory - instanciando objetos        Temporary variables        Orden superior y diseno        Orden superior        Otros temas interesantes de programacion        Pagina principal        Palitos de queso        Panqueques        Paradigma de objetos   method lookup        Paradigma de objetos        Paradigma de programacion        Paradigma funcional        Paradigma logico   casos de no inversibilidad        Paradigma logico   como pienso la resolucion de un punto        Paradigma logico   conjuncion y disyuncion        Paradigma logico   detalles del swi prolog        Paradigma logico   el forall        Paradigma logico   existe vs para todo        Paradigma logico   forall   no siempre con member        Paradigma logico   functores        Paradigma logico   generacion        Paradigma logico   individuos compuestos        Paradigma logico   individuos simples        Paradigma logico   introduccion        Paradigma logico   inversibilidad        Paradigma logico   listas        Paradigma logico   multiples respuestas        Paradigma logico   negacion        Paradigma logico   un poco de nomenclatura        Paradigma logico        Paradigmas de programacion        Parsers monadicos        Patrones de comunicacion entre componentes        Pattern matching  polimorfismo y diseno        Pattern matching en haskell        Pepita        Pharo para programadores ozonosos        Script mapeo manual Objetos / Relacional        Script temario MongoDB        Programacion con herramientas modernas        Polimorfismo en el paradigma de objetos        Polimorfismo en el paradigma logico        Polimorfismo parametrico y ad hoc        Polimorfismo        Portal del investigador        Possibly incorrect indentation or mismatched brackets        Precedencia de los operadores mas comunes en haskell        Precedencia de mensajes        Preguntas frecuentes del paradigma logico        Preguntas frecuentes        Preparacion de un entorno de desarrollo groovy        Preparacion de un entorno de desarrollo java 8        Preparacion de un entorno de desarrollo java        Preparacion de un entorno de desarrollo scala        Problemas comunes con los tipos numericos de haskell        Prototipado vs clases        Prototipado        Pseudovariable        Publicar un proyecto en svn        Python        que entendemos por programacion orientada a objetos        Instalacion de ReactJS        Recursividad en haskell        Recursividad en logico        Redefinicion        Refactoring        Reflection        Relleno caprese        Relleno dale        Relleno de carne        Representacion de informacion        Resolver problemas de dependencias maven dentro de eclipse        Responsiveness        Resumen de wicket  pros y contras        Resumen de lenguajes basados en prototipos        Robustez de los lenguajes        Ruby        Sabores de colecciones        Salsa jack daniel s        Scala        Self   pseudovariable        Self        Sintaxis de smalltalk        Smalltalk        Sobre el uso del igual en prolog        Super        Instalacion de Entorno Svelte        Tecnicas avanzadas de programacion        Template method        Testeo unitario avanzado        Testing        Tipo abstracto de datos        Tipos de haskell        Tipos de mensajes en smalltalk        Tips para aprobar un parcial de funcional        Tips para concursos docentes        Tips para la resolucion de un parcial de tadp        Traits        Transparencia referencial  efecto de lado y asignacion destructiva        Interfaces y union types en Typescript        Tutorial de squeak y pharo        Tutorial de squeak        Tutoriales para desarrollo java        Typeclasses        Typedefs y tipos anonimos        Integracion de la ui en una arquitectura de un sistema de software        Clasificacion de las UI        Definiciones iniciales de ui        Elementos a tener en cuenta al programar ui        Formas de vincular una vista con el modelo de dominio        Intro a MVC        Application model. Extendiendo el MVC.        Navegacin        Arena. Manejo de transacciones.        Validaciones y manejo de errores en la UI        Introduccin a la Arquitectura web        unexpected        Unificacion y pattern matching        Uso de features de lenguajes dinamicos        Value object        Variables locales en metodos        Variables y metodos de clase        Variables        Warning  singleton variables        Xtend - control de versiones        Cmo generar un proyecto Xtend nuevo        Guia rapida de Xtend        Preparacion de un entorno de desarrollo xtend        Xtend - pagina principal  "

} ,

{

"title"    : "Ast abstract syntax tree",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ast-abstract-syntax-tree.html",
"date"     : "",
"content"  : "A esto hay que darle forma  AST simplemente es un arbol que lo que hace es representar un programa (o parte de l), se organiza en nodos y puede haber nodos que contengan otros (nada loco).Lo interesante es usarlo, para armarlo ya est hecho, esta bueno aprender a usarlo Aka como obtenerlo, como visitarlo, que sabe hacer cada nodo, como agregarle comportamiento.Si abris Pharo vas a ver que los nodos son RBNode, ejemplo RBVariableNode, RBSequenceNode, RBMessageSendNode (...).Si queres ver como armas un AST de un cacho de codigo tenes RBParser parse: unString y te devuelve un nodo del ast (el parente, un program node si parseo bien).No encontre mucho que leer.. a ver vi una presentacion y lei algo a media que me paso ducasse, y despues para ver como se puede jugar con poder sobre el AST lei el paper de Helvetia y otro de SmallLint (este ultimo es bien concreto sobre reglas y transformaciones).Despues me puse a jugar y a reconocer nodos segun lo que esta seleccionado facil porque abri el AltBrowser que ya lo hacia.Despues nada browsear el codigo para entender un poco como se implementa si encontras algo mas organizado decime (en otro mail te reenvio lo que me mando ducasse para leer)Reng10aEmbeddingLanguages.pdfReng10bDomainSpecificProgramChecking.pdf"

} ,

{

"title"    : "Atributos de calidad",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/atributos-de-calidad.html",
"date"     : "",
"content"  : "Atributos de calidad (tambin cualidades del software) son caractersticas no funcionales que se consideran deseables en un sistema de software. Sin embargo, no todos los sistemas de software deben tener en cuenta todos estos atributos o cualidades, algunas sern ms importantes que otras dependiendo del sistema, y ciertamente no se pueden maximizar todas a la vez.Se establece una diferencia entre cualidades y requerimientos, porque algunas de ellas pueden incorporarse como entrada al diseo por un camino distinto al del anlisis (por ejemplo, como restricciones de arquitectura o influencias del entorno).SimplicidadSimplicidad es la ausencia de complejidad o dificultades. En el desarrollo de software puede resultar de interes diferenciar entre complejidades esenciales y accidentales.  Complejidad esencial: las que son propias o intrnsecas al problema que se desea solucionar. Es natural que un problema complejo tenga soluciones con algn grado de complejidad.  complejidades accidentales: aquellas que surgen por malas decisiones de diseo. Naturalmente, se intentar evitar disear soluciones que sean ms complejas de lo que el problema requiere.Determinar si una dificultad en un diseo o programa es esencial o accidental, nos permite atacar las dificultades accidentales, buscando soluciones ms simples.Correctitud, consistencia, completitudCorrectitud:Ausencia de errores.Consistencia:Coherencia entre las operaciones que realiza el usuario.Completitud:Capacidad del sistema para realizar todas las operaciones que usuario podra requerir.Un artculo interesante sobre correctitud consistencia y completitud: Worse is betterRobustezRobusto es un sistema que goza de buena salud y que brinda garantas de que va a continuar teniendo buena salud. Algunos sntomas de un sistema robusto son:  la capacidad de ser modificado sin introducir errores (opuesto a error prone)  durabilidad del sistema funcionando correctamente (no aparecen errores aleatorios)Diferentes usuarios tendrn diferentes visiones de la robustez del sistema.FlexibilidadTambin llamada modificabilidad, es la capacidad para admitir cambios que pueden ser necesarios tanto por un cambio de requerimientos como por la deteccin de un error que debe ser corregido. Una variante de flexibilidad es la extensibilidad, es decir, la posibilidad de agregar nuevos requerimientos.PerformanceLa performance es una medida de la eficiencia en el uso de recursos del sistema ejecutndose, por ejemplo:  Uso de procesador  Memoria  Almacenamiento permanente (discos rgidos, etc).  Uso de redes   o cualquier otro recurso fsico.EscalabilidadEs la capacidad de un sistema para trabajar con diferentes cantidades de trabajo, como cambios en el volumen de datos o flujo de pedidos. Con frecuencia se estudia la escalabilidad de un sistema hacia arriba, es decir, se mide la capacidad del sistema para manejar, por ejemplo, un mayor volumen de datos. La medida de escalabilidad no requiere que el sistema funcione intacto en las nuevas condiciones, en cambio es una medida de la facilidad con la que se lo puede adaptar al nuevo entorno, por ejemplo, si est preparado para que yo agregue un servidor ms a un cluster eso se podra considerar escalable.Tambin puede ser de utilidad analizar la flexibilidad hacia abajo, es decir, la posibilidad de un sistema de adaptarse a un entorno ms sencillo. En estos casos, se analiza, por ejemplo, la posibilidad de evitar el uso de recursos que encarecen el sistema y podran no ser indispensables, por ejemplo ejecutar toda la aplicacin en un nico servidor en lugar de cada capa en uno distinto o bien reemplazar determinados componentes adquiridos por otros de menor costo de licencia.Un error comn es confundir escalabilidad con extensibilidad.SeguridadAlgunas visiones de la seguridad son:  Comprobar la identidad de las personas que intentan acceder al sistema.  Garantizar que slo las personas especficamente autorizadas pueden ver determinada porcin de la informacin del sistema  Garantizar que slo las personas especficamente autorizadas pueden modificar determinada porci de la informacin del sistema o bien realizar determinadas acciones.UsabilidadLa facilidad con la que el sistema o componente se puede utilizar o bien aprender a utilizar.ConstructibilidadLa constructibilidad es una medida inversa a la complejidad de la construccin del sistema. Las decisiones de diseo pueden afectar severamente la dificultad para construir ese sistema."

} ,

{

"title"    : "Backtracking",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/backtracking.html",
"date"     : "",
"content"  : "En un programa desarrollado usando el paradigma lgico, existe un motor que acta como control de secuencia para separar el algoritmo de bsqueda de soluciones del conocimiento de cada programa.Durante la ejecucin de un programa va evaluando y combinando las reglas lgicas de la base de conocimiento para lograr los resultados esperados. La implementacin del mecanismo de evaluacin puede ser diferente en cada lenguaje del paradigma, pero en todos los casos debe garantizar que se agoten todas las combinaciones lgicas posibles para ofrecer el conjunto completo de respuestas alternativas posibles a cada consulta efectuada. El ms difundido se denomina backtracking, que utiliza una estrategia de bsqueda de soluciones en estructuras de rboles denominada primero en profundidad.El motor de Prolog usa el mecanismo de backtracking para encontrar soluciones a una consulta. Supongamos que tenemos la siguiente base de conocimientos:hijo(homero,bart).hijo(homero,maggie).hijo(homero,lisa).item(bart,patineta).item(bart,gomera).item(lisa,saxo).copado(patineta).copado(saxo).itemCopadoDeHijo(Persona,Item):-  hijo(Persona,Hijo),  item(Hijo,Item),copado(Item).Si hacemos la consulta existencial:?-itemCopadoDeHijo(P,I).`P=homero,I=patineta;P=homero,I=saxo;false.Cmo se llega a esa solucin?El motor hace la consulta hijo(Persona,Hijo) que tiene 3 respuestas posibles en base a nuestros hechos. Por cada una de esas soluciones posibles iniciales tendr diferentes caminos por los cuales avanzar.1)  Si Persona es homero e Hijo es bart: Se consulta item(bart,Item), que tiene dos respuestas posibles.          Si Item es patineta, copado(patineta) se verifica, con lo cual es respuesta para itemCopadoDeHijo/2      Si Item es gomera, copado(patineta) no se verifica, con lo cual no es respuesta para itemCopadoDeHijo/2      2)  Si Persona es homero e Hijo es maggie: Se consulta item(maggie,Item) que no se verifica, con lo cual no se avanza ms por este camino.  Si Persona es homero e Hijo es lisa: Se consulta item(lisa,Item), que tiene una respuesta posible.3)  Si Item se liga con saxo, copado(saxo) es cierto, con lo cual es respuesta para itemCopadoDeHijo/2."

} ,

{

"title"    : "Bagna cauda",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/bagna-cauda.html",
"date"     : "",
"content"  : "SalsaPara 25 a 30 personas  46 cabezas de ajo  2 frascos grandes de anchoas (no s bien cuntos gramos seran)  500cc de aceite de oliva  1/1.5 aceite girasol  8 potes de crema de 360cc  un sobre de pimienta de 50 g  un puadito de salNos faltaron las nueces, podra agregarse 1/4 kg de nueces.IngredientesPara 22/25 personas, entre ellos varios que andaban con ganas de esquivar las verduras:  2kg de carne saltada  2kg de salchicha con piel, tambin saltada igual que la carne.  1kg de ravioles saltados/fritos  yo haba propuesto 12 baguetines de pan, no s cunto hubo al final.  4 plantas de apio  6 hinojos  1 repollo no muy grande  2 bandejas grandes de repollitos de bruselas (blanqueados 10 minutos en agua hirviendo, despus de dudar un poco les cortamos los cabitos)  2 plantas de brcoli (hervidos)  25 esprragos, saltados (es importante saltarlos en el momento).  3 kg de papines (hervidos primero y al horno despus).  4 morrones rojos y 2 verdes  Impamente no conseguimos cardo.DiscusinHabamos calculado 25 personas, mirando lo que sobr creo que la salsa hasta 28-30 nos alcanzaba. Los ingredientes estuvieron bien para 25.Algunas cosas que se podran revisar en una repeticin:  Aumentar la relacin anchoa/ajo. Le pondra por ah 30 cabezas de ajo y duplicara las anchoas.  Me van a putear pero yo estara tentado de que no sea tan pesada. Para eso se podra reemplazar un poco de crema por leche.  Lo que ms sobr fue el repollo, evidentemente era mucho.  Las dems verduras anduvieron bien, sobr un poco de cada cosa.  Carne, salchichas y ravioles se agotaron, pero no tuve sensacin de que faltaran.  En la fase previa la gente se abalanz sobre el pan, pero una vez sobre la mesa ya no le dieron tanta bola. Al final me pareci que era un poco mucho.  De las verduras la que ms gente escuch destacar fue el morrn. En segundo lugar pondra los repollitos (aunque quedaron bastantes en la olla). A m me gustaron mucho los esprragos.  Casi nada de los ingredientes tena sal, creo que estuvo bien a lo mejor me qued con ganas de echarle un toque a los papines."

} ,

{

"title"    : "Bajar un proyecto maven de un repositorio git",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/bajar-un-proyecto-maven-de-un-repositorio-git.html",
"date"     : "",
"content"  : "DescripcinEste artculo asume la presencia de un entorno de trabajo con una JDK. En caso de no contar con un repositorio de esas caractersticas conviene leer las instrucciones para la preparacin de un entorno de desarrollo Java.Tambin se asume la preexistencia de un proyecto mavenizado y publicado en un repositorio Git, si lo que se desea es crear el proyecto en lugar de descargarlo, aqu estn las instrucciones para la creacin de un proyecto maven bsico y su posterior publicacin en el repositorio.El proceso tiene los siguientes pasos, que se detallan a continuacin:  Clonar el proyecto desde el repositorio remoto y alojarlo en nuestro espacio de trabajo local.  Adaptar el proyecto maven para ser utilizado dentro del entorno Eclipse.Descarga (clone)El checkout se puede hacer  desde el eclipse  desde un cliente git  o por consolaA continuacin explicaremos los tres pasos por separado.Por lnea de comandoPara esto debemos  ubicarnos en el directorio de trabajo  saber la URL del repositorio en el que se public el proyecto$ cd ~/workspace/materia$ git clone https://github.com/uqbar-project/eg-vehiculos-xtendEn el directorio eg-vehiculos-xtend se bajan los recursos del proyecto, incluyendo un directorio .git donde est la informacin. De ser necesario debemos cambiar la rama o branch de trabajo, por ejemplo al branch dev:$ git checkout devDescarga desde el EclipseEn caso de hacerlo desde el eclipse, la forma de hacerlo es:  Copiar en el portapapeles la URL del repositorio al que queremos apuntar  Ir a la perspectiva Git  En la solapa Git Repositories hacer click derecho sobre algn espacio en blanco y ah elegir la opcin Paste Repository Path or URI, luego botn Next  Elegir una rama o branch para descargar (master por defecto), luego botn Next  Seleccionar la carpeta del destino  Chequear la opcin Import all Eclipse projects after clone finishesDescarga de un proyecto desde un cliente gitEso puede variar dependiendo del cliente, te dejamos algunos links  Smartgit  Source TreeAdaptar un proyecto maven para ser usado desde el EclipseSi importaste el proyecto desde la consola o bien el cliente solo descarg el proyecto en un espacio de trabajo local, lo que faltara hacer es File &amp;gt; Import &amp;gt; Existing Maven projectsLuego de posicionarse en el directorio donde descargamos el proyecto, en particular donde se encuentra el archivo pom.xml, seleccionamos dicho proyecto y luego presionamos el botn Finish.Entonces nuestro proyecto toma la definicin del pom.xml y se construye para ser usado en el IDE Eclipse. Vemos que la naturaleza del proyecto es Maven, porque tiene una M arriba del cono del proyecto:Y ya podemos comenzar a trabajar!"

} ,

{

"title"    : "Bibliografia sobre programacion avanzada orientada a objetos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/bibliografia-sobre-programacion-avanzada-orientada-a-objetos.html",
"date"     : "",
"content"  : "Herramientas de programacin y diseo  Carlos Lombardi y Nicols Passerini, Introduccin a la Orientacin a Objetos, disponible en: https://drive.google.com/file/d/1RxqvJzyWSkJEl3_lzCMGWQhGkuXGWh2m/view?usp=sharing.  Erich Gamma, Richard Helm, Ralph Johnson y John M. Vlissides, Design Patterns: Elements of Reusable Object-Oriented Software, Addison-Wesley Professional Computing Series, 1994  Andrew Hunt y David Thomas, The Pragmatic Programmer: From Journeyman to Master, Addison-Wesley Professional, 1999.  Alfred Aho, John Hopcroft y Jeffrey Ullman, Data Structures and Algorithms, Addison-Wesley, 1983  Steven John Metsker, William C.Wake, Design Patterns in Java, Software Patterns Series, 2006.  Rebecca Wirfs-Brock, Alan McKean, Object Design: Roles, Responsibilities, and Collaborations, Addison-Wesley, 2002.  Michael C. Feathers, Working Effectively with Legacy Code - Robert C.Martin Series, 2004.  Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship, Prentice Hall, 2008Herramientas metodolgicas  Kent Beck, Test Driven Development: By Example, Addison-Wesley, 2002  Eric Evans, Domain-Driven Design: Tackling Complexity in the Heart of Software, Addison-Wesley Professional, 2003.  Kent Beck y Cynthia Andres, Extreme Programming Explained: Embrace Change, 2nd Edition, Addison-Wesley, 2004  Martin Fowler, Kent Beck, John Brant y William Opdyke, Refactoring: Improving the Design of Existing Code, Addison-Wesley, 1999  Joshua Kerievsky, Refactoring to Patterns, Addison-Wesley, 2004"

} ,

{

"title"    : "Binding  polimorfismo y sobrecarga",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/binding--polimorfismo-y-sobrecarga.html",
"date"     : "",
"content"  : "Qu entendemos por Binding?El binding es la relacin que se establece entre la invocacin a un procedimiento-funcin-mtodo y el cdigo que se ejecuta. Otro nombre que le damos es dispatch. Los conceptos de binding, polimorfismo y sobrecarga son aplicables a muchos paradigmas, y tienen diferentes formas de ser entendidos en cada uno de ellos. Por el momento, este artculo se concentra fundamentalmente en el paradigma de objetos.Dynamic method invocationEn objetos, cada vez que se enva un mensaje, el mtodo invocado depende del receptor. Por ejemplo, en Smalltalk:figuras:={Cuadradonew.Rectangulonew.Circulonew}.figurascollect:[:f|fsuperficie]Si las clases Cuadrado, Rectangulo y Circulo tienen cada una su propia implementacin de , cada vez que se enva el mensaje a la referencia el mtodo invocado ser uno distinto. Esta caracterstica es una de las ms importantes para el paradigma de objetos, ya que habilita algunas de sus herramientas ms interesantes.Tipo esttico y tipo dinmicoAl extender el concepto de dynamic method invocation a un lenguaje con chequeo esttico de tipos, es necesario tener en cuenta la informacin esttica que provee el sistema de tipos. En este tipo de lenguajes, a cada expresin se le asigna un tipo en forma esttica. Estos tipos se ejecutan para validar la correccin de los programas antes de su ejecucin y eliminar algunos posibles errores.El valor que tome la expresin en tiempo de ejecucin puede diferir del valor que es asignado a esa expresin en forma esttica. Por ejemplo:publicinterfaceFigura{publicdoublegetSuperficie();}publicclassCirculoimplementsFigura{@OverridepublicdoublegetSuperficie(){...}publicdoublegetRadio(){...}}Figuraf=newCirculo();Estticamente, la variable tiene el tipo , pero cuando ese programa se ejecute, el valor de ser un Circulo. La asignacin code|Figura f = new Circulo() es vlida siempre que sea un subtipo de . A esta regla se la conoce como subsumption.La presencia de tipado esttico nos obliga a analizar nuestro cdigo desde las dos perspectivas. Al evaluar se enva el mensaje al objeto referenciado por la variable y por lo tanto se ejecutar el mtodo de la clase . Sin embargo, en el momento de chequear tipos se controla que el tipo de , que es contenga el mensaje enviado.Si intentamos evaluar se producira un error de compilacin, porque esa expresin no pasa el chequeo de tipos. Por eso, decimos que la regla de subsumption conlleva una prdida de informacin de tipos. El objeto referenciado por entiende el mensaje , sin embargo el chequeador de tipos no puede verificar eso y rechaza el programa.SobrecargaSe dice que un nombre de mtodo est sobrecargado en un contexto cuando es utilizado para representar dos o ms mtodos o funciones distintos, que se diferencian por su tipo. El tipo de un mtodo incluye tanto a los tipos de los parmetros como al del valor de retorno. Por ejemplo:  En Haskell es posible definir funciones con el mismo nombre y distintos tipos de parmetros o distinto tipo de retorno.  En Java o C# es posible definir dos mtodos en la misma clase o jerarqua con distinto nmero de parmetros o con parmetros de distinto tipo. (La posibilidad de sobrecargar mtodos variando el tipo de retorno es menos frecuente en el paradigma de objetos.)Por ejemplo el mtodo est sobrecargado en la clase .classC{voidm(Figuraf){println(1);}voidm(Circuloc){println(2);}}Cuando se enva un mensaje que est sobrecargado, el sistema debe decidir cul es el mtodo que se debe ejecutar. En la mayora de los lenguajes orientados a objetos, esta decisin se toma en forma esttica. (Cuando la decisin es dinmica, en lugar de sobrecarga hablamos de Multimethods. Por ejemplo, en la siguiente porcin de cdigo, al evaluar se ejecutar el mtodo que recibe una figura, y no el que recibe un crculo; y por lo tanto imprimir 1.Figuraf=newCirculo();Cc=newC();c.m(f);//=&amp;gt;imprime1!La interpretacin que debemos hacer es que que en realidad el mensaje enviado no se identifica nicamente por su nombre, sino que incluye los tipos de los parmetros. Desde esta perspectiva los dos mtodos de la clase tienen distinto nombre, son totalmente independientes uno del otro. Debemos interpretar que el primero se denomina y el segundo . En presencia de este tipo de sobrecarga el mtodo a ejecutar se decidir en tiempo de ejecucin, en funcin del mensaje enviado, pero el mensaje a enviar se decide en tiempo de compilacin, a partir de la informacin de tipos disponible en este momento. En resumen, el mensaje enviado a no es sino . Dado que ambos mtodos tienen identificadores distintos, para invocarlos se envan mensajes distintos y la decisin entre ambos ser tomada en tiempo de compilacin.Veamos un ejemplo ms complejo con sobrecarga y redefinicin (adaptado de Foundations of Object-oriented Languages: Types and Semantics por Kim Bruce), tenemos el siguiente cdigo en Scala:classC{defm(other:C)={println(1)}}classSCextendsC{defm(other:SC)={println(3)}overridedefm(other:C)={println(2)}}Si hacemos la siguiente prueba:varc2:C=newSC()varsc:SC=newSC()c2.m(sc)El resultado ser 2, no 3, ya que el mensaje que se elige estticamente no es m(SC), sino m(C). Para entender lo que sucede podemos hacer dos pasos bien separados: Pensar primero como compilador y despus pensar como mquina virtual (pensar en tiempo de compilacin y tiempo de ejecucin).Empecemos como compiladores: c2 es una variable del tipo C, y sc es una variable del tipo SC. En c2 se referenciar a una instancia del tipo SC, pero eso como compiladores por ahora no nos importa, porque no estamos ejecutando el cdigo.Luego vamos a esta llamada:Ac es donde empieza la confusin: Uno piensa que porque sc es del tipo SC y c2 es una instancia de SC (si bien la variable es de tipo C) el mtodo que se va a ejecutar es m(SC), pero no es as. Por qu? La respuesta viene de pensar como compilador, no ejecutar el cdigo y mirar la el tipo de la variable c2, y deducir de ah los posibles mensajes que entiende, y de ver bien la firma de esos mensajes.De qu tipo es C2? Del tipo C. Qu mensajes entiende un objeto del tipo C? Vamos a ver la declaracin de C:classC{defm(other:C)={println(1)}}Los objetos del tipo C slo entienden un mensaje, y ese es m(C). Por lo tanto, siendo que SC es un subtipo de C, la firma del mensaje que va a ser llamado en va a ser m(C):Unit y no m(SC):Unit, dado que el tipo C no tiene definido ningn mensaje con parmetro SC. Esa firma es decidida en compilacin y depende slo de los tipos declarados/inferidos de las variables, y no de las instancias.Ahora sabemos la firma, terminamos de compilar el cdigo. Pasemos al modo ejecucin y pensemos como mquinas virtuales Qu mtodo se ejecuta al hacer c2.m(sc)? Para saberlo, no hay que hacer otra cosa que method lookup.      Cul es la firma del mensaje c2.m(sc)? La firma es m(C):Unit (por lo que vimos antes en compilacin.        A quin le estoy enviando ese mensaje? Al objeto referenciado por c2, que es una instancia de la clase SC.        Para saber qu mtodo ejecutar entonces, comenzamos el method lookup a partir de la clase SC.  classSCextendsC{defm(other:SC)={println(3)}overridedefm(other:C)={println(2)}}  Tiene SC algn mtodo definido cuya firma sea m(C):Unit? S. Entonces ese es el mtodo que se va a ejecutar, que es el que imprime 2.Eso sera bsicamente todo. Lo importante de todo esto es entender que ahora los tipos son mucho ms importantes para la construccin de mi modelo conceptual. Y la idea es que con ejercicios como estos uno comprueba si entendi o no que los tipos me cambian un poquito la semntica del cdigo y me agregan algo ms en lo que tengo que pensar, si bien me previenen algunos errores en compilacin.EjemplosTres ejemplos del lenguaje Java:  Al mandar un mensaje a dos objetos (polimrficos) distintos, el binding es dinmico.  Si un objeto recibe dos mensajes con el mismo nombre pero distintos tipos de parmetros, el bingind es esttico. A esto lo llamamos sobrecarga.  Si invocamos un mtodo de clase, el binding es esttico.Algunas variantes  En C++ o C# si no les pongo virtual a los mtodos el binding es esttico.  En Eiffel se da dinmicamente, a esta caracterstica la denominamos multimethods.  En Smalltalk el binding de los mtodos de clases es tambin dinmico. (Y esto es uno de los motivos que nos da pie a decir que las clases en Smalltalk son realmente objetos, mientras que en Java no es as.)"

} ,

{

"title"    : "Bloques",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/bloques.html",
"date"     : "",
"content"  : "Qu es un bloque?Un bloque (tambin conocido como closure) es un objeto, y por lo tanto podemos hacer con l lo mismo que hacamos con los dems objetos esto es:  Enviarle mensajes  Pasarlo como parmetro de algn mensaje  Hacer que una variable lo referencieUn objeto bloque representa un cacho de cdigo que no se ejecut, ese cdigo solo se ejecutar si alguien le manda un mensaje que le indique hacerlo. Veamos algunos ejemplos en el lenguaje Wollok:Si ejecutamos las siguientes instrucciones:varx=0{x=x+1}A qu objeto apunta la variable x despus de ejecutar esas 2 lneas de cdigo? Claro, al objeto cero (0)! Porque slo creamos el bloque, pero el cdigo del mismo nunca se evalu.Para que la variable x apunte al objeto uno (1) tenemos que decirle al bloque que se ejecute.varx=0{x=x+1}.apply()Ahora s, despus de ejecutar esas 2 lneas de cdigo la variable x va a apuntar al objeto uno (1). Es importante darse cuenta que apply() es un mensaje que le llega al objeto bloque. Este mensaje hace que se ejecute el cdigo que est dentro del bloque y que se retorne el objeto devuelto por la ltima sentencia del bloque.Conocimiento del contextoAlgo que se pone en evidencia en este ejemplo introductorio es que los bloques tienen una nocin del contexto en el cual fueron definidos, y por eso es que tienen acceso a las referencias disponibles en dicho contexto. Es por eso que es posible usar la variable x que haba sido definida fuera del bloque.Si tuviramos el siguiente cdigo:object pepita {  var energia = 100    method volar(metros) {    energia -= 10 - metros  }    method irYVolverNVeces(metros, veces){    veces.times({n =&amp;gt; self.volar(metros * 2) })  }}Y luego evaluamos: pepita.irYVolverNVeces(5, 3)El mensaje times(algoParaHacer) que se le manda al nmero 3 con el bloque que construmos en ese momento se encargar de mandarle el mensaje apply(valor) al bloque que le pasamos, en este caso, 3 veces. Dado que la referencia metros exista en el contexto en el cual ese bloque fue creado (era un parmetro del mtodo), es vlido usar esa referencia dentro de la lgica del bloque y va a apuntar al objeto 5, como es de esperarse.  El parmetro que se usa para aplicar el bloque ser primero 1, luego 2 y finalmente 3. Esta informacin es irrelevante para el ejemplo, pero el bloque debe recibir un parmetro para que entienda el mensaje que recibir cuando se evale el mtodo times.Otra pregunta interesante es: quin es self dentro del bloque?Cuando usamos self dentro de un bloque, estamos referenciando al mismo objeto que recibi el mensaje dentro del cual se cre el bloque (o sea, pepita), lo cual es muy convieniente ya que hace que no necesitemos parametrizar a self si necesitamos mandarle mensajes o parametrizarlo a otro mensaje dentro del cdigo del bloque.Finalmente, el resultado de la operacin ser que la energa de pepita se habr decrementado en 60.Bloques como funcionesTambin se puede ver a los bloques como objetos que representan una funcin sin nombre (o sea, una funcin annima, como las Expresiones lambda de funcional!).El bloque { 1 } en Wollok es como una funcin constante que siempre devuelve 1 si le decs que se ejecute. Pero el chiste de las funciones es que reciban parmetros y los bloques tambin pueden recibir parmetros, por ejemplo la sintaxis de Wollok para un bloque de dos parmetros es {parametro1,parametro2=&amp;gt;cuerpoDelBloque}Ejemplos:Podramos representar las siguientes funcionesf(x)=2xg(x,y)=x2+y2 con bloques de la siguiente forma:varf={x=&amp;gt;2*x}varg={x,y=&amp;gt;x**2+y**2}Cmo hacemos para usar bloques que tienen parmetros? Por ejemplo si quisiramos los equivalentes a evaluar las funciones f(4) y g(4,3)f.apply(4)//Estodevuelveelobjeto8g.apply(4,3)//Estodevuelveelobjeto25Por lo general el uso que le damos a los bloques es slo la creacin de los mismos para pasar por parmetro a funcionalidad ya existente de propsito general, como son los mensajes de colecciones Mensajes de colecciones, y no tanto la aplicacin de los mismos. Sin embargo es interesante saber cmo es que las colecciones son capaces de evaluar lo que les pedimos.Para pensar: Los mensajes que esperan por parmetro un bloque, podrn recibir por parmetro un objeto programado por nosotros? Qu es lo que una coleccin necesita realmente que le pasemos por parmetro para poder realizar un filtrado?Cmo funciona el #ifTrue: y el #ifFalse: de Smalltalk?En el caso de Smalltalk, el uso de bloques es an ms generalizado, ya que al no existir estructuras de control y tener una sintaxis completamente basada en mensajes a objetos, los bloques se usan por ejemplo para poder saber qu hacer en un condicional cuando la condicin se cumple o no se cumple. Esto se logra mediante ditintos mensajes que entienden los booleanos que representan la condicin sobre la cual queremos decidir.Si en un workspace escribimospepitaenergia&amp;gt;0ifTrue:[pepitacome:30]Pensando en trminos de objeto y mensaje (mensaje = selector + parmetros), qu est pasando ac?El objeto receptor del mensaje ifTrue: es el objeto que me devuelve pepita energia &amp;gt; 0, ese objeto puede ser true o false.Si el receptor es true queremos que el bloque [ pepita come: 30 ] se ejecute. Si el receptor es false NO queremos que el bloque [ pepita come: 30 ] se ejecute.Entonces el objeto que tiene la responsabilidad de saber si el bloque debe o no ejecutarse es el booleano receptor del mensaje ifTrue:.Siendo false la nica instancia de la clase False y true la nica instancia de la clase True, la implementacin del mtodo ifTrue: en cada una de las clases esTrue&amp;gt;&amp;gt;ifTrue:unBloque&quot;selfapuntaatrueentoncesqueremosqueseejecuteelbloque&quot;^unBloquevalue  False&amp;gt;&amp;gt;ifTrue:unBloque&quot;selfapuntaafalseentoncesNOqueremosqueseejecuteelbloque&quot;^nilO sea que las estructuras de control a las que estbamos acostumbrados por el paradigma estructurado, no son ms que mensajes polimrficos :smile:. Todo sigue las mismas reglas, objetos y mensajes."

} ,

{

"title"    : "Brownies",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/brownies.html",
"date"     : "",
"content"  : "Ingredientes:  Chocolate, 150 gramos  Manteca, 100 gramos  Azcar, casi una taza  Huevos, 2  Harina, 1/2 tazaPasos:  Ponga la manteca y el chocolate (cortado en trozos) dentro de una sartencita; derritalos en el horno.  Bata los huevos con el azcar hasta que estn bien cremosos y la superficie llena de globitos.  Agrgueles el chocolate derretido y tibio; contine batiendo hasta que vuelvan a formarse globitos.          NOTA: El chocolate tiene que estar bien mezclado con la manteca porque sino no queda homogneo. Esa es la parte mas delicada, que el chocolate no se queme ni se pegue (consejo, poner manteca abajo del chocolate para derretirlo).        Del mismo modo incorprele la harina.  Vierta en una asaderita enmantecada y enharinada de tamao tal que la preparacin quede de 2.5 cm de alto (mas o menos).  Cocine en horno bien caliente hasta que la superficie parezca craquele y la preparacin este firme pero hmeda.          NOTA: Esta es una parte sensible es cuando se cocina, porque si se cocina mucho queda duro. La teora dice que hay que dejarlo en el horno sin abrirlo como media hora, y debera primero como inflarse y despus baja y se craquela (ah ya se lo puede pinchar con un escarbadiente en el medio para ver si est cocinado, y tiene que quedar hmedo).        Retire del horno y deje enfriar en la asadera.Una receta alternativaMuy chocolatosa y muy hmeda  Chocolate cobertura, 450 gramos (ojo, no cobertura de chocolate)  Manteca, 170 gramos  Azcar, 340 gramos (con azcar comn se genera una costra ms gruesa, con impalpable se consigue una costra ms delicada).  Huevos, 2 (mezclar con el azcar sin batir, para que no quede esponjoso, es ms denso que un bizcochuelo)  Harina, 70 gramos (comn 0000, no leudante ni polvo de hornear)  Nueces, 100 gramos  Se le puede poner esencia de vainilla.Tambin se propone poner papel manteca en la placa. Horno bastante caliente (un poco ms que medio), de 20 a 25 minutos.Otra opcin ms tipo masita:  6 huevos  300 chocolate  200 manteca  170 harina  cacao  nueces, 100 gramos  esencia de vainillaOtra receta alternativaAKA la del asado familiero (los pasos son similares o iguales al anterior) Ingredientes:  4 huevos  1 taza y un toque ms de harina (preferentemente 0000, y comn)  2 tazas de azcar  150 gr de chocolate (recomiendo guila)  150 gr de mantecaPasos: 1 - Derretir manteca y chocolate en el microondas. 2 - Romper los huevos (oh si) en un bowl y mezclarlos muy bien con el azcar. 3 - Mezclar lo del paso 1. con lo del paso 2. Seguir mezclando. 4 - Agregar harina. Seguir mezclando, dije! 5 - En este paso agregaran nueces, almendras o lo que guste. 6 - Yo le pongo manteca y harina al molde porque da fiaca si se pega, aunque no debera pegotearse demasiado por la cantidad de manteca que lleva. 7 - Al horno! Depende el horno y soy muy inexperta, as que voy tanteando con el cuchillo. En general, cuando tiene la parte de arriba crocante y el cuchillo no sale chorreando, ya est bien."

} ,

{

"title"    : "C ++",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/c--.html",
"date"     : "",
"content"  : "Sobre el lenguaje  C++ (wikipedia)"

} ,

{

"title"    : "C",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/c.html",
"date"     : "",
"content"  : "Sobre el lenguaje:  C# (Wikipedia)Herramientas basadas en C#:  Mono"

} ,

{

"title"    : "Calculo del tipo de una funcion en haskell",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/calculo-del-tipo-de-una-funcion-en-haskell.html",
"date"     : "",
"content"  : "IntroduccionDado que el haskell es un lenguaje con Inferencia de tipos, no es necesario indicar el tipo de las funciones que construimos. A pesar de ello (o tal vez precisamente por ello) los tipos juegan un rol fundamental al programar en un lenguaje funcional (en particular en Haskell).El sistema de tipos de Haskell es muy estricto, bastante ms de lo que estamos acostumbrados los que venimos de la programacin orientada a objetos. Si bien en algunos casos puede ser molesto porque un tipado tan estricto como el de Haskell complica algunas operaciones sencillas como suele pasar con el clculo de un promedio, en la amplia mayora de los casos es bueno porque nos ayuda a detectar errores ms tempranamente.Esto obliga al programador a ser ms atento con los tipos de cada una de las funciones que programa o que utiliza. Los siguientes aspectos de tipado son importantes a tener en cuenta a la hora de entender de qu tipo son las funciones que definimos:La construccin de funciones a partir de funcionesEl paradigma funcional tiene como uno de sus pilares la posibilidad de construir funciones complejas a partir de combinar funciones ms simples (utilizando composicin, aplicacin parcial, orden superior, etc); para poder utilizar cualquiera de esas herramientas es necesario tener presente el tipo de las funciones que quiero combinar, por ejemplo:  Si quiero componer dos funciones f y g: es necesario que la imagen de f est incluida en el dominio de g (tal como aprendimos en matemtica).  Al aplicar una funcin de orden superior es necesario que matcheen los tipos de la funcin esperada con la funcin recibida.El polimorfismo paramtrico y las type classesUna funcin que tiene un tipo genrico al ser aplicada puede reducir su tipo, eso tambin es algo a tener en cuenta.Por ejemplo la funcin filter puede en principio procesar listas de cualquier tipo; en cambio una vez que yo le aplico el primer parmetro (el criterio de seleccin) ese tipo se restringe. Si el criterio fuera even, ese filtrado slo va a servir para listas de valores numricos, porque even restringe el tipo de los elementos de la lista a el tipo de lo que espera recibir, que es un nmero.A continuacin se describen paso a paso los ejemplos que permiten comprender el mecanismo de inferencia utilizado en el lenguaje Haskell.Ahora s: cmo inferimos el tipo de una funcin?Antes de poder evaluar el tipo de una hay que comprender cules son los tipos posibles de Haskell, eso est explicado en el artculo sobre Tipos de Haskell, y entender la regla bsica de tipado para una aplicacin: si x es Bool, entonces not x tambin es de tipo Bool, porque not :: Bool -&amp;gt; Bool; si x es de cualquier otro tipo not x no tipa.Funciones SimplesAl intentar calcular el tipo de una funcin, lo primero que tenemos que hacer es mirar las funciones que se usan dentro de su definicin y asegurarnos de saber de qu tipo son esas funciones. Luego las preguntas importantes son:  Cuntos parmetros recibe? Esto ayuda a ordenarnos, para saber cuntos huecos tenemos que llenar, que es esa cantidad + 1, por el tipo de retorno.  De qu tipo son esos parmetros? Esto se deduce en base al uso de los mismos en la definicin.  De qu tipo es lo que retorna? Esto se deduce en base a lo que retorna la funcin principal que es la de ms afuera o menor precedencia.Por ejemplo:nonexy=notx&amp;amp;&amp;amp;noty-- Sabemos que:-- not :: Bool -&amp;gt; Bool-- (&amp;amp;&amp;amp;) :: Bool -&amp;gt; Bool -&amp;gt; BoolLuego, para determinar el tipo de la funcin none podemos seguir los siguientes pasos:  Vemos que tiene dos parmetros (x e y), entonces podemos decir que su tipo tiene que tener la forma none :: ?? -&amp;gt; ?? -&amp;gt; ??, luego tendremos que calcular cules son esas incgnitas.  Analizamos el tipo de los parmetros:          Si x es utilizado como parmetro de la funcin not, podemos deducir que x no admite valores de cualquier tipo, slo pueden ser booleanos. Por ende: none :: Bool -&amp;gt; ?? -&amp;gt; ??.      Un razonamiento anlogo nos lleva a deducir que y tambin debe ser un valor booleano. Luego: none :: Bool -&amp;gt; Bool -&amp;gt; ??.        Finalmente, para saber el tipo de retorno:          Dado que x es Bool, entonces not x tambin es de tipo Bool, al igual que not y, lo cual es compatible con lo que espera el (&amp;amp;&amp;amp;) (o sea que la expresin notx&amp;amp;&amp;amp;noty tipa).      Lo que retorna la funcin (&amp;amp;&amp;amp;) al estar totalmente aplicada es Bool, y esa es la funcin principal, as que podemos afirmar que: none :: Bool -&amp;gt; Bool -&amp;gt; Bool.      En el ltimo paso podemos ver que en realidad para saber el tipo de no sera necesario mirar los parmetros de (&amp;amp;&amp;amp;), con saber su tipo de retorno sera suficiente. Sin embargo el anlisis es til para asegurarnos de que la funcin es correcta, y en caso de incurrir en errores de tipos, entender la causa.Por otro lado, en ejemplos ms complejos analizar los parmetros de las funciones usadas en la definicin ser indispensable para poder saber el tipo de retorno (por ejemplo en la presencia de polimorfismo).Ejemplo un poco mas heavySiendof x y z = (head y) &amp;gt; (map (&amp;#92;n -&amp;gt; n x) z)Vamos a intentar hacer la inferencia de tipos. Primero tenemos que ver qu es f? f es una funcin que tiene 3 parmetrosPonemos 3 flechitas simples: -&amp;gt;f::estoeseltipodex-&amp;gt;estoeseltipodey-&amp;gt;estoeseltipodez-&amp;gt;estoeseltipodeloquedevuelvefComo head :: [a] -&amp;gt; a, y tiene que ser una listaf::estoeseltipodex-&amp;gt;[???]-&amp;gt;estoeseltipodez-&amp;gt;estoeseltipodeloquedevuelvefComo map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b], z tiene q ser una lista porque se usa como su segundo parmetrof::estoeseltipodex-&amp;gt;[???]-&amp;gt;[???]-&amp;gt;estoeseltipodeloquedevuelvefLa funcin (&amp;#92;n -&amp;gt; n x) que es primer parmetro del map recibe como parmetro cada elemento de la lista z, cada uno de esos elementos va a ser n. Y como n se est aplicando a x podemos inferir que n es una funcin, por lo que z es una lista de funcionesf::estoeseltipodex-&amp;gt;[???]-&amp;gt;[??? -&amp;gt; ???]-&amp;gt;estoeseltipodeloquedevuelvefComo x es el parmetro de n podemos inferir que x pertenece al dominio de n, por ende si el su dominio es de tipo a entonces x es de tipo af::a-&amp;gt;[???]-&amp;gt;[a-&amp;gt;???]-&amp;gt;estoeseltipodeloquedevuelvefRespiremos profundo Asumimos que la imagen de las funciones de la lista es de tipo b, porque slo a partir de map (&amp;#92;n -&amp;gt; n x) z no vemos nada que lo restrinja a tipos concretos, ni que deba ser del mismo tipo que su dominio al cual denominamos af::a-&amp;gt;[???]-&amp;gt;[a-&amp;gt;b]-&amp;gt;estoeseltipodeloquedevuelvefAhora pensemos en los parmetros de la funcin (&amp;gt;) :: Ord a =&amp;gt; a -&amp;gt; a -&amp;gt; a que son (head y) y (map (&amp;#92;n -&amp;gt; n x) z):  Para poder comparar estas 2 cosas, ambas expresiones tienen que ser del mismo tipo  El map me da una lista de lo que devuelve (&amp;#92;n -&amp;gt; n x) sabemos que la imagen de (&amp;#92;n -&amp;gt; n x) es b entonces map (&amp;#92;n -&amp;gt; n x) z es de tipo [b]  Por ende (head y) tambin es de tipo [b]  Para que (head y) sea de tipo [b], y tiene que tener el tipo [[b]]  A su vez b debe pertenecer a la typeclass Ord (por la restriccin impuesta por la funcin (&amp;gt;))f::Ord b =&amp;gt; a-&amp;gt;[[b]]-&amp;gt;[a-&amp;gt;b]-&amp;gt;estoeseltipodeloquedevuelvefLa funcin principal de f es (&amp;gt;), como la imagen de (&amp;gt;) al estar totalmente aplicado es Bool la imagen de f es Boolf::Ord b =&amp;gt; a-&amp;gt;[[b]]-&amp;gt;[a-&amp;gt;b]-&amp;gt;BoolEjemplo de parcial para pensarTenemos esta funcin:fabcd=maximoSegun(cd).filter(==snda).mapbY sabemos que:*Main&amp;gt;:tmaximoSegunmaximoSegun::Orda1=&amp;gt;(a-&amp;gt;a1)-&amp;gt;[a]-&amp;gt;aCul es el tipo de f? Ayudita: pensar cul es la funcin principal en este ejemplo. Si no sabs bien qu est pasando, te recomendamos leer sobre notacin point-free."

} ,

{

"title"    : "Calidad de las pruebas unitarias",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/calidad-de-las-pruebas-unitarias.html",
"date"     : "",
"content"  : "IntroduccinLas pruebas unitarias son una herramienta fundamental en el desarrollo de software. Con ellas es posible:  Encarar refactors y correcciones con mayor seguridad  Mantener una especificacin viva del sistema  Confirmar la presencia de errores del sistema  Guiar nuestro diseo (si se emplea TDD)El poder de las pruebas radica en que son, justamente, cdigo (y no, por ejemplo, una especificacin en un bibliorato), lo cual las vuelve facilmente automatizables. Y como se encuentra normalmente junto con el cdigo productivo, los cambios en las especificaciones del mismo sern detectados rpidamente.Sin embargo, al tratarse de cdigo, un desarrollo poco cuidado de los casos de pruebas puede introducir problemas similares a los que surgen con el cdigo productivo en los siguiente aspectos:  Expresividad: las pruebas se son ilegibles, los programadores no entienden lo que se est probando  Correctitud: las pruebas no validan lo que deberan, o, peor, lo hacen de forma incorrecta o no repetible.  Nivel de abstraccin: las pruebas no tienen el nivel de abstraccin suficiente, y repiten lgica, lo cual lleva a contar con muchos necesarios para una buena cobertura, pero casos extremadamente parecidosLo cual llevar a severos problemas de mantenibilidad de los tests y a eslganes y prcticas tan aviesas como test que se rompe, test que se elimina. As nuestra preciada cobertura desaparecer sin avisar.La moraleja es entonces que el nivel de calidad de las pruebas unitarias debe ser similar al del cdigo productivo.Nivel de abstraccin justoTests abstractosAserciones personalizadasDelegar apropiadamente"

} ,

{

"title"    : "Cannot construct the infinite type",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/cannot-construct-the-infinite-type.html",
"date"     : "",
"content"  : "Advertecia: esto es un borradorEl problemaQue hace la siguiente funcin?autoAplicarfuncion=funcionfuncionOK, y que tipo tiene?autoAplicar::(a-&amp;gt;a)-&amp;gt;(a-&amp;gt;a)??Si lo cargamosOccurscheck:cannotconstructtheinfinitetype:a=a-&amp;gt;aWhengeneralisingthetype(s)for`f&#39;A que intenta generalizar?1.porxx,xesunfuncion2.xselepasaunargumento,esunafuncionde&quot;unparametro&quot;3.autoAplicar::(?-&amp;gt;?)-&amp;gt;?4.porxx,xtienequesercapazderecibirunafunciondetipoxporparmetro.Entoncessix::a-&amp;gt;?,a==a-&amp;gt;?5.entoncesx::a-&amp;gt;?==(a-&amp;gt;?)-&amp;gt;?==((a-&amp;gt;?)-&amp;gt;?)-&amp;gt;?==(((a-&amp;gt;?)-&amp;gt;?)-&amp;gt;?)-&amp;gt;?.....Otra vuelta de tuercaSin embargo. si pudieramos desactivar el chequeo de tipos. esto tiene sentido?autoAplicarididididS!Es ms, si slo lo desactivaramos para autoAplicar:autoAplicarid&amp;lt;-notipaidid&amp;lt;-tipa!!idMoraleja: el sistema de tipos puede rechazar programas vlidostype vs data/newtype"

} ,

{

"title"    : "Cantidad de parametros de una funcion en haskell",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/cantidad-de-parametros-de-una-funcion-en-haskell.html",
"date"     : "",
"content"  : "  REDIRECCIN Notacin point-free"

} ,

{

"title"    : "Categorias",
"category" : "",
"tags"     : "",
"url"      : "/wiki/internal/categories.html",
"date"     : "",
"content"  : "Descripcin de categoriasMotivacinTODO"

} ,

{

"title"    : "Ciclo de vida de un objeto",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ciclo-de-vida-de-un-objeto.html",
"date"     : "",
"content"  : "Es importante reconocer el ciclo de vida de un objeto, ya que el estado que puede guardar un objeto depende de eso.Tipos de ciclo de vida puede haber mucho, a modo de ejemplo podemos mencionar tres muy comunes:  Objetos permanentes, singletons, servicios. Son objetos que duran toda la vida del sistema (con variantes). En general nacen con el sistema y no pueden ser agregados nuevos, son compartidos por todos los usuarios del sistema. Estos son los que tienen el ciclo de vida ms largo y no pueden tener ningn tipo de estado conversacional.  Objetos persistentes o entidades: Son los que representan los datos que guardamos de nuestro negocio, las entidades permanentes, por ejemplo en un video club me guardo los socios, las pelculas. Tpicamente el ciclo de vida es darlos de alta, modificarlos, eventualmente se pueden dar de baja. A veces la baja es lgica.  Objetos transientes o procesos: Son los que guardan informacin sobre un proceso que se est llevando a cabo. El proceso puede ser tan corto como el procesamiento de un evento de teclado o mouse o un proceso de negocio que dura meses. Sin embargo los objetos persistentes no deberan guardar informacin de un proceso puntual, ya que esto es fuente de errores. En general los objetos con ciclos de vida ms largos no pueden tener referencias a objetos de ciclo de vida ms corto puntuales. Una vez terminados, estos objetos a veces se guardan como histrico. Un objeto persistente s puede tener referencia a los procesos histricos o bien a los procesos en curso.En una aplicacin web suelen aparecer objetos cuyo ciclo de vida est asociado a un request o a una session.Esto es anlogo a un anlisis de cardinalidad o normalizacin, se podra extender por ese lado."

} ,

{

"title"    : "Clase abstracta vs interfaces",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/clase-abstracta-vs-interfaces.html",
"date"     : "",
"content"  : "  REDIRECCIN Clase abstracta vs interfaz"

} ,

{

"title"    : "Clase abstracta vs interfaz",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/clase-abstracta-vs-interfaz.html",
"date"     : "",
"content"  : "DefinicionesClase abstractaUna clase abstracta es una clase que no tiene instancias. Su utilidad consiste en proveer estructura y comportamiento comn a todas las subclases que heredan de ella.publicabstractclassFigura{finalpublicbooleanmenorQue(FiguraotraFigura){returnthis.getArea()&amp;lt;otraFigura.getArea();}publicabstractdoublegetArea();publicabstractdoublegetPerimetro();}Si tenemos la clase Rectngulo, Crculo, etc. que heredan de Figura todas se benefician del comportamiento default para el mtodo menorQue que permite comparar una figura con otra. Por otra parte los mtodos que resuelven el rea y el permetro son abstractos, no se provee una implementacin sino que deben ser codificados por las subclases.InterfazUna interfaz permite especificar un contrato (formado por un conjunto de operaciones). Las clases que adhieren a ese contrato deben implementar esos mtodos./**Implementingthisinterfaceallowsanobjecttobethetargetof*the&quot;foreach&quot;statement.*@since1.5*/publicinterfaceIterable&amp;lt;T&amp;gt;{/***ReturnsaniteratoroverasetofelementsoftypeT.**@returnanIterator.*/Iterator&amp;lt;T&amp;gt;iterator();}En este ejemplo del lenguaje Java las clases que implementen la interfaz Iterable deben definir un mtodo iterator(). Todos los mtodos son abstractos, ya que la interfaz slo declara la firma de cada uno de los mtodos: nombre, parmetros que recibe, tipo que devuelve y excepciones que puede arrojar.ComparacinTanto la clase abstracta como la interfaz definen un tipo, pero mientras que el objetivo al definir una clase abstracta es reutilizar comportamiento, en la interfaz la idea principal es posibilitar el polimorfismo entre clases que no tienen cosas en comn. Dependiendo del lenguaje, es posible que tengamos restricciones para crear mtodos o atributos sobre una interfaz.Recordemos que en la mayora de las tecnologas se trabaja nicamente con herencia simple (solamente es posible heredar de una nica superclase), mientras que una clase puede tener mltiples tipos (implementar diferentes interfaces). Entonces en esos casos donde la herencia es una herramienta rgida, que permite una sola chance para ordenar la jerarqua de objetos, la interfaz puede resultar una alternativa viable."

} ,

{

"title"    : "Clases anonimas en java",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/clases-anonimas-en-java.html",
"date"     : "",
"content"  : "Motivacin: ausencia de bloquesLa motivacin ms importante para entender las clases annimas es la ausencia  bloques (o closures) en el lenguaje Java. Java 8 recin es la primer versin que introduce un mecanismo de bloques (ver Lambdas_en_Java_8)Veamos un ejemplo:En smalltalk para seleccionar los elementos de una coleccin que cumplen cierta condicin enviamos el mensaje select: Por ejemplo, para obtener las personas mayores de 18 aos haramos:personasselect:[:p|pedad&amp;gt;18]Ejemplo en Java Sin clases annimasCmo haramos eso en java ?Primero que nada no existe un mtodo select ni nada parecido en las colecciones (interfaz Collection). As que tenemos que hacer el mtodo nosotros.Hacemos un mtodo esttico como una utilidad, al que le tenemos que pasar la coleccin como parmetro.publicclassCollectionUtils{publicstaticCollection`select(Collection``coleccion,&amp;lt;&amp;lt;&amp;lt;&amp;lt;condicion&amp;gt;&amp;gt;&amp;gt;&amp;gt;){``...``}``}`Obviamente tambin tenemos que pasarle de alguna forma la condicin !Ahora bien, en Java no existen los bloques o closures, con lo cual, la nica opcin que tenemos es pasar un objeto. As que tenemos que modelar el concepto de Condicion.publicinterfaceCondicion{publicbooleancumple(Objectobj);}Como la condicin es lo que va a tener que implementar el usuario de este mtodo, es decir quien quiera filtrar una coleccin, la definimos como una Interfaz de java, para no poner una restriccin sobre una superclase (la otra opcin sera que fuera una clase abstracta).            Fjense que es un objeto que tiene una [http://en.wikipedia.org/wiki/Single_responsibility_principle      [nica responsabilidad]] bien identificada. Dado un objeto que le paso por parmetro me sabe decir si cumple o no con la condicin.      Entonces hacemos una primer implementacin de nuestro ejemplo de filtrar mayores de 18 creando una clase normal que implemente esa interfaz.classMayorDe18CondicionimplementsCondicion{@Overridepublicbooleancumple(Objectobj){return((Persona)obj).getEdad()&amp;gt;18;}}Y para filtrar una coleccinpersonas=...CollectionUtils.select(personas,newMayorDe18Condicion());Incluso si usamos los imports estticos de Java, podemos importar mtodos estticos de una clase, para no tener que llamarlos con el nombre de la clase, punto, y el mtodo. Quedaraimportstaticorg.uqbar-project.CollectionUtils.select;...personas=...select(personas,newMayorDe18Condicion());Ok, igualmente sigue siendo mucho ms burocrtico y pesado que la implementacin en smalltalk.Igualmente, lo que ms nos molesta es que tenemos que crear una nueva clase por cada condicin por la que querramos filtrar. Es bastante molesto eso. Ejemplo, queremos filtrar las personas casadas..classEsCasadaCondicionimplementsCondicion{@Overridepublicbooleancumple(Objectobj){return((Persona)obj).esCasada();}}Y luegocasados=select(personas,newEsCasadaCondicion());Accediendo a referencias de otro Objeto (sin annimas)Qu pasa si ahora queremos desde la condicin utilizar una estado interno del objeto que est filtrando. Por ejemplo, desde una Empresa, queremos obtener sus empleados. Para eso, filtramos de la coleccin de personas a aquellas que trabajen para esta empresa.publicclassEmpresa{publicCollectiongetEmpleados(){returnselect(personas,newTrabajaEnCondicion(this));}}Como se ve necesitamos pasarle la empresa a la condicin. Es una condicin que tiene estado. En este caso se pasa a s mismo todo el objeto Empresa.classTrabajaEnCondicionimplementsCondicion{privateEmpresaempresa;publicTrabajaEnCondicion(Empresaempresa){this.empresa=empresa;}@Overridepublicbooleancumple(Objectobj){return((Persona)obj).getEmpleador()==this.empresa;}}Cada vez ms cdigo ! :S Necesitamos declarar el atributo (estado interno) y recibirlo en el constructor.Bastante burocrtico nuvamente. En smalltalk seraEmpresa&amp;gt;&amp;gt;empleados^personasselect:[:p|(pempleador)=self]Accediendo a referencias locales (sin annimas)Introducimos otra variante, otra situacin normal.Queremos poder preguntarle a la empresa cuales son todos los empleados con ms de x aos. Es decir, no tenemos un valor nico y fijo como antes, de 18, sino que lo recibimos como parmetro.publicCollectiongetEmpleadosMayoresA(intanios){returnselect(this.getEmpleados(),newMayoresA(anios));}De nuevo, se ve ac que tenemos que pasarle todo el estado que necesite la condicin, como parmetro en la construccin. En este caso es un parmetro. Podra ser incluso una variable local.Aparece la Clase AnnimaDe lo anterior podemos concluir que la Condicin en general va a ser un objetito ms bien descartable, que lo uso para filtrar una coleccin en particular y luego lo descarto (ms an si tiene estado, no puedo reutilizar la condicin mayor a &amp;lt;23&amp;gt; si luego tengo que buscar los mayores a &amp;lt;50&amp;gt;).Adems, de que vamos a tener muchsimas clases implementaciones, segn cuntos criterios de filtrado tengamos en el sistema.Esto es porque en realidad lo que necesitaramos es expresar un pedacito de cdigo nada ms.Bien, como java no tiene bloques, para apalear un poco este problema, introduce la idea de clase annima interna (del ingls anonymous inner classes). La idea es que en el cuerpo de un mtodo pueda escribir una clase ah mismo, inline, es decir sin necesidad de hacerlo en otro archivo. Como voy a implementar con esto un pedacito de cdigo descartable, no hace falta que le ponga nombre a esta clase.Entonces, dirctamente instancio la interfaz (o clase abstracta), abro llaves, y ah mismo la implemento.Ejemplo:publicCollectiongetMayoresDe18(){CondicionmayoresA18=newCondicion(){@Overridepublicbooleancumple(Objectobj){return((Persona)obj).getEdad()&amp;gt;18;}};returnselect(personas,mayoresA23);}Este ejemplo es equivalente al primero que hicimos. Ntese que estamos haciendovariable=La sintaxis esnewInterface(){//implementacindelainterface}Eso me da un objeto, que en este primer ejemplo lo asignamos a una variable local. Podramos incluso no usar la variable local y dirctamente crearla para pasarla por parmetro al select.publicCollectiongetMayoresDe18(){returnselect(personas,newCondicion(){@Overridepublicbooleancumple(Objectobj){return((Persona)obj).getEdad()&amp;gt;18;}});}Fjense que es lo mismo, simplemente metimos todo el cdigo desde el new Cond hasta el cierre de llaves de la calse, en el lugar del parmetro.As, si lo miran con cario (mucho cario), se parece un poco a la implementacin con bloques.Ojo, las reglas son las mismas que cuando definimos una clase en otro archivo. Como que:  nos fuerza a implementar todos los mtodos abstractos.  podemos sobrescribir un mtodo (en caso de hacer una subclase annima de una clase abstracta).  podemos llamar a super (pasa clase abstracta tambin).  etc.Sin embargo, a diferencia de una clase normal tiene algunas particularidades.Acceso a la instancia contenedora (Clase.this)La clase annima adems de poder acceder a su estado interno y mandarle mensajes a los parmetros que recibe en mtodos, ve y puede tambin acceder al estado interno y mandarle mensajes a la instancia de la clase que la cre (es decir donde est el cdigo definido).Rehagamos el ejemplo de la empresapublicclassEmpresa{publicCollectiongetEmpleados(){returnselect(personas,newCondicion(){@Overridepublicbooleancumple(Objectobj){return((Persona)obj).getEmpleador()==Empresa.this;}});}}Ven que ac estamos necesitamos comparar el empleador de la persona con la nosotros mismos. El problema es que estamos teniendo cdigo dentro de una clase (annima de Condicion) que est dentro de otra clase (Empresa). Entonces, no existe un nico this. Tenemos dos. Como regla para toda clase annima  this: se refiere al objeto de la clase annima, en nuestro caso sera la instancia de Condicion.  ClaseContenedora.this: se refiere al objeto instancia de la clase contenedora de esta annima. En nuestro caso la Empresa.As podramos mandarle mensajes tambin...returnEmpresa.this.esExEmpleado((Persona)obj);...Donde esExEmpleado(Persona p) sera un mtodo de la Empresa.O tambin accederle a una variable de instancia...return((Personap)obj).getEmpleador().getNombre().equals(Empresa.this.nombre);...Acceso a variables locales (final)Existe una particularidad de la implementacin de Java, para recrear el ltimo caso en que usbamos un parmetro edad para fitrar.Si escribieramos eso as:publicCollectiongetMayoresA(intedad){returnselect(personas,newCondicion(){@Overridepublicbooleancumple(Objectobj){return((Persona)obj).getEdad()&amp;gt;edad;}});}Tendrmos un error de compilacin al hacer &amp;gt; edad, es decir al intentar acceder desde el cdigo de la clase annima al parmetro. Esto es porque la clase annima si bien tiene acceso al scope de variables del mtodo, solo puede acceder a aquellas variables que sean final, es decir que sean constantes, que no puedan cambiar. Esto es por una limitacin de java. La solucin sera agregar el modificador final al parmetropublicCollectiongetMayoresA(finalintedad){...Lo mismo sucede con referencias localespublicCollectiongetMayoresAlPromedioDeEdad(){finalintpromedioDeEdad=this.calcularPromedioDeEdad();returnselect(personas,newCondicion(){@Overridepublicbooleancumple(Objectobj){return((Persona)obj).getEdad()&amp;gt;promedioDeEdad;}});}Ntese que la referencia local promedioDeEdad est declarada como final.Y si queremos cambiar el valor de la variable local (no puedo hacerla final) ??Bien, se puede resolver, sin embargo introduce burocracia. Para no cambiar el dominio vamos a tener que caer en un ejemplo de manejo de estructura.Supongamos que queremos obtener a un diccionario o Mapa con los empleados asociados a su edad expresada en decadas. Ej:20&amp;gt;Juan(23),Jose(27),Maria(21)30&amp;gt;Yesi(30),Nico(36)40&amp;gt;Carlos(48)...Haramos una iteracin entre 20 y 70, por ejemplo, filtrando los empleados que tengan edad &amp;gt;= i y edad &amp;lt;= i + 9publicMap&amp;lt;Integer, Collection&amp;gt;getEmpleadosPorEdad(){Map&amp;lt;Integer, Collection&amp;gt;empleadosPorEdades=newHashMap&amp;lt;Integer,Collection&amp;gt;();for(inti=20;i&amp;lt;=70;i+=10){CollectionempleadosEncontrados=select(this.getEmpleados(),newCondicion(){@Overridepublicbooleancumple(Objectobj){intedad=((Persona)obj).getEdad();returnedad&amp;gt;=i&amp;amp;&amp;amp;edad&amp;lt;=(i+9)}});empleadosPorEdades.put(i,empleadosEncontrados);}}Bien, esto no compilara, porque desde la clase annima estamos usando la variable local i, que no es final. Si procedemos a ponerle final en la declaracin, ahora no va a compilar el for en la parte del i+=10 porque no se puede modificar una variable final. Entonces, estamos en una encrucijada. La forma de resolverla, es mover la clase annima a otro mtodo, donde la i s la podemos declarar como final. Para esto podemos extraer el filtrado a otro mtodo, y desde este pasarle la i como parmetro.publicMap&amp;lt;Integer, Collection&amp;gt;getEmpleadosPorEdad(){Map&amp;lt;Integer, Collection&amp;gt;empleadosPorEdades=newHashMap&amp;lt;Integer,Collection&amp;gt;();for(inti=20;i&amp;lt;=70;i+=10){CollectionempleadosEncontrados=this.getEmpleadosEnLaDecadaDel(i);empleadosPorEdades.put(i,empleadosEncontrados);}}Y el nuevo mtodo:publicCollectiongetEmpleadosEnLaDecadaDel(finalinti){returnselect(this.getEmpleados(),newCondicion(){@Overridepublicbooleancumple(Objectobj){intedad=((Persona)obj).getEdad();returnedad&amp;gt;=i&amp;amp;&amp;amp;edad&amp;lt;=(i+9)}});}Como ven el parmetro i nunca cambia en este mtodo, as que s podemos declararlo como final. Mientras que en el for puede seguir siendo no final."

} ,

{

"title"    : "Clases vs instancias",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/clases-vs-instancias.html",
"date"     : "",
"content"  : "En los lenguajes orientados a objetos que tienen clases (como Java, Xtend, Groovy, Scala, Smalltalk, Ruby, etc.) es frecuente como diseadores preguntarnos si un determinado requerimiento se puede resolver con instancias o con clases.Ejemplo: tenemos tareas en un proyecto, a cada tarea le corresponden distintos impuestos  el impuesto A es un 3% del costo de la tarea  el impuesto B representa un 2% del costo de la tarea  el impuesto C es un 1,5% del costo de la tareaResolvemos el valor del impuesto Ametodovalor(Tareatarea)tarea.costo*0.03fin&amp;lt;/code&amp;gt;Y a continuacin el valor del impuesto Bmetodovalor(Tareatarea)tarea.costo*0.02fin&amp;lt;/code&amp;gt;Pero si analizamos con detenimiento veremos que los 3 impuestos comparten el mismo clculo: la nica diferencia es el % que se le aplica al costo de una tarea. No tiene sentido armar una jerarqua de clases para los impuestos:  Impuesto          Impuesto A, mtodo valor(Tarea)      Impuesto B, mtodo valor(Tarea)      Impuesto C, mtodo valor(Tarea)      Es mucho ms conveniente generar una nica abstraccin impuesto que tenga el porcentaje como atributo:ClaseImpuestoatributoporcentajemetodovalor(Tareatarea)tarea.costo*porcentajefin&amp;lt;/code&amp;gt;Y no necesitamos tener las clases Impuesto A, B y C: si existieran, slo se diferenciarian en el valor que almacenan en el porcentaje al construirse.Conviene trabajar con clases cuando hay comportamiento diferencial entre ellos, por el contrario cuando no hay diferencias en el comportamiento es preferible modelar esa solucin con objetos. Una clase que no define comportamiento o atributos es sospechosa y como diseadores deberamos justificar una abstraccin de esta naturaleza.Si apareciera un Impuesto D, que se calcula como el mximo entre $ 400 y el 5% del costo de la tarea, entonces s tendra justificativo crear una nueva clase para modelar este impuesto, dado que el clculo es diferente."

} ,

{

"title"    : "Clases",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/clases.html",
"date"     : "",
"content"  : "Motivacin y ProblemaPor qu necesito clases? Porque tengo varios objetos sospechosamente parecidos. Es decir,  El comportamiento de varios objetos es igual. Es decir, no solo entienden los mismos mensajes, sino que tienen los mismos mtodos (exactamente el mismo cdigo).  sus atributos son los mismos, pero el estado interno es diferente. Es decir, si bien tienen los mismos atributos, stos pueden apunta a diferentes objetos.  su identidad es diferente. Es decir, incluso si se comportan igual y se encuentran en el mismo estado, no son el mismo objeto.En conclusin, necesitamos una abstraccin donde pongamos el cdigo y los atributos en comn de todos stos objetos. sta abstraccin es la clase, y cada objeto que se comporte igual (aunque tenga diferente estado interno) va a ser una instancia de esa clase.Podemos pensar a las clases como Especies y a las instancias como individuos de esas especies            Especie (Clase)      Individuo (instancia)                  Leon      simba                    nala                    mufasa              Hiena      shenzi                    banzai                    ed              Jabal      pumba              Zuricata      timon      Cosas a recordar  Todo objeto es siempre instancia de una y slo una clase.  No se puede cambiar la clase de un objeto una vez creado.  Los mtodos y atributos declarados en una clase son para sus instancias.Method LookupSi el cdigo est en la clase, entonces, Cmo responde ahora un objeto a un mensaje? Con el Method Lookup. El method lookup es el mecanismo por el cual un objeto va a buscar el mtodo correspondiente a su clase. (si no lo encuentra en su clase, no lo entiende). Revisar Herencia para conocer el Method Lookup completo.Alto! Quin soy yo?Si mi cdigo ahora no est en mi objeto, sino en una clase, Quin es self??selfapuntasiempreal objeto receptor del mensaje.En ste envo de mensaje:simba.rugi()Si el mtodo rugi() de la clase Leon usa self internamente, simba es self.De dnde salen las instancias?Si definimos una clase, por ejemplo Leon, y queremos obtener a simba que es una instancia de Leon para poder mandarle mensajes, necesitamos crear la instancia a partir de la clase Leon. O sea que la clase tiene un segundo rol importante, no sirve slo para definir el comportamiento y los atributos, tambin sirve para crear los objetos que luego usaremos en nuestro programa.Dependiendo del lenguaje, esto puede hacerse de formas distintas.En lenguajes en los cuales las clases son objetos, como es el caso de Smalltalk o Ruby por ejemplo, esto se hace mandndole un mensaje a la clase correspondiente. Por ejemplo:simba:=Leonnew.mufasa:=Leonnew.simbatuPapaEs:mufasa.En otros lenguajes, como en Wollok o Java, las clases no son objetos y para crear instancias se utilizan herramientas especficas para la construccin de objetos. Por ejemplo:varsimba=newLeon()varmufasa=newLeon()simba.tuPapaEs(mufasa)Es importante entender que en las lneas del estilo unaVar:=UnaClasenew. o varunaVar=newUnaClase() pasan dos cosas, en el orden que se indica:  se crea un objeto instancia de la clase UnaClase.  se hace que la variable unaVar haga referencia al objeto recin creado.Puede perfectamente instanciarse una clase y no asignar una variable en la misma lnea con el nuevo objeto, siempre depende de lo que se est tratando de hacer. Por ejemplo podra crearse un objeto dentro de un mtodo y retornarlo directamente, o crearlo para mandarle un mensaje directamente.Si una instancia no es referenciada desde ningn lado, la misma ya no podr ser usada, ya que nadie va a poder mandarle mensajes. Sin embargo no debemos preocuparnos por la memoria que ocupen estos objetos no olvidados, ya que ese trabajo es del Garbage Collector.ConclusinUna clase sirve de fbrica de objetos. Modela las abstracciones de mi dominio (los conceptos que nos interesan), permitindome definir el comportamiento y los atributos de las instancias.Dependiendo del lenguaje las clases pueden ser un objeto ms que entiende mensajes pensados para ellas (este es el caso de Smalltalk, ver Variables y mtodos de clase) o una construccin distinta del lenguaje que slo existe para declarar el comportamiento de los objetos y darnos una forma de obtener nuevas instancias mediante el uso de herramientas de instanciacin (no envos de mensajes) como sucede en Wollok.Lo importante de todo esto es que las clases no son construcciones centrales como s son los objetos, ya que impactan slo a la definicin y creacin de los mismo, pero para el uso general del sistema, trabajamos de la misma forma que si las clases no estuvieran ah. Es por eso que es en estos puntos en donde ms difieren los lenguajes existentes, sin embargo la idea de objeto - mensaje se mantiene."

} ,

{

"title"    : "Coeficiente de felicidad docente",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/coeficiente-de-felicidad-docente.html",
"date"     : "",
"content"  : "El Coeficiente de Felicidad Docente, a.k.a. CFD, mide la felicidad producida en una persona que se dedica a la enseanza en funcin de la respuesta obtenida de parte de sus pupilos.Diversos factores pueden hacer variar este ndice. Algunos ejemplos:  Luego de machacar durante varias clases sobre la sintaxis de Smalltalk, resaltando que un envo de un mensaje SIEMPRE tiene que tener un objeto receptor, un ejercicio se entrega con una lnea que dice vola: 5. Al haber sido completamente ignorado el aviso del docente y omitirse el objeto receptor en esa lnea, el CFD se cae a pique.  En un ejercicio en el que se pide resolver un problema X, un alumno logra combinar los conceptos vistos en clase para resolverlo. No contento con eso, considera que puede haber una mejor forma de resolver el problema porque su solucin no le parece elegante y consulta al docente para que este lo oriente. El CFD cotiza en alza, debido a que el docente puede detectar que lo transmitido en clase fue asimilado por el alumno y, adems, porque nota que el mismo intenta mejorar lo realizado y no slo zafar el ejercicio."

} ,

{

"title"    : "Comidas",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/comidas.html",
"date"     : "",
"content"  : "Salado  Empanadas          Relleno de carne      Relleno Caprese      Relleno Dale (las Sin Queso)        Masa de pizza  Fideos  Palitos de queso  Salsa Jack Daniels  Bagna Cauda  Locro  Guiso de LentejasDulce  Brownies  Panqueques"

} ,

{

"title"    : "Como bajar y correr un ejemplo en wicket",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/como-bajar-y-correr-un-ejemplo-en-wicket.html",
"date"     : "",
"content"  : "Primer proyecto con Wicket  Bajar alguno de los ejemplos, por ejemplo ste  Importarlo como Maven ProjectIncorporar la app al web server  Posicionarse en la solapa Servers: Window &amp;gt; Show view &amp;gt; Other Server  Luego botn derecho sobre Server &amp;gt; Add and Remove  Pasar la aplicacin del container Available a Configured (seleccionarla y luego presionar el botn Add&amp;gt;)  Finish  Reiniciar el servidor (botn derecho &amp;gt; Restart in Debug o Restart)Acceder desde el browser a la direccionhttp://localhost:8080/aplicacion-web-en-cuestion/Links relacionados  Temario Algoritmos III"

} ,

{

"title"    : "Como crear una subclase en squeak",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/como-crear-una-subclase-en-squeak.html",
"date"     : "",
"content"  : "Para crear una subclase hay dos formas:Forma A  En un class browser  System Browser ctrl-click (click derecho en Pharo) sobre la superclase, les abre un men contextual. Ah more-&amp;gt;subclass template (en Pharo sin el more..).  Les va a aparecer un texto parecido a este (en mi ejemplo tom como superclase a la clase Ave):Avesubclass:#NameOfSubclassinstanceVariableNames:&#39;&#39;classVariableNames:&#39;&#39;poolDictionaries:&#39;&#39;category:&#39;PDEP-EjemploGolondrinas&#39;  Reemplazar #NameOfSubclass por el nombre de la clase que quieran (ojo hay que dejar el #)  Pueden agregar variables de instancia y de clase (entre comillas simples y separadas por espacios).  Elegir la categora que queran, por defecto les va a aparecer la misma categora que la superclase (les conviene poner todas sus clases en una categora propia (o un varias categoras propias si quieren diferenciarlas de alguna manera). Si ponen un nombre de categora nuevo les va a crear la categora junto con la clase.  Salvar (ctrl+s o ctrl+click, accept (*))Si ven bien los pasos 3-5 son para cualquier clase, la gran diferencia es que para crear una clase comn dice Object en lugar de Ave (es decir, todas nuestras clases son subclases de Object, salvo que yo le indique alguna otra ms especfica).Forma BUna forma que puede resultar ms sencilla es directamente copiar el texto que est arriba en la seccin de cdigo del Class Browser (eso reemplaza los puntos 1 y 2) y luego modificarlo y salvarlo (igual a los pasos 3-6).(Asegrense de borrar todo lo que haya en la seccin de cdigo antes, es decir, tiene que ser el nico texto en ese lugar, lo modifican y lo graban, voil).  Una cosa que puede resultar difcil del squeak es que hay que usar siempre ctrl-click en lugar de lo que los usuarios windows estn acostumbrados como click derecho para configurar eso: Men Ppal -&amp;gt; system preferences -&amp;gt; preferences -&amp;gt; escriben en el campito de texto swap y le tildan la opcion swap mouse buttons -&amp;gt; save."

} ,

{

"title"    : "Como contribuir a la wiki",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/como-empezar.html",
"date"     : "",
"content"  : "IntroduccinEsta seccin describe brevemente la sintaxis de markdown que se usa en la wiki, adems de mostrar algunas cosas extras que componen a la wiki.Para hacer modificaciones simples con un articulo, basta con modificar desde github directamente el ariculo en cuestion.En caso de que se desee modificarLa carpeta wiki/articles contiene todos los articulos de la wiki, incluyendo esta seccin.RequerimientosPara testear localmente se necesitan los siguientes requerimientos previos.  Ruby 2.5.0  Bundler  yarn  imagemagick  pythonPara instalar las dependencias de ruby adicionales ejecutar:bundle installEste proyecto utiliza Jekyll, para levantar una instancia local una vez instaladas las dependencias habr que instalarlas dependencias adicionales mediante yarn:yarn installUna vez ya resueltas todas las dependencias se puede levantar el entorno mediante:jekyll s --iEsto arma un build local y una vez completado este proceso levanta localmente la instancia. De aqu en ms se podr hacer modificaciones localmente, y el servidor actualizar los cambios automticamente (es lo que hace el flag --i de incremental).Tener en cuenta que ante cualquier modificacin fuera de los artculos, como los plugins, se necesitar ejecutar un nuevo build de jekyll. (El servidor se levantar por default en localhost:4000)ModificandoUna vez levantado localmente nuestra instancia de jekyll con la wiki, podremos modificar los articulos que componenla wiki en s. Todos los articulos estn situados en  ./wiki/articles, se pueden tener subdirectorios tambien, comopor ejemplo .wiki/articles/sub/Subpage.htmlTodos los articulos tienen que tener el header yml:---layout: articletitle: &amp;lt;title&amp;gt;---Despues de eso el formato de los articulos estan en markdown, todos los articulos deben tener el layout article El campo title es utilizado para Describir el titulo principal en el artculo.Syntaxis adicionalLinkeando artculosSe puede linkear un artculo de dos maneras  Se puede utilizar el plugin link_article:         &amp;lt;a class=&quot;link article_link&quot; href=&quot;/wiki/articles/como-empezar.html&quot;&amp;gt;como empezar&amp;lt;/a&amp;gt;        O Hacerlo en markdown directamente:[The guide for newbies](/wiki/articles/como-empezar.html)Ambos enfoques generan el mismo html, solamente que en el primero se omite la extensin y los guiones medios (-).Embebiendo gistsSe puede embeber gists publicos de la siguiente manera:gist bossiernesto/97285bb96f1da185858af7de5cdee978Esto genera:#### Esto es un gist de pruebaBibliografaSe puede citar referencias mediante la sintaxis    cite &quot;nombre de cita&quot;esto genera:(Burmako)Ahora existe un repositorio central de bibliografia en _bibliography/wikibiblio.bib. Todas las referencias deben estaranotadas con una sintaxis BibTex, la misma se puede obtener en algun sitio que nos brinde este tipo de formato como CiteSeerxSi se quiere mostrar toda la bibliografa del repositorio se tiene que usar la anotacin bibliographyFlanagan, David, and Yukihiro Matsumoto. The Ruby Programming Language. OReilly Media, 2008.Burmako, Eugene. Scala Macros: Let Our Powers Combine! On How Rich Syntax and Static Types Work with Metaprogramming.Ahora si queremos solo mostrar las bibliografa citada, utilizaremos la anotacin bibliography --citedBurmako, Eugene. Scala Macros: Let Our Powers Combine! On How Rich Syntax and Static Types Work with Metaprogramming.Para mayores referencias ver la siguiente seccinEmbeber markdown remotoSe puede embeber markdown en formato raw de un repositorio externo de la organizacion mediante la notacin` remote_markdown `  Cuando se utilice esta funcionalidad, verificar previamente que renderiza el link y el origen del mismo. Se recomienda  que sea de un sitio como Github o Gitlab y que sea mediante una url por https.Embebiendo cdigoSe puede incluir cdigo con el triple backtrick. Esta wiki usa highlightjs para syntax highlighting. highlightjs tiene muchos esquemas y aqu hay algunos ejemplos.Hay que tener en cuenta que se debe configurar el idioma cuando se utiliza la sintaxis de triple &amp;#92;`. El resaltado no funciona si no hay un idioma especificado.Ejemplo:    class Bleh        def a(b)            b + 1        end    endAlertasHay distinto tipos de alertas:  secondary  info  success  warning  alertCada tipo de alerta tiene un color distinto, la sintaxis es la siguiente:  &quot;&amp;lt;div data-alert class=&#39;alert-box secondary&#39; tabindex=&#39;0&#39; aria-live=&#39;assertive&#39; role=&#39;alertdialog&#39;&amp;gt;&quot;    your text  &quot;&amp;lt;/div&amp;gt;&quot;Donde &amp;lt;kind&amp;gt; puede ser secondary, info, success , warning oralert.Se agrega ahora el readme de jekyll-scholar con las referenciasJekyll-ScholarJekyll-Scholar is for all the academic bloggers out there. It is a set ofextensions to Jekyll, the awesome, blog aware, staticsite generator; it formats your bibliographies and reading lists for the weband gives your blog posts citation super-powers.Already using Jekyll-Scholar and interested to help out? Please get in touch with us if you would like to become a maintainer!Installation$ [sudo] gem install jekyll-scholarOr add it to your Gemfile:gem &#39;jekyll-scholar&#39;, group: :jekyll_pluginsGithub PagesNote that it is not possible to use this plugin with the  default Github pages workflow.Github does not allow any but a few select plugins to run for security reasons,and Jekyll-Scholar is not among them.You will have to generate your site locally and push the results to the master resp. gh-pagesbranch of your site repository.You can keep sources, configuration and plugins in a separate branch; see e.g.  herefor details.Alternatively, you can use a Github Actions called jekyll-action to deploy your site to Github PagesUsageInstall and setup a new Jekyll directory (see theJekyll-Wiki for detailedinstructions). To enable the Jekyll-Scholar add the following statementto a file in your plugin directory (e.g., to _plugins/ext.rb):require &#39;jekyll/scholar&#39;Alternatively, add jekyll-scholar to your gem list in your Jekyllconfiguration:plugins: [&#39;jekyll/scholar&#39;]ConfigurationIn your Jekyll configuration file you can adjust the Jekyll-Scholar settingsusing the scholar key. For example, the following sets the bibliography styleto modern-language-association.scholar:  style: modern-language-associationThe table below describes some commonly used configuration options. For adescription of all options and their defaults, seedefaults.rb.            Option      Default      Description                  style      apa      Indicates the style used for the bibliography and citations. You can use any style that ships with CiteProc-Ruby by name (e.g., apa, chicago-fullnote-bibliography) which is usually the filename as seen here without the .csl ending; note that you have to use dependent/style if you want to use one from that directory. Alternatively you can add a link to any CSL  style (e.g., you could link to any of the styles available at the official CSL style repository).              locale      en      Defines what language to use when formatting your references (this typically applies to localized terms, e.g., Eds. for editors in English).              source      ./_bibliography      Indicates where your bibliographies are stored.              bibliography      references.bib      Indicates the name of your default bibliography. For best results, please ensure that your bibliography is encoded as ASCII or UTF-8. A string that contains a * will be passed to Dir::glob, so **/*.bib{,tex} will find all files named *.bib and *.bibtex under source.              allow_locale_overrides      false      When true, allows the language entry in the BibTex to override the locale setting for individual entries. When the language is missing it will revert back to locale. The language value should be encoded using the two-letter ISO 639-1 standard. Ex. English = en, Spanish = es.              sort_by      none      Specifies if and how bibliography entries are sorted. Entries can be sorted on multiple fields, by using a list of keys, e.g. year,month. Ordering can be specified per sort level, e.g. order: descending,ascending will sort the years descending, but per year the months are ascending. If there are more sort keys than order directives, the last order entry is used for the remaining keys.              order      ascending      Specifies order bibliography entries are sorted in. Can be ascending or descending. Ordering can be specified per sort level, e.g. descending,ascending will sort in descending on the first key then ascending order on the second key. If there are more sort keys than order directives, the last order entry is used for the remaining keys.              group_by      none      Specifies how bibliography items are grouped. Grouping can be multi-level, e.g. type, year groups entries per publication type, and within those groups per year.              group_order      ascending      Ordering for groups is specified in the same way as the sort order. Publication types  specified with group key type, can be ordered by adding type_order to the configuration. For example, type_order: [article,techreport] lists journal articles before technical reports. Types not mentioned in type_order are considered smaller than types that are mentioned. Types can be merge in one group using the type_aliases setting. By default phdthesis and mastersthesis are grouped as thesis. By using, for example, type_aliases: { inproceedings: article}, journal and conference articles appear in a single group. The display names for entry types are specified with type_names. Names for common types are provided, but they can be extended or overridden. For example, the default name for article is Journal Articles, but it can be changed to Papers using type_names: { article: Papers }.              bibtex_filters      latex,smallcaps,superscript      Configures which BibTeX-Ruby formatting filters values of entries should be passed through. The default latex filter converts LaTeX character escapes into unicode, smallcaps converts the &amp;#92;textsc command into a HTML &amp;lt;font style=&amp;#92;&quot;font-variant: small-caps&amp;#92;&quot;&amp;gt; tag, and superscript which converts the &amp;#92;textsuperscript command into a HTML &amp;lt;sup&amp;gt; tag.              raw_bibtex_filters      ` `      Configures which BibTeX-Ruby formatting filters the raw BiBTeX entry (i.e. that available through {{ entry.bibtex }}) should be passed through. This can be used to e.g. strip excess newlines by using the linebreaks filter.      BibliographiesOnce you have loaded Jekyll-Scholar, all files with the extension .bib or.bibtex will be converted when you run Jekyll (dont forget to add a YAMLheader to the files); the file can contain regular HTML or Markdown andBibTeX entries; the latter will be formatted by Jekyll-Scholar according tothe citation style and language defined in your configuration file.For example, if you had a file bibliography.bib in your root directory:------References==========@book{ruby,  title     = {The Ruby Programming Language},  author    = {Flanagan, David and Matsumoto, Yukihiro},  year      = {2008},  publisher = {O&#39;Reilly Media}}It would be converted to bibliography.html with the following content:&amp;lt;h1 id=&#39;references&#39;&amp;gt;References&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Flanagan, D., &amp;amp;#38; Matsumoto, Y. (2008). &amp;lt;i&amp;gt;The Ruby Programming Language&amp;lt;/i&amp;gt;. O&amp;amp;#8217;Reilly Media.&amp;lt;/p&amp;gt;This makes it very easy for you to add your bibliography to your Jekyll-poweredblog or website.If you are using other converters to generate your site, dont worry, you canstill generate bibliographies using the bibliography tag. In your siteor blog post, simply call:{% bibliography %}This will generate your default bibliography; if you use multiple, you canalso pass in a name to tell Jekyll-Scholar which bibliography it should render.Lets say you have two bibliographies stored in _bibliography/books.bib and_bibliography/papers.bib; you can include the bibliographies on your siteby respectively calling {% bibliography --file books %} and{% bibliography --file papers %}. For example, you could have a file references.mdwith several reference lists:---title: My References---{{ page.title }}================The default Bibliography------------------------{% bibliography %}Secondary References--------------------{% bibliography --file secondary %}Finally, the bibliography tag supports an optional filter parameter. Thisfilter takes precedence over the global filter defined in your configuration.{% bibliography --query @*[year=2013] %}The example above would print a bibliography of all entires published inthe year 2013. Of course you can also combine the file and filter parameterslike this:{% bibliography -f secondary -q @*[year=2013] %}This would print the publications from 2013 of the bibliography at_bibliography/secondary.bib.For more details about filters, see the corresponding section below orconsult the BibTeX-Rubydocumentation.If you need to limit the number of entries in your bibliography, you canuse the --max option:{% bibliography --max 5 %}This would generate a bibliography containing only the first 5 entriesof your bibliography (after query filters and sort options have beenapplied). Limiting entries is disabled if grouping is active.Return number of publications in bibliographyThe bibliography_count returns the number of items that would berendered in a bibliography. This tag accepts the same parameters as thebibliography tag.{% bibliography_count -f references --query @book[year &amp;lt;=2000] %}See #186for further examples.Bibliography TemplateYour bibliography is always rendered as an ordered list. Additionally,each reference is wrapped in an HTML tag (span by default but you canchange this using the reference_tagname setting) with the cite keyas id. The reference string itself is governed by the rules in yourCSL style but you can also customize the main template a little bit.By default, the template is {{reference}}  this renders only thereference tag. The template uses Liquid to render and, inaddition to the reference, exposes the cite-key (as key), theentrys type, the index in the bibliography, and the link tofile repository as link. Thus, you couldcustomize the template in your configuration as follows:scholar:  bibliography_template: &amp;lt;abbr&amp;gt;[{{key}}]&amp;lt;/abbr&amp;gt;{{reference}}This would be processed into something like:&amp;lt;li&amp;gt;&amp;lt;abbr&amp;gt;[ruby]&amp;lt;/abbr&amp;gt;&amp;lt;span id=&quot;ruby&quot;&amp;gt;Matsumoto, Y. (2008). &amp;lt;i&amp;gt;The Ruby Programming Language&amp;lt;/i&amp;gt;. O&amp;amp;#8217;Reilly Media.&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;If you have more complex requirements, it quickly becomes tedious tohave the template inside the configuration; for this reason, you canalso put the bibliography template into your layouts directory. Jekyll-Scholarwill load this template if the option set in your configuration matchesan existing layout (without the file extension). That is to say, if you set:scholar:  bibliography_template: bibAnd there is a file _layouts/bib.html (or with another extension) thecontents of this file will be used as the template. Please note that it isimportant for this file to contain the YAML front matter! For example, thiswould be a more complex template file:------{{ reference }}{% if entry.abstract %}&amp;lt;p&amp;gt;{{ entry.abstract }}&amp;lt;/p&amp;gt;{% endif %}&amp;lt;pre&amp;gt;{{ entry.bibtex }}&amp;lt;/pre&amp;gt;You can also override the default bibliography template, by passing the--template or -T option parameter to the bibliography tag.CitationsIf you want to reference books or papers from your bibliography in your blogposts, Jekyll-Scholar can help you, too. Simply use the cite tag withthe appropriate key of the item you want to cite and Jekyll-Scholar willcreate a formatted citation reference for you. For a quick example, takefollowing blog post:---layout: defaulttitle: A Blogging Scholar---{{ page.title }}================Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod temporincididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quisnostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.Duis &#39;aute irure dolor in reprehenderit in voluptate&#39; {% cite derrida:purveyor %}velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecatcupidatat non proident, &#39;sunt in culpa qui officia deserunt mollit anim id estlaborum&#39; {% cite rabinowitz %}.Duis &#39;aute irure dolor in reprehenderit in voluptate&#39; {% cite breton:surrealism %}velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecatcupidatat non proident, &#39;sunt in culpa qui officia deserunt mollit anim id estlaborum&#39; {% cite rainey %}.References----------{% bibliography %}Note that this will print your entire bibliography in the Reference section.If you would like to include only those entries you cited on the page, passthe cited option to the bibliography tag:{% bibliography --cited %}By default, the --cited option will still sort your bibliography if you setthe sort option. Especially for styles using citation numbers, this is usuallynot the desired behaviour. In such cases you can use --cited_in_order insteadof --cited and your bibliography will contain all cited items in the orderthey were cited on the page.For longer quotes, Jekyll-Scholar provides a quote tag:{% quote derrida:purveyor %}Lorem ipsum dolor sit amet, consectetur adipisicing elit,sed do eiusmod tempor.Lorem ipsum dolor sit amet, consectetur adipisicing.{% endquote %}For example, this could be rendered as:&amp;lt;blockquote&amp;gt;  &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit,&amp;lt;br/&amp;gt;  sed do eiusmod tempor.&amp;lt;/p&amp;gt;  &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipisicing.&amp;lt;/p&amp;gt;  &amp;lt;cite&amp;gt;    &amp;lt;a href=&quot;#derrida:purveyor&quot;&amp;gt;(Derrida, 1975)&amp;lt;/a&amp;gt;  &amp;lt;/cite&amp;gt;&amp;lt;/blockquote&amp;gt;Multiple citationYou can cite multiple items in a single citation by referencing all idsof the items you wish to quote separated by spaces. For example,{% cite ruby microscope %} would produce a cite tag like:&amp;lt;a href=&quot;#ruby&quot;&amp;gt;(Flanagan &amp;amp;amp; Matsumoto 2008; Shaughnessy 2013)&amp;lt;/a&amp;gt;Citations when theres more than one bibliographyLets return to the example above where you have two bibliographies storedin _bibliography/books.bib and _bibliography/papers.bib. We also musthave the main bibliography, e.g., _bibliography/references.bib. As weknow from above, its possible to use bibliographies other than the mainbibliography by calling {% bibliography --file books %} or{% bibliography --file papers %}.Though what if we want to cite an article thats not in the main bibliography?We use the same approach as above; to cite an article in the books.bibbibliography, we simply call {% cite ruby --file books %}Suppressing author namesSometimes you want to suppress author names in a citation, because thename has already been mentioned in your text; for such cases Jekyll-Scholarprovides the --suppress_author option (short form: -A):...as Matz explains {% cite ruby -A -l 42 %} would produce somethinglike: ...as Matz explains (2008, p. 42).Page numbers and locatorsIf you would like to add page numbers or similar locators to your citation,use the -l or --locator option. For example, {% cite ruby --locator 23-5 %} wouldproduce a citation like (Matsumoto, 2008, pp. 23-5).When quoting multiple items (see above) you can add multiple locators afterthe list of ids. For example, {% cite ruby microscope -l 2 -l 24 &amp;amp; 32 %}.Page is the default locator, however, you can indicate the type of locatorby adding a -L or --label option (one for each locator) for instance,{% cite ruby microscope --label chapter --locator 3 -L figure -l 24 &amp;amp; 32 %}produces something like: (Matsumoto, 2008, chap. 3; Shaughnessy, 2013, figs. 24 &amp;amp; 32).Displaying formatted referencesIf you want to display the full formatted reference entry, you can use thereference tag. For example, given the following Bibtex entry,@book{ruby,  title     = {The Ruby Programming Language},  author    = {Flanagan, David and Matsumoto, Yukihiro},  year      = {2008},  publisher = {O&#39;Reilly Media}}using {% reference ruby %} anywhere in your page, it will printFlanagan, D., &amp;amp; Matsumoto, Y. (2008). The Ruby Programming Language..OReilly Media (the exact result depends on your formatting style).The reference tag accepts the same file/-f parameter as the bibliographytag. This can be handy if you want to use a special BibTeX file as input fora specific page. As an example, the tag{% reference ruby --file /home/foo/bar.bib %}will attempt to read the key ruby from file /home/foo/bar.bib. It will notfallback to the default BibTeX file.Citation pointing to another page in your siteIn some cases, you might want your citation to link to another page on your cite (ex. a separate works cited page). As a solution, add a relative path to your scholar configurations:    scholar:      relative: &quot;/relative/path/file.html&quot;Multiple bibliographies within one document (like multibib.sty)When you have multiple {% bibliography %} sections in one file,Jekyll-Scholar will generate several lists containing the samepublications that have the same id attributes. As a result, when youcite a reference the link to an id attribute cannot be resolveduniquely. Your browser will always take you take you to the firstoccurrence of the id. Moreover, valid HTML requires unique idattributes. This scenario may happen, for example, if you cite thesame reference in different blog posts, and all of these posts areshown in one html document.As a solution, Jekyll-Scholar provides the --prefix tag. In yourfirst post you might cite as---title: Post 1---Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod temporincididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quisnostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.Duis &#39;aute irure dolor in reprehenderit in voluptate&#39;{% cite derrida:purveyor --prefix post1 %} velit esse cillumdolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatatnon proident, &#39;sunt in culpa qui officia deserunt mollit anim idest laborum&#39; {% cite rabinowitz --prefix post1 %}.References----------{% bibliography --cited --prefix post1 %}For the second blog post you would cite as follows:---title: Post 2---Duis &#39;aute irure dolor in reprehenderit in voluptate&#39;{% cite rabinowitz --prefix post2 %} velit esse cillumdolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatatnon proident, &#39;sunt in culpa qui officia deserunt mollit anim idest laborum&#39; {% cite rainey --prefix post2  %}.References----------{% bibliography --cited --prefix post2 %}Even though both posts cite rabinowitz, both citations will beassigned unique identifiers linking to the respective referencessection, although both posts will be rendered into a single HTMLdocument.Add a custom class for the citation referenceBy default Jekyll Scholar generate a link with a class:&amp;lt;a href=&quot;#ruby&quot; class=&quot;citation&quot;&amp;gt;(Derrida, 1975)&amp;lt;/a&amp;gt;You can custom this class in your configuration:scholar:  cite_class: citationFile RepositoriesFile repository support was added to Jekyll-Scholar starting at version2.0. Currently, if you have a folder in your site that contains PDF orPostscript files of your papers, you can use the configuration optionrepository to indicate this directory. When generating bibliographies,Jekyll-Scholar will look in that folder to see if it contains a filenamematching each entrys BibTeX key: if it does, the path to that filewill be exposed to the bibliography template as the link property.Since version 4.1.0 repositories are not limited to PDF and PS files.These files are mapped to the links property in your bibliographytemplate. Here is an example of template that utilizes this featureto link to supporting material in a ZIP archive:{{ reference }} [&amp;lt;a href=&quot;{{links.zip}}&quot;&amp;gt;Supporting Materials&amp;lt;/a&amp;gt;]Since version 5.9.0, Jekyll-Scholar matches files which begin with a BibTeX keyand are immediately followed by a delimiter (default: .). All text proceedingthe delimiter is treated as the file extension. For example, if two files namedkey.pdf and key.slides.pdf are found, {{links.pdf}} and{{links[&#39;slides.pdf&#39;]}} will both be populated.  You can use the configurationoption repository_file_delimiter to change the default delimiter.Detail PagesIf your layouts directory contains a layout file for bibliography details(the details_layout configuration options), Jekyll-Scholar will generatea details page for each entry in you main bibliography. That is to say, ifyour bibliography contains the following entry:@book{ruby,  title     = {The Ruby Programming Language},  author    = {Flanagan, David and Matsumoto, Yukihiro},  year      = {2008},  publisher = {O&#39;Reilly Media}}Then a page bibliography/ruby.html will be generated according to yourdetails page layout. In the layout file, you have access to all fieldsof your BibTeX entry. Here is an example of a details page layout:------&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;  &amp;lt;h1&amp;gt;{{ page.entry.title }}&amp;lt;/h1&amp;gt;  &amp;lt;h2&amp;gt;{{ page.entry.author }}&amp;lt;/h2&amp;gt;  &amp;lt;p&amp;gt;{{ page.entry.abstract }}&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;When Jekyll-Scholar generates detail pages, it also adds links to eachentrys detail page to the generated bibliography. You can alter thename of the link via the details_link configuration option.Jekyll-Scholar also provides a Liquid tag for conveniently adding linksto individual detail pages. For example, if you would like to add a simplelink to one of the items in your bibliography on a page or in a blog postyou can use the cite_details tag to generate the link. For this to work,you need to pass the BibTeX key of the element you want to reference tothe tag and, optionally, provide a text for the link (the default textcan be set via the details_link configuration option).Duis &#39;aute irure dolor in reprehenderit in voluptate&#39; velit esse cillumdolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat nonproident {% cite_details key --text Click Here For More Details %}.Alternatively, you can use the details_link tag to get just the URL to a details page. This can be used to link to details pages in markdown the same way you would link to a blog post with Jekylls link tag.[See our blog post]({% link _posts/2020-01-01-research-post.md %}) or [find more details]({% details_link key %}).Bibliography FiltersBy default, Jekyll-Scholar includes all entries in you main BibTeX filewhen generating bibliographies. If you want to include only those entriesmatching certain criteria, you can do so by adjusting the queryconfiguration option. For example:query: &quot;@book&quot; #=&amp;gt; includes only booksquery: &quot;@article[year&amp;gt;=2003]&quot; #=&amp;gt; includes only articles published 2003 or laterquery: &quot;@*[url]&quot; #=&amp;gt; includes all entries with a url fieldquery: &quot;@*[status!=review]&quot; #=&amp;gt; includes all entries whose status field is not set to &#39;review&#39;query: &quot;@book[year &amp;lt;= 1900 &amp;amp;&amp;amp; author ^= Poe]&quot; #=&amp;gt; Books published before 1900 where the author matches /Poe/query: &quot;!@book&quot; #=&amp;gt; includes all entries with a type other than bookPlease note that some of these queries require BibTeX-Ruby 2.3.0 orlater versions. You can also overwrite the configurations query parameterin each bibliography tag individually as described above.ContributingThe Jekyll-Scholar source code ishosted on GitHub.You can check out a copy of the latest code using Git:$ git clone https://github.com/inukshuk/jekyll-scholar.gitTo use this lasted version instead of the one provide by RubyGems,just add the line$:.unshift &#39;/full/path/to/the/repository/lib&#39;to your _plugins/ext.rb before requiring jekyll/scholar, where/full/path/to/the/repository is the path to your local versionof Jekyll-Scholar.When contributing to Jekyll-Scholar, please make sure to installall dependencies and run the cucumber features:$ bundle install$ rakeIf youve found a bug or have a question, please open an issue on theJekyll-Scholar issue tracker.Or, for extra credit, clone the Jekyll-Scholar repository, write a failingexample, fix the bug and submit a pull request.Additionally, if we merged at least one of your pull request you will getwrite permissions to the repository if you want them.LicenseJekyll-Scholar is distributed under the same license as Jekyll.Copyright (c) 2011-2015 Sylvester KeilPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the Software), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE."

} ,

{

"title"    : "Como hacer para que de un objeto muestre lo que yo quiero",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/como-hacer-para-que-de-un-objeto-muestre-lo-que-yo-quiero.html",
"date"     : "",
"content"  : "antes que nada, otra forma de saber si lo que me devuelve es lo que quieroSupongamos que tengo las clases Golondrina y Lugar, que entienden estos mensajes  Golondrina: energia (un nmero), dondeEsta (un lugar), jefaDeBandada (otra golondrina)  Lugar: kmEnRuta (un nmero)En un workspace tengo estopepita:=Golondrinanew.luciana:=Golondrinanew.buenosAires:=Lugarnew.pepitainitialize.lucianainitialize.buenosAiresinitialize.buenosAireskmEnRuta:10.pepitajefaDeBandada:luciana.&quot;ledigoapepitaquelajefadesubandadaesluciana&quot;pepitaubicacionInicial:buenosAires.&quot;despusdeesto,pepitaestenbuenosaires&quot;Si despus de todo esto en el workspace pongopepitaenergiay le doy display it, me va a mostrar un nmero, p.ej. 0. Ahora, si pongopepitajefaDeBandaday le doy display it, no me va a mostrar luciana que es tal vez lo que esperaba, sino a Golondrina. Parecido si pruebo conpepitadondeEstame va a decir a Lugar.Si tengo 5 golondrinas en mi workspace, cmo s que la que me devuelve cuando le pido la jefa de bandada a pepita es luciana y no otra? luciana es el nombre de la variable que apunta a luciana dentro del workspace, entonces dentro del workspace puedo usar ese nombre. Sabiendo esto, una fcil es preguntar si lo que me devuelve pepita jefaDeBandada es luciana, o seapepitajefaDeBandada=lucianaahora las respuestas van a ser true o false.ahora s, el misterio de a GolondrinaPonele que ests pensando todo bien, pero lo que quiero es que no me ponga a Golondrina. Adelante.Empecemos por entender por qu pone a Golondrina.Ya vimos que los objetos no tienen nombre propio, los que tienen nombre son las variables que hacen referencia al objeto. luciana es la variable del workspace que apunta a una golondrina, la golondrina no tiene nombre propio.Entonces, cuando pinto una expresin y le doy display it, qu me muestra? Me muestra un String que representa al objeto resultado de la expresin. Para los objetos bsicos (nmeros, String, booleanos), ese String es lo que uno espera. Para las instancias de las clases que creamos nosotros, es en principio el nombre de la clase antecedido de a  (o an  si el nombre de la clase empieza en vocal). Por eso a Golondrina.Si entendimos esto, la pregunta que sigue es puedo hacer que el String que representa a (p.ej.) las golondrinas no sea a Golondrina sino otra cosa que yo quiera.S, y no es muy difcil.printOn:Lo que hay que hacer es definir el mtodoprintOn:en la clase cuyas instancias queremos que se muestren distinto (en el ejemplo, Golondrina y Lugar).Lo que viene como parmetro es un Stream, que es una tira de caracteres. En el mtodo tens que agregar el String que vos quieras a la tira. Todos los objetos son polimrficos respecto del printOn:, para las clases que no tienen una definicin explcita, Smalltalk provee la que muestra el nombre de la clase.El display it lo que hace es: crear un Stream, pedirle al resultado de la expresin printOn: sobre ese Stream, tomar el String generado, mostrar eso.Los Stream entienden estos mensajes:  nextPutAll: unString , agrega unString a la tira  cr , agrega un salto de lnea a la tiraTengamos tambin en cuenta que los String entienden el mensaje coma (,) que concatena, probar p.ej.&#39;hola&#39;,&#39;mundo&#39;Ms sobre Strings en el apunte sobre objetos bsicos en www.pdep.com.ar .Ya vimos que los objetos bsicos se muestran bien, y ahora sabemos que eso es porque al decirle printOn: devuelven un String feliz. P.ej. el 42 agrega el String 42, por eso es que cuando el resultado de una operacin es 42 y le pido display it de esa operacin, me muestra 42 y no a Number. Esto lo podemos usar, si dentro de lo que quiero mostrar hay p.ej. un nmero, entonces al nmero le puedo decir printOn: sobre el mismo Stream que me pasaron a m.Hagamos que los lugares y golondrinas se muestren bien#LugarprintOn:unStreamunStreamnextPutAll:&#39;lugarenkm&#39;.selfkmEnRutaprintOn:unStreamla segunda lnea de cdigo agrega el String correspondiente al nmero en el mismo Stream que le lleg al lugar, entonces el resultado va a ser p.ej. lugar en km 10.#GolondrinaprintOn:unStreamunStreamnextPutAll:&#39;golondrinaconenerga&#39;.selfenergiaprintOn:unStream.unStreamnextPutAll:&#39;yqueesten(&#39;.selfdondeEstaprintOn:unStream.unStreamnextPutAll:&#39;)&#39;.ac us el mismo truco para la energa (un nmero) y para el lugar, para el que va a usar el printOn: de lugar que definimos recin. Entonces el resultado va a ser golondrina con energa 0 y que est en (lugar en km 10).ok, pero quiero que me diga pepitaBueno, para eso el objeto tiene que conocer al String pepita. P.ej. que las golondrinas tengan nombre. Cmo? Bueno, eso ya lo deberan poder hacer ustedes ;-)."

} ,

{

"title"    : "Como hacer predicados de orden superior",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/como-hacer-predicados-de-orden-superior.html",
"date"     : "",
"content"  : "Recordemos los predicados de orden superior que vimos hasta el momento, esos predicados que relacionan predicados:  not/1  findall/3  forall/2Eso es todo lo que hay? No, por supuesto que no. Existen muchos otros predicados de orden superior pre-construidos (built-in), pero esta base nos alcanza para lo que queremos ver en la materia. Pero lo ms interesante es que podemos construir nuestros propios predicados de orden superior, sin embargo vamos a ver que no es tan natural como s era en Haskell.call / 1El predicado call/1 nos permite evaluar un predicado pasado por parmetro. Retomando uno de nuestros primeros ejemplos, veamos cmo se usara:?-call(padre(Padre,Hijo)).Padre=homeroHijo=bart;...Pero eso no aporta mucho respecto de hacerlo en forma directa:?-padre(Padre,Hijo).Padre=homeroHijo=bart;...Se supone que slo tiene sentido usar esto si no sabemos qu consulta es la que nos van a pasar por parmetro y usamos el call/1 para definir algo ms genrico. Veamos otra variante, entonces, que puede resultarnos ms interesante y til para lo que s podemos llegar a usar.call / _El predicado call/_ tambin nos permite evaluar un predicado pasado por parmetro, pero separando los parmetros que el mismo recibe:?-call(padre,Padre,Hijo).Padre=homeroHijo=bart;...O tambin:?-call(padre(homero),Hijo).Hijo=bart;...Momento, momento entonces, cul es la aridad de call/_? El predicado call/_ no tiene definida una aridad fija. Puede tener desde 1 (la versin que vimos antes) hasta N + 1, siendo N la aridad del predicado que se recibe como primer parmetro.Usando este predicado podemos hacer cosas equivalentes (no iguales!) a las que hacamos con orden superior en Haskell. Juguemos un poco con esto: implementemos map y filter.Creando nuestros propios predicados de orden superiorel viejo y querido filterLa cuestin de los parmetros es igual a la anterior: vamos a necesitar uno ms que lo que tena filter en Haskell para unificar la lista resultante. Hagamos tambin dos versiones.Versin recursiva:filterRecursivo(_,[],[]).filterRecursivo(Pred,[X|Xs],[X|Ys]):-call(Pred,X),filterRecursivo(Pred,Xs,Ys).filterRecursivo(Pred,[X|Xs],Ys):-not(call(Pred,X)),filterRecursivo(Pred,Xs,Ys).Versin no recursiva:filterNoRecursivo(Pred,ListaOrigen,ListaResultante):-findall(X,(member(X,ListaOrigen),call(Pred,X)),ListaResultante).Ejemplos de consulta:?-filterRecursivo(padre(homero),[herbert,lisa,maggie,homero,bart],ListaFiltrada).ListaFiltrada=[lisa,maggie,bart];No?-filterNoRecursivo(padre(homero),[herbert,lisa,maggie,homero,bart],ListaFiltrada).ListaFiltrada=[lisa,maggie,bart];NoBuensimo :D Este predicado tambin existe como built-in y, como el ttulo lo dice, es include/3.el viejo y querido mapEmpecemos por lo bsico cuntos parmetros tena la funcin map?&amp;gt;mapflistaTena dos parmetros, una funcin de transformacin f y una lista, y la funcin era aplicable a cada elemento de la lista.Entonces, cuntos argumentos va a tener nuestra relacin maplist? Vamos a tener el predicado de transformacin y la lista, por supuesto. Pero tambin necesitamos un argumento ms para unificarlo con la lista resultante del mapeo. Tenemos tambin que considerar las cosas que relaciona el predicado: un elemento de la lista original con uno de la lista resultante.?-map(Predicado,ListaOriginal,ListaResultante).Ejemplo de uso:?-map(padre,[homero,abe],Hijos).Hijos=[[bart,lisa,maggie],[homero,herbert]]Ok, pensemos cmo lo podramos implementar para que haga lo que queremos?Versin 1 con recursividadmapRecursivo(_,[],[]).mapRecursivo(Pred,[X|Xs],[Y|Ys]):-call(Pred,X,Y),mapRecursivo(Pred,Xs,Ys).Ejemplos de consulta:?-mapRecursivo(padre,[homero,abe],Hijos).Hijos=[bart,homero];Hijos=[bart,herbert];Hijos=[lisa,homero];Hijos=[lisa,herbert];Hijos=[maggie,homero];Hijos=[maggie,herbert];NoOk esto no hace lo que queremos, vemos que vamos a tener mltiples respuestas donde para cada padre me mappea con un nico hijo de ese padre. Pensndolo desde un punto de vista genrico, ms all del dominio particular, nuestra primer implementacin nos da N respuestas con todas las combinaciones posibles de mapeo, pero siempre con mapeos 1 a 1 para cada elemento de la lista original. Qu ms se nos ocurre?Versin 2 con findall Tambin podramos hacer una versin no recursiva:mapNoRecursivo(Pred,ListaOriginal,ListaResultante):-findall(Y,(member(X,ListaOriginal),call(Pred,X,Y)),ListaResultante).Ejemplos de consulta:?-mapNoRecursivo(padre,[homero,abe],Hijos).Hijos=[bart,lisa,maggie,homero,herbert];NoPara nuestra implementacin no recursiva la respuesta es nica, pero estn en la misma lista los hijos de todos y segn nuestro ejemplo de uso esperado que dijimos al principio queramos que nos de una lista de listas, sino no podemos distinguir los que son hijos de homero respecto a los de abe.Las dos implementaciones que realizamos sin embargo funcionaran correctamente con relaciones que cumplan con unicidad (con lo cual estaramos ms cerca del mundo funcional, no siempre queremos esto, depende del problema). Si modelramos la relacin hijosDe/2 como:hijosDe(Padre,Hijos):-findall(Hijo,padre(Padre,Hijo),Hijos).Podramos hacer la siguiente consulta?-mapNoRecursivo(hijosDe,[homero,abe],Hijos).Hijos=[[bart,lisa,maggie],[homero,herbert]]Y el resultado sera idntico al de nuestro mapRecursivo.Y cul es el que est bien? La respuesta es depende. Si buscamos mltiples respuestas con relaciones 1 a 1 vamos a querer la primera, si buscamos una nica respuesta que englobe todas las respuestas posibles vamos a querer la segunda, y si queremos que sea 1 a 1 con una nica respuesta tenemos que asegurarnos de que nuestro dominio est modelado de forma acorde, incluso podramos tener una tercer versin como esta:Versin 3 con recursividad y findallmapListaDeListas(_,[],[]).mapListaDeListas(Pred,[X|Xs],[Y|Ys]):-findall(Z,call(Pred,X,Z),Y),mapListaDeListas(Pred,Xs,Ys).Esta consulta va a hacer lo que queramos originalmente, pero siempre nos va a dar una lista de listas y capaz no queremos eso?-mapListaDeListas(padre,[homero,abe],Hijos).Hijos=[[bart,lisa,maggie],[homero,herbert]]Ya que estamos en lgico, pensemos qu otras consultas podramos querer hacer:?-mapRecursivo(padre,Padres,[bart,lisa,maggie]).Padres=[homero,homero,homero];NoNuestra primer versin recursiva es inversible para el segundo o el tercer argumento (aunque no ambos simultneamente). Si probamos lo mismo con nuestra versin no recursiva, nos vamos a encontrar con un problema ya que en la implementacin estamos usando member/2 con la primera lista, y member/2 no es inversible para la lista.Lgicamente ninguna versin ser inversible respecto al primer argumento, ya que necesita saber qu predicado quiere consultar en el call.Bueno, la versin built-in de map en SWI-Prolog es maplist/3, y se comporta como nuestra versin recursiva.Cmo seguimos?Otro predicado de orden superior muy til es mejorSegun/3 que relaciona un predicado de aridad 2 a invocar, una lista y al valor que maximiza el segundo argumento del predicado en cuestin. Se animan a resolverlo?"

} ,

{

"title"    : "Composicion  oop",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/composicion--oop-.html",
"date"     : "",
"content"  : "Supongamos que queremos modelar el comportamiento de personas a la hora de pagar la cuenta despus de una comida en un restaurant. Los clientes pagan lo que consumen ms la propina, que depende de su humor. Sabemos que la gente feliz deja de propina 25% de lo que sali la comida, la gente enojada no deja nada y los que estn de un humor indiferente dejan lo que tienen en el bolsillo.Queremos que un cliente nos pueda decir cunto paga en total (propina + lo que consumi) dado el importe de la comida consumida, y adems debe ser posible para una persona cambiar de humor a lo largo de la ejecucin del programa.Sera posible resolver toda esta lgica (y la que est por venir ms adelante) con muchos ifs en el cliente, pero es posible modelarlo de otra forma: los diferentes humores del cliente podran ser otros objetos separados que le ayuden a saber cunta propina poner, y por su puesto ser polimrficos para que el cliente pueda delegar en ellos esta funcionalidad sin importar cul sea su humor actual (objeto al cual referencia con algn atributo propio, como ser humor).Wollokclass Cliente {  var property humor  method cuantoPaga(importeTotal){    return importeTotal+self.cuantoDePropina(importeTotal)  }  methodcuantoDePropina(importeTotal){  return humor.cuantoDePropina(importeTotal)  }}  class Feliz {  method cuantoDePropina(importeTotal){  return importeTotal*1.25  }class Enojado {  method cuantoDePropina(importeTotal){    return 0  }}class Indiferente {  var property plataDelBolsillo  methodcuantoDePropina(importeTotal)    return plataDelBolsillo  }}Nota: en este ejemplo se ubic la variable plataDelBolsillo en la estrategia Indiferente. Esto implica que cada vez que el cliente cambie de humor a indiferente, hay que indicarle cunta plata en el bolsillo tiene.Otra opcin podra haber sido poner la plataDelBolsillo en el cliente y para que la estrategia Indiferente resuelva cunto tiene que devolver al recibir el mensaje cuantoDePropina hay dos opciones:  Que la instancia del objeto Indiferente conozca al Cliente y le pida su plataDelBolsillo  Que el cliente se pase por parmetro al pedirle a la estrategia cunta propina pone, modificando el mtodo para recibir dos parmetros, por ejemplo:Wollokclass Cliente {  methodcuantoDePropina(importeTotal){  return humor.cuantoDePropinaPara(importeTotal,self)  }}Ante la necesidad de poder cambiar el humor de la persona, separamos a la Persona (que intuitivamente iba a ser un concepto entero abarcando a su estado de humor) de su Humor en un concepto aparte. Los objetos Humor deben ser polimrficos para la persona, ya que debo poder intercambiar los distintos humores y la persona debera hablarle de la misma forma a cualquiera.Entonces en vez de tener un objeto que resuelve todo el problema tenemos un objeto que conoce a otros objetos polimrficos para resolver el problema mediante la colaboracin. Con esta solucin, el flujo del programa ya no se encuentra definido por los ifs y objetos bsicos sino por la configuracin del cliente y el uso de polimorfismo.Es importante notar que no sera vlido modelar una solucin a este problema basada en herencia teniendo personas felices, indiferentes y enojadas, ya que una vez que la persona es instanciada como feliz no es posible cambiarla a indiferente o enojada, ya que implicara cambiar su clase que no se puede hacer.Entonces, la composicin en objetos es simplemente una relacin de conocimiento entre dos objetos (por ejemplo, el cliente conoce a su humor) donde el objeto conocido puede cambiarse por otro que sea polimrfico para el que los conoce.Otro ejemplo podra ser el de las colecciones con un algoritmo de ordenamiento elegido por el usuario (SortedCollection en Smalltalk), donde la coleccin delega en otro objeto que modela el algoritmo de ordenamiento a usar sobre sus elementos.Cambiando herencia por composicinEl uso de composicin en ocasiones es una solucin muy elegante para problemas aparejados por el concepto de Herencia, que pueden verse en el siguiente ejemplo tomado de un final de Paradigmas de Programacin:  El siguiente texto representa parte del relevamiento realizado en una cadena de venta de electrodomsticos: Los vendedores pueden ser especialistas o de saln. Los especialistas atienden detrs de mostrador y cobran un premio de 100 pesos por cada venta. Los vendedores de saln cobran un premio que se indica para cada vendedor.  Avanzando en el relevamiento, nos dicen lo siguiente:  Para motivar las ventas en el equipo, decidimos incorporar un cambio: categoras senior y junior. Un vendedor senior tendr a cargo a un junior. Un vendedor senior recibe como parte del premio un adicional correspondiente al 3% de las ventas realizadas por la persona que tiene a cargo. Un Junior tiene un porcentaje de descuento en su premio. Por otra parte, si un vendedor junior hace bien las cosas, con el tiempo puede pasar a ser seniorLa codificacin propuesta en el enunciado es:Wollokclass VendedorEspecialista {  const ventas = []  method premio(){    return 100 * ventas.length()  }}class VendedorSalon {  const ventas = []  var premio  method premio(){    return premio  }}class VendedorSalonSenior inherits VendedorSalon {  var junior  method premio(){    return super()+self.adicionalJunior()  }  method adicionalJunior(){    return junior.totalVentas()*0.03  }}class VendedorSalonJunior inherits VendedorSalon {  var descuento  method totalVentas(){    return ventas.sum({ venta =&amp;gt;venta.monto()})  }  method premio(){    return super()*(1 -self.descuento())  }}class VendedorEspecialistaSenior inherits VendedorEspecialista {  var junior  method premio(){    return super()+self.adicionalJunior()  }  method adicionalJunior(){    return junior.totalVentas()*0.03  }}class VendedorEspecialistaJunior inherits VendedorEspecialista {  var descuento  method totalVentas(){    return ventas.sum({ venta =&amp;gt;venta.monto()})  }  method premio(){    return super()*(1 -self.descuento())  }}La solucin propuesta tiene problemas que surgen por el mal uso de herencia. Los que podemos destacar son:  Repeticin de cdigo: La forma de subclasificar a los vendedores tanto por tipo de vendedor (Saln o Especialista) como por categora (Senior o Junior) hace que tengamos cdigo repetido entre las hojas del rbol de herencia. Esto tiene problemas, sobre todo si el sistema sigue creciendo de esta forma, ya que la repeticin de cdigo es exponencial y realizar un cambio en la lgica del premio de los juniors por ejemplo se propagara para todos los tipos de vendedores habidos y por haber (tiene problemas de extensibilidad).  Problemas con la identidad de los objetos: El enunciado indica que un junior puede volverse senior con el tiempo, pero el modelo que tenemos no soporta este tipo de cambio en tiempo de ejecucin. Un objeto de la clase VendedorSalonJunior no puede cambiar de clase a VendedorSalonSenior, su clase es algo que se mantiene durante toda la vida del objeto. Si tratamos de emular el cambio de clase creando un nuevo objeto y copiando los valores de sus atributos segn corresponda lograremos tener el comportamiento de senior pero ya no ser el mismo objeto para el sistema. En OOP una de las caractersticas de un objeto es su identidad, la cual estaramos perdiendo si tomamos esa decisin y el problema asociado a este cambio es que todos los objetos que tengan una referencia a nuestro vendedor promovido debern enterarse de este cambio (y seguramente no lo hagan) para referenciar al nuevo objeto que lo reemplaza. La consecuencia de esto es o bien una complejidad espantosa para mantener las referencias o un sistema inconsistente.Cmo se soluciona este problema? Si cambiamos el modelo para que la categora (Junior o Senior) sea un objeto aparte que el vendedor conozca y delegamos en este objeto todo aquello que corresponda a ser senior o junior solucionamos ambos problemas a la vez, ya que el valor de las referencias s puede ser cambiado en tiempo de ejecucin, es slo settear un atributo. Veamos cmo queda la nueva solucin:Wollokclass Vendedor {  const ventas = []  var categoria    method premio(){    return categoria.premioPara(self)  }  method totalVentas(){    return ventas.sum({ venta =&amp;gt;venta.monto()})  }}class VendedorEspecialista inherits Vendedor {  method premioBase(){    return 100 * ventas.length()  }}class VendedorSalon inherits Vendedor {  var premioBase  method premioBase(){    return premioBase  }}class Senior {  var junior  method premioPara(unVendedor){    return unVendedor.premioBase()+self.adicionalJuniorPara(unVendedor)  }  method adicionalJuniorPara(unVendedor){    return junior.totalVentas()*0.03.  }}class Junior {  var descuento  method premioPara(unVendedor){    return unVendedor.premioBase()*(1 -self.descuento())  }}Disclaimer: el mtodo totalVentas se termina definiendo en la clase Vendedor porque tena sentido para todos en este dominio, no slo para los juniors. Para que fuera totalmente anloga podramos tenerlo definido en Junior y delegar en la categora, pero siendo que no es invlido que los vendedores lo definan, era ms sencillo resolverlo de esta forma. En caso de dudas de dominio, siempre vale preguntar.Como se puede ver en el diagrama de clases de la solucin con composicin, para crear un vendedor ya no alcanza slo con elegir la clase del tipo de vendedor que queremos e instanciarla, sino que tenemos que instanciar dos objetos (al vendedor que queramos y su categora) y hacer que el vendedor conozca a su categora, lo cual agrega una complejidad extra para la creacin de nuestros objetos. Si ms adelante quisiramos que un vendedor tambin pueda pasar de ser vendedor de saln a especialista y viceversa, podra plantearse una solucin en la cual el vendedor conozca a su categora y tambin a su modo de venta, complicando ms el armado de un vendedor a cambio una mayor flexibilidad del modelo.A modo de resumen rpido:Herencia  Esttica (no puedo cambiar la clase de un objeto en run-time, si creo otro objeto se pierde la identidad lo cual trae problemas)  Menos objetos -&amp;gt; Menos complejidad  Es una relacin entre clases! Es mucho ms fuerte que la relacin entre instancias planteada en composicin. La herencia implica no slo heredar cdigo sino conceptos.Composicin  Dinmico (la implementacin se puede cambiar en run-time, ya que se basa slo en un atributo que se puede settear en cualquier momento con otro objeto que sea polimrfico)  Aumenta la cantidad de objetos -&amp;gt; Mayor complejidad (Es ms complicado entender el todo y hay que configurar adecuadamente las relaciones entre los objetos)  Se reparten mejor las responsabilidades en objetos ms chicos"

} ,

{

"title"    : "Composicion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/composicion.html",
"date"     : "",
"content"  : "Qu es composicin?Qu queremos decir con Componer?Lo mismo que con composicin de funciones en matemtica.fog(x) es lo mismo que f(g(x))Es decir que lo que devuelve g, hay que aplicrselo a f. A tener en cuenta, tanto f como g tienen que ser funciones, no podemos componer una funcin con un 2, o un 2 con una lista.  Slo podemos componer funcionesPara componer dos funciones en Haskell, por ejemplo f y g, se hace asf.geso arma una nueeeva funcin, resultado de componer f con g.Ejemploeven.succEsta formada por la composicin de even que recibe un numero y devuelve un Bool que indica si es par o no, y succ que recibe un numero y devuelve el siguiente. Esa composicin te devuelve una nueva funcin que recibe un nmero y te devuelve el resultado de primero sumarle uno y luego ver si es par:(not.even)2(esperoseentiendanmisflechitasxD)^|^||__||____|Fijate que el 2 se aplica a la funcin de la derecha y el resultado de eso se aplica a la funcin de la izquierda. Y ese sera el resultado final de la funcin.Tanto lo de la izquierda como lo de la derecha del punto, tienen que ser funciones que reciban 1 parmetro (al menos en paradigmas, lo otro es ms complejo). Y a su vez, el tipo que retorna la funcin de la derecha, tiene que ser el mismo que el tipo que espera recibir la funcin de la izquierda. En este caso, even es una funcin que recibe un Integral (ver typeclasses) y retorna un Bool.even::Integrala=&amp;gt;a-&amp;gt;Booly not recibe un Bool y retorna otro.not::Bool-&amp;gt;BoolConviene prestar atencin a lo siguiente: lo que devuelve even, coincide con lo que recibe not. Eso hace posible la composicin!Preguntas FrecuentesEs necesesario que esten los puntos para que sea composicion?Porque para m est implcito que hay composicin, si por ejemplo en lugar de:impar=not.evenpongoimpar=notevenS, es necesario. En el segundo ejemplo estas aplicando even a not, y not espera un Bool, no una funcin y por ende, ni compila por error de tipos.En cambio, cuando hacsnot.evenests armando una nueva funcin que recibe un nmero, ve si es par y despus lo niega. La forma de armar la funcin que quers, segn el segundo ejemplo sera:not(even3)Y en el segundo se aplicara as:(not.even)3Cundo usar composicinCul es la diferencia entre estas dos definiciones?imparn=not(evenn)impar=notevenEn un primer nivel de anlisis, ambas definiciones son equivalentes.Sin embargo, si analizamos solamente las expresiones a la derecha del igual encontramos quenot(evenn)ynot.evenson distintas: la primera denota un valor booleano (True o False) mientras que la segunda denota una funcin.Esta segunda expresin es ms poderosa en cuanto a que nos permite hacer ms cosas que la primera, ya que la construccin de la funcin independiente de su aplicacin sirve, por ejemplo, para trabajar con funciones de orden superior.En cuanto a la definicin de funcin, no tiene grandes ventajas sobre salvo que nos ayuda a entrenarnos en el uso de la composicin, que despus podemos utilizar para otras cosas. Sin embargo, una de las virtudes asociadas si se reemplazan muchas aplicaciones anidadas por composicin de funciones podra implicar un cdigo ms limpio, porque la sintaxis de Haskell est diseada de modo que eso suceda.Errores comunesEjemploSupongamos una lista de alumnos de los cuales se sabe su nombre y su nota. Queremos obtener los nombres de los alumnos aprobados.Podemos suponer adems la existencia de las funciones:nombres:: [Alumno] -&amp;gt; [String]aprobados:: [Alumno] -&amp;gt; [Alumno]Un error que veo con frecuencia es hacer:nombreDeAprobadosalumnos=nombres.aprobadosalumnosLa composicin es una operacin entre funciones esto quiere decir que a ambos lados del . debe haber una funcin. Qu hay a cada lado del . en este caso:      nombres , no hay problema: es una funcin (de listas de alumnos/tuplas en listas de nombres);        aprobados alumnos  s hay problema! No es una funcin, es una lista de alumnos.  Dicindolo en fcil: debo componer funciones, no vale componer valores. Si yo a una funcin le aplico todos los parmetros deja de ser una funcin y pasa a ser un valor simple. En este caso, aprobados es una funcin, mientras que aprobados alumnos es un valor, y como tal no se puede componer. Tal vez sea interesante ver el efecto de la currificacin en Haskell.Correcciones posiblesSin composicinaprobadosalumnos=nombres(aprobadosalumnos)Es decir uso aplicacin en lugar de composicin (ojo, esto funciona pero si en estamos en un parcial y se desea evaluar que el alumno sepa composicin ah no estn usando composicin entonces puede no ser suficiente como solucin al ejercicio).Con composicinnombreDeAprobados=nombres.aprobadosClaramente son funciones las dos expresiones a ambos lados del .. (Notese que a la derecha del = tambin hay un parmetro menos.)Pueden encontrar otro ejemplo sobre esta clase de errores en  Errores con composicin y aplicacin parcialComposicin vs. AplicacinPara terminar de entenderlo recuerden la matemtica, es lo mismo que ? Claramente si g es una funcin yo no puedo hacer . Por otro lado, si en lugar de una funcin g tuviera un valor real x, entonces puedo hacer pero no .Algunos detalles tcnicosSi bien en general intentamos concentrarnos en los conceptos y no prestar tanta atencin al conocimiento en s del lenguaje; para poder expresar correctamente una composicin en Haskell es necesario comprender correctamente algunos detalles de la sintaxis del Haskell:      Si pongo un . es composicin, sino es aplicacin. Los dos conceptos son bien distintos y es muy importante comprender la diferencia; por lo tanto es necesario ser bien explcito sobre cundo se esta queriendo utilizar uno u otro. En criollo, se tiene que notar dnde hay un punto y dnde no.        El operador de composicin tiene poca precedencia. (Ver Aplicacin Parcial)  Por lo tanto la expresin not . even 3 debe leerse como not . (even 3) (y por lo tanto es incorrecta). Una alternativa posible es alterar la precedencia explcitamente usando parntesis, por ejemplo (not.even) 3; donde primero se componen las funciones, eso produce una nueva funcin, y a esa nueva funcin le aplico el 3 como parmetro.  Para ms informacin puede leer: Precedencia de los operadores ms comunes en Haskell y Cundo usar parntesis"

} ,

{

"title"    : "Comunicacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/comunicacion.html",
"date"     : "",
"content"  : "Cuando construimos modelos mentales sobre los problema que queremos resolver, ya sea como parte del proceso de anlisis, diseo, etc, normalmente queremos luego transmitirlos Esto ocurre porque:  Queremos compartirlo con otros: para explicar nuestro modelo construido e intercambiar opiniones sobre el mismo  Queremos construir documentacin: una referencia persistente sobre lo que hemos pensado, la cual ser una fuente de consulta para otros o nosotros mismos en un futuro mas o menos lejano, cuando ya hayamos olvidado la informacin que recopilamos y las decisiones que tomamos.Formas de comunicacinTenemos varias formas de comunicar estas ideas, por ejemplo  un texto en prosa  una especificacin de CU en la etapa de anlisis  una porcin de cdigo o pseudocdigo en la etapa de diseo  un caso de pruebason formas validas de comunicarlas. Otra forma til son los diagramas, que normalmente son menos detallados pero transmiten las ideas principales de nuestra realidad modelada ms rpidamente.Los diagramas empleados para comunicar varan en funcin de su objetivo; probablemente necesite diagramas diferentes para comunicar ideas diferentes. No es lo mismo mostrar la disposicin de los servidores en un sistema distribuido que la disposicin de los componentes visuales en una interfaz grfica.Por otro lado, el tipo de diagrama que construyamos depende del paradigma en el que estoy modelando: la naturaleza de los componentes y su responsabilidades es diferente, por ejemplo, en el paradigma procedural y en el orientado a objetos.Finalmente, muchas veces emplearemos distintos diagramas que modelan de forma complementaria aspectos diferentes de la misma cosa.UMLUML significa Unified Modeling Language (Lenguaje Unificado de Modelado) y basicamente son un conjunto de especificaciones para hacer muchos (realmente muchos) diagramas de distintos tipos. Es un lenguaje que nos permite comunicar ideas de diseo desde diferentes puntos de vista, y con distinto enfoques. UML se compone de una serie de diagramas, donde cada uno tiene un objetivo en cuanto a lo que quiere comunicar.Ac hay alguno de los diagramas de UMLUna ventaja no menor de UML frente a otros como por ejemplo LePUS es su amplia difusin, lo que significa que son conocidos por una gran parte de los perfiles, y que adems, existen muchos aplicativos para su construccin."

} ,

{

"title"    : "Concepto de funcion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/concepto-de-funcion.html",
"date"     : "",
"content"  : "Como su nombre lo indica, la funcin es el concepto fundamental del paradigma funcional: mientras que, por ejemplo, en el paradigma de objetos, los problemas se resuelven en trminos de envo de mensajes entre objetos, en funcional los programas se estructurarn en torno a aplicacin de funciones sobre valores. La funcin, es as, pues, la computacin caracterstica del paradigma.EnfoquesFuncin como caja negraUna forma simple de pensar una funcin es como una mquina con una salida y al menos una entrada, capaz de producir un resultado. Decimos que se trata de una caja negra, porque para aquel que la use no tiene acceso al interior de la misma, sino tan solo a sus entradas y salida. Esto nos lleva a que las funciones pueden ser combinadas fcilmente, de diversas formas, tan solo conociendo el tipo de entradas y salidas que posee.Funcin como transformacin matemticaLas funciones, sin embargo, no son simples cajas negras, que podran, por ejemplo, tener memoria de sus entradas anteriores, sino que son transformaciones matemticas que presentan transparencia referencial.En particular, las funciones son relaciones que presentan las siguientes caractersticas:  para toda entrada aceptable (su dominio), existe un nico resultado (imagen), lo cual se conoce como unicidad.  para toda entrada del dominio, existe un resultado, lo que se conoce como existencia.Funcin desde un punto de vista proceduralAl llevar los conceptos de funcin matemtica al mundo computacional, la transparencia referencial implica que las funciones, comparadas contra los procedimientos imperativos, no tienen efecto, su aplicacin no afecta al contexto, o, cuando menos, no es visible para el observador que evalua la expresin.Si bien no tiene sentido hablar de mutabilidad en el contexto matemtico, dado que solo se manejan valores y no referencias (al menos, en un enfoque simplista), la transparencia referencial en los programas construidos en el paradigma funcional tiene dos consecuencias mas o menos evidentes:  Las funciones no pueden mutar sus argumentos ni otras variables, locales o globales, ni directa ni indirectamente. Esto se garantiza al eliminar la asignacin destructiva del lenguaje. (podemos decir que las variables no varan)  Las funciones no pueden realizar de forma directa operaciones de entrada/salida (aunque existen estrategias para realizarlas indirectamente preservando a la funcin pura)Funcin como un TADLas funciones currificadas, en tanto valores, pueden ser tambin pensandas como un TAD, para el cual:  su nica operacin primitiva es la aplicacin, definida entre una funcin y otro valor. Esta operacin, a su vez tambin es una funcin, llamada apply, (funcin ($) en el Prelude de Haskell). Las dems operaciones complementarias, como la composicin, se construyen a partir de la aplicacin.  sus valores son cada una de las funciones posibles. As, por ejemplo, even, odd, (+) son todos valores del tipo funcinFuncin desde el clculo lambdaDesde el punto de vista del clculo lambda, la funcin es LA primitiva del lenguaje, y todas las funciones son annimas, es decir, son expresiones lambda. Todo, hasta los nmeros, pueden ser expresados con una funcin con suficiente imaginacin.Funciones en HaskellLas funciones en Haskell presentan todas las carectersticas mencionadas anteriormente. A modo de resumen, decimos que:  Las funciones son transformaciones matemticas, que presentan transparencia referencial, y por tanto libres de efecto  Las funciones son valores  Las funciones tienen tipo funcin ((-&amp;gt;) a b), que est determinado por su dominio e imagen. Una funcin de enteros en booleanos tiene tipo Int -&amp;gt; Bool  Las funciones son un caso particular de las relaciones, que presentan unicidad y existencia para todo su dominio.  Las funciones estn currificadas, por lo que no existen funciones de ms de un argumento realmente, sino que se emulan a partir de funciones de un argumento que devuelven otra funcin que toma los parmetros restantes.  La operacin primitiva de la funcin es la aplicacin, por la cual se evala una funcin pasandole sus argumentos y obteniendo un resultado  El mecanismo de la evaluacin de las funciones es la reduccin (reduccin )  Dado que la nica operacin primitiva del tipo funcin es la aplicacin, slo es funcin aquello todo y slo lo que pueda ser aplicado. Moraleja: no tiene sentido hablar de funciones de cero argumentos, ya que no pueden ser aplicadas"

} ,

{

"title"    : "Conceptos basicos del diseno",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/conceptos-basicos-del-diseno.html",
"date"     : "",
"content"  : "ModeloUn modelo es una simplificacin. Es una interpretacin de la realidad que abstrae los aspectos relevantes para la solucin de un problema. (Definicin extrada de Domain Driven Design de Eric Evans.DominioTodo programa de software que se va a construir, surge como una idea, o una necesidad, que est relacionada con alguna actividad o inters. Estas actividades o intereses y el conjunto de reglas y caractersticas que lo componen, son el dominio de un problema. Cuando vayamos a construir un programa, debemos conocer y entender el dominio para poder encarar una solucin al problema que tenemos. Por supuesto que la informacin puede ser mucha, y en algunos casos difcil de entender, por lo que debemos crear modelos que simplifiquen, seleccionen y estructuren el conocimiento de manera de enfocarlo en lo que necesitamos para solucionar el problema.HeursticaLa heurstica es una medida. No es una medida cuantitativa como una longitud o un peso, sino una medida que me permite establecer un valor de referencia de una caracterstica cualitativa.Podemos hablar de que una heurstica es una buena prctica, que permite comparar dos objetos de estudio en base a una determinada caracterstica. No vamos a poder establecer un valor numrico para compararlos pero igualmente nos va a poder permitir saber si un objeto es ms o menos que el otro en ese aspecto.Por ejemplo, si hablamos de la simplicidad de un diseo, no podemos decir que un sistema tenga complejidad 3.5 complejidoios; pero s podemos decir que un diseo es ms o menos simple que otro.Las heursticas son tiles cuando no disponemos de los medios cientificos para usar otras medidas.Es equivocado buscar que una heurstica se convierta en un nmero medible, eso resulta contradictorio por su propia definicin. Por lo tanto, en elementos cualitativos, es imposible establecer medidas cuantitativas. Aunque resulte tentador convertir una heurstica en una medicin debemos evitar esa tentacin a todo costo.Por ejemplo un error comn es hablar de complejidad en nmero de clases o nmero de mtodos, de la misma manera que no podemos medir la complejidad de una solucin por la cantidad de lneas de cdigo involucradas. Estas medidas son apenas indicios pero es necesario analizar las clases, los mtodos, el cdigo para poder determinar si efectivamente esa solucin resulta ms compleja que otra.Cohesin  Una clase es cohesiva si podemos definirle un objetivo claro y puntual.  Un mtodo es cohesivo si tiene un nico objetivo.Emitir una factura y calcular el total de facturacin est bueno que estn en diferentes mtodos. En general, tener mtodos con efecto colateral (emitir factura, realizar un descuento, firmar una libreta de un alumno, cambiar el sueldo bsico a un empleado) y mtodos que no tengan efecto (conocer el sueldo de un empleado, saber el promedio de notas de un alumno en finales, conocer el total de facturacin de un mes para un cliente, etc.) es una buena prctica, tambin es bueno abstraer ideas que se repiten en la misma clase dndole un nombre y dejndolo en un mtodo aparte. As por un lado evitamos duplicar cdigo y por otro aumenta la cohesin de un mtodo: se concentra en hacer slo una cosa por vez.Por eso mismo un Cliente representa todo lo que un cliente puede abstraer. Si hay una clase Empresa es porque representa para nosotros una abstraccin importante en el sistema, no para que la Empresa tome decisiones que son del cliente. El cliente tiene atributos + comportamiento. As aumentamos la cohesin de nuestro sistema. De lo contrario, la Empresa toma responsabilidades de un Cliente, de un Empleado, etc. y como hace muchas cosas a la vez, el objetivo que cumple es difuso y la consecuencia de esta menor cohesin es el impacto que tiene cualquier modificacin de la estructura interna de un cliente, un empleado o una factura.AcoplamientoEs el grado en que los componentes de un sistema se conocen.Un cliente conoce sus facturas para calcular el total, y est bien que las conozca. Lo que es nocivo para el cliente es conocer de ms o de menos. De ms porque si el cliente le pide las lneas (los renglones) a cada factura y luego a cada lnea le pide el precio unitario de cada producto, cualquier modificacin en el clculo del precio de un producto (por ejemplo, descuento por cantidad dependiente del producto), el que se ve directamente afectado es el cliente.Ejemplo de cdigo con alto nivel de acoplamientopublicBigDecimalgetMontoTotal(){BigDecimaltotal=newBigDecimal(0);for(Facturafactura:this.facturas){for(Renglonrenglon:factura.renglones){total=total.add(renglon.getProducto().getPrecioUnitario()*renglon.getCantidad());}}returntotal;}Aqu vemos que un cliente conoce a objetos factura, pero tambin a renglones de factura y a productos.Si el cliente conoce de menos no tiene forma de saber el total de facturacin si no sabe que cada factura tiene como interfaz un mtodo que me permite saber el totalpublic BigDecimal getTotal()El mismo ejemplo con nivel adecuado de acoplamiento entre cliente y facturapublicBigDecimalgetMontoTotal(){BigDecimaltotal=newBigDecimal(0);for(Facturafactura:this.facturas){total=total.add(factura.getTotal());}returntotal;}Acoplamiento explcito e implcitoEn algunos casos, el acoplamiento entre dos entidades de software no es fcilmente detectable, por lo que se llaman acoplamientos implcitos. Esto se produce cuando una entidad de software para su funcionamiento depende de una caracterstica de otra que no est visible en su interfaz pblica y en cambio forma parte de su implementacin interna. En algunos libros este concepto puede encontrarse mencionado como Program to an interface, not to an implementation.El acoplamiento entre dos entidades de software produce una dependencia: un cambio en una de ellas posiblemente produzca un cambio en la otra. Al modificar una entidad de software es importante poder conocer cules son todas las otras entidades que pudieran ser afectadas por este cambio. Por eso, en el caso en que tengamos un acoplamiento, siempre es preferible que lo explicitemos, ya que facilitar la mantenibilidad del sistema y nos dar una herramienta para asegurar la consistencia ante las modificaciones.Requerimientos y casos de usoUn caso de uso es una secuencia de interacciones que se desarrollarn entre un sistema y sus actores en respuesta a un evento que inicia un actor principal sobre el propio sistema. Cuando hacemos especificaciones de los casos de uso definimos la interaccin entre usuario y sistema, dejando claro el lmite entre lo que debe proporcionar el usuario y lo que el sistema debe responder.Los casos de uso pueden ser tiles para establecer requisitos de comportamiento, pero no establecen completamente los requisitos funcionales ni permiten determinar los requisitos no funcionales. Los casos de uso deben complementarse con informacin adicional como reglas de negocio, requisitos no funcionales, diccionario de datos que complementen los requerimientos del sistema.Un requerimiento es algo que el sistema debe hacer para lograr el objetivo de un usuario.Ms sobre requerimientosLinks relacionados  Volver a Diseo de Sistemas"

} ,

{

"title"    : "Conceptos de ingenieria de software y de sistemas",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/conceptos-de-ingenieria-de-software-y-de-sistemas.html",
"date"     : "",
"content"  : "Ingeniera de software e ingeniera de sistemasQu es un sistema?Sistemas legacy, desarrollos a medida y enlatadosProceso de softwareRequerimientosRequerimientos funcionalesLos requerimientos funcionales son las capacidades o funcionalidades de un sistema de software. Detallan el comportamiento del sistema. En otras palabras, lo que el sistema debe proveer. Hay distintos tipos de requerimientos no funcionales:Procesos de NegocioLos procesos de negocios permiten especificar como un proceso se lleva a cabo a travs de la organizacin, ya que requiere intervencin de diferentes actores y reas, en diferentes lugares y tiempos.Casos de UsoLos caso de uso definen una interaccin entre un actor y el sistema, para lograr un objetivo de negocio especifico en un lugar y momento especifico.Requerimientos no funcionalesLos requerimientos no funcionales son aspectos que debe tener el sistema, estos pueden o no ser especficos de una funcionalidad (el tiempo de respuesta para procesar el alta de una tarjeta SUBE va web no debe exceder los 3 segundos o el sistema debe funcionar 7 x 24), definen la calidad y las caractersticas que el sistema debe soportar. Tambin conocidos como atributos de calidad, o cualidades del software algunos de estos son:  Performance  Availability (Disponibilidad)  Security (Seguridad)  Testability (Testeabilidad)  Modifiability (Modificabilidad)  Usability (Usabilidad)Ejemplos de restricciones posibles:  tecnolgicas: el sistema debe funcionar en un browser Internet Explorer 8  superior, Mozilla Firefox 5.0.3 y Safari en cualquier versin, tiene que construirse en una tecnologa Open Source, tiene que ser Web based  normativas o legales: el sistema debe estar construido segn estndares de ley Sarbanes-Oxley, el software debe contemplar que el proceso de fabricacin de los productos se adapte a las normas ISO 9000, el sistema debe cumplir con el anlisis de vulnerabilidad dispuesto por la gerencia de Seguridad Informtica  de calidad: disponibilidad: el sistema debe estar disponible 6 x 20 / 7 x 24, performance: las consultas de cliente por nombre no pueden tardar ms de 3 segundos, escalabilidad: se debe pemitir agregar nuevos tipos de cliente en el futuro, usabilidad: el sistema debe permitir a un usuario nuevo capacitarse en menos de una semana.Ms sobre cualidades del softwareLinks relacionados  Volver a Diseo de Sistemas"

} ,

{

"title"    : "Configuracion de maven para poder utilizar las herramientas de uqbar",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/configuracion-de-maven-para-poder-utilizar-las-herramientas-de-uqbar.html",
"date"     : "",
"content"  : "Para poder utilizar los artefactos Maven desarrollados por Uqbar debemos agregar los repositorios de donde bajar los artefactos de Uqbar a la configuracin de Maven. Esta configuracin se debe indicar en el archivo settings.xml, que se ubica en:  Windows: tu directorio de usuario + .m2&amp;#92;settings.xml. Por ejemplo, si tu usuario es Juana, e instalaste Windows en el disco C:, debera estar en C:&amp;#92;Users&amp;#92;Juana.m2&amp;#92;settings.xml  Linux: tu directorio de usuario (~) + .m2/settings.xml. Por ejemplo, si tu usuario es juana, debera estar en ~/.m2/settings.xml o /home/juana/.m2/settings.xmlDado que .m2 es un directorio oculto, debs activar la configuracin para verlos. Te dejamos las instrucciones para Windows y LinuxEl contenido de tu archivo settings.xml debera quedar as:&amp;lt;settings xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;            xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;            xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&amp;gt;   &amp;lt;profiles&amp;gt;     &amp;lt;profile&amp;gt;       &amp;lt;id&amp;gt;uqbar-wiki&amp;lt;/id&amp;gt;       &amp;lt;repositories&amp;gt;         &amp;lt;repository&amp;gt;           &amp;lt;id&amp;gt;uqbar-wiki.org-releases&amp;lt;/id&amp;gt;           &amp;lt;name&amp;gt;uqbar-wiki.org-releases&amp;lt;/name&amp;gt;           &amp;lt;url&amp;gt;http://maven.uqbar.org/releases&amp;lt;/url&amp;gt;         &amp;lt;/repository&amp;gt;         &amp;lt;repository&amp;gt;           &amp;lt;snapshots/&amp;gt;           &amp;lt;id&amp;gt;uqbar-wiki.org-snapshots&amp;lt;/id&amp;gt;           &amp;lt;name&amp;gt;uqbar-wiki.org-snapshots&amp;lt;/name&amp;gt;           &amp;lt;url&amp;gt;http://maven.uqbar.org/snapshots&amp;lt;/url&amp;gt;         &amp;lt;/repository&amp;gt;       &amp;lt;/repositories&amp;gt;     &amp;lt;/profile&amp;gt;   &amp;lt;/profiles&amp;gt;   &amp;lt;activeProfiles&amp;gt;     &amp;lt;activeProfile&amp;gt;uqbar-wiki&amp;lt;/activeProfile&amp;gt;   &amp;lt;/activeProfiles&amp;gt; &amp;lt;/settings&amp;gt;"

} ,

{

"title"    : "Configuraciones generales para cualquier eclipse",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/configuraciones-generales-para-cualquier-eclipse.html",
"date"     : "",
"content"  : "Hay varias cosas que es til configurar en Eclipse, independientemente del lenguaje que elijan.Configuraciones adicionales de EclipseInstalled JREUna de las configuraciones ms importantes, es el compilador que estar usando Eclipse para nuestro cdigo Xtend. En el ejemplo de arriba, hemos configurado un compilador de Java 1.11 (consult con tus docentes qu versin de JDK hay que usar). Es preciso recalcar que deben apuntar a una JDK (con el compilador) y no a una JRE o no podrn ejecutar ningn programa Xtend, ni Java.A continuacin te dejamos una animacin que muestra cmo configurar otra JDK, para lo cual hay que pasar el directorio raz (no el bin donde residen el compilador y los dems programas de Java).New &amp;gt; Artefactos de XtendPara que cuando hagas New &amp;gt; File te aparezcan las clases y las interfaces Xtend, Window &amp;gt; Customize Perspective &amp;gt; solapa Menu Visibility &amp;gt; expands File &amp;gt; New &amp;gt; y seleccions las de Xtend (Xtend class, inteface, annotation y enum).CompilerAlgunas versiones de Eclipse utilizan por defecto compatibilidad con el compilador Java 1.4, algo que no es conveniente si vamos a trabajar con herramientas como Generics o Annotations que vienen a partir del JDK 1.5.Para esto deben ir a Window Preferences &amp;gt; Java &amp;gt; Compiler &amp;gt; y donde dice JDK Compliance subir la propiedad Compiler compliance level de 1.4 a una superior.En caso contrario al bajar proyectos compilados en JDKs superiores aparecern mensajes de error como estos:Syntaxerror,annotationsareonlyavailableifsourcelevelis1.5orgreaterSyntaxerror,parameterizedtypesareonlyavailableifsourcelevelis1.5orgreaterEncoding (slo Windows)Para no tener problemas con los tildes y dems caracteres especiales al bajarse los ejemplos conviene tener sincronizado el mismo encoding. Para eso, desde la barra de men: Window &amp;gt; Preferences, filtrar por encoding y cambiar todos a UTF-8 o ISO 10646/Unicode(UTF-8). Por ejemplo: En General &amp;gt; Workspace &amp;gt; Text file encoding, seleccionar Other &amp;gt; UTF-8. Aplicar cambios.SpellSi van a programar en espaol, es recomendable desactivar el diccionario (viene por defecto en ingls). Para ello filtrar en el men por la palabra spell y desactivar la correccin ortogrfica (Spelling &amp;gt; desactivar el check Enable spell checking). Aplicar cambios.Otra opcin es que se bajen un diccionario espaol de internet y lo configuren.WarningsEn varios lenguajes de la JVM nos aparecer una molesta advertencia sobre la serializacin de clases, algo que por el momento no necesitamos. Conviene desactivar el warning default de clases serializables que no definan un identificador de versin: Window &amp;gt; Preferences, filtrar por Serializable, solapa Java / Compiler / Errors/Warnings, Potential programming problems, y se setea el valor de Serializable class without serialVersionUID a Ignore. Aplicar cambios.Opcionalmente, nosotros recomendamos subir a Warning estas dos configuraciones  Potential null pointer access  Redundant null checkShortcutsEn algunas distribuciones de Linux existe un shortcut por defecto que es Ctrl + Space, que colisiona con el shortcut del content assist de Eclipse . Para solucionar el problema, hay que deshabilitar el binding: en Ubuntu: System Settings -&amp;gt; Keyboard-&amp;gt; Shortcuts en Lubuntu: click en el logo que esta abajo a la izquierda -&amp;gt; Preferencias -&amp;gt; Metodos de entrada por Teclado y se cambia a DisabledConfiguracin de MavenWindow &amp;gt; Preferences &amp;gt; Maven, debe tener esta configuracin:  Download repository index on startup, al igual que Update Maven projects on startup  deben estar destildados para evitar demoras al iniciar tu Eclipse  Por el contrario, Download Artifact Sources y Download Artifact JavaDoc deben estar tildados, porque eso descargar documentacin y fuentes de los componentes que uses, algo bastante til cuando necesitamos solucionar un error o entender de qu manera comunicarnos con l.  la marca Offline debe estar destildada, o no intentar conectarse a Internet para bajar componentes.Filtros de paquetesEn un JDK estndar hay muchos paquetes, y slo usaremos unos pocos. Es recomendable indicarle a Eclipse que no nos sugiera paquetes que casi con seguridad no usaremos.Para eso, en Java &amp;gt; Appearance &amp;gt; Type Filters, agregar las siguientes expresiones:bashsun.**.internal.*edu.emory.mathcs.backport.*java.awt.*java.swing.*org.omg.*"

} ,

{

"title"    : "Conocimiento de dominio y refactoring",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/conocimiento-de-dominio-y-refactoring.html",
"date"     : "",
"content"  : "Se puede iniciar un refactoring sin conocimiento del dominio?Se puede refa La respuesta corta es: no, no se puede (*) realizar un refactor sin conocimiento del dominio.Ahora s, la respuesta larga.Primero, aclaremos algunas ideas:dicen que no necesitan conocerlo para hacer un refactoringOjo, lo que comentamos en clase fue que no necesito conocer el dominio para identificar potenciales fallas en el diseo, que se manifiestan a travs del cdigo. Es decir, sin conocimiento de dominio podemos slo identificar code smells, que tienen asociados posibles refactors.S, remarco el posible/potencial porque es importante que entendamos que se trata slo de una heurstica. Quizs el diseo s es correcto, o quizs el refactor que deberamos encarar no tiene nada que ver con lo que propone el code smell. Por eso, tambin ojo con esto:pero no hace falta saber nada acerca del dominio para darte cuenta que tenes q delegar en subclases en ves de preguntar por el tipoEsto tampoco es correcto, si bien es muy probable que haya que emplear polimorfismo (y no necesariamente utilizar herencia), necesitaremos conocer al dominio y a la tecnologa como para poder justificar ese cambio (**) . De lo contrario, si pensaramos que para toda estructura de cdigo que se corresponde con un code smell hay un cambio que tenemos que realizar, estariamos (casi) insinuando que hay aspectos del diseo automatizables. Yo prefiero descreer de esto.En resumen hasta ac, parafrasendote, no necesito conocer al dominio para encontrar code smells, pero s lo necesito para saber si efectivamente hay una falla de diseo, y en tal caso, determinar el refactor ms apropiado que los subsane.Pero este otro comentario:si el sistema tiene un elevado nivel de acoplamiento, hacer un refactoring de algo te lleva a cambiar 90 cosas msque a menos que sepas como viene el sistema y cul es la funcionalidad de cada parte y su dependencia, no lo vas a poder hacerme lleva a otra pregunta: supongamos que tenemos conocimiento del dominio; podemos realizar un refactor sin conocimiento del diseo actual? Se los dejo para pensar, sera interesante si alguien se anima proponer una solucin al dilema (sic).Y finalmente, buena observacin:despus de cada modificacin en el diseo hay q actualizar la documentacins, si modificamos el diseo de un sistema, deberamos impactarlo en la documentacin que llevemos de este. Como eso puedo ser tedioso, y en los momentos iniciales del desarrollo de un sistema los cambios de diseo son constantes, es frecuente postergar la realizacin de una documentacin exhaustiva hasta que el diseo a ms alto nivel (llammoslo arquitectura) quede estabilizado.Saludos!(*) no se puede en sentido informal: es ciertamente posible hacerlo, pero no es una gran idea, por lo expuesto precisamente por vos, al menos para bases de cdigo (proyectos) no triviales.Por ejemplo, en nuestro ejercicio de monedero, el dominio era muy simple: poner y sacar dinero en una cuenta, llevando un historial del mismo, y validando algunas reglas de negocio, por eso con apenas algunos minutos de anlisis podamos saber qu refactorizar. Pero en sistemas con dominios ms complejos y muchas ms tecnologas involucradas, hubiramos necesitado mucho ms tiempo para determinar exactamente qu hacer."

} ,

{

"title"    : "Creacion de objetos  con parametros",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/creacion-de-objetos--con-parametros.html",
"date"     : "",
"content"  : "Eso, lo que dijo Leo. Pero algunas cositas ms En Smalltalk no hay constructores, hay mensajes y ya.Todos los mensajes devuelven un objeto (p.ej. cuando le pons el ^ sombrerito). Los mtodos que no tienen el sombrerito, es como si abajo de todo dijeran ^self.p.ej. Golondrina &amp;gt;&amp;gt; energia: unaEnergia&quot;Setterdelavariableenergia&quot;energia:=unaEnergia.^selfEntonces no hay constructores, pero podemos hablar de mensajes que le mandamos a la clase (mensajes de clase) y que devuelven una instancia de esa clase. Lo que pods hacer es implementar tus propios mtodos de clase.El mensaje new no recibe parmetros, as que con new no vas a poder hacer eso que decsp.ej. pepita := Golondrina nuevaEnergiaInicial: 100 ubicacionActual: buenosAires. &amp;lt;&amp;#92;&amp;#92;En un workspace&amp;gt;El objeto que recibe el mensaje es la clase Golondrina, entonces self dentro del mtodo &amp;#92;#nuevaEnergiaInicial:ubicacionActual: apunta a la clase Golondrina------------------------------------------------------------------------(Mtodo de clase de Golondrina) nuevaEnergiaInicial: unaEnergia ubicacionActual: unLugar`|nuevaGolondrina|``&quot;InstanciamosunanuevaGolondrina,acordatequeselfapuntaalaclaseGolondrinaenesteejemplo&quot;``nuevaGolondrina:=selfnew.``&quot;Lemandamoselmensajeenergia:alanuevainstancia&quot;``nuevaGolondrinaenergia:unaEnergia.``&quot;Lemandamoselmensajeubicacion:alanuevainstancia&quot;``nuevaGolondrinaubicacion:unLugar.``&quot;Sinoescribimosnadamsdevolveraself,enestecasolaclaseGolondrina,yseromperatodoenelworkspacecuandoleempecemosahablarapepita(queapuntaraalaclaseGolondrinaenvezdeaunanuevainstancia&quot;``&quot;Portodoesoagregamos&quot;``^nuevaGolondrina`------------------------------------------------------------------------De todas formas en el propio workspace se puede instanciar en menos lneas sabiendo que los mensajes que son setters devuelven el objeto receptor de ese mensaje&quot;Puse los parntesis en rojo para que se entienda ms, pero no son necesarios&quot;pepita := ((Golondrina new) energia: 100) ubicacion: buenosAires.Como es peligroso asumir eso y no ayuda a la expresividad, se puede usar un operador punto y coma &amp;lt;;&amp;gt; (que es un chiche sintctico de Smalltalk) para mandar mensajes en cascada.Object &amp;gt;&amp;gt; yourself`&quot;Elmensajeyourselfdevuelveself,cuac!&quot;``^self`Escribir pepita := Golondrina new.Es igual a escribir pepita := (Golodrina new) yourself.Escribir &quot;Evaluar todo esto nos devuelve una instancia de la clase Golondrina, con 100 de energia y con buenosAires como ubicacin&quot; pepita := Golondrina new. pepita energia: 100. pepita ubicacion: buenosAires. pepita.Es lo mismo que pepita :=`Golondrinanew``energia:100;``ubicacion:buenosAires;``yourself`Bue, me pareci copado contar todo esto :$Si no se entendi algo prubenlo, usen el inspect y tiene que salir. O de ltima, vuelvan a preguntar =PSaludos,El 9 de mayo de 2009 14:16, Leonardo &quot;Pelado&quot; Cesario &amp;lt;peladosnow@gmail.com&amp;gt; escribi:`Hernan:``Primerotepreguntariasiyavistemetodosdeclase.``Encasoafirmativovospodeshacertumetododecreacion,porejemplonew:``Noesverdadqueelnewenviaelmensajeinitialize(porlomenosnopasaentodaslasversionesdeST)``Sipodesredefinirelnewparaquellamealinitialize.Detodasformaslaideadelinitializeesinicializar(cuak!)elestadointerno,nodepasarleparametros.``Eltemadesilocreoconparametrosoluegoselosmandopormediodeotromensaje,esuntemadediseo.``Esperoseaclareladudayteayudeadecidir.``Saludos!``LeoC`"

} ,

{

"title"    : "Creacion de un proyecto maven basico",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/creacion-de-un-proyecto-maven-basico.html",
"date"     : "",
"content"  : "El objetivo de este tutorial es crear una aplicacin base utilizando las siguientes tecnologas:  Java  Eclipse  Git  MavenSe asume la presencia de un entorno con todas esas herramientas configuradas adecuadamente. En caso de duda recomendamos ir al siguiente link.Creacin del proyectoPaso 1: Creacin del proyecto MavenDesde el men principal del Eclipse seleccionamos File &amp;gt; New Project Maven Project. En la primera pantalla del asistente  podemos elegir un archetype, o bien chequear la opcin Create a simple project (skip archetype selection) que es la opcin por defecto que vamos a elegir.Al presionar Next, nos aparece el siguiente paso, donde debemos elegir      el Group Id refleja la organizacin para la que vamos a construir el proyecto (por lo general depende de la materia que ests cursando)        el Artifact Id que se asocia al nombre del proyecto        la versin, donde dejamos el valor por defecto  Paso 2: Agregar bibliotecas necesarias al pomEn el archivo pom.xml del raz del proyecto podemos agregar bibliotecas a nuestro proyecto en el nodo dependencies&amp;lt;dependencies&amp;gt;   &amp;lt;dependency&amp;gt;       &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt;   &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;   &amp;lt;version&amp;gt;1.2.13&amp;lt;/version&amp;gt;   &amp;lt;/dependency&amp;gt;   &amp;lt;dependency&amp;gt;   &amp;lt;groupId&amp;gt;commons-collections&amp;lt;/groupId&amp;gt;   &amp;lt;artifactId&amp;gt;commons-collections&amp;lt;/artifactId&amp;gt;   &amp;lt;version&amp;gt;3.1&amp;lt;/version&amp;gt;   &amp;lt;/dependency&amp;gt;&amp;lt;/dependencies&amp;gt;Tambin podemos cambiar el groupId, artifactId, la versin o bien apuntar a un parent project (para mayor informacin consulte con el docente de su materia)Paso 3: Importacin de la informacin al entornoCada vez que se modifique el archivo pom.xml, debemos actualizar nuestro entorno (Eclipse, IntelliJ o el que fuera) mediante un botn derecho sobre el proyecto Maven &amp;gt; Update project, o bien por lnea de comando hacer:mvneclipse:eclipse-DdownloadSources=true-DdownloadJavadocs=trueCmo encontrar bibliotecasSi no estamos seguros del nombre o la ltima versin de un componente, podemos hacer la correspondiente bsqueda en http://search.maven.orgDefinir repositorios adicionalesSi tenemos bibliotecas que no podamos encontrar en el repositorio default de maven (repo1.maven.com), debemos agregar un repositorio adicional. Hay muchas formas de hacer esto, una sencilla es agregarlo en el pom, antes de las dependencias. Un repositorio posible para esta tarea es el de JBoss, para agregarlo pueden hacer:&amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt;&amp;lt;id&amp;gt;jboss&amp;lt;/id&amp;gt;&amp;lt;url&amp;gt;http://repository.jboss.org/maven2&amp;lt;/url&amp;gt;&amp;lt;/repository&amp;gt;&amp;lt;/repositories&amp;gt;Links relacionados      Una vez creado el proyecto, para que otras personas quieran tenerlo en su propio entorno de trabajo, conviene mirar las instrucciones para descargar un repositorio git.        Temario Algoritmos III  "

} ,

{

"title"    : "Crear un proyecto en xp dev",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/crear-un-proyecto-en-xp-dev.html",
"date"     : "",
"content"  : "Crear una cuenta de usuario en xp-dev pendienteCrear un proyecto en xp-devCreacin del proyectoUna vez logueados en el sitio de xp-dev, en la solapa de My Projects, abajo de todo se puede ver el formulario Create a New Project.Al completar el formulario se recomienda elegir la opcin Trak como source control. Luego clickear en Create Project.Creacin del repositorio svnEn la pgina siguiente elegir la solapa Source Control y ah seguir el link: Enable Source Control. En el formulario seleccionar la opcin Create Initial Directories y clickear sobre Save.En la pgina resultante se mostrar la URL del repositorio que se acaba de crear, por ejemplo:http://svn2.xp-dev.com/svn/proyecto-de-pruebaEs importante registrar esa URL para poder publicar sus proyectos ah.Configuraciones AdicionalesEligiendo la solapa Settings y desde esa pgina la opcin Permissions se pueden realizar invitaciones a otros usuarios, clickeando sobre Assign Permission To New User."

} ,

{

"title"    : "Instalacion de Entorno para HTML y CSS",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/css-instalacion.html",
"date"     : "",
"content"  : "EntornoSi ests en entorno Windows te recomendamos instalarte Git BashEditor de Texto: Visual Studio CodeEl editor de texto que vamos a soportar en la cursada es Visual Studio Code (hay una versin portable si ests en una mquina sin privilegios de administrador).Dentro de Visual Studio Code, te recomendamos que crees un perfil vaco y lo asocies a tus nuevos proyectos Angular (pods ver cmo se trabaja con perfiles en VSCode en este video. Tambin te dejamos este tutorial muy piola - en ingls y la documentacin oficial).InstalacinImportar extensionesPods importar este archivo que trae todas las extensiones para CSSInstalacin manualSi no pods instalar las extensiones del Visual Studio Code manualmente. Para 2025 son las siguientes  IntelliSense for CSS class names in HTML - Zignd: te ofrece autocompletado para clases en HTML  CSS Peek - Pranay Prakash: para poder encontrar las definiciones de estilos desde el HTML (con F12 - Go to definition)  HTMLHint - HTMLHint: validacin de sintaxis de HTML. Atencin que la extensin HTMLHint de Mike Kaufman est deprecada, desde all te redireccionan a la nueva.  Auto Rename Tag - Jun Han: permite renombrar un tag tanto al abrir como al cerrar el tag.  Live Server (Five Server) - Yannick: levanta un servidor local y refresca automticamente el navegador ante cualquier cambio que hagas.  Image preview - Kiss Tams: muestra previsualizaciones de imgenes en el margeny no te olvides de instalarte el Git Extension Pack - Don Jayamanne para poder integrarte con gitTambin es bueno chequear en la configuracin (Ctrl + , o Cmd + , en Mac) que tengas activada la opcin Bracket Pair Colorization.Alternativa a Visual Studio CodeWeb StormOtra opcin es utilizar Web Storm (de la suite de IntelliJ), si tienen una cuenta de la facultad pueden solicitar una licencia educativa. Solo que como no vamos a aprovechar todas las herramientas de este IDE poderoso quizs convenga ir por el Visual Studio Code.Trabajo onlineSi tens ganas de practicar fuera del TP, pods trabajar directamente desde el navegador con CodePen, o bien probar PreprosLinks relacionados  Temario Algoritmos III"

} ,

{

"title"    : "Css",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/css.html",
"date"     : "",
"content"  : "Es la forma ms recomendada de especificar y modificar las cuestiones estticas de una pgina HTML. La caracterstica principal es que separa estas declaraciones del propio html. As evita ensuciar la informacin (html) con cuestiones estticas (el archivo .css). Adems permite reutilizar estilos entre las diferentes pginas html, manteniendo consistencia entre el estilo de todo el sitio/aplicacin.SintaxisCSS tiene su propio lenguaje declarativo en el cual especificamos reglas. Una regla tiene la siguiente sintaxis:El selector nos permite aplicar el estilo a aquellos elementos que coincidan con dicha expresin. Luego el cuerpo de la regla contiene un conjunto de propiedades y valores para stos.Algunas propiedades aplican solo a algunos tipos de tags. Sin embargo, no es un lenguaje que compile o que tire errores. Simplemente si una propiedad no aplica a un tag, el browser no le va a dar bola.Un primer ejemplo para entender la sintaxisspan{text-align:center;}Aplica el valor center a la propiedad text-align de todos los tags de la pgina que sean de tipo &amp;lt;span&amp;gt; (en otras palabras, alinea un texto en el centro de donde est contenido).Selectores PrincipalesBsicamente lo primero que tenemos que saber sobre los selectores es que hay tres grandes tipos o formas de matchear nuestros tags.  Por tag, es decir a todos los tags de un tipo (por ejemplo h1, h2, etc).  Por clase (class), es decir a los tags a los que se les haya indicado un estilo determinado (mediante el atributo class).  Por id, es decir a un elemento especfico de la pgina segn su id.Ejemplo por tag (ya vimos otro arriba para &amp;lt;span&amp;gt;)td{text-align:center;color:red;}Aplica esas dos propiedades a todos los &amp;lt;td&amp;gt;.filaImpar{text-align:center;color:red;}Este selector, que comienza con un punto, indica que va a matchear con cualquier tag (no importa el tipo de tag), siempre que ste tenga el valor filaImpar en su atributo class. Por ejemplo matcheara con estos tags:&amp;lt;p class=&quot;filaImpar&quot;&amp;gt;Hola Soy un Prrafo&amp;lt;p&amp;gt;&amp;lt;span class=&quot;filaImpar importante&quot;&amp;gt;Hola Soy un Span&amp;lt;p&amp;gt;&amp;lt;tr class=&quot;conBordes fondoImportante filaImpar&quot;&amp;gt;     &amp;lt;td&amp;gt;Hola, soy una Fila&amp;lt;/td&amp;gt;&amp;lt;tr&amp;gt;Como se ve en el ejemplo anterior, un tag puede tener ms de un class. As los classes no tienen nada que ver con las clases de un lenguaje orientado a objetos. Pueden pensarlos ms bien como labels o etiquetas o marcas que pongo a los tags, para luego por CSS agregarle caractersticas visuales. As eventualmente uno en un proyecto grande, se creara su propia convencin con un conjunto de classes que reutilizara en todo su sitio. Por ejemplo titulo o menu, botonGrande, botonMediano, etc. Es una buena forma de elevar el nivel del html con nuevos significados.El ltimo ejemplo, matchear por id#unElementoEspecifico{text-align:center;color:red;}Este selector es el ms puntual o especfico, y permite matchear con tags, no importa su tipo, ni tampoco su class, sino que solo busca por id.&amp;lt;li id=&quot;opcionIrAAyuda&quot;&amp;gt;Ir a Ayuda&amp;lt;/li&amp;gt;&amp;lt;button id=&quot;volver&quot;&amp;gt;Volver&amp;lt;/button&amp;gt;Como en una pgina no deberan existir dos tags con el mismo id sin importar en qu tag o nivel se encuentre es el mecanismo menos recomendable para trabajar.Uso de CSS desde HTMLEl html usa el css mediante una declaracin en la seccin HEAD.&amp;lt;html&amp;gt;     &amp;lt;head&amp;gt;          ...          &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot; /&amp;gt;          ...     &amp;lt;/head&amp;gt;&amp;lt;/html&amp;gt;Donde styles.css sera mi archivo de estilos y estara, en este caso en la misma carpeta en que se encuentra este html. Tambin podramos usar una URL absoluta:&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css&quot;&amp;gt;Existen otras formas de incluir estilos en un html, sin embargo la mejor es la que ya citamos. Las dems involucran ensuciar el html, y las pueden ver en este linkCascadaLas reglas se aplican en cascada, esto significa dos cosas:  En primer lugar cada componente hereda determinados estilos de sus contenedores, por ejemplo un td (celda de una tabla) hereda los del tr (fila) y del table correspondientes. Los estilos que apliquen al componente especfico sobreescriben a los del contenedor, pero aquellos que no estn especificados se heredan. No todas las indicaciones de estilo son heredables (inheritable en ingls), es importante entender el comportamiento de cada una de las diferentes indicaciones de estilo.  En segundo lugar sobre cada componente pueden aplicarse ms de un estilo, que matcheen con ese componente segn su tag, class y id respectivamente. Esos diferentes estilos se van a combinar permitiendo que el estilo ms especfico sobreescriba los estilos ms generales, pero aun manteniendo las indicaciones correspondientes al estilo ms general que no sean redefinidas.Ejemplo de varias reglas aplicando al mismo tiempo sobre un tag.tr{text-align:center;}.resaltar{background-color:red;}Ambas reglas van a aplicar en este tag&amp;lt;tr class=&quot;resaltar&quot;&amp;gt;     &amp;lt;td&amp;gt;Hola, soy una celda&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;El texto se va a ver centrado y adems con fondo rojo.Combinando Selectores (OR)Es comn que tengamos que aplicar los mismos estilos a diferentes tags. Para evitar duplicacin de cdigo las reglas se pueden combinar. Ej:h1{text-align:center;color:red;}h2{text-align:center;color:red;}p{text-align:center;color:red;}Se puede refactorizar a esto:h1,h2,p{text-align:center;color:red;}La sintaxis entonces es:selector1, selector2, ... selectorN {     propiedad1: valor1;     propiedad2: valor2;     ...     propiedadN: valorN;}Se puede pensar como un or. Sera, si es un h1 o es un h2, o es un p.Ventajas del uso de CSSLa separacin de concerns (layout vs. configuracin esttica) permite dos cosas:      Configurar y personalizar el estilo que se muestre por usuario/regin/dispositivo y preservar el lema DRY (Dont repeat yourself), la pgina HTML aumenta su expresividad (es ms fcil de entender) los diseadores grficos se concentran el look &amp;amp; feel, decorando los botones, las tablas (grillas), el tipo de letra, los ttulos y tambin los logos, isotipos e imgenes que la aplicacin va a tener. Por lo general reciben un esqueleto de las pginas con datos de prueba escritos en forma manual        Por otra parte, los programadores se concentran en la lgica de presentacin y en la facilidad de uso por parte del usuario  Links relacionados  Temario Algoritmos III"

} ,

{

"title"    : "cual es la diferencia entre una tupla y una lista",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/cual-es-la-diferencia-entre-una-tupla-y-una-lista-.html",
"date"     : "",
"content"  : "En primer lugar vale la pena detenernos a pensar qu queremos modelar al usar tuplas y listas. La tupla representa una agrupacin de valores ordenados, cada uno con un significado particular ya que se intenta modelar una abstraccin compuesta por todos estos elementos. En estructurado podemos compararlas con los registros. Las listas sirven para modelar conjuntos de elementos, para agrupar valores independientes entre s.Tuplas y listas en HaskellUna cosa que suele confundir a la hora de diferenciar listas y tuplas es la idea de que el nmero de componentes de una tupla es fijo, qu quiere decir que es fijo si yo puedo tener 2-uplas, 3-uplas n-uplas?Lo que quiere decir es que las tuplas de distinta aridad son de distinto tipo, es decir no son comparables entre s. Es decir la tupla (a,a) y la tupla (a,a,a) son de tipos distintos y yo no puedo hacer una funcin que acepte ambas tuplas 1.En cambio, las listas s son ambas del mismo tipo ([a]) y entonces s puedo hacer una funcin que funcione en ambos casos.Ejemplos bsicosComencemos por ver qu tipos me dice el Haskell que tiene cada uno de los valores que mencionamos antes:Prelude&amp;gt;:t(True,True)(True,True)::(Bool,Bool)Prelude&amp;gt;:t(True,True,True)(True,True,True)::(Bool,Bool,Bool)Prelude&amp;gt;:t[True,True][True,True]::[Bool]Prelude&amp;gt;:t[True,True,True][True,True,True]::[Bool]Lo que hay que mirar en el ejemplo anterior es que las dos tuplas tienen tipos distintos ((Bool,Bool) y (Bool,Bool, Bool)), mientras que las dos listas tienen el mismo tipo ([Bool]).Adems podemos ver que el tipo de una tupla indica la cantidad de componentes, mientras que el tipo de una lista no eso quiere decir que todas las listas de booleanos son del mismo tipo, independientemente de la cantidad de componentes.Errores de tipoEs fcil ver que si intentamos trabajar con las dos tuplas como si fueran del mismo tipo vamos a tener problemas, un ejemplo sencillo es compararlas por igualdad. Si comparamos las dos listas obtenemos el resultado esperable:Prelude&amp;gt;[True,True]==[True,True,True]Falsepero si intentamos comparar las dos tuplas ocurre un error:Prelude&amp;gt;(True,True)==(True,True,True)&amp;lt;interactive&amp;gt;`:1:15:`` Couldn&#39;tmatchexpectedtype`(Bool,Bool)&#39; `` againstinferredtype`(Bool,Bool,Bool)&#39; `` Inthesecondargumentof`(==)&#39;,namely`(True,True,True)&#39; ``Intheexpression:(True,True)==(True,True,True) `` Inthedefinitionof`it&#39;:it=(True,True)==(True,True,True) `Uso en funcionesTambin podemos ver que una funcin puede manejar listas de cualquier longitud pero no pasa lo mismo con las tuplas. Si intentamos hacer una funcin todosVerdaderos, con listas es fcil:todosVerdaderosL[]=TruetodosVerdaderosL(x:xs)=x&amp;amp;&amp;amp;todosVerdaderosLxsAl cargar eso en el Haskell obtenemos:Prelude&amp;gt;:ltodosVerdaderos.hs[1of1]CompilingMain(todosVerdaderos.hs,interpreted)Ok,modulesloaded:Main.*Main&amp;gt;todosVerdaderosL[True,True]True*Main&amp;gt;todosVerdaderosL[True,True,True]TruePodramos intentar hacer lo mismo con tuplas, para ello agrego las dos definiciones:todosVerdaderosT(x,y)=x&amp;amp;&amp;amp;ytodosVerdaderosT(x,y,z)=x&amp;amp;&amp;amp;y&amp;amp;&amp;amp;zPero lamentablemente eso no es posible en Haskell:*Main&amp;gt;:r[1of1]CompilingMain(todosVerdaderos.hs,interpreted)todosVerdaderos.hs:5:17:` Couldn&#39;tmatchexpectedtype`(Bool,Bool)&#39; `` againstinferredtype`(a,b,c)&#39; `Inthepattern:(x,y,z)` Inthedefinitionof`todosVerdaderosT&#39;: ``todosVerdaderosT(x,y,z)=x&amp;amp;&amp;amp;y&amp;amp;&amp;amp;zFailed,modulesloaded:none.Una forma de definir la funcin es:todosVerdaderosT2(x,y)=x&amp;amp;&amp;amp;ytodosVerdaderosT3(x,y,z)=x&amp;amp;&amp;amp;y&amp;amp;&amp;amp;zeso si pasa los chequeos del haskell:Prelude&amp;gt;:r[1of1]CompilingMain(todosVerdaderos.hs,interpreted)Ok,modulesloaded:Main.Pero vemos que me obliga a usar las funciones separadamente:*Main&amp;gt;todosVerdaderosT2(True,True)True*Main&amp;gt;todosVerdaderosT3(True,True,True)TrueFinalmente, podemos ver que si se intenta intercambiar las funciones se produce un error:*Main&amp;gt;todosVerdaderosT2(True,True,True)&amp;lt;interactive&amp;gt;`:1:18:` Couldn&#39;tmatchexpectedtype`(Bool,Bool)&#39; `` againstinferredtype`(Bool,Bool,Bool)&#39; `` Inthefirstargumentof`todosVerdaderosT2&#39;,namely `` `(True,True,True)&#39; `Intheexpression:todosVerdaderosT2(True,True,True)` Inthedefinitionof`it&#39;: `it=todosVerdaderosT2(True,True,True)Para ms informacin, ver ac: Pattern_Matching_en_Haskell1 En realidad una funcin s podra recibir tuplas de distinto tipo, si la funcin es polimrfica. Pero eso escapa el objetivo del presente artculo."

} ,

{

"title"    : "Cuando usar parentesis",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/cuando-usar-parentesis.html",
"date"     : "",
"content"  : "A diferencia de matemtica y muchos lenguajes (como C o Java) en Haskell no es necesario utilizar parntesis al pasarle los parmetros a una funcin. Es decir, si tenemos una funcin de un parmetro en matemtica lo escribimos con parntesis: ; mientras tanto, en Haskell, simplemente se pone el parmetro al lado de la funcin .En el caso de tener ms de un parmetro en matemtica estamos acostumbrados a separarlos con comas, por ejemplo: ; en Haskell tampoco se utiliza esa sintaxis. En cambio simplemente se ponen los parmetros uno al lado del otro, separados por espacios:Entonces los parntesis se usan nicamente para  Alterar la precedencia  Tuplas  Usar operadores sin aplicarles todos los parmetros, caso tpico (+) o (+1).Alterar la precedenciaAntes que nada hay que entender qu significa el Concepto de Precedencia en un lenguaje de programacin.Los parntesis permiten naturalmente alterar la precedencia propia del lenguaje, por ejemplo si evaluamos2+3*4obtendremos como resultado 14, ya que la multiplicacin tiene mayor precedencia que la suma; utilizando parntesis podemos alterar ese comportamiento, si escrigimos(2+3)*4podemos lograr que la operacin de suma se ejecute antes que la multiplicacin y obtener 20 como resultado.Para poder utilizar esto eficientemente, hay que tener algn conocimiento de la Precedencia de los operadores ms comunes en Haskell.Ejemplos TBC Tuplas TBC Aplicacin parcial de operadores TBC "

} ,

{

"title"    : "Cuestiones basicas para resolver el parcial de objetos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/cuestiones-basicas-para-resolver-el-parcial-de-objetos.html",
"date"     : "",
"content"  : "Esta es una recopilacin de errores comunes a la hora de resolver un parcial de objetos. Son conceptos muy bsicos, es decir, esto debe considerarse como condiciones necesarias para aprobar el parcial; nunca como condiciones suficientes.Conceptos bsicosUtilizar los conceptos del paradigmaEncontrar abstracciones, aprovechar el polimorfismo, delegar responsabilidades, etc.Hay que programar con objetos, no vale programar como si fuera Algoritmos para aprender eso ya est Algoritmos.Repartir las responsabilidadesQue no me quede todo el cdigo en un mismo objeto. Es fcil verlo (por ejemplo) cuando una caja del diagrama de clases ocupa la mitad de la pgina.Que no todos los mensajes del workspace vayan al mismo objeto.Que no haya un objeto Sistema.Ser consistentePor ejemplo:  Si en algn lugar mando un mensaje y trato el resultado como una coleccin debo asegurarme de que la implementacin del mtodo devuelva una coleccin (lo mismo vale para colecciones como para cualquier otro objeto).  Si tengo muchos mtodos polimrficos todos deben recibir los mismos parmetros y devolver objetos del mismo tipo.  En un mtodo puedo usar las variables de instancia del objeto o los parmetros, cualquier otra variable mgica que aparezca constituye un error.Ser especficoIndicar las relaciones de conocimiento en el diagrama de objetos.Tambin los atributos que tiene cada objeto.Tambin tiene que quedar claro de qu tipo es cada parmetro que espera un mtodo, y qu devuelve.Elegir buenos nombres para clases, mtodos y variablesPor ejemplo diferenciar desde el nombre los mtodos que son rdenes de los que son consultas. Para los primeros conviene usar oraciones en infinitivo o en imperativo. Para las consultas en general usamos el indicativo:  camin o caminar podran indicar la orden de realizar una caminata (en el parcial vale poner el acento para que se note la intencin).  caminaste podra ser una consulta que devuelve un booleano indicando si camin  cuantoCaminaste podra ser una consulta que devuelve una cantidad.  Por otro lado, un nombre como caminata dificulta comprender la intencin.Esto es an ms importante si el mtodo en cuestin no est 100% correcto, ya que al menos permite entender lo que quisieron hacer.Cosas bsicas de SmalltalkSi bien no es nuestro objetivo saber bocha de Smalltalk, hay cositas que impactan directamente en la posibilidad o no de comprender lo que estn programando; entonces conviene darles bola:Tienen la gua de lenguajes, senla!Por ejemplo deberan aprovecharla para saber qu mensajes entiende una coleccin, no hace falta acordrselos de memoria para usarlos correctamente.No confundir mensajes con variablesY adems ser bien explcito en el diagrama y en el cdigo, cundo estn enviando un mensaje y cundo estn accediendo a una variable de instancia.La sintaxis es objeto-mensaje-parmetroNo da confundirse con eso!Identificar bien maysculas y minsculas.Los nombres de clase van con mayscula, al igual que las variables de clase.Todo lo dems va en minscula.Romper estas reglas obliga a que el corrector tenga dudas de lo que estn haciendo.El diagrama de clasesDebe ser conexo!No vale slo dibujar las cajitas con los mtodos y atributos, las relaciones entre los objetos son igual de importantes. Una clase que no se relaciona con nadie no aporta a la solucin porque nadie puede mandarle mensajes a sus instancias. Si slo se comunican con otros objetos por parmetros se dibuja una flecha con lnea punteada con la palabrita  que parte del receptor del mensaje en cuestin y llega al objeto que se enva por parmetro.Especificar bien las relaciones, diferenciar la herencia de la asociacin o conocimiento.Si la flecha que se usa para los atributos tiene un tringulo en la punta o si la de herencia es una flecha simple est mal!La presentacin del parcialIndicar cmo se usa lo que hicieronPara cada punto del parcial, indicar qu mensaje hay que mandarle a qu objetoEl orden del cdigo es importante a la hora de entender la solucin propuestaEst bueno ordenarlo punto por punto (en contraposicin a juntar todos los mtodos de una misma clase). No solo facilita la correccin sino adems los ayuda a no olvidarse de nadaTambin est bueno ir de lo general a lo particular, es decir, comenzar por el mensaje que se llamara desde el workspace y luego los que se llaman desde ah, as sucesivamente hasta los mensajes ms especficos.ProlijidadHagan buena letra, no amontonen todo, etc.No escribir muy apretadoAs hay lugar para hacer anotaciones y correcciones.OrtografaLos docentes tenemos indicacin explcita del departamento de desaprobar a quienes tengan muchos errores de ortografa, as que pilas con eso.De paso no estara mal practicar un poquito de redaccin, aunque eso va ms que nada para el final.Otras cuestiones importantesNo devolver Strings para informar un error!Los errores se informan con self error.Evitar repeticin de cdigoEn el caso general no est bien tener cdigo repetido; esto suele indicar una falta de abstraccin o bien un problema de asignacin de responsabilidades."

} ,

{

"title"    : "Currificacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/currificacion.html",
"date"     : "",
"content"  : "Cuando hablamos de currificacin nos referimos a que todas las funciones reciben un nico parmetro como mximo. El hecho de que sea posible definir funciones de ms de un parmetro se debe a que son funciones currificadas. Cuando evaluamos por ejemplo, max 4 5, lo que sucede es que se le aplica el nmero 5 a la funcin resultante de aplicarle el 4 a max, o sea que se transforma en (max 4) 5Por eso, cuando escribimos el tipo de una funcin no hay una distincin entre lo que son los parmetros y el valor de retorno, se desdibuja un poco la diferencia. Por ejemplo, el tipo de max puede escribirse de dos formas:max :: (Ord a) =&amp;gt; a -&amp;gt; a -&amp;gt; a --- Forma tradicionalmax :: (Ord a) =&amp;gt; a -&amp;gt; (a -&amp;gt; a) --- Forma currificadaLa segunda denota que max es una funcin de 1 parmetro que retorna una funcin que espera y retorna algo del mismo tipo que lo que ella espera.Esto es lo que permite tener Aplicacin ParcialRelacionando con Expresiones Lambda, cuando las funciones estn currificadas, como pasa con todas las funciones en Haskell, podemos pensar como si hubiera alguien construyendo lambdas de un nico parmetro al rededor de todas nuestras funciones para que las podamos usar como queremos por ejemplo:funcion a b c = ... la lgica de tu funcin ...se traduce a:(&amp;#92;p1 -&amp;gt; (&amp;#92;p2 -&amp;gt; (&amp;#92;p3 -&amp;gt; funcion p1 p2 p3) ) )eso permite que al evaluar funcion parametro, lo que retorna sea una funcin que todava puede ser aplicada 2 veces."

} ,

{

"title"    : "Data  definiendo nuestros tipos en haskell",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/data--definiendo-nuestros-tipos-en-haskell.html",
"date"     : "",
"content"  : "Data: qu es y para qu sirveUsamos data para definir un nuevo tipo de dato, por ejemplo si quisiramos definir el tipo Booleano escribiramosdataBooleano=&amp;lt;...&amp;gt;            Qu vamos a escribir en &amp;lt;&amp;gt;? los posibles valores que tiene ese tipo separados por un pipe (      )      dataBooleano=Falso|VerdaderoCon esta notacin podramos pensar que el tipo Int est escrito de la siguiente maneradataInt=-2147483648|-2147483647|...|-1|0|1|2|...|2147483647Nota: Int no est definido de esta manera pero sirve para entender el uso de dataSi quisiramos escribir el tipo ColorPrimario cuales seran sus posibles valores?dataColorPrimario=Rojo|Amarillo|AzulSi luego quisiramos hacer una funcin combinar que reciba dos colores primarios distintos y me retorne un color secundario (Naranja, Violeta o Verde), podemos resolverlo usando pattern matching:dataColorSecundario= Naranja | Violeta | Verde combinar :: ColorPrimario -&amp;gt; ColorPrimario -&amp;gt; ColorSecundariocombinar Rojo Amarillo = Naranjacombinar Amarillo Rojo = Naranjacombinar Rojo Azul = Violetacombinar Azul Rojo = Violetacombinar Amarillo Azul = Verdecombinar Azul Amarillo = VerdeCabe mencionar que esto mismo de los colores lo podramos haber hecho con Strings, pero haberlo hecho con data limita los valores posibles a aquellas cosas que consideramos vlidas para el tipo especfico que queremos representar.Tuplas tuplas tuplasUna forma de representar valores que estn compuestos por otros valores, tal que cada uno de ellos tiene una semntica distinta, es usando uno de los tipos compuestos bien conocidos de Haskell, las tuplas.Vamos a hacer un ejemplo con tuplas de 2 elementos por simplicidad, pero lo mismo se aplica para tuplas de n elementos. Supongamos que queremos armar un programa en el cual queremos representar un alumno por su nombre (un String) y sus notas (una lista de Int = [Int]) y tambin queremos representar una pelcula por su ttulo (unString) y los puntajes que le ponen los crticos en imdb (una lista de Int = [Int]). Por ejemplo:cursoK9=[(&quot;Federico&quot;,[2,3]),(&quot;Lder&quot;,[10,10,10,10,10]),(&quot;Germain&quot;,[8,9,10])]pelis=[(&quot;Pedornia&quot;,[0,0,-3,-666]),(&quot;PulpFiction&quot;,[9,10,9]),(&quot;FightClub&quot;,[3,8,8,9,9,10])]Vamos a agregar adems algunas funciones bsicas para interactuar con alumnos y pelculas fcilmente:nombreAlumnounAlumno=fstunAlumnonotasAlumnounAlumno=sndunAlumnotituloPeliculaunaPelicula=fstunaPeliculapuntajesPeliculaunaPelicula=sndunaPeliculaY una de las cosas que queremos hacer con los alumnos es saber si empez mal (si su primer nota no est aprobada):empezoMal=not . aprobada .head. notasAlumnoaprobada nota = nota &amp;gt;= 6Si usamos lo que definimos arriba como un solo programa (un solo .hs), podemos ver que:  La funcin nombreAlumno es igual a la funcin tituloPelicula  La funcin notasAlumno es igual a la funcin puntajesPeliculaNada me impide consultar:&amp;gt;puntajesPelicula(&quot;Lder&quot;,[10,10,10,10,10])[10,10,10,10,10]&amp;gt;empezoMal(headpelis)TrueTodo esto es posible porque si miramos los tipos que infiere Haskell no existe diferencia entre una pelcula y un alumno, para Haskell los alumnos y pelculas son slo tuplas de 2 elementos. Ejemplo:&amp;gt;puntajesPelicula([1,2,3],(True,&quot;hola&quot;))(True,&quot;hola&quot;)Si definimos un alias de tipo para Alumno y Pelicula de esta forma:type Alumno = (String, [Int])type Pelicula = (String, [Int])Y luego restringimos los tipos de todas las funciones para explicitar que lo que reciben son alumnos o pelculas segn corresponda:nombreAlumno :: Alumno -&amp;gt; StringnombreAlumnounAlumno=fstunAlumnonotasAlumno :: Alumno -&amp;gt; [Int]notasAlumnounAlumno=sndunAlumnotituloPelicula :: Pelicula -&amp;gt; StringtituloPeliculaunaPelicula=fstunaPeliculapuntajesPelicula :: Pelicula -&amp;gt; [Int]puntajesPeliculaunaPelicula=sndunaPeliculaempezoMal :: Alumno -&amp;gt; BoolempezoMal=not . aprobada .head. notasAlumnoDe lo nico que nos salvamos es de consultas como:&amp;gt;puntajesPelicula([1,2,3],(True,&quot;hola&quot;))Porque esa tupla contiene elementos de tipos que no coinciden con los explicitados. Pero esta otra consulta no se ve afectada por el cambio que realizamos, porque tanto Alumno como Pelicula no son ms que (String, [Int]):&amp;gt;empezoMal(headpelis)TrueYa que Haskell es un lenguaje que se fija mucho en los tipos, nos gustara que un caso como los de arriba nos tirar error (donde en vez de mandar un alumno o una pelcula segn corresponda, enviamos cualquier otra cosa incluyendo un alumno donde se esperaba una pelcula y visceversa).Definiendo nuevos tiposPara poder diferenciar a un alumno de una pelcula y a ambos de una tupla, tenemos que definir un nuevo tipo. Eso se hace usando data:dataNuevoTipo=ConstructorTipo1Tipo2...TiponNota: el tipo y el constructor pueden llamarse igual, usaremos nombres distintos a fines didcticos para remarcar en qu contextos lo que usamos es el constructor y en cules el tipo.En nuestro ejemplo:dataAlumno=UnAlumnoString[Int]dataPelicula=UnaPeliculaString[Int]Ahora, para obtener un nuevo alumno o una nueva pelcula, tenemos que usar el ConstructorcursoK9=[UnAlumno&quot;Federico&quot;[2,3],UnAlumno&quot;Lder&quot;[10,10,10,10,10],UnAlumno&quot;Germain&quot;[8,9,10]]--NocambiaempezoMalunAlumno=4&amp;gt;head(notasAlumnounoAlumno)pelis=[UnaPelicula&quot;Pedornia&quot;[0,0,-3,-666],UnaPelicula&quot;PulpFiction&quot;[9,10,9],UnaPelicula&quot;FightClub&quot;[8,8,8,9,9,10]]--AhoraestasfuncionesusanPattern-Matching!nombreAlumno(UnAlumnonombrenotas)=nombrenotasAlumno(UnAlumnonombrenotas)=notastituloPelicula(UnaPeliculanombrenotas)=nombrepuntajesPelicula(UnaPeliculanombrenotas)=notasEs importante remarcar que al hacer esto un alumno o una pelcula YA NO ES UNA TUPLAfst::(a,b)-&amp;gt;anombreAlumno::Alumno-&amp;gt;StringtituloPelicula::Pelicula-&amp;gt;Stringsnd::(a,b)-&amp;gt;bnotasAlumno::Alumno-&amp;gt;[Int]puntajesPelicula::Pelicula-&amp;gt;[Int]cursoK9::[Alumno]empezoMal::Alumno-&amp;gt;Boolpelis::[Pelicula]Ejemplos:A partir de estos valores:fede=UnAlumno&quot;Federico&quot;[2,3]ger=UnAlumno&quot;Germain&quot;[8,9,10]pulp=UnaPelicula&quot;PulpFiction&quot;[9,10,9]Veamos qu sucede al hacer algunas consultas sobre funciones que esperan tuplas, alumnos o pelculas.&amp;gt;fst fedeError(fstesperaunatuplayfedeesde tipo Alumno)&amp;gt;nombreAlumnofede&quot;Federico&quot;&amp;gt;nombreAlumnopulpError(nombreAlumnoesperaalgo de tipoAlumnoypulpesde tipo Pelicula)&amp;gt;puntajesPeliculafedeError(puntajesPeliculaesperaPeliculayfedeesdetipo Alumno)&amp;gt;puntajesPeliculapulp[9,10,9]&amp;gt;empezoMalfedeTrue&amp;gt;empezoMal(headpelis)Error(empezoMalesperaAlumnoyelprimerelementodepelisesde tipo Pelicula)Derivar typeclassesEs muy comn querer comparar por igualdad y mostrar por pantalla un valor que tiene un tipo definido por nosotros.&amp;gt;headcursoK9Error(AlumnonotienelarestriccinShow)Para que esto funcione deberamos:  Decir que Alumno es un tipo que pertenece a la restriccin Show  Definir la funcin show para un AlumnoEn vez de hacer esto a mano (agregando una instancia de la typeclass como se explica ms adelante), y gracias a que los elementos que forman un Alumno SI tienen la restriccin Show, podemos hacer que el Alumno derive esa restriccin--Lonicoquehayqueagregaresderiving(Show)dataAlumno=UnAlumnoString[Int]deriving(Show)Con este agregado podemos hacer&amp;gt;headcursoK9UnAlumno&quot;Federico&quot;[2,3]Ahora, si hacemos lo siguiente&amp;gt;fede==gerError(elAlumnonotienelarestriccinEq)Tambin parece comn querer preguntar si dos alumnos son iguales (o distintos), pasa lo mismo que con Show, nos gustara que el Alumno pertenezca a la typeclass Eq.--Lonicoquehayqueagregaresderiving(Show,Eq)dataAlumno=UnAlumnoString[Int]deriving(Show,Eq)Con este agregado podemos hacer:&amp;gt;fede==gerFalse&amp;gt;UnAlumno&quot;Roberto&quot;[7,8,9]==UnAlumno&quot;Huberto&quot;[7,8,9]False&amp;gt;UnAlumno&quot;Roberto&quot;[7,8,9]==UnAlumno&quot;Roberto&quot;[7,8,9]TrueTambin se puede utilizar el deriving con la clase OrddataNota=Insuficiente|Regular|Bien|MuyBienAl hacer:Main&amp;gt;Insuficiente&amp;gt;RegularERROR:Noinstancefor(OrdNota)Esto se debe a que el tipo Nota no cumple con la restriccin Ord, por defecto se considera a los valores en forma ascendente de izquierda a derecha (i.e. Insuficiente &amp;lt; Regular &amp;lt; Bien &amp;lt; MuyBien).Para obtener este comportamiento en los valores del tipo Nota lo nico que debemos hacer es derivar la restriccin OrddataNota=Insuficiente|Regular|Bien|MuyBienderivingOrdMain&amp;gt;Insuficiente&amp;gt;RegularFalseLo mismo podra hacerse con los tipos ColorPrimario y ColorSecundario definidos anteriormente en este artculo. De seguro vamos a querer que puedan mostrarse. Con derivar Show para ColorSecundario sera suficiente para poder usar la funcin combinar :: ColorPrimario -&amp;gt; ColorPrimario -&amp;gt; ColorSecundario desde la consola y ver el resultado, pero a su vez poder ver los colores primarios suena como algo deseable.Tambin podemos sacarle provecho a derivar Eq, lo que nos permitir llegar a esta nueva solucin sin repeticin de lgica:dataColorPrimario=Rojo|Amarillo|Azul deriving (Show, Eq)dataColorSecundario= Naranja | Violeta | Verde deriving (Show, Eq)combinar :: ColorPrimario -&amp;gt; ColorPrimario -&amp;gt; ColorSecundariocombinar Rojo Amarillo = Naranjacombinar Rojo Azul = Violetacombinar Amarillo Azul = Verdecombinar color1 color2 | color1 /= color2 = combinar color2 color1Data con Record SyntaxEs muy comn hacer funciones para obtener los valores que forman nuestro individuo compuesto como hicimos con las pelculas y los alumnos.Imaginen que ahora queremos agregarle a nuestro tipo Pelicula (adems del nombre y sus puntajes), el nombre del director, el nombre de los actores principales y el ao en que se estren.dataPelicula=UnaPeliculaStringString[String]Int[Int]Lo primero que notamos es que no es tan fcil identificar cada elemento. Para eso existe la posibilidad de declarar sinnimos de tipo usando type. En el ejemplo de las pelculas podemos hacer algo como:typeTitulo=StringtypeNombreDirector=StringtypePuntajes=[Int]dataPelicula=UnaPeliculaTituloNombreDirector[String]IntPuntajesderiving(Show,Eq)narnia=UnaPelicula&quot;Pedornia&quot;&quot;AndrewAdamson&quot;[&quot;TildaSwinton&quot;,&quot;GeorgieHenley&quot;,&quot;WilliamMoseley&quot;]2005[0,0,-3,-666]pulp=UnaPelicula&quot;PulpFiction&quot;&quot;QuentinTarantino&quot;[&quot;JohnTravolta&quot;,&quot;UmaThurman&quot;,&quot;SamuelL.Jackson&quot;]1994[9,10,9]fc=UnaPelicula&quot;FightClub&quot;&quot;DavidFincher&quot;[&quot;BradPitt&quot;,&quot;EdwardNorton&quot;,&quot;HelenaBonhamCarter&quot;]1999[8,8,8,9,9,10]Lo cual mejora un poco la expresividad de la definicin. Igualmente a la hora de construir el dato tenemos que tener cuidado de no pasar primero el nombre del director y luego el ttulo, porque al fin y al cabo los dos son de tipo String, y por ende va a tipar una construccin incorrecta en base a nuestro dominio.Otro tema es que tenemos que definir nuevamente funciones como tituloPelicula y puntajesPelicula:tituloPelicula(UnaPeliculanombredirectoractoresanioEstrenonotas)=nombrepuntajesPelicula(UnaPeliculanombredirectoractoresanioEstrenonotas)=notasComo en cualquier otro programa, las variables que no nos interesan en absoluto pueden ser reemplazadas por la variable annimatituloPelicula(UnaPeliculanombre____)=nombrepuntajesPelicula(UnaPelicula____notas)=notasLgicamente tambintenemosquedefinirfuncionesparaelrestodeloscampos que antes no existan:directorPelicula(UnaPelicula_director___)=directoractores(UnaPelicula__actores__)=actoresanioEstreno(UnaPelicula___anio_)=anioUna forma ms rpida de definir este tipo de funciones es usando la sintaxis de registro (disponible en GHC, no en Hugs).En vez de definir slo los tipos de los valores que van a estar en la pelcula, tambin agregamos en la definicin el nombre de la funcin por el cual queremos obtener dicho valor.Alutilizarlanotacinderegistrohayque definir los campos que lo componen de una forma distinta, tenemos que:  encerrarladefinicindeloscamposentrellaves{}  separarcadacampousandocomas  indicar el nombre y de qu tipo es cada campodataPelicula=UnaPelicula{tituloPelicula::String,directorPelicula::String,actores::[String],anioEstreno::Int,puntajesPelicula::[Int]}deriving(Show,Eq)Con esta definicin automaticamente Haskell define por nosotros las funciones tituloPelicula, puntajesPelicula, directorPelicula, actores y anioEstreno. El dominio de cada una de estas funciones es Pelicula y retornan lo que corresponda en cada caso.Adems cuando querramos obtener una nueva Pelcula, podemos hacerpulp=UnaPelicula&quot;PulpFiction&quot;&quot;QuentinTarantino&quot;[&quot;JohnTravolta&quot;,&quot;UmaThurman&quot;,&quot;SamuelL.Jackson&quot;]1994[9,10,9]O bien podemos usar la siguiente notacin que slo es vlida para datas definidos de esta forma. Como se puede ver, es ms claro a que campo pertenece cada valor y no es necesario seguir un orden en los valores mientras se indique a que campo pertenecepulp=UnaPelicula {tituloPelicula=&quot;PulpFiction&quot;,directorPelicula=&quot;QuentinTarantino&quot;,anioEstreno=1994,puntajesPelicula=[9,10,9],actores=[&quot;JohnTravolta&quot;,&quot;UmaThurman&quot;,&quot;SamuelL.Jackson&quot;]}Esto ayuda mucho a la expresividad, pero tambin es ms verboso. Uno tiene que evaluar cundo vale la pena y cundo no.Otra cosa simptica de definir el data con sintaxis de registro es que que si el tipo deriva la typeclass Show, lo que se imprima en la consola cuando la expresin evaluada retorna algo de nuestro tipo (Pelicula en este caso) ser ms fcil de entender, porque mostrar cada valor asociado al nombre del campo en vez de uno al lado del otro, independientemente de qu notacin se use para crear la pelcula en cuestin.Finalmente algo ms que nos da esta forma de definir el data es un azcar sintctico para facilitar el copiado de datos, lo cual es particularmente til para trabajar de forma inmutable. Las siguientes definiciones son equivalentes:agregarPuntaje nuevoPuntaje (UnaPelicula titulo director anio puntajes actores)  = UnaPelicula titulo director anio (nuevoPuntaje : puntajes) actores  agregarPuntaje&#39; nuevoPuntaje pelicula = pelicula { puntajesPelicula = nuevoPuntaje : puntajesPelicula pelicula }En ambos casos lo que se est haciendo es crear una nueva pelcula que tiene la misma informacin que la que se recibi por parmetro, excepto por los puntajes donde indicamos cules deberan ser los puntajes de la nueva pelcula. De ninguna forma se modificarn los puntajes de pulp si consultamos agregarPuntaje&#39; 10 pulp.IMPORTANTE! Tengan en cuenta al usar este feature de copiado de ser cuidadosos y no abusar (al igual que no debera abusarse del pattern matching) porque un uso demasiado extendido atenta contra las abstracciones pequeas y reutilizables. Funciones chiquitas y reutilizables matan sintaxis cheta.Cmo instanciar una typeclassYa dijimos que a cada restriccin se la conoce como typeclass. A cada tipo que pertenece a una typeclass se le debe definir una instancia de la misma.Por ejemplo la clase Eq en algn lugar del Prelude (la biblioteca standard de Haskell) puede estar definida as:--EstoyavieneconHaskellclassEqawhere(==),(/=)::a-&amp;gt;a-&amp;gt;Bool--LasinstanciasdeEqdebendefiniralmenosunadeestas2operaciones(/=)xy=not(x==y)(==)xy=not(x/=y)Si decimos que el tipo Bool pertenece a la clase Eq escribimos--EstoyavieneconHaskellinstanceEqBoolwhere(==)TrueTrue=True(==)FalseFalse=True(==)__=FalseOtro ejemplo con la clase Ord--NotarqueatienelarestriccinEqenladefinicindelaclaseOrdaclassEqa=&amp;gt;Ordawhere(&amp;lt;)::a-&amp;gt;a-&amp;gt;Bool(&amp;lt;=)::a-&amp;gt;a-&amp;gt;Bool(&amp;gt;)::a-&amp;gt;a-&amp;gt;Bool(&amp;gt;=)::a-&amp;gt;a-&amp;gt;Boolmax::a-&amp;gt;a-&amp;gt;amin::a-&amp;gt;a-&amp;gt;aSi queremos hacer que el tipo Pelicula sea instancia de la clase Ord (por poner un ejemplo, definimos la funcin (&amp;gt;) para que nos diga que una pelcula es mayor que otra si su promedio de puntajes es mayor), podemos escribir:instanceOrdPeliculawhere(&amp;gt;)unaPeliculaotraPelicula=promedio(puntajesPeliculaunaPelicula)&amp;gt;promedio(puntajesPeliculaotraPelicula)Por lo general es suficiente con derivar typclasses en nuestros data, pero es importante recordar que para poder hacer esto, todos los componentes del data a su vez deben pertenecer al typeclass que estamos derivando. Y si en algn momento nos pasa que tenemos un data que se compone, entre otras cosas, por alguna funcin, ya no vamos a poder derivar as como as Show y Eq que son las ms usuales, porque las funciones no son ni Show ni Eq.En esos casos podemos o bien optar porque nuestro data no sea Show o Eq, o bien definir un instance para esta typeclass que se corresponda con nuestro tipo de dato y as determinar nuestra propia solucin a ese problema.Supongamos que queremos mostrar a nuestros alumnos de una forma distinta, que nos muestre el nombre, las notas y adems nos diga el estado de cursada (si aprob o no en base a sus notas). Necesitamos agregar un instance para Show Alumno en vez de derivar Show. Por ejemplo:instance Show Alumno where  show (UnAlumno nombre notas) = show nombre ++ &quot;: &quot; ++ estadoDeCursada notas ++ &quot; con &quot; ++ show notas estadoDeCursada notas  | all aprobada notas = &quot;CURSADA APROBADA&quot;  | otherwise = &quot;CURSADA DESAPROBADA&quot;Mltiples constructores por tipoSupongamos que nos interesa saber la densidad de un cuerpo. Por ahora vamos a manejar cilindros (de los cuales sabemos su masa, su altura y el radio de su base), cubos (slo conocemos su masa y el largo de alguno de sus lados) y esferas (de ellas se conoce su masa y su radio).Para calcular la densidad de un cuerpo vamos a utilizar la siguiente frmula: densidad=masa/volumen.Arranquemos por declarar el tipo de dato para representar un cuerpo:dataCuerpo=Cilindro{masa::Float,altura::Float,radio::Float}|Cubo{masa::Float,lado::Float}|Esfera{masa::Float,radio::Float}deriving(Show,Eq)Podemos ver que el tipo Cuerpo incluye los constructores Cilindro, Cubo y Esfera. Como la frmula de la densidad es igual para todos los cuerpos podemos escribir:densidadunCuerpo=masaunCuerpo/volumenunCuerpoAhora bien, el clculo del volumen es algo particular para cada cuerpovolumen(Cilindro_unaAlturaunRadio)=pi*unRadio*unaAlturavolumen(Cubo_unLado)=unLado**3volumen(Esfera_unRadio)=4/3*pi*(unRadio**3)"

} ,

{

"title"    : "Declaratividad vs  expresividad",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/declaratividad-vs--expresividad.html",
"date"     : "",
"content"  : "Muchas veces mencionamos los conceptos de Declaratividad y Expresividad, pero cuando corresponde hablar de uno o del otro? Y como se relacionan con otros conceptos vistos en la materia? Veamoslo con algunos ejemplos:sumar una lista de nmeros ns  Solucin 1 (utiliza el concepto de orden superior):foldl(+)0ns  Solucin 2 (no utiliza el concepto de orden superior):sumnsLa solucin 2 es ms declarativa que la solucin 1 ya que en la solucin 1 hay que saber:que se suma con la funcin (+)cmo se define el valor inicial del acumulador (0)En la solucin 2 estos detalles no existenEntonces:  Siempre que se hable de ms o menos declarativo comparen cosas, no digan ms declarativo al aire  Una solucin A es ms declarativa que una solucin B si:      A tiene menos detalles algortmicos que B        Esto significa que la nocin de algortmo/secuencia de pasos/definicin del cmo lo hace sea menor en A que en B  As como pasa con orden superior y declaratividad, pasa con la idea de polimorfismo y declaratividad.Otra cualidad que remarcamos en las soluciones es la expresividad, decimos que una solucin A es ms expresiva que una solucin B si la solucin A se entiende ms rpido/es ms fcil de leer que la solucin B.Claramente la idea de expresividad puede verse de forma subjetiva.Volviendo a las soluciones para sumar una lista de nmeros  Solucin 3sumar[]=0sumar(x:xs)=x+sumarxsAlguien puede decir que la solucin 1 es ms expresiva que la solucin 2 (porque le gusta el foldl y lo entiende) pero en la primer clase de funcional si te muestran (sin explicar) entre la solucin 1 y la solucin 2 es muy probable que la solucin 2 pasara a ser la ms expresiva. En contraste, para alguna persona retorcida la solucin 3 puede ser la ms expresiva .A lo que vamos con esto es que, la idea de declaratividad debera ser ms objetiva que la idea de expresividad.De todas formas, con la debida justificacin y relacionndolo con el ejercicio del final, se puede hablar de ambos conceptos. Por lo general, las soluciones ms declarativas resultan a su vez ms expresivas, pero dejando las subjetividades a un lado, un cdigo imperativo bien hecho puede resultar ms legible que uno declarativo con nombres de operaciones y variables mal puestos.Declaratividad, expresividad y abstraccinEs importante no confundir los trminos de expresividad, abstraccin y declaratividad. Aunque estn muy relacionados entre s, son tres conceptos diferentes, que bien pueden darse por separado.Como decamos antes, la relacin que con ms frecuencia vamos a encontrar es que un cdigo declarativo tiende a ser ms expresivo que uno imperativo, ya que puedo leer directamente de qu se trata el problema, en lugar de deducir qu es lo que un algoritmo est tratando de resolver.Ejemplo en pseudocdigo:IntegercuantosPares(Arrayns){Integeri;Integeracum=0;for(i=0;i&amp;lt;longitudDelArray(ns);i=i+1){if(ns[i]mod2==0){acum=acum+1;}}returnacum;}Esta funcin de por s representa una abstraccin: es una operacin que puedo utilizar cada vez que necesite saber la cantidad de nmeros pares hay en el array que se recibe por parmetro. Gracias a que tiene un nombre apropiado (detalle que aumenta la expresividad), podra no tener que leer el cdigo para saber qu es lo que hace.Leyendo el cuerpo de la funcin, podemos tratar de encontrar otra abstraccin ms. En el contexto de la funcin cuantosPares, qu significa este fragmento?if(ns[i]mod2==0){acum=acum+1;}Podemos entender que se est evaluando si ns[i] (el elemento del array que est en la posicin i) es mltiplo de 2, y si esto es cierto contamos un par ms. Una abstraccin podra ser una funcin que evale si un nmero (en este caso ns[i]) es mltiplo de otro (en este caso 2). El cdigo cambiara a:if(esMultiploDe(ns[i],2)){acum=acum+1;}Al encontrar una abstraccin y ponerle nombre, hace que mi cdigo quede ms expresivo. Pero recordemos que hacamos esto para saber si ns[i] era par. Cuando evaluamos la funcin esMultiploDe con 2 como segundo argumento, estamos justamente preguntando si ns[i] es par.Teniendo en cuenta esto, podramos tener directamente la abstraccin esPar, i.e. una funcin que recibe un solo argumento (un nmero) y me dice si ese nmero es par o no. Por otro lado, si estamos contando pares, la variable acum bien podra llamarse cantidadDePares. Entonces el cdigo podra quedar as:if(esPar(ns[i])){cantidadDePares=cantidadDePares+1;}Podemos ver que un componente esencial de la expresividad puede ser el elegir buenos nombres para los elementos de mi cdigo (variables, funciones, procedimientos, etc).Haber encontrado estas abstracciones ayud a que el cdigo quede ms expresivo, ya que una se entiende ms rpido lo que hace esPar(ns[i]) en comparacin con esMultiploDe(ns[i],2) o con ns[i] mod 2 == 0.Ahora el cdigo expresa que un nmero tiene que ser par en vez de exponer el algoritmo o las operaciones matemticas necesarias para saber si el mdulo de la divisin por 2 es 0. Esta ltima solucin est ms cerca de qu quiero resolver en vez de cmo pretendo resolverlo."

} ,

{

"title"    : "Declaratividad",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/declaratividad.html",
"date"     : "",
"content"  : "La declaratividad es una caracterstica de algunas herramientas que permiten o fuerzan la separacin entre el conocimiento del dominio de un programa y la manipulacin de dicho conocimiento. Dichas herramientas pueden ser de diversa naturaleza, tanto prcticas como lenguajes, entornos, frameworks, etc o conceptuales como paradigmas o arquitecturas.El concepto de declaratividad se contrapone a la tradicional programacin imperativa en la cual el conocimiento y la lgica se encuentran muchas veces mezclados dentro de la misma porcin de cdigo resultando difcil determinar donde comienza uno y dnde termina el otro.Las herramientas declarativas permiten muchas veces un ms alto grado de reutilizacin y de abstraccin en tareas repetitivas y por eso la declaratividad es hoy en da una caracterstica fundamental en muchos entornos de programacin para sistemas de mediana o gran envergadura, ya que es una herrramienta importante para organizar y simplificar la construccin de un sistema complejo.Conocimiento y manipulacinEn un programa construido de forma declarativa se produce una separacin entre la descripcin del problema por un lado y los algoritmos o estrategias para encontrar la solucin por el otro.Un error comn es hablar de la separacin entre el qu y el cmo. Si bien esta idea puede servir como una primera aproximacin al concepto, en realidad cualquier funcin - predicado - mtodo - procedimiento puede verse como una separacin entre el qu (dado por el nombre de la funcin, lo nico que necesita saber el invocador) y el cmo (la implementacin de la funcin).En un programa imperativo suelen estar mezcladas la descripcin del problema con la estrategia de resolucin, a tal punto que muchas veces es difcil de detectar cul es el problema que se est tratando de solucionar.Para verlo mejor es conveniente bajar a un ejemplo, para eso vamos a pensar en el sistema de correlatividades de la facultad. Pensando imperativamente, el algoritmo de solucin sera algo as:  A partir de un alumno obtener la carrera que est cursando y con eso las materias de esa carrera, almacenarlas en una variable auxiliar.  Eliminar de esa coleccin de materias aquellas que el alumno ya haya cursado.  Recorrer la lista de las materias restantes y para cada una:          Obtener su lista de corelativas      Recorrerla y para cada correlativa verificar si el alumno curs esa materia      En caso de no haberla cursado, eliminar la materia de la coleccin auxiliar        Las materias que quedaron en la coleccin son las que se pueden cursar.En cambio, la definicin declarativa eliminar todos los conceptos programticos como variables auxiliares, recorrer colecciones o ir eliminando elementos de la coleccin. Ms an, la versin declarativa no tendr un concepto de orden, simplemente intentar describir el problema de la forma ms abstracta posible, solamente tratando de contestar la pregunta, qu materias puede cursar un alumno?  Un alumno puede cursar las materias de su carrera que no haya cursado an y cuyas correlativas s haya cursado.En este punto seguramente se preguntarn si es posible hacer un programa que exprese solamente eso, sin toda la lgica adicional necesaria, bueno aqu est el cdigo prolog que dice exactamente eso:    puedeCursar(Alumno, Materia):-      carrera(Alumno, Carrera), materia(Carrera, Materia),       % Es una materia de la carrera del alumno      not(curso(Alumno, Materia)),                               % No curs la materia      forall(correlativa(Materia, Corr), curso(Alumno, Corr)).   % Curs todas las correlativasElementos en un programa declarativoUn programa declarativo separa claramente los siguientes elementos:  El objetivo  El conocimiento  El motor que manipula el conocimiento para lograr el objetivo deseadoEn el ejemplo anterior, el objetivo es la consulta realizada sobre qu materias puede cursar un alumno. El conocimiento es la informacin que se encuentra en la base de conocimiento sobre las materias disponibles en la carrera y cules ya curs el alumno en cuestin. El motor de Prolog toma el conocimiento y resuelve la consulta realizada en base al programa y deduce todas las posibles relaciones que la satisfagan.El mecanismo utilizado por el motor de Prolog llamado Backtracking prueba todas las posibilidades para solucionar el problema, no hace falta programar este algoritmo para cada problema particular, con lo cual podemos concentrarnos exclusivamente en el objetivo de nuestro programa y no en la complejidad algortmica general que permite procesar la informacin.Declaratividad en los distintos paradigmasDentro de los paradigmas vistos, el paradigma funcional y el lgico tienen una naturaleza declarativa. Eso no quiere decir que no se pueda ser declarativo programando bajo el marco de otro paradigma, de la misma forma en que se puede programar de forma poco declarativa en lgico y funcional (por ejemplo, la recursividad no es una herramienta muy declarativa que digamos).A medida que logramos abstraer nuestros problemas podemos armar nuestros propios motores que nos permitan trabajar de forma ms declarativa.Herramientas declarativas en el mundo realEl lenguaje SQL para trabajar con bases de datos relacionales es un claro ejemplo de declaratividad que se usa ampliamente en la indusria.Los motores de bases de datos, a partir de consultas provistas por el usuario que especifican el origen de los datos (FROM), los filtros a aplicar sobre los posibles resultados (WHERE), las transformaciones a realizar sobre las filas resultantes (SELECT) y criterios de ordenamiento (ORDER BY) por ejemplo, realizan bsquedas complejas relacionando las tablas de origen solicitadas de la forma ms optimizada posible en base a los ndices que el usuario defina y estadsticas que el mismo motor realiza.El algoritmo utilizado por el motor est muy separado del conocimiento (qu entidades existen, cmo se relacionan entre ellas), lo cual permite al usuario abstraerse de esta lgica de bsqueda y concentrarse exclusivamente en el modelado de datos."

} ,

{

"title"    : "Definiciones locales  where",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/definiciones-locales--where-.html",
"date"     : "",
"content"  : "Hay ocasiones en las cuales nuestras funciones tienen una complejidad que puede disminuirse definiendo funciones ms chicas que la componen, pero las mismas no son de particular inters fuera del contexto de esa funcin. Una forma de definir funciones que slo se encuentran definidas en el contexto de una funcin es usando where.Supongamos que queremos hacer una funcin que nos dice el estado de gordura de una persona y sabemos que esto se determina a partir de la altura y el peso de la mismagordurapesoaltura|peso/altura^2&amp;lt;=18.5=&quot;Desnutrido&quot;|peso/altura^2&amp;lt;=25.0=&quot;Normal&quot;|peso/altura^2&amp;lt;=30.0=&quot;Gordito&quot;|otherwise=&quot;Obeso&quot;Podemos ver que la expresin peso / altura ^ 2 se repite y sera bueno extraerlo a una funcin, pero para el resto del programa del mdico clnico no tiene ninguna utilidad. Una forma elegante para definir la funcin gordura es mediante definiciones locales dndole un nombre a esta expresin.gordurapesoaltura|indiceGordura&amp;lt;=18.5=&quot;Desnutrido&quot;|indiceGordura&amp;lt;=25.0=&quot;Normal&quot;|indiceGordura&amp;lt;=30.0=&quot;Gordito&quot;|otherwise=&quot;Obeso&quot;whereindiceGordura=peso/altura^2Algo simptico, como se ve en este ejemplo, es que podemos usar los argumentos de la funcin global en la local como si fueran constantes. Si quisiramos poder variar los valores tambin es posible parametrizar a la funcin local como cualquier otra funcin.holaDonesdon1don2=saludardon1++saludardon2wheresaludaralguien=&quot;HolaDon&quot;++alguien++&quot;!&quot;Nota: Al igual que con las guardas, para que el where funcione hay que dejar al menos un espacio de indentacin"

} ,

{

"title"    : "Deploy en maven central",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/deploy-en-maven-central.html",
"date"     : "",
"content"  : "Ests desarrollando un proyecto Maven para Uqbar -el cual tiene como pom padre uqbar-parent-project- y ahora lo quers desplegar en Maven Central, que hacer?Tenemos 2 tareas para hacer: preparar el release y luego publicarlo. La primera s o s vas a tener que hacerla en tu PC, porque vos sos responsable de, por ejemplo, elegir la versin de este nuevo release. Veamos entonces cmo hacer esto:Preparar el release  Creamos el release$mvn--batch-moderelease:cleanrelease:prepareEste comando crea un commit y un tag para la nueva versin y luego otro commit agregandole nuevamente el -SNAPSHOT a la versin. La opcin batch-mode hace que el plugin no pregunte la versin y asuma la correlativa a la actual, puede omitirse si se quiere especificar otra versin (siempre siguiendo los lineamientos planteados por Semantic Versioning).  Verificamos que todo est bien$gitlog#deberiahaberdoscommitsnuevos$gittag-l#deberiahaberuntagnuevo$gitstatus#nodeberaquedarnadasincommitearSi quedaron cambios sin commitear pods agregarlos al ltimo commit$gitcommit--amend--no-edit  Pusheamos los 2 commits nuevos y el tag$gitpush--follow-tagsY con esto ya tendremos en nuestro repositorio GitHub todo lo necesario para publicar el nuevo release.Publicar el releaseEste punto va a depender de cmo est configurado el repositorio. Si bien configurada la integracin continua via Travis, entonces no tens que hacer ms nada. Por las dudas, entr a Travis y fijate que se est buildeando el tag que acabs de subir (esto pods verlo en la parte de Branches).Si no tiene configurado Travis, entonces tens dos opciones:      Configurarlo vos :). No es difcil y tenemos una gua de cmo hacerlo en el blog de Uqbar (prximamente).        Hacerlo a mano. Ten en cuenta que para esto tens que tener una cuenta en Sonatype autorizada para subir artefactos de Uqbar y toda la configuracin necesaria para que funcione (firma GPG publicada - hay un paso a paso en esta pregunta de Stack Overflow, credenciales en el settings.xml, etc), lo cual te va a llevar ms tiempo que configurar el CI.  Si igualmente quers hacerlo, los pasos son estos:  Nos paramos en el tag que acabamos de crear$gitcheckout[nombredelrelease,porejemplov3.3]  Publicamos el release en Sonatype$mvncleandeploy-Prelease#{ponerlapwddeOSS:}  (Opcional) Volvemos a master para seguir trabajando$gitcheckoutmaster"

} ,

{

"title"    : "Deploy componentes Uqbar",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/deploys-componentes-de-dominio-uqbar.html",
"date"     : "",
"content"  : "Componentes de dominio UqbarMotivacinLos componentes de dominio uqbar estn pensados para  trabajar exclusivamente el modelo de negocio de los ejemplos   y poder reutilizarlos en diferentes tecnologas, ya sea de UI (Arena, Wicket, incluso Android) o de lenguajes base (podramos definir el conversor en Java y generar la UI en Arena programndola en Scala, Xtend o Groovy)Configuraciones de Maven necesariasParent-projectEl proyecto padre debe ser  uqbar-examples-parent/ para proyectos Java  uqbar-examples-xtend-parent/ para proyectos XtendCualquiera de estos proyectos padre estn deployados en el repositorio Maven de Uqbar, que est situado enhttp://uqbar-wiki.org/mvn/releasesDependenciasEn el pom debemos tener dependencias hacia  uqbar-domain (la versin correspondiente)y no es necesario nada ms.Los objetos de dominio deben anotarse como Observable para que funcionen en Arena, y respetar la convencin Java Bean de tener un constructor vaco y getters/setters.RepositoriosDado que el proyecto padre no est en Maven Central, debemos agregar los repositorios maven de Uqbar en forma manual:    &amp;lt;repositories&amp;gt;        &amp;lt;repository&amp;gt;            &amp;lt;id&amp;gt;uqbar-wiki.org-releases&amp;lt;/id&amp;gt;            &amp;lt;name&amp;gt;uqbar-wiki.org-releases&amp;lt;/name&amp;gt;            &amp;lt;url&amp;gt;http://uqbar-wiki.org/mvn/releases&amp;lt;/url&amp;gt;        &amp;lt;/repository&amp;gt;        &amp;lt;repository&amp;gt;            &amp;lt;snapshots /&amp;gt;            &amp;lt;id&amp;gt;uqbar-wiki.org-snapshots&amp;lt;/id&amp;gt;            &amp;lt;name&amp;gt;uqbar-wiki.org-snapshots&amp;lt;/name&amp;gt;            &amp;lt;url&amp;gt;http://uqbar-wiki.org/mvn/snapshots&amp;lt;/url&amp;gt;        &amp;lt;/repository&amp;gt;    &amp;lt;/repositories&amp;gt;Esto es para que el build de travis no falle.Deploy de una nueva versinDado que no tenemos CI en este tipo de ejemplos, debemos manualmente  Definir la versin del ejemplo, por caso el conversor podra pasar de 1.0.5-SNAPSHOT a 1.0.5  Hacer un commit + push al repositorio git  Una vez que est el ok de Travis  en la lnea de comando ejecutar$ mvn clean deploy  Esto agregar el componente en http://uqbar-wiki.org/mvn/releases.  Por ltimo, conviene subir la versin del ejemplo a 1.0.6-SNAPSHOT, para estar seguros de no subir un release.A futuro esperamos contar con un esquema de CI que facilite las cosas."

} ,

{

"title"    : "Desafio  Construir esta sucesión",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/desafio--construir-esta-sucesion.html",
"date"     : "",
"content"  : "Utilizando recursividad en Haskell, obtener la siguiente secuencia:111211211111221312211etc..."

} ,

{

"title"    : "Desafio  find con notacion point free",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/desafio--find-con-notacion-point-free.html",
"date"     : "",
"content"  : "Se desea definir la funcin find, que dado un criterio y una lista encuentra al primero que lo cumple:Main&amp;gt;findeven[1,35,36,9]36El objetivo es definirla as:find=.........O sea,  con notacin point-free para ambos parmetros,  sin usar expresiones lambda ni funciones auxiliares.Como la solucin puede obtenerse probando un poco, para que la respuesta al desafo sea aceptada, debe ir acompaada de una pequea explicacin de cmo funciona."

} ,

{

"title"    : "Desafio  hacer que un data propio sea enum",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/desafio--hacer-que-un-data-propio-sea-enum.html",
"date"     : "",
"content"  : "Hacer que estas consultas funcionen exactamente as:Main&amp;gt;[CPersona&quot;a&quot;1..CPersona&quot;c&quot;1][CPersona&quot;a&quot;1,CPersona&quot;b&quot;1,CPersona&quot;c&quot;1]Main&amp;gt;[CPersona&quot;f&quot;1..CPersona&quot;k&quot;1][CPersona&quot;f&quot;1,CPersona&quot;g&quot;1,CPersona&quot;h&quot;1,CPersona&quot;i&quot;1,CPersona&quot;j&quot;1,CPersona&quot;k&quot;1]Pistas:  Hay que hacer que el tipo Persona pertenezca a la clase Enum.  Para ello hay que usar la instruccin instance y definir dos funciones.  Ac hay un ejemplo de cmo estn definidos los tipos bsicos y sus typeclasses."

} ,

{

"title"    : "Desafio  ordenar con árbol B",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/desafio--ordenar-con-arbol-b.html",
"date"     : "",
"content"  : "Implementar en Haskell un rbol binario y utilizarlo para ordenar una listaPista: ver ejemplo en ejemplo data multiples constructores.hs"

} ,

{

"title"    : "Desafio  pirámide de números",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/desafio--piramide-de-numeros.html",
"date"     : "",
"content"  : "Dada la siguiente pirmide (cortada) con 9 casilleros (5 en la base + 4 en la cima):Se quieren acomodar los nmeros del 1 al 9 donde cada casillero de la cima sea igual a la suma de los 2 casilleros que tiene como base. Un ejemplo chiquito podra ser:El desafo consiste en encontrar todas las soluciones posibles para acomodar los nmeros del 1 al 9 en la pirmide.Ayuda: Existe el predicado between(Inicio, Fin,  Numero) el cual dado un nmero Inicio y un nmero Fin relaciona algn Numero que se encuentra entre esos otros dos."

} ,

{

"title"    : "Desafio  suma de distancias",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/desafio--suma-de-distancias.html",
"date"     : "",
"content"  : "Parte 1Escribir el cdigo necesario (en donde sea necesario) para poder ejecutar en un workspace:1kilometros+20metrosy que al imprimir (print it) el resultado, se obtenga:1020metrosClaramente debe funcionar tambin para otros nmeros que no sean el 1 y el 20.Parte 2Hacer que funcione cualquier combinacin:3metros+400metros+2kilometros&quot;alimprimirloimprime2403metros&quot;"

} ,

{

"title"    : "Desafio  Suma Par",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/desafio--suma-par.html",
"date"     : "",
"content"  : "sumaPar :: Number -&amp;gt; Number -&amp;gt; BoolsumaPar = f.(+)  Definir f para que la funcin diga si la suma de dos nmeros da un nmero par.  Explicar el tipo de f y por qu se puede componer con la funcin (+)."

} ,

{

"title"    : "Desafio  triada uqbariana",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/desafio--triada-uqbariana.html",
"date"     : "",
"content"  : "Llamamos triada a cualquier conjunto de 3 nmeros { x; y; z }. En particular nos enfocaremos en las triadas uniformes que son cualquier conjunto de 3 nmeros iguales { x; x; x }.Decimos que una triada se aparenta a un nmero N si existe alguna forma de operar los tres nmeros de la triada de modo que el resultado sea N.Por ejemplo,  la triada { 2; 2; 2 } se aparenta al 3 porque 2 + 2 / 2 = 3  la triada { 1; 1; 1 } se aparenta al 2 porque (1 + 1) * 1 = 2Las restricciones para operar la triada son:  No se permite agregar ms nmeros  Solamente usaremos las operaciones bsicas: { +; -; *; /; }, ninguna msPor ltimo, definiremos las triadas uqbarianas como todas las triadas uniformes que van del 1 al 9, o sea:{ 1; 1; 1 }{ 2; 2; 2 }{ 3; 3; 3 }{ 4; 4; 4 }{ 5; 5; 5 }{ 6; 6; 6 }{ 7; 7; 7 }{ 8; 8; 8 }{ 9; 9; 9 }Parte 1La primera parte del desafo consiste en encontrar algn nmero uqbariano, sabiendo que ste  Es un nmero entero positivo, y  Se aparenta con todas las triadas uqbarianasSe deber indicar cul es el nmero uqbariano y dar algn ejemplo de cmo se aparenta con cada triada uqbariana.Parte 2As como existen las triadas, tambin existen los cuartetos, que son conjuntos de cuatro nmeros. Y anlogamente existen los cuartetos uqbarianos que son todos los cuartetos uniformes que van del 1 al 9.Indicar todos los nmeros uqbarianos para los cuartetos.Parte 3Todos estos conjuntos se agrupan dentro de lo que llamamos familias, que se identifican con un rango siendo ste la cantidad de elementos dentro de un conjunto. As, por ejemplo:  La familia uqbariana de rango 3 es equivalente a las triadas uqbarianas.  La familia uqbariana de rango 4 es equivalente a los cuartetos uqbarianos.Adems, decimos que una familia es compacta cuando se aparenta con todos los nmeros del 1 al 9.Determinar cul es el rango de la primera familia uqbariana compacta.Parte BONUSEste ejercicio fue inspirado en el problema de este video.Para llegar a sus mismos resultados deberamos agregar al programa las operaciones: raz cuadrada y factorial.Ayudas  En Prolog las operaciones matemticas son functores! As que podemos relacionarlas como cualquier otro individuo. Por ej:    areaCirculo(Radio, pi * Radio ^ 2). % Se relaciona un radio con la FRMULA del rea    Se puede hacer la consulta    ?- areaCirculo(2, Formula), Area is Formula.Formula = pi*2^2,Area = 12.566370614359172.    OJO con Integers vs Floats, porque no son iguales:    ?- 0.0 is 1 - 1.false.    Tal vez quieras comparar todos los resultados con su representacin flotante:    ?- 0.0 is float(1 - 1).true.  "

} ,

{

"title"    : "Desafios cafe con leche",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/desafios-cafe-con-leche.html",
"date"     : "",
"content"  : "En muchos cursos de docentes Uqbar se acostumbra dejar desafos caf con leche semanales, que consisten en resolver un problema para el cual hay que comprender a fondo los conceptos vistos en clase, y quizs agregar algo de investigacin extra. Generalmente el docente ofrece un caf con leche como premio al primero que lo resuelve. Aqu se detallan algunos.Haskell  Desafo: find con notacin point-free  Desafo: Hacer que un data propio sea Enum  Desafo: Construir esta sucesin  Desafo: Ordenar con arbol B  Desafo: sumaParProlog  Desafo: Pirmide de nmeros  Desafo: Triada UqbarianaSmalltalk  Desafo: Suma de distancias"

} ,

{

"title"    : "Design temario",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/design-temario.html",
"date"     : "",
"content"  : "Unidad 1: Diseo y Sistemas  Conceptos de Ingeniera de software y de sistemas  Diseo y Tecnologa  MetamodeloUnidad 2: Diseo y metodologas  Introduccin a las metodologas de desarrollo de software  El papel del diseo en la metodologa de desarrollo  RefactoringUnidad 3: Herramientas de concepcin y comunicacin del diseo  ComunicacinUnidad 4: Requerimientos y Diseo  Conceptos bsicos del diseo  Impacto de los requerimientos en el diseoUnidad 5: Modelado de objetos  Cosificacin  Diseo y Sistemas de Tipos  Manejo de Errores  Clase abstracta vs interfaz  Clases vs instancias  Ciclo de vida de un objeto  Template method  Double dispatchTecnologasJava  Preparacin de un entorno de desarrollo          Preparacion de un entorno de desarrollo Java      Lambdas en Java 8      Otras tecnologas  Preparacion de un entorno de desarrollo Scala  Preparacion de un entorno de desarrollo Groovy  Preparacion de un entorno de desarrollo Xtend  IMPORTANTE: Amigandonos con el entorno de desarrollo  Configuraciones generales para cualquier Eclipse  Gua de Instalacin de Maven  Gua de Instalacin de Ruby  Gua de Instalacin de RailsUna pregunta que muchas veces en la materia diseo es: Que lenguaje uso? Ac van algunas comparativas:  Groovy vs ScalaUnidad 6: Modelado de datos  Normalizacion en ObjetosUnidad 7: Introduccin al diseo de arquitectura  Patrones de comunicacin entre componentes  Libreria y FrameworkUnidad 8: Validacin del Diseo  Validacin del diseo  Calidad de las pruebas unitarias  CoberturaUnidad 9: Diseo de interfaz de usuarioFuera de progama: Diseo funcional y estructurado  Efectos y diseo  Evaluacin diferida y diseo  Estado, Identidad y diseo  Orden superior y diseo  Pattern Matching, Polimorfismo y diseo  Estereotipos de objetos  Tipo abstracto de datosPatrones funcionales en objetos  Value Object  Function Object  Lazy Object y Thunk ObjectTips de C  Preparacin del ambiente C  Typedefs y tipos annimos  Statics  Macros  Manejo de memoria en C  Punteros a funcin  Testing en C"

} ,

{

"title"    : "Diagrama de clases",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/diagrama-de-clases.html",
"date"     : "",
"content"  : "El diagrama de clases es una herramienta para comunicar el diseo de un programa orientado a objetos, permitiendo modelar las relaciones entre las entidades. En UML, una clase es representada por un rectngulo que posee tres divisiones: Nombre de la clase, atributos que tiene y mensajes que entiende.En el primer cuadro anotamos el nombre de la clase (si es abstracta se escribe en cursiva, o bien se usa un estereotipo &amp;lt;&amp;gt; arriba del nombre de la clase).En la segunda parte (que para nosotros no ser de tanta importancia) van los atributos (o variables de instancia, las variables de clase van en subrayado).En el ltimo cuadro escribimos las operaciones (qu mensajes que puede entender). No confundir con los mtodos que es cmo lo resuelve cada objeto. Lo importante no es documentar todos los mensajes de un objeto, sino slo los ms relevantes. As quedan fuera los getters, setters, mtodos privados (o auxiliares) y aquellos que uno considere menores. Moraleja: cuidado con las herramientas que en base al cdigo generan el diagrama (y viceversa). Bien vale la pena un diagrama til hecho a mano antes que uno intil en 3D.Importante: Una clase que no tiene comportamiento no est comunicando qu rol cumple en la solucin: o est faltando definir qu le puedo pedir o esa clase no debera estar en el diagrama.Relaciones entre objetosRELACIN USADependencia: uno de los elementos usa o depende del otro cuando:  El objeto de clase A recibe o devuelve como parmetro de alguno de sus mtodos un objeto de clase B  Si el objeto de clase A instancia un objeto de clase B (pero no lo almacena como variable de instancia, slo vive como variable local en el contexto de un mtodo).Este tipo de relacin indica que los dos elementos colaboran entre s, pero que esa relacin es dbil, casual; tiene un contexto temporal que no trasciende ms all de una operacin. No obstante, sabemos que los cambios en la clase B podran impactar en alguna medida en la clase A.RELACIN CONOCEAsociacin: uno de los elementos conoce al otro, almacenndolo como variable de instancia.Puede definirse una etiqueta que expresa el rol que cumple dicha relacin. En cada extremo de la asociacin puede agregarse la siguiente informacin:  un nombre del rol  flechas de navegacin: determina el conocimiento (navegabilidad) desde un objeto hacia el otro.  multiplicidad: indica cuntos objetos de una clase se relacionan con la otra. La multiplicidad se puede indicar con un rango (0..1, 2..5), un rango sin cota (0..*, 1..*), un valor (1) o una serie de valores (1, 3, 5).En las asociaciones, hay una relacin ms fuerte que en las dependencias (uso) entre ambos elementos. El conocimiento implica que la colaboracin excede el marco temporal de una operacin, aunque cada uno de los objetos sigue teniendo objetivos diferentes.Relaciones entre clasesRELACION HEREDAGeneralizacin: una clase especfica hereda los atributos, relaciones, operaciones y mtodos de otra ms general.Cuando una subclase redefine el comportamiento de su superclase, se escriben los nombres de los mtodos que redefine.RELACIN IMPLEMENTARealizacin: se establece entre una clase y una interfaz; esto implica que la clase debe implementar todas las operaciones que defina la interfaz. Si bien no todos los lenguajes requieren explicitar por cdigo la existencia de una interfaz (en Smalltalk no hace falta, pero en Java s por tener un checkeo de tipos esttico), desde un punto de vista conceptual la interfaz existe y puede comunicarse en el diagrama.Herramientas para diagramaryUML"

} ,

{

"title"    : "Diccionarios",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/diccionarios.html",
"date"     : "",
"content"  : "Un Dictionary es un conjunto de asociaciones entre claves y valores, donde tanto las claves como los valores son objetos cualesquiera.Dicho de otra forma: a un Dictionary puedo pedirle que asocie un objeto valor a un objeto clave. Cada clave puede tener asociado un nico objeto valor en un Dictionary; si asocio un valor a una clave que ya tena otro valor asociado, reemplaza el valor viejo por el nuevo.Para esto se le enva al Dictionary el mensaje at:put: que me diga qu objeto tiene asociado a una clave. Si no tiene ninguno, da error a menos que se lo pida de una forma que evita el error.La forma standard de pedir el valor asociado a una clave es enviarle al Dictionary el mensaje at:; si quiero especificar qu quiero que haga si no encuentra la clave, uso at:ifAbsent: .Un Dictionary es una Collection, entonces los mensajes comunes a todas las Collections se los voy a poder enviar a un Dictionary. Para estos mensajes, se toman slo los valores, p.ej. si pregunto includes: estoy preguntando si contiene un valor, y en select: / collect: / etc. el parmetro va a ser un valor. A pesar de esto, el resultado del select: ser un Dictionary, para los valores para los que el bloque d true va a incluir el par clave/valor correspondiente.Un ejemplo de todo esto: un sencillo diccionario de traduccin de palabras. De esta forma creo un Dictionary y le pongo algunas asociacionesdct:=Dictionarynew.dctat:&#39;uno&#39;put:&#39;one&#39;.&quot;Clave&#39;uno&#39;,valor&#39;one&#39;&quot;dctat:&#39;dos&#39;put:&#39;two&#39;.&quot;Clave&#39;dos&#39;,valor&#39;two&#39;&quot;dctat:&#39;tres&#39;put:&#39;three&#39;.dctat:&#39;cuatro&#39;put:&#39;four&#39;.Le pido a dct un elementodctat:&#39;tres&#39;&quot;devuelve&#39;three&#39;&quot;dctat:&#39;cinco&#39;&quot;tiraerror&quot;dctat:&#39;cinco&#39;ifAbsent:[&#39;nose&#39;]&quot;devuelve&#39;nose&#39;&quot;dctat:&#39;tres&#39;ifAbsent:[&#39;nose&#39;]&quot;devuelve&#39;three&#39;&quot;Le pido cosas de Collectiondctsize.&quot;devuelve4&quot;dctincludes:&#39;dos&#39;&quot;false,trabajasobrelosvalores&quot;dctincludes:&#39;two&#39;&quot;true&quot;dctselect:[:pal|palsize=4]&quot;aDictionary(&#39;cuatro&#39;-&amp;gt;&#39;four&#39;),Analizasobrelosvaloresperodevuelveunnuevodiccionariorespetandolasclaves&quot;Ahora, qu pasa si queremos usar las claves, o necesitamos trabajar con los pares clave/valor? Vamos de a poco.Si a un Dictionary le envo el mensaje keys me devuelve un Set con las claves, en caso:dctkeys&quot;devuelveaSet(&#39;uno&#39;&#39;dos&#39;&#39;cuatro&#39;&#39;tres&#39;)&quot;Este es un nuevo objeto Set, al que le puedo hacer/preguntar lo que quiera, obviamente que si lo modifico el diccionario no se ve afectado. P.ej.dctkeysselect:[:pal|palsize=4]&quot;devuelveaSet(&#39;tres&#39;)&quot;Ahora veamos cmo trabajar con claves y valores a la vez.Primero me pregunto, si quiero trabajar con los pares clave/valor, es probable que tenga que representar cada par como un objeto. Qu objetos van a ser estos?Respuesta: van a ser instancias de la clase Association. Una Association es un par clave/valor, entiende los mensajes key y value.Si a un Dictionary le envo el mensaje associations, va a devolver una OrderedCollection con sus pares clave/valor representados mediante Associations, p.ej.dctassociations&quot;devuelveanOrderedCollection(&#39;uno&#39;-&amp;gt;&#39;one&#39;&#39;dos&#39;-&amp;gt;&#39;two&#39;&#39;cuatro&#39;-&amp;gt;&#39;four&#39;&#39;tres&#39;-&amp;gt;&#39;three&#39;)&quot;Entonces, si obtengo uno de estos pares, p.ej.dctassociationsfirstobtengo un objeto al que le puedo pedir key y value. P.ej.dctassociationsfirstkey&quot;respuestaposible:&#39;uno&#39;&quot;dctassociationsfirstvalue&quot;respuestaposible:&#39;one&#39;&quot;Otra vez, esta es una coleccin a la que puedo hacerle cualquier cosa, p.ej.dctassociationsselect:[:assoc|assockeysize=assocvaluesize]&quot;devuelveanOrderedCollection(&#39;uno&#39;-&amp;gt;&#39;one&#39;&#39;dos&#39;-&amp;gt;&#39;two&#39;)&quot;Terminamos con otro ejemplo, una implementacin de un depsito que se acuerda del stock de cada artculo usando un diccionario donde la clave es el artculo y el valor es la cantidad de unidades del artculo en el depsito.#Depsito(v.i.artculos)&amp;gt;&amp;gt;initializeartculos:=Dictionarynew.&amp;gt;&amp;gt;cuantoTensDe:unArtculo^artculosat:unArtculo&amp;gt;&amp;gt;pone:cantde:unArtculoartculosat:unArtculoput:(artculosat:unArtculo)+cant&amp;gt;&amp;gt;saca:cantde:unArtculoartculosat:unArtculoput:(artculosat:unArtculo)-cant&amp;gt;&amp;gt;cantidadTotalDeUnidades&quot;trabajasobrelosvalores,quesonlascantidades&quot;^artculosinject:0into:[:x:elem|x+elem].&amp;gt;&amp;gt;valorTotalDeposito&quot;aassockey(elartculo)lepidoelprecio,assocvalueeslacantidaddeeseartculoeneldepsito&quot;^artculosassociationsinject:0into:[:x:assoc|x+assockeyprecio*assocvalue].Algo importante a tener en cuenta al usar un diccionario es detenerse a pensar si no nos est faltando una abstraccin que deberamos modelar en vez de manejar asociaciones de valores. A una asociacin no le podemos agregar comportamiento, con lo cual la lgica que trabaja con los valores asociados est en el objeto que tiene el mapa (como en este caso se puede ver en el producto entre el precio y la cantidad en el depsito), esa asociacin bien podra reemplazarse por un objeto propio que conozca al producto y la cantidad que hay en stock al cual s podramos agregarle comportamiento. Forma parte de disear la solucin decidir si es buena idea o no usar un diccionario en vez de una coleccin con objetos de dominio que, adems de asociar otros objetos, tengan responsabilidades propias."

} ,

{

"title"    : "Diferencia entre objetos y procedural   con un ejercicio de la guia 1",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/diferencia-entre-objetos-y-procedural---con-un-ejercicio-de-la-guia-1.html",
"date"     : "",
"content"  : "Veamos el ejercicio de la gua 1 que habla del sueldo de Pepe. El sueldo de Pepe es su sueldo bsico ms su bono por presentismo ms otras cosas. De bono hay dos tipos  uno que es: 100 pesos si no falt nunca, 50 pesos si falt un da, 0 si falt dos o ms das.  otro que es siempre 0Podran imaginarse ms bonos: uno que es 200 si faltaste hasta 2 veces y 0 si faltaste 3 o ms, otro que es lo mismo pero el doble en diciembre, uno que va subiendo 10 pesos cada vez que se paga en meses consecutivos (100 el primer mes, 110 el segundo, etc., as te tents a no faltar nunca). El ejercicio plantea dos variantes de bono x presentismo para que no se haga tan largo resolverlo, est bueno pensar que puede haber ms.Si Pepe puede tener varias variantes de bono por presentismo, no es nada lindo que el cdigo sea algo ascalculaPresentismo: diasQueFalto(bonoPorPresentismo=1)&quot;elquedependedecuntosdasfalt&quot;ifTrue:[(diasQueFalto=0)ifTrue:[^100].(diasQueFalto=1)ifTrue:[^50].^0].(bonoPorPresentismo=2)&quot;siempre0&quot;ifTrue:[^0].(bonoPorPresentismo=3)&quot;otroqueaparezcadespus&quot;ifTrue:[...loquecorrespondaenestecaso].la salida en este caso es darse cuenta que conviene modelar el bono por presentismo como un objeto distinto de pepe, y que pepe tenga una variable a su bono por presentismo. Se lo setes desde el workspace. Entonces el que calcula el valor es el bono, para lo cual necesita saber los das que falt, entonces pepe le pregunta a su bono as:bonoPresentismoimporteSegun:diasFaltadosdonde bonoPresentismo y diasFaltados son variables de pepe.Fjense que los bonos son todos polimrficos para Pepe.Posta es altsimamente importante que vean esto, es la papota bsica de objetos: poder representar cada ente que tiene comportamiento propio (en este caso el bono x presentismo) como un objeto, y si tiene varias variantes que se comportan distinto, hacer varios objetos que sean polimrficos entre s para los otros objetos que tengan que usar ese comportamiento. Si se entiende bien, muchas cosas (en PDP, en Diseo y despus en el laburo) se simplifican."

} ,

{

"title"    : "Diferencias entre polimorfismo  abstraccion y encapsulamiento",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/diferencias-entre-polimorfismo--abstraccion-y-encapsulamiento.html",
"date"     : "",
"content"  : "La discusin se dispara por una consulta sobre el ejercicio 2a de este final de 2009.Un alumno propone los siguientes cambios, los cuales son vlidos para lo que se plantea en el ejercicio:  Que la variable de instancia tipo referencie a un objeto que puede ser de las clases MateriaPrima, ProductoSemiElaborado y ProductoTerminado, y estas clases sean clases independientes, es decir que no sean subclases de ninguna ya que segn el diagrama no comparten caractersticas. Entonces ahora Material deja de ser clase abstracta, para crear un material creamos un objeto de la clase Material, y a la variable tipo le asignamos un objeto de la clase de material que corresponda (MateriaPrima, ProductoSemiElaborado o ProductoTerminado).De la mano de esta justificacin conceptual:  Aprovechariamos el concepto de polimorfismo y el de abstraccin, ya que para la clase sector es transparente este cambio (abstraccin), ella le va pedir el costoAlmacenamiento() a su lista de materiales y despues cada material le va a pedir a su tipo el costoAlmacenamiento(), aca se aplica el polimorfismo ya que no importa el tipo del material que sea el objeto material, todos los tipos van a entender el mensaje costoAlmacenamiento(). Y aparte esta solucin permite que el dia de maana si se quiere agregar un nuevo tipo de material solo hay que crear la clase de ese nuevo tipo y que en sus metodos de instancia este el mtodo costoAlmacenamiento() y listo, ya se la puede referenciar con la variable de instancia tipo. Esto es una caracteristica tmb no? pero no me acuerdo como se llama.A continuacin mostramos la explicacin por parte del docente:  El nico detalle que yo marcara es con respecto a los conceptos que vos mencions. Yo creo por la forma en que uss la palabra abstraccin, lo que ests queriendo decir es encapsulamiento.  Tal vez es sutil la diferencia, porque se puede ver al encapsulamiento como una forma de abstraccin; pero quedara mejor tu respuesta si hacs el cambio que yo te digo.  O sea cuando vos decs para la clase sector es transparente este cambio, eso es      encapsulamiento (que los clientes de un objeto no tengan que saber de su implementacin interna)    o desacoplamiento (que el cambio a una parte de un sistema no afecte a las otras)    La clave est en la palabra transparente; La abstraccin ira por el lado de encontrar una idea o un concepto que capture la esencia de (una parte de) mi problema y a partir de ah me permita guiar el diseo.  La abstraccin en este caso podra ser el tipo de material, las tres clases que vos hacs polimrficas (MateriaPrima, ProductoSemielaborado, ProductoTerminado) en tu solucin intentan ser tres versiones de un mismo concepto que no estaba en la solucin inicial. Encontrar ese concepto es abstraer o encontrar una abstraccin. Pasaste de ideas concretas (MateriaPrima, etc) a una idea ms abstracta (tipo de material) que permite pensar a los otros como variantes de una misma cosa.  El encontrar esa abstraccin es lo que te permite luego pensar en hacer a los participantes de esa abstraccin polimrficos entre s."

} ,

{

"title"    : "Diseno iterativo",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/diseno-iterativo.html",
"date"     : "",
"content"  : "La metodologa de desarrollo nos lleva a disear de dos formas completamente diferentes:Las metodologas predictivas proponen el diseo anticipado, donde se asume que  el anlisis ya ha relevado todos los procesos que el usuario necesita  tenemos disponible toda la informacin para poder definir cada proceso  no habr cambios en los requerimientos hasta nuestra implementacin          el usuario no har cambios o nuevos pedidos.      no habr cambios externos al sistema que obliguen a modificarlo (como disposiciones legales).        si el diseo es adecuado, la codificacin se ajustar perfectamente a lo que el usuario necesita.          para ello hay que documentar el sistema en su completitud para que los programadores no tengan que tomar decisiones de diseo en la codificacin.        en la fase de diseo no se debe programar, dado que se estara solapando la actividad (de la misma manera que en la fase de codificacin no se debe disear)Esta forma de disear tambin se conoce como Big Design Up Front. En este artculo el autor expone algunos argumentos en favor de esta metodologa.Por el contrario, las metodologas adaptativas proponen el diseo iterativo, donde se asume que  slo tenemos algunos procesos relevados, y aunque los tuviramos en su totalidad, los requerimientos podran cambiar.  es inocente pensar en que no habr cambios en los requerimientos, dado que          el usuario no sabe exactamente lo que se va a construir y tiene derecho a pedir modificaciones cuando se da cuenta de que cometi un error al dar informacin al diseador.      bajo la premisa anterior el diseador no puede realizar un diseo que no est sujeto a cambios, por los errores propios que adems podra cometer.        si el diseo no es adecuado, debemos cambiarlo lo ms pronto posible. Esto incluye la fase de codificacin.  si queremos reflejar la realidad, tenemos que permitir que haya alternancia entre diseo y programacin. No paralelizamos las actividades, sino que una se va solapando a la otra, como en una pila.  el diseo iterativo considera que los errores son parte del desarrollo mismo y necesitamos poder modificar el diseo en cualquier momento, sin que eso paralice el proyecto (iterativo tiene mucho de prueba y error).  simplest thing that could possible work  En este artculo Martin Fowler explica el diseo desde el punto de vista de las metodologas giles.El costo del cambioTradicionalmente las metodologas secuenciales interpretan que le costo de corregir un error o de introducir un cambio en un desarrollo de software se incrementa exponencialmente a medida que se avanza con el desarrollo. Segn esta visin, un error en el anlisis que podra corregirse en un par de horas de trabajo, tardar das en solucionarse si se lo detecta durante la etapa de diseo e incluso podra requerir de varias semanas si se lo encuentra recin durante la etapa de construccin.Varios autores, entre ellos Kent Beck han propuesto otra interpretacin. Segn esta nueva perspectiva la curva del cambio es radicalmente distinta para los proyectos de software en la actualidad. La valoracin incorrecta del costo del cambio proviene en parte por la asociacin con otras ingenieras; en las ingenieras que trabajan con entidades fsicas hacer una modificacin sobre algo construido suele ser muy costoso, incluso en algunos casos imposible. Esto no es vlido para una ingeniera que trabaja con productos tan abstractos y maleables como el software. Adicionalmente la ingeniera del software se diferencia radicalmente de las otras en cuanto a que el costo de reproduccin de un producto una vez construido es insignificante (comprese el costo de construir una nueva unidad de un automvil determinado en una lnea de produccin con el costo de producir una nueva unidad de un programa que se vende en forma masiva).Por otro lado, las herramientas para el desarrollo de software han evolucionado notablemente en los ltimos aos, apareciendo entornos integrados de desarrollo, lenguajes de muy alto nivel, herramientas de versionado, refactorings automticos, herramientas de integracin contnua, entre otros. A modo de ejemplo, podemos considerar el costo de cambiar el nombre de una variable en un entorno de desarrollo que no tenga la capacidad de hacerlo automticamente en un programa grande con la simplicidad de hacerlo en un entorno de los que se usan hoy en da. El tiempo se reduce apenas a segundos.Segn la interpretacin de Beck, cualquier cambio es realizable con un costo relativamente bajo aun en etapas avanzadas del desarrollo. Otros autores sugieren que hay algunos cambios para los cuales se puede aplanar la curva del costo y otros cambios para los que no. Por ejemplo, se ha sugerido que los errores arquitecturales tienden a tener curvas empinadas. Si bien es imaginable que en la medida que las herramientas (tanto tecnolgicas como conceptuales) evolucionen, ms y ms decisiones puedan tomarse considerando la posibilidad de modidicarlas mas adelante sin que esto implique un costo alto, todava hoy en da es importante detectar para cada decisin que tomamos en una etapa temprana del desarrollo si el costo potencial de un error es elevado o no."

} ,

{

"title"    : "Diseno y sistemas de tipos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/diseno-y-sistemas-de-tipos.html",
"date"     : "",
"content"  : "En programacin el chequeo esttico de tipos permite detectar errores en un programa de forma previa a su ejecucin. Existen amantes y detractores de esta idea y existen lenguajes profesionales con y sin chequeo de tipos. Quienes apoyan el uso de estos mecanismos sostienen que este tipo de chequeos garantiza o ayuda a garantizar la ausencia de errores en los programas, mientras que los que prefieren evitar estos chequeos sostienen que:  a menudo resultan limitantes descartando soluciones que podran ser viables  que agregar la informacin de tipos a un programa es trabajoso y reduce su legibilidad y finalmente  que las garantas que otorga un sistema de tipos pueden lograrse por otros mecanismos (como el testeo unitario).Cmo afecta el chequeo de tipos a la actividad de diseo?  Si para disear utilizamos herramientas capaces de validarlos, entonces podran ayudar a detectar errores. De estas herramientas podemos ver dos sabores:          Herramientas que permiten construir diagramas y realizan chequeos sobre esos diagramas.      Si utilizamos cdigo, o pseudo-cdigo como herramientas dentro del proceso de diseo, podemos utilizar los chequeos de tipos en esos programas para detectar problemas. Esto puede resultar particularmente importante al realizar rediseos y pruebas de rediseo sobre un programa ya construido.        El sistema de tipos de la tecnologa en la que se construye el programa diseado establece restricciones sobre lo que se puede programar en ese lenguaje; entonces, si al disear no tengo en cuenta esas restricciones corro el riesgo de producir un diseo que luego no es fcil (o incluso no es posible) de construir en la tecnologa elegida. El sistema de tipos forma parte del metamodelo del lenguaje de programacin; uno puede elegir establecer una relacin ms o menos cercana entre ambos metamodelos, con las consecuencias ya explicadas.  Finalmente, un tipo determina el conjunto de operaciones que se puede realizar sobre una entidad (entre otras cosas). Por entidad podemos entender cualquier porcin de un sistema: objeto, clase, procedimiento, subsistema, tipo abstracto de datos, etc. Es posible establecer una relacin directa entre las operaciones y las responsabilidades e interfaces asociadas a una parte de un sistema (que son objetivos especficos del diseo). Definir tipos es una forma de definir las interfaces entre entidades de software.  Adicionalmente en sistemas de tipos con presencia de polimorfismo, un tipo no define la interfaz de una entidad sino que define un contrato que podran cumplir mltiples entidades distintas."

} ,

{

"title"    : "Diseno y tecnologia",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/diseno-y-tecnologia.html",
"date"     : "",
"content"  : "Existe una fuerte relacin entre diseo y la programacin, o mejor dicho, entre el diseo y la tecnologa que voy a utilizar para construir el sistema.El nivel de detalle del diseoEn primer lugar podemos analizar el nivel de detalle de ambos. Obviamente el programa tendr muchos detalles ms que el diseo, necesita poder ser compilado y ejecutado, incluir todos esos detalles en la especificacin de diseo sera contraproducente porque nos obligamos a decidir sobre cada uno de esos puntos y tal vez convenga postergar algunas decisiones para el momento de programar. En el extremo, si el diseo definiera todos los detalles del programa subyacente, entonces la programacin posterior no requiere de tomar ninguna decisin y por lo tanto podra automatizarse. En ese caso la programacin deja de tener sentido como actividad, la puedo considerar un paso ms de la compilacin y nuestro diseo podra considerarse directamente como un programa.A medida que los lenguajes de programacin fueron siendo cada vez de ms alto nivel y fueron incorporando mejores abstracciones (podemos destacar el manejo automtico de memoria como un ejemplo esencial), la diferencia entre el nivel de abstraccin del diseo y del programa se fue achicando. En la literatura podemos encontrar dos visiones de este proceso. Algunas metodologas como MDA consideran que slo debemos disear y debemos descartar la programacin como actividad. Entonces la ingeniera de software debera dedicarse a producir modelos, y los programas deberan derivarse automticamente de esos modelos. Otras metodologas como XP incorporan el diseo como parte de la actividad, y entonces consideran que la nica actividad es la programacin. Como referencia de este pensamiento puede leerse el artculo de Martin Fowler: Is Design Dead?Ambas visiones no son tan distintas entre s, en definitiva el diseo y el programa se acercan, y finalmente la nica discusin restante es si nuestros modelos/programas debern tener forma de diagrama o si tendrn forma de texto. (Y si se combinan ambos? Hay otras posibilidades? todas son preguntas para las que hoy la ciencia del desarrollo de software no tiene respuestas nicas)Por otro lado, un diseo de muy alto nivel deja muchos detalles a responsabilidad de la persona que va a construir. Si el modelo deja abiertas cuestiones que tienen que ver (por ejemplo) con la forma en que se estructurar el programa entonces est postergando decisiones que son de diseo aunque las tome una persona cuyo rol formal es el de programador. En ese caso lo que pasa es que el programador es el que est llevando a cabo el nivel ms detallado del diseo. Esto no tiene por qu ser algo negativo, es una forma de organizacin perfectamente vlida, en la cual algunas personas toman la responsabilidad del diseo a alto nivel (podra llamarse incluso arquitectura) y a otras les toca ocuparse del diseo ms detallado.Metamodelos en el diseo y metamodelos en el programaLa otra perspectiva desde la que podramos analizar la relacin entre diseo y tecnologa es pensar la relacin entre el metamodelo que usamos para disear y el metamodelo del lenguaje que usaremos para construir.Si esos metamodelos coinciden entonces lo que yo disee puede que sea ms fcil de construir (o de visualizar la relacin entre lo construido y el modelo). Pero, de nuevo, un metamodelo para un programa puede requerir de muchos detalles que en determinado momento del diseo todava no estoy en condiciones de decidir. Un ejemplo comn es tener que decidir si queremos poner una clase abstracta o una interfaz cuando todava no hemos definido los detalles del concepto asociado.Entonces dependiendo del nivel de detalle de nuestro diseo tal vez convenga elegir metamodelos ms o menos parecidos a los metamodelos de nuestra tecnologa subyacente:  Utilizar metamodelos sutilmente diferentes nos permite disear con ms libertad, desprendindonos de complejidades y restricciones tecnolgicas.  Pero las diferencias entre ambos metamodelos plantean gaps que luego habr que resolver al construir, entonces no podemos permitir que ambos metamodelos tengan diferencias demasiado fundamentales.En resumen, el diseo es la especificacin de lo que quiero construir. Entonces, al elegir la forma en la que quiero disear, las herramientas que uso para disear tengo que entender la relacin que establezco con la tecnologa usada para la construccin.  Si las dos ideas se parecen mucho eso puede plantear restricciones muy tempranamente, si planteo actividades distintas es porque quiero ponerles focos distintos, usar herramientas distintas.  Pero si las dos ideas van por caminos muy distintos entonces puede que el diseo pierda utilidad, porque para poder construir voy a tener que llenar los huecos (gaps) que el modelo de diseo no cubra. En definitiva, no es posible construir sin llenar esos huecos, y llenar esos huecos es disear."

} ,

{

"title"    : "Paradigma logico,  Predicado distinct",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/distinct.html",
"date"     : "",
"content"  : "MotivacinQu pasa cuando un predicado encuentra la misma respuesta por varios caminos?Si tens:?- esPicaro(Quien).Quien=pepe,Quien=pepe,Quien=juan,Quien=pepe,Quien=juan.Esto est bien! No importa por cuntos caminos llegue a la misma persona, lo que importa es que cuando unifique unifique con los que son pcaros.El problema es cuando quers encontrar cuntos pcaros son, es decir, cuando quers agregar los datos. Por ejemplo haras:findall(Picaro,esPicaro(Picaro),Picaros),length(Picaros,CuantosPicaros).Y quers que te d 2 (pepe y juan), no 5.Bueno, en ese caso, pods utilizar el predicado de orden superior distinct/2, de esta forma:?- distinct(Quien,esPicaro(Quien)).Quien=pepe,Quien=juan.Y entonces te queda as:findall(Picaro,distinct(Picaro,esPicaro(Picaro)),Picaros),length(Picaros,CuantosPicaros)."

} ,

{

"title"    : "Dont Cross the Beams by Kent Beck",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/dont-cross-the-beams.html",
"date"     : "",
"content"  : "OrigenActualmente threeriversinstituteorg no esta activo, tome el articulo de Kent Beck de archives.org en este [link](http://web.archive.org/web/20130113095840/http://www.threeriversinstitute.org/blog/?p=594)ArticuloIntroAs many of my pair programming partners could tell you, I have the annoying habit of saying Stop thinking during refactoring. Ive always known this isnt exactly what I meant, because I cant mean it literally, but Ive never had a better explanation of what I meant until now. So, apologies yall, heres what I wished I had said.One of the challenges of refactoring is successionhow to slice the work of a refactoring into safe steps and how to order those steps. The two factors complicating succession in refactoring are efficiency and uncertainty. Working in safe steps its imperative to take those steps as quickly as possible to achieve overall efficiency. At the same time, refactorings are frequently uncertainI think I can move this field over there, but Im not sureand going down a dead-end at high speed is not actually efficient.Inexperienced responsive designers can get in a state where they try to move quickly on refactorings that are unlikely to work out, get burned, then move slowly and cautiously on refactorings that are sure to pay off. Sometimes they will make real progress, but go try a risky refactoring before reaching a stable-but-incomplete state. Thinking of refactorings as horizontal and vertical is a heuristic for turning this situation aroundeliminating risk quickly and exploiting proven opportunities efficiently.The other day I was in the middle of a big refactoring when I recognized the difference between horizontal and vertical refactorings and realized that the code we were working on would make a good example (good examples are by far the hardest part of explaining design). The code in question selected a subset of menu items for inclusion in a user interface. The original code was ten if statements in a row. Some of the conditions were similar, but none were identical. Our first step was to extract 10 Choice objects, each of which had an isValid method and a widget method.before:if (...choice 1 valid...) {  add($widget1);}if (...choice 2 valid...) {  add($widget2);}... after:$choices = array(new Choice1(), new Choice2(), ...);foreach ($choices as $each)  if ($each-&amp;gt;isValid())    add($each-&amp;gt;widget());After we had done this, we noticed that the isValid methods had feature envy. Each of them extracted data from an A and a B and used that data to determine whether the choice would be added.Choice1 isValid() {  $data1 = $this-&amp;gt;a-&amp;gt;data1;  $data2 = $this-&amp;gt;a-&amp;gt;data2;  $data3 = $this-&amp;gt;a-&amp;gt;b-&amp;gt;data3;  $data4 = $this-&amp;gt;a-&amp;gt;b-&amp;gt;data4;  return ...some expression of data1-4...;}We wanted to move the logic to the data.Choice1 isValid() {  return $this-&amp;gt;a-&amp;gt;isChoice1Valid();}A isChoice1Valid() {  return ...some expression of data1-2 &amp;amp;&amp;amp; $this-b-&amp;gt;isChoice1Valid();}SuccessionWhich Choice should we work on first? Should we move logic to A first and then B, or B first and then A? How much do we work on one Choice before moving to the next? What about other refactoring opportunities we see as we go along? These are the kinds of succession questions that make refactoring an art.Since we only suspected that it would be possible to move the isValid methods to A, it didnt matter much which Choice we started with. The first question to answer was, Can we move logic to A? We picked Choice. The refactoring worked, so we had code that looked like:A isChoice1Valid() {  $data3 = $this-&amp;gt;b-&amp;gt;data3;  $data4 = $this-&amp;gt;b-&amp;gt;data4;  return ...some expression of data1-4...;}Again we had a succession decision. Do we move part of the logic along to B or do we go on to the next Choice? I pushed for a change of direction, to go on to the next Choice. I had a couple of reasons:  The code was already clearly cleaner and I wanted to realize that value if possible by refactoring all of the Choices.  One of the other Choices might still be a problem, and the further we went with our current line of refactoring, the more time we would waste if we hit a dead end and had to backtrack.The first refactoring (move a method to A) is a vertical refactoring. I think of it as moving a method or field up or down the call stack, hence the vertical tag. The phase of refactoring where we repeat our success with a bunch of siblings is horizontal, by contrast, because there is no clear ordering between, in our case, the different Choices.Because we knew that moving the method into A could work, while we were refactoring the other Choices we paid attention to optimization. We tried to come up with creative ways to accomplish the same refactoring safely, but with fewer steps by composing various smaller refactorings in different ways. By putting our heads down and getting through the other nine Choices, we got them done quickly and validated that none of them contained hidden complexities that would invalidate our plan.Doing the same thing ten times in a row is boring. Half way through my partner started getting good ideas about how to move some of the functionality to B. Thats when I told him to stop thinking. I dont actually want him to stop thinking, I just wanted him to stay focused on what we were doing. Theres no sense pounding a piton in half way then stopping because you see where you want to pound the next one in.As it turned out, by the time we were done moving logic to A, we were tired enough that resting was our most productive activity. However, we had code in a consistent state (all the implementations of isValid simply delegated to A) and we knew exactly what we wanted to do next.ConclusionNot all refactorings require horizontal phases. If you have one big ugly method, you create a Method Object for it, and break the method into tidy shiny pieces, you may be working vertically the whole time. However, when you have multiple callers to refactor or multiple implementors to refactor, its time to begin paying attention to going back and forth between vertical and horizontal, keeping the two separate, and staying aware of how deep to push the vertical refactorings.Keeping an index card next to my computer helps me stay focused. When I see the opportunity for a vertical refactoring in the midst of a horizontal phase (or vice versa) I jot the idea down on the card and get back to what I was doing. This allows me to efficiently finish one job before moving onto the next, while at the same time not losing any good ideas. At its best, this process feels like meditation, where you stay aware of your breath and dont get caught in the spiral of your own thoughts."

} ,

{

"title"    : "Double dispatch",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/double-dispatch.html",
"date"     : "",
"content"  : "Double dispatch es un patrn de diseo que permite de tomar una decision a partir de varios objetos en vez de uno solo.En las implementaciones de lenguajes de objetos mainstream, la decisin de qu mtodo se va a ejecutar se hace a partir del objeto receptor del mensaje.Sin embargo, a veces con el objeto receptor no alcanza.Para dar un ejemplo trivial pero ilustrativo, en el juego de piedra, papel, tijera, la decision de quien gana y quien pierde depende de dos objetos y no de uno solo.En dicho caso, una solucin posible es que uno de los dos objetos delegue la decisin al segundo, dndole informacin de s mismo. En este caso, el primer objeto va a avisarle al segundo objeto quin es (en este caso una piedra), y el segundo objeto va a decidir quien gana sabiendo eso: otra piedra va a decidir empate, una tijera que gana la piedra, y un papel que gana el papel.Piedra &amp;gt;&amp;gt; quienGanaContra: otro  ^ otro quienGanaContraPiedra: selfPiedra &amp;gt;&amp;gt; quienGanaContraPiedra: unaPiedra  ^ nil  Papel &amp;gt;&amp;gt; quienGanaContraPiedra: unaPiedra  ^ self  Tijera &amp;gt;&amp;gt; quienGanaContraPiedra: unaPiedra  ^ unaPiedra...Una definicin posible de Double Dispatch, es la propuesta por Ralph Johnson.Qu criterio de dispatch utilizar?Johnson entiende que el Double Dispatch siempre va a sociado a la clase del segundo objeto; si bien comprende eso como un Code Smell lo asume inevitable y caracterstico del Double Dispatch.Sin embargo, otra forma de interpretarlo sera que el mejor Double Dispatch es el que logra evitar el code smell y en lugar de realizar el dispatch sobre el tipo del parmetro lo hace en funcin al rol que ocupa, es decir, dndole significado ms all del tipo en s. Por supuesto este tipo de double dispatch requiere de un diseo un poco ms, pero es esperable que sea ms extensible: si el dispatch se realiza por el tipo tenemos dos desventajas claras:  Explosin combinatoria (como explica Johnson si tenemos 6 subtipos diferentes podemos tener 6x6 combinaciones de dispatchs).  No extensible, ya que agregar un nuevo tipo implicara necesariamente agregar todas las combinaciones posibles.Esto no descarta la posibilidad de realizar un double dispatch basado en tipos, pero considera que el code smell no puede ser ignorado y por lo se prefiere evitar esa forma de utilizacin. En una estrategia de dispatch basada en el comportamiento de los objetos, es ms probable que los nuevos casos que surjan puedan asociarse a alguno de los roles preexistentes.Qu usos tiene?Unos de los usos principales del double dispatch son los patrones de diseo de objetos visitor e interpreter.El patrn visitor sirve para hacer extensible una estructura de datos, modelando operaciones sobre la estructura como objetos visitantes.Los usuarios pueden definir nuevos visitantes, y cada visitante sabe como tiene que manipular cada objeto en la estructura de datos usando el double dispatch.Otro posible uso es para implementar el patron interpreter, un patron usado para evaluar sentencias de un programa.En el patron interpreter, un programa se representa como un rbol, sobre el que uno puede implementar el patron visitor, donde un objeto intrprete juegue el rol de visitante."

} ,

{

"title"    : "Dsl",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/dsl.html",
"date"     : "",
"content"  : "DSL viene de las siglas en ingls Domain-Specific Language.Un DSL es un lenguaje ideado para expresar cierta parte de un sistema. Por eso se dice que es un lenguaje de propsito especfico, a diferencia de los lenguajes de propsito general (GPL).Los lenguajes con los que estamos acostumbrados a trabajar, como Java, Haskell o Groovy tienen la caracterstica de que pueden ser utilizados para resolver problemas de programacin de cualquier ndole, por lo que decimos que son lenguajes de propsito general (GPL por sus siglas en ingls).Estos lenguajes son Turing-complete, siendo capaces de expresar cualquier algoritmo, y pudiendo ser aplicados a cualquier dominio. Con estos lenguajes, con mayor o menor facilidad o eficiencia, podemos construir sistemas de clculo impositivo, implementar algoritmos de aprendizaje de mquina, etc. Es decir, son lenguajes que pretenden ser igualmente efectivos (igualmente buenos o malos) en todos los campos de accion.Sin embargo, el empleo GPLs para expresar problemas muy especficos, si bien es posible, puede significar mayor esfuerzo de lo que uno deseara, dado que las abstracciones que estos dominios plantean no estn soportadas nativamente por el lenguaje; no son primitivas. Por ejemplo, escribir una transposicin de matrices, an contando con API bien diseada, es ciertamente ms complejo en Java que en Mathematica u Octave, y lenguajes como SQL estn especficamente diseados para realizar operaciones sobre una base datos.Estos lenguajes son especficos de un dominio particular (DSL, domain-specific languages), y si bien no pueden resolver todos los problemas, resuelven aquellos para los que fueron diseados mejor que los GPL.Qu quiere decir esto ?                  propsito general      propsito especfico                  Abarca construir      la totalidad de la aplicacin      una parte de la aplicacin              Tipo de Aplicacn      cualquiera      un solo tipo              Conceptos      generales:                              -   funcin (en funcional),                                          -   clase, objeto, mtodo (en OOP),                                  -   variable, predicado (en lgico)...             | del (nico) dominio                                                                                                                                                                                    | | Ejemplos           | C, Java, Smalltalk, Self, ADA, Haskell, Prolog... | [xpath](http://es.wikipedia.org/wiki/XPath), SQL, [pic](http://macroexpand.org/doku.php?id=articles:uml-sequence-diagram-dsl-txl:start), [sed](http://es.wikipedia.org/wiki/Sed_(inform%C3%A1tica))... |Problema que ataca un DSLEn general cuando nos enfrentamos a un problema de programacin aparecen varias actividades que trataremos de simplificar ampliamente ac:  Entendimiento del problema/dominio  Formacin conceptual de una solucin  Implementacin en un lenguaje de programacin  Compilacin, ejecucin y pruebas.Normalmente trabajamos con un nico paradigma de programacin y unos pocos lenguajes. Estos lenguajes permiten expresar sobre ellos cualquier tipo de dominio, es decir que se utilizan para desarrollar cualquier tipo de aplicacin. Por esto es que se llaman lenguajes de propsito general (GPL del ingls).En el proceso de entendimiento del dominio podramos trabajar completamente abstractos del lenguaje de programacin, simplemente tratando de relevar informacin y requerimientos. No vamos a entrar en detalles ac acerca de esta etapa, pero lo que nos interesa es que se podra hacer una anlisis del problema independiente del lenguaje de programacin y hasta del paradigma.Durante la formacin conceptual de una solucin ya debemos pensar el dominio dentro de uno o varios paradigmas (en caso en que osemos desarrollar la solucin con mltiples paradigmas), de acuerdo a nuestra experiencia, o lo que veamos que mejor se adapte a la problemtica.Por ejemplo, hay problemas que son inherentemente ms fciles de implementar en el paradigma lgico que en objetos, o funcional, etc. Sin embargo, todava podramos pensar en una solucin independiente del lenguaje.Por ejemplo, en objetos es donde identificamos:  objetos y clases.  responsabilidades (mensajes).  interacciones y colaboraciones.  jerarquas / traits (lgica comn y reutilizacin.  etc.Luego tenemos que realmente implementar esta solucin abstracta en los pasos 3 y 4, y para eso utilizamos un GPL.Y ac va el problema:  El mapeo de la solucin conceptual con el lenguaje no es directo, no suele ser trivial.  A veces no tenemos soporte del lenguaje para ciertas abstracciones de nuestro dominio: Los ejemplos ms simples son los patrones como singleton, delegacin automtica, etc.  Estamos forzados a adaptar el dominio y nuestra solucin al lenguaje.Y eso es lo que hacemos siempre, adaptamos al lenguaje que tenemos a mano. Eso nos lleva a que nuestra solucin va a estar siempre de aqu en adelante expresada en un lenguaje que no es el ms cercano al problema/dominio, sino ms bien a un lenguaje de programacin general.Algunas consecuencias:Legibilidad:  Nuestro cdigo contendr una mezcla entre conceptos de dominio (una Cuenta, un Cliente, etc) y palabras propias del lenguajes (keywords, como public class, trait, etc).  Quien se incorpore al proyecto o quiera revisar la solucin deber, naturalmente, hacer el proceso inverso, como una ingeniera reversa, a partir del cdigo y de lo expresado en el GPL abstraerse para generar una representacin mental del problema/dominio.Flexibilidad (cambios de requerimientos o dominio):  Naturalmente solo podrn ser implementados por desarrolladores que entiendan no solo el dominio, sino adems el GPL.  Cada nuevo cambio deber ser traducido nuevamente de dominio hacia GPL.Duplicacin:  Tendremos al menos dos representaciones de la solucin, la mental (que muchas veces adems se plasma en documentos de especificacin y anlisis) y la traduccin/implementacin en el GPL.Estas consecuencias hacen que la programacin dedique la mayor parte del tiempo y esfuerzo en lidiar con los problemas de traduccin e implementacin de la solucin al GPL.Entonces, una va alternativa sera en pensar que en lugar de adaptar nuestra solucin a un lenguaje, podemos adaptar el lenguaje a nuestra solucin.A esto se lo conoce como Language-Oriented Programming, desde el punto de vista de un nuevo paradigma. Y una de las prcticas es crear un nuevo lenguaje para expresar nuestra solucin o una parte de la solucin. Esto es un DSL.Motivacin para hacer un DSLSuponemos que con la comparacin que ya vimos, aparecen varias razones. Pero vamos a enumerarlas ac para resumir:  para acercar la brecha entre la descripcin del problema en trminos abstractos (descripcin del dominio) y la implementacin de la computacin que lo resuelve / ejecuta.          Facilitara la comunicacin con gente no-tcnica.      No programadores podran entenderlo y escribirlo.        para esconder los detalles internos          de la lgica comn      o las construcciones propias del lenguaje        para configuraciones de ciertas partes de la aplicacin.  para expresar de forma declarativa ciertas reglas del negocio, que se va a separar de la forma en que se interprete y ejecute esa regla. Ej: regular expressions.  para la creacin de un grafo complejo de objetos, problema que normalmente solucionamos con patrones creacionales, como factories, builders &amp;amp; prototypes.Cuando necesito un DSL? Como aproximacin, diremos que si la cantidad de problemas en este domino especfico que queremos resolver es pequeo, o la complejidad de crear el DSL es mayor que la resolver el problema en nuestro GPL, probablemente no lo necesitemos. De lo contrario, ser una alternativa a considerar.Tipos de DSLsA grandes rasgos, podramos catalogar los DSLs a travs de las siguientes categoras. Existen autores que refinan mucho ms a detalle la categorizacin, incluyendo nuevos tipos. A fines prcticos de explicar la idea general a nivel de programacin, nosotros optamos por acotar esa categorizacin:  Parser + Compilador  Interprete          Compilador: traduce a lenguaje maquina ejecutable: puede ser assembler o un lenguaje ejecutable por una VM como java, etc.      Interprete: a medida que se va parseando (leyendo) el cdigo de expresado en el DSL, se va ejecutando, sin haber generado cdigo ejecutable como paso intermedio.        Traductor:          son los famosos generadores de cdigo.      si bien se podra trazar una analoga con los compiladores, ya que tambin generan cdigo, la diferencia es que los traductores generan cdigo que no es ejecutable de por s, sino ms bien cdigo de otro lenguaje.      Ejemplo: generadores de cdigo. a travs de Java APT (annotation processing tool)        Embebidos:          se utiliza un lenguaje GPL, pero se lo usa de tal manera de simular o asemejarse lo mayor posible a un lenguaje propio del dominio      con syntax sugar y un diseo de APIs especial, llamado Fluent Interfaces, se acerca de un lenguaje de dominio.      aprovechar las caractersticas del lenguaje GPL existente,      Evita tener que hacer un parser, compilador e interprete.      Ej: ruby      DSL InternoDesarrollados como un API dentro de un lenguaje de proposito general, que se ejecutan en su mismo ambiente, llamado lenguaje husped.Si comparamos los DSLs internos y externos, en general los segundos sern mas flexibles, pero tambin el esfuerzo de implementarlos ser mayor, no slo porque la complejidad de implementar un parser a mano es mayor, sino que probablemente el lenguaje husped nos proveer muchas construcciones y bibliotecas tiles. (Digresin: aprovechar las bibliotecas existentes para otro lenguaje es un punto muy importante tambin a la hora de disear un GPL. As es como surge gran cantidad de lenguajes que corren sobre la mquina virtual de Java o .Net)Ejemplo de DSL interno para definir especificaciones aprovechando features de lenguajes dinmicosDSL ExternoDesarrollados como un lenguaje independiente, compilado, interpretado o una mezcla de ambos, que se ejecuta en un ambiente independiente, y no guarda necesariamente relacin con el lenguaje en que est escrito el parser.Ventajas  Libertad absoluta sobre la sintaxis del lenguaje (solo limitada por capacidad de implementacin del parser, etc), por eso..  Mayor expresividad del dominio.Desventajas  Complejidad al tener que implementar el parser + compiler  Disasociacin del lenguaje base o de ejecucin.  Caemos fuera de las herramientas tradicionales, y perdemos soporte a nivel IDE (salvo, ahora con xtext)Artculo sobre cmo hacer un DSL externo usando XText"

} ,

{

"title"    : "Efectos y diseno",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/efectos-y-diseno.html",
"date"     : "",
"content"  : "Entendemos por efectos (colaterales) a aquellas modificaciones observables sobre el ambiente que son producidas por, y persisten tras, la ejecucin de un programa.Son ejemplos de efectos:  la impresin de un mensaje por consola o un cuadro de dilogo en una interfaz grfica  la asignacin destructiva de una variable en un programa procedural  el encendido de una lmpara o la apertura de una compuerta  La eliminacin de un registro en una base de datos  El envo de un correo electrnico.En un sentido amplio, no es posible eliminar completamente los efectos: un sistema (software o no) que no presente efecto no ser capaz de transformar su entorno, y por lo tanto, ser intil completamente: por ejemplo de nada sirve generar un informe sobre contaminacin del agua si luego este no es tomado en cuenta en los controles.Por el contrario, los sistemas reales modifican de forma observable su mundo, recopilando informacin y actuando.Al hablar de efectos, es importante remarcar la importancia del observador, el nivel de detalle y alcance al que estamos analizando el problema. Por ejemplo, la impresin en papel de un informe, desde el punto de vista de la cola de impresin es una operacin con efecto, pero desde el punto de vista de un gerente, no lo tiene en tanto no llegue a sus manos y se tomen acciones en base a su contenido. Desde el punto de vista del microprocesador, una simple suma tiene efecto en tanto implica modificaciones en sus registros.Aqu solo consideraremos como efectos aquellos que sean observables por o mas all de nuestro cdigo, dejando fuera todo aquel efecto completamente encapsulado en el motor, como la Mquina Virtual de Java, o el intrprete GHCLa programacin OO tradicional permite y fomenta el uso de efectos. Los objetos responden a mensajes, eventualmente produciendo efectos, y son responsables tanto de generar como controlar estos efectos ordenando su ejecucin y protegiendo su estado interno.La programacin funcional en su forma ms bsica, en cambio, se trata de resolver los problemas en trminos de aplicacin de funciones puras, es decir, desprovistas de efecto. Entonces, si decimos que los efectos son necesarios, que beneficio nos puede reportar la programacin funcional?En primer lugar, porque que los programas con efectos son ms difciles de desarrollar y probar: los efectos no se ven en el cdigo y no pueden ser trazados facilmente, a diferencia de un valor etiquetado, que es fcil de encontrar y predecir su comportamiento independientemente del lugar donde se encuentre. En un programa puro, si la expresin:objeto.mensaje(argumento)resulta en la evaluacin de f(objeto, argumento), entonces siempre la primera expresin puede ser reemplazada por la segunda (transparencia referencial). Como caso particular, a iguales argumentos, igual resultado. Adems asegura que la evaluacin de cualquier otra expresin no habr sido modificada por esta. Ninguna de ambas afirmaciones son verdaderas en un programa con efectos.Disear un programa con efectos agrega entradas y salidas omnipresentes e invisibles; los datos viajan de forma global y las transformaciones ocurren en el tiempo. Su manejo se vuelve crtico cuando nuestro cdigo se ejecuta en mltiples hilos, o ante la presencia de excepciones.Afortunadamente, an es posible disear programas o partes de programas desprovistos de efectos, como parte de sistemas mayores: una calculadora, un compilador, un motor de reglas de un filtro de correo, son algunos de los infinitos programas que pueden ser modelados sin efecto.En OO existe una tendencia tendencia natural pero errada de forzar las responsabilidades y relaciones entre los objetos imiten a las del mundo real, perdiendo de vista que el objetivo de un sistema oo normalmente no se trata de simular sino resolver problemas, y en ocasiones las soluciones que se apartan de la realidad son igualmente simples de entender, y ms fciles de implementar y mantener. Esta malinterpretacin lleva a que los objetos tambin presenten cambios de estado superficiales, aun cuando, como sealbamos antes, podran haber realizado la misma tarea sin ste.La programacin funcional entonces nos permite mejorar nuestros diseos de objetos, al eliminar los efectos innecesarios.En segundo lugar, porque an en el uso de los efectos, es posible y en ocaciones desaeable un tratamiento a ms alto nivel del los mismos. Una de las fortalezas de los objetos es su capacidad, comparada con la programacin procedural, para la construccin efectos controlados y ordenados pero si bien triunfa al controlar la generacin de efectos, falla al intentar separar su generacin de su evaluacin, al cual ocurre indefectiblemente en el mismo momento. La programacin funcional nuevamente nos provee estrategias para cosificar (reificar) a los efectos, transformndolos en valores, y dandole el poder de controlar los efectos a incluso a aquellos objetos que no lo generaron.Ejemplo:snd(putStr&quot;&quot;,putStr&quot;foo&quot;)Por ltimo, una consecuencia interesante del asilamiento de los efectos es que conlleva una modularizacin del cdigo"

} ,

{

"title"    : "El papel del diseno en la metodologia de desarrollo",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/el-papel-del-diseno-en-la-metodologia-de-desarrollo.html",
"date"     : "",
"content"  : "El diseo cumple un rol fundamental en todos los desarrollos de software. Es entonces cuando tenemos que tomar decisiones que afectan directamente al producto que vamos a construir. Por supuesto, el qu del anlisis vs. el cmo del diseo es una diferencia que aparece en todos los libros. Pero mientras en el qu del anlisis las recomendaciones generales apuntan a ordenar, clasificar, separar  en lo que es parte del sistema  de lo que no lo eso bien, en encontrar los actores e identificar  los requerimientos funcionales  y no funcionaleso  en discriminar requerimientos imprescindibles para la puesta en produccin  de los importantes  o deseablesen el diseo necesitamos echar mano a herramientas mucho ms cercanas a la tecnologa.Qu es disearDisear es encontrar:  los componentes de un sistema  la responsabilidad de cada componente (que justifica su existencia)  y la relacin que cada componente tiene con los dems (sea temporal o ms permanente en el tiempo)Para eso tenemos que tomar decisiones, y aqu es donde empezamos a depender de la tecnologa, porque ella nos define:  sus abstracciones          cmo modelo cada componente o entidad?      cmo defino comportamiento? puedo abstraer ese comportamiento?      cmo relaciono las entidades? debo distinguir el medio en donde esas entidades estn relacionadas?        sus limitantes  sus beneficiosEl diseo y la metodologaSi la metodologa de trabajo es secuencial, cada fase del proyecto tiene un comienzo y un fin especfico. El diseo debe respetar el orden que le corresponde: despus del anlisis y antes de la programacin / construccin. Si la metodologa de trabajo es iterativa, esto implica disear en diferentes momentos, sin acotarlo a un perodo determinado.De la misma manera,  cuando la metodologa es orientada al proceso, se genera una gran cantidad de documentacin respaldatoria del diseo. El proceso es el eje central del proyecto, que gua al objetivo que se quiere alcanzar (en el diseo esto se concreta con un documento entregable que es la especificacin). Si el proceso est bien definido slo hay que controlar el avance de las tareas.  cuando la metodologa es orientada al producto final, nos interesa ms dejar en claro las decisiones importantes que respalden el software que est corriendo. La interaccin entre las personas es fundamental y termina definiendo el proceso de diseo, de la misma manera que el xito o el fracaso del mismo.Diseo anticipado y diseo iterativoLa metodologa de desarrollo nos lleva a disear de dos formas completamente diferentes:Las metodologas predictivas proponen el diseo anticipado, donde se asume que  el anlisis ya ha relevado todos los procesos que el usuario necesita  tenemos disponible toda la informacin para poder definir cada proceso  no habr cambios en los requerimientos hasta nuestra implementacin          el usuario no har cambios o nuevos pedidos.      no habr cambios externos al sistema que obliguen a modificarlo (como disposiciones legales).        si el diseo es adecuado, la codificacin se ajustar perfectamente a lo que el usuario necesita.          para ello hay que documentar el sistema en su completitud para que los programadores no tengan que tomar decisiones de diseo en la codificacin.        en la fase de diseo no se debe programar, dado que se estara solapando la actividad (de la misma manera que en la fase de codificacin no se debe disear)Por el contrario, las metodologas adaptativas proponen el diseo iterativo, donde se asume que  slo tenemos algunos procesos relevados, y aunque los tuviramos en su totalidad, los requerimientos podran cambiar.  es inocente pensar en que no habr cambios en los requerimientos, dado que          el usuario no sabe exactamente lo que se va a construir y tiene derecho a pedir modificaciones cuando se da cuenta de que cometi un error al dar informacin al diseador.      bajo la premisa anterior el diseador no puede realizar un diseo que no est sujeto a cambios, por los errores propios que adems podra cometer.        si el diseo no es adecuado, debemos cambiarlo lo ms pronto posible. Esto incluye la fase de codificacin.  si queremos reflejar la realidad, tenemos que permitir que haya alternancia entre diseo y programacin. No paralelizamos las actividades, sino que una se va solapando a la otra, como en una pila.  el diseo iterativo considera que los errores son parte del desarrollo mismo y necesitamos poder modificar el diseo en cualquier momento, sin que eso paralice el proyecto (iterativo tiene mucho de prueba y error).Anlisis comparativoLos defensores del diseo anticipado sostienen que en el diseo iterativo se pierde el orden, que es difcil de coordinar un proyecto (no se sabe exactamente en qu porcentaje est cumplida cada actividad), y que el diseo iterativo confunde diseo y programacin, al punto en el que en realidad slo se programa.Los defensores del diseo iterativo creen en que todos los proyectos se construyen de esta manera, lo nico que hacemos al utilizar esta metodologa es reflejar lo que sucede en la realidad: los requerimientos cambian (aparecen nuevos, se modifican los existentes y algunos incluso desaparecen durante el proyecto), los diseadores se equivocan, tambin lo hace el usuario y continuamente nos vemos obligados a adaptar nuestra planificacin. Separar un proyecto en varias iteraciones facilita aceptar esos cambios, porque no se mantienen fijos los requerimientos ni los diseos, solamente mantenemos el plazo de entrega (lo que vamos a entregar est sujeto a cambios en cada iteracin).Pensar y hacerAl hacer la comparacin entre las metodologas orientadas al producto vs. las orientadas al proceso y al ver la enorme diferencia entre el diseo predictivo y el iterativo, se pone sobre la mesa una larga discusin: es correcto asociar los tiempos de diseo y programacin a los tiempos donde se piensa y donde finalmente se hace? es tan taxativa la diferencia? puedo abstraer los detalles tcnicos para disear una solucin? debe ocurrir primero la documentacin y despus la construccin o son tareas que pueden solaparse? es necesario contar con dos perfiles diferenciados, o sea, un analista funcional y otro programador? no sera ms sano tener un desarrollador senior con mayores capacidades de abstraccin y otro con menos experiencia, que pueda formarse en la materia?La metodologa define la discusin filosfica de si nos interesan ms las personas o los procesos. Asumir que el proceso tiene la prioridad presupone que slo tengo recursos para asignar, y si divido perfiles en personas que piensan (diseadores) de las que hacen o ejecutan (programadores) eso permite intercambiar gente sin mayores inconvenientes. Si pienso que las personas son importantes, que su grado de experiencia, la relacin entre s, la motivacin personal y grupal, la capacidad de aprendizaje y la respuesta ante problemas que surgen son la clave de xito de un proyecto, no nos interesa hacer la distincin entre pensar y hacer, porque esto ocurre todo el tiempo en forma simultnea, y mientras menos quiera disociar estos eventos (pensar y hacer) menos complicaciones tengo para encontrar un diseador que slo disee y un programador que slo programe. Adems el programador se transforma en una persona crtica del diseo, diseo que entonces puede mejorarse (es una metodologa menos rgida en este sentido).Integracin de las actividades de diseo en el proceso de desarrolloQu actividades ocurren al disear?  Interactuamos con el usuario para repreguntar o proponer alternativas a lo que l solicit  Interactuamos con el equipo de desarrollo, en donde pueden surgir          inconsistencias en las definiciones que no habamos detectado antes: en el diseo iterativo este inconveniente est previsto, no as en el diseo anticipado en donde el equipo del proyecto debe asumir el costo de este imprevisto.      dificultades tcnicas de implementacin: esto suele ser ms frecuente de lo que imaginamos, ya sea porque subestimamos la dificultad de un requerimiento, porque no tuvimos en cuenta algn factor tecnolgico o porque los imprevistos suceden en todo proyecto.      Mientras que las metodologas secuenciales ven que el anlisis condiciona el diseo y ste a su vez define las decisiones de implementacin, es interesante notar que en los casos que mencionamos arriba es al revs: la arquitectura (o ms general, las cuestiones tcnicas) impactan sobre el diseo y el diseo puede hacer variar lo relevado en el anlisis. De hecho, este es el valor agregado de un buen diseador: hacer las preguntas que disparen mejoras en lo que el usuario pide.Links relacionados  Volver a Diseo de Sistemas"

} ,

{

"title"    : "Uso del signo pesos ($) en haskell",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/el-signo-pesos-en-haskell.html",
"date"     : "",
"content"  : "El signo pesos en Haskell (el $) se usa para 2 cosas:1- La funcin aplicar$ es la funcin aplicar. Hacer even $ 4 significa al even aplicalo pasndole el 4, o sea que es lo mismo que hacer even 4.  Se suele usar para componer y hacer algunas cositas chetas como por ejemplo:Ejemplo, si en la consola quiero usar la funcin pam as:Prelude&amp;gt; pam 5 [even, even, odd][False, False, True]Es decir, que de una lista de funciones quiero aplicarlas a un valor dado, podra resolverlo as:pam :: a -&amp;gt; [(a -&amp;gt; b)] -&amp;gt; [b]pam cosa funciones = map (&amp;#92;f -&amp;gt; f cosa) funciones-- otra forma:-- pam cosa funciones = map (aplicarA cosa) funciones-- aplicarA cosa funcion = funcion cosao bien aprovechar la funcin $:pam :: a -&amp;gt; [(a -&amp;gt; b)] -&amp;gt; [b]pam cosa funciones = map ($ cosa) funcionesAh aprovechamos la aplicacin parcial de $ (la aplicacin parcial de la funcin aplicacin ) para pasarle la cosa que necesita y luego que le falte recibir la funcin. Luego el map hace la magia de irle pasando todas las funciones de la lista.2- Evitando parntesisLa funcin$ tiene muy poca precedencia. Eso significa que a veces la gente la usa para evitar parntesis.Por ejemplo, esto est mal:even 2 * 3Porque even tiene ms precedencia que el * , eso significa que va a hacer even 2 y luego multiplicarlo por 3, lo cual es error de tipos.Entonces, hay que poner parntesis:even (2 * 3)O bien usar el $ :even $ 2 * 3Aprovechando que eso significa al even aplicalo pasndole el 2*3, y que como tiene muy poca precedencia, hace que todo lo que est a la izquierda se considere una cosa (el even), que todo lo que est a la derecha (el 2 * 3) se considere otra y entonces a even le aplica el resultado de 2*3.Es un clsico problema de sintaxis, de parsers. Cada lenguaje tiene sus reglas de precedencia para desambiguarlo, Haskell tiene las suyas, y se usa el $ como chiche a veces para evitar parntesis."

} ,

{

"title"    : "Elementos teoricos para comparar tecnologias de presentacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/elementos-teoricos-para-comparar-tecnologias-de-presentacion.html",
"date"     : "",
"content"  : "Clientes livianos y pesadosIntroduccin a los conceptos de cliente y servidorSi una aplicacin es accedida por mltiples usuarios simultneamente, probablemente cada uno de ellos lo haga desde su propia computadora en forma remota. Al programa que se ejecuta en la mquina del usuario se lo denomina cliente.Luego, esos clientes necesitarn poder compartir informacin entre s; en muchos casos esa informacin se centralizar en una o ms programas que se denominan servidor (en ingls server).La forma de repartir responsabilidades entre clientes y servidores dan lugar a un primer nivel de clasificacin de las posibles arquitectura de una aplicacin. Desde el punto de vista de la teora de presentacin, el punto ms interesante ser el cliente, ya que ser el que tenga la responsabilidad de interactuar con el usuario.Clasificacin tradicionalTradicionalmente se sola clasificar a los clientes entre pesados y livianos. Segn esa clasificacin, un cliente pesado tiene las siguientes caractersticas:  Se instala en la mquina cliente.  Es un programa independiente y completo (en ingls stand alone, esto es, no requiere de la presencia previa de otros programas en la mquina en la que se va a ejecutar (como mquinas virtuales, intrpretes, application clients, etc).  Est pensado para ser utilizado en un entorno de ejecucin especfico (hardware, sistema operativo, etc) y eso le permite aprovechar todos sus recursos sin limitaciones. Por ejemplo:          Se pueden utilizar todos los perifricos de la mquina como ser impresoras o cualquier dispositivo especfico.      No hay limitaciones en cuanto a las formas de presentar la informacin o de interactuar con el usuario.        Contiene gran parte o toda la lgica de la aplicacin, requiriendo pocos servicios del servidor, que se limita a ser un repositorio central de informacin.  Requiere grandes cantidades de recursos de la mquina cliente.Los clientes livianos se caracterizan por delegar gran parte de la lgica de la aplicacin a la mquina servidora y de esa manera requerir menor cantidad de recursos de la mquina cliente. Sin embargo hay otra caracterstica de un cliente liviano que cambia radicalmente la forma de pensar las aplicaciones y es la aparicin del concepto de application client.El application client es un entorno en el cual se ejecutan las aplicaciones clientes de forma controlada, les da servicios que permiten simplificar la programacin de las mismas y tambin tiene polticas que permiten proteger a la mquina de posible cdigo malicioso. El application client ms ampliamente conocido es el web browser, pero no es el nico.La ejecucin dentro de un application client tiene gran impacto sobre las aplicaciones construidas de esta manera:  El application client se ocupa de obtener dinmicamente el cdigo de la aplicacin, eliminando la necesidad de instalacin y de actualizacin de versiones.  La aplicacin ya no es independiente y slo puede ejecutarse en una mquina que contenga el application client correspondiente, esto nos lleva con frecuencia a no utilizar el application client que podra ser ms til a nuestros propsito sino a amoldarnos al que es ms probable de encontrar instalado en las mquinas en las que querremos ejecutar nuestro programa.  Permite que la misma aplicacin se ejecute en mquinas totalmente distintas, en tanto tengan el mismo application client.  Restringe las posibilidades de uso de la mquina a lo provisto por el application client. Por ejemplo en el caso de una aplicacin web, tradicionalmente las aplicaciones estuvieron limitadas a la utilizacin del lenguaje HTML, lo que limitaba en gran medida las posibilidades de interaccin con el usuario.Evolucin de los tipos de clienteCon el tiempo la clasificacin taxativa entre clientes pesados y livianos se fue diluyendo y fueron apareciendo opciones intermedias. Desde ambos lados fueron apareciendo herramientas que intentaban incorporar en uno de los mundos algunas de las ventajas del otro.Application ClientsEn un primer lugar la universalizacin del concepto de Virtual Machine o la popularizacin de diferentes lenguajes interpretados hace que sea difuso cundo una aplicacin es stand alone o est utilizando un application client. Por ejemplo, una aplicacin Java puede verse como un cliente liviano que se ejecuta sobre un application cliente preinstalado (la JVM) o bien ver a ambos como un programa instalable nico. En definitiva es una cuestin de como se distribuye el programa, ya que hoy en da no existen practicamente lenguajes que no requieran de un intrprete, mquina virtual o determinadas bibliotecas instaladas previamente para poder ejecutar programas.El cuadro se completa cuando se incorporan herramientas para actualizar cdigo dinmicamente en lenguajes tradicionalmente pensados para aplicaciones pesadas como Java (Java WebStar).Inclusive la utilizacin de application clients se ha extendido a nuevos entornos, entre ellos podemos mencionar dos: Firefox y Eclipse, en ambos casos encontramos un entorno base o microkernel que provee de un entorno para la ejecucin de aplicaciones y una arquitectura basada en plugins o add-ons, que son los que en ltima instancia dan forma a la aplicacin.Rich Internet ApplicationsPor otro lado la popularizacin de las aplicaciones en Internet se contrapone con la gran cantidad de limitaciones que impone el HTML como lenguaje base para modelar las interfaces de usuario de dichas aplicaciones. Eso fue dando lugar a la aparicin de mltiples tecnologas que intentan sobreponerse a dichas limitaciones, algunos ejemplos son:  La posibilidad de ejecutar JavaScript dentro del web browser permite tener comportamiento en el cliente que ya no se delega en el servidor.  Manipular los componentes visuales desde ese cdigo JavaScript en el cliente, para salir de las limitaciones impuestas por el HTML.  La incorporacin de tecnologas como AJAX permiten romper la metafora navegacional definida originalmente por el browser.Adicionalmente, la aparicin de herramientas como Flash, Applets, SVGs y HTML5 incorporan nuevos application clients que rompen la visin original del browser-intrprete-de-HTML.A las aplicaciones que salen de las limitaciones de navegacin, interaccin y visuales que tenan las aplicaciones web tradicionales se las denomina Rich Internet Applications (RIA) y por extensin tambin a las tecnologas que permiten desarrollar ese tipo de aplicaciones (se podra sumar tambin JavaScript a esta lista). Si bien se podra decir que este tipo de ideas estn an en evolucin, se observa una tendencia a tener application clients cada vez ms poderosos.Uso de RecursosTanto la aparicin de applications clients cada vez ms poderosos y complejos como la intencin de agregar dinamismo y comportamiento a los clientes han producido un incremento considerable en la cantidad de recursos que requiere una aplicacin web, habiendo en muchos casos prcticamente ninguna diferencia entre un cliente pesado y un cliente liviano.Descripcin de la vistaOtro de los elementos importantes a analizar al comparar tecnologas de presentacin son las herramientas que cada tecnologa propone al tiempo de definir una vista.Los conceptos fundamentales al describir una vista son los de componente y layout. Los componentes constituyen los elementos activos de la vista, es decir, aquellos con los que el usuario puede interactuar. El layout es la estrategia que indica cmo organizar los componentes espacialmente para poder visualizarlos.Si bien algunos frameworks modernos se denominan a s mismos orientados a componentes se puede considerar que en realidad la amplia mayora de las tecnologas de interfaz de usuario estn constituidas por componentes. La diferencia est entonces en la forma de describir esos componentes y su disposicin espacial, que se puede clasificar entre:ProgramticaSe basa en la manipulacin directa en el programa de los componentes visuales que conforman la vista.DeclarativaEn la que se utiliza un lenguaje de ms alto nivel que describe caractersticas de la vista pero sin indicar el algoritmo para su construccin o sin manipular los componentes visuales directametneVisualQue permite escojer los componentes de una paleta y visualmente organizarlos en la pantalla sin necesidad de programar o escribir prcticamente nada de cdigo.Model drivenEn la que la interfaz de usuario est guiada por el modelo de dominio y no se necesita programar especficamente (o se reduce notablemente la necesidad de programarla).Otra dimensin del anlisis a realizar pasa por los bloques de construccin de que disponemos, por ejemplo:  De qu componentes disponemos y si es posible agregar nuevos componentes.  Qu formas de layout estn contempladas.  Qu mecanismos de interaccin tiene el usuario predefinidos con esos componentes.Mecanismos de descripcinMecanismos programticosHerramientas disponiblesComponentesHay un conjunto de componentes bsicos que suelen estar disponibles en todas las tecnologas, que incluyen:  Campos para ingresar texto, pueden ser de una lnea o multilnea.  Selectores entre varias opciones (combos, option buttons, etc). ueden ser de seleccin simple o mltiple.  Check boxes (para seleccionar o no una opcin, combinando varios se puede formar un selector mltiple).  Diferentes variantes de botones.  Y otros controles informativos como ser labels o imgenes.Posibilidades de interaccinTambin se deben analizar las posibilidades de interaccin con esos elementos como por ejemplo:  Qu eventos se pueden obtener de cada control, es decir, clickear sobre el control, modificar su valor, apretar una tecla, movimiento del mouse, etc.  Drag &amp;amp; drop.Layouts  Fijo xy.  tabsComponentes  Diferentes formas de describir una vista: programtica, declarativa, visual, model driven.          Diferencias entre diferentes variantes de declaratividad, scriptlets, etc.      Manipulacin de componentes vs. manipulacin de texto.      Navegacin  Formas de navegacin: pantallas y formularios, ventanas y dilogos (o SPI), manipulacin directa.          Control de la iniciativa: usuario o aplicacin.      Integracin con el dominio de la aplicacin: stateless (basada en servicios) o statefull (basada en objetos y en eventos).      Modelado  Estado conversacional: en el cliente, en el server (sesin), en el pedido, en objetos especficos (por ejemplo: caso de uso).  Integracin de la lgica: eventos y bindings (nivel de campo), formulario o pantalla (submit), objetos especficos (por ejemplo: caso de uso).  Arquitecturas: orientado a la presentacin, datos, servicios, objetos."

} ,

{

"title"    : "Encapsulamiento",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/encapsulamiento.html",
"date"     : "",
"content"  : "Qu es el encapsulamiento?Quien usa un objeto slo ve lo que necesita para poder interactuar con l, que es el comportamiento que exhibe. Los detalles internos quedan encapsulados en el objeto. As quedan acotadas y explicitadas las formas posibles de interactuar con un objeto.El ocultamiento de detalles de implementacin, como ser los atributos de un objeto, permite separar mejor las responsabilidades y evitar efectos inesperados como resultado de la modificacin del valor de las variables por entidades externas.El uso de setters y getters (mensajes para modificar y conocer el valor de un atributo respectivamente), tambin conocidos como accessors, es importante para que el objeto que tiene esos atributos pueda controlar el uso de los mismos y para que los que usan al objeto que los tiene no sufran un impacto muy grande si la implementacin del mismo cambia.EjemploSupongamos que representamos a los lugares a los que puede volar nuestra amiga Pepita la golondrina como objetos que conocen su kilometraje en una ruta y nos saben decir a qu distancia se encuentran de otro lugar. Si su estado interno se modificara de modo que su ubicacin se represente por una coordenada (x e y), slo los lugares deberan verse afectados por este cambio ya que a Pepita slo le interesa conocer la distancia entre dos lugares.A medida que el sistema crece esta caracterstica toma ms importancia ya que no es fcil determinar todos los lugares en los cuales algo se est usando y qu impacto tiene ese uso.Es importante entender que acceder a los atributos de un objeto mediante mensajes no es suficiente para afirmar que no se rompe el encapsulamiento del objeto. Supongamos que queremos calcular la distancia que tiene que volar pepita para llegar a otro lugar, es muy comn ver cosas como:Smalltalk:pepitalugarActualkilometraje-otroLugarkilometrajeWollok:pepita.lugarActual().kilometraje()-otroLugar().kilometraje()(donde lugarActual y kilometraje son los getters de los respectivos objetos receptores) para trabajar con el nmero resultante en vez de delegar en el objeto que puede resolver el problema de la distancia a otro lugar. Si bien slo se estn usando getters, al preguntarle el kilometraje al lugar cuando lo que nos interesaba era la distancia nos estamos acoplando a cmo representa su ubicacin, y por ende si se quisiera cambiar a coordenadas, los usuarios del mensaje kilometraje se van a ver afectados."

} ,

{

"title"    : "Entradas al proceso de diseno",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/entradas-al-proceso-de-diseno.html",
"date"     : "",
"content"  : "Ralph &amp;amp; Wand definen que el diseo clasifica las entradas o influencias al proceso de diseo en requerimientos, objetivos, componentes primitivas, restricciones y entorno.RequerimientosLos requerimientos o requirements son la entrada ms obvia y tal vez la ms importante. La fuente de los requerimientos es el proceso de anlisis, el anlisis tambin es una especificacin: de lo que el sistema debe ser, de sus caractersticas externas. El diseo especifica cmo el sistema debe construirse.La clasificacin ms comn de los requerimientos es dividirlos entre funcionales y no funcionales. Una buena especificacin de requerimientos debe contemplar tanto las cuestiones funcionales como las no funcionales, y el diseo deber proponer ideas.Requerimientos funcionalesLos requerimientos funcionales son las capacidades o funcionalidades de un sistema de software. Detallan el comportamiento del sistema. En otras palabras, lo que el sistema debe proveer. Hay distintos tipos de requerimientos no funcionales:Procesos de NegocioLos procesos de negocios permiten especificar como un proceso se lleva a cabo a travs de la organizacin, ya que requiere intervencin de diferentes actores y reas, en diferentes lugares y tiempos.Casos de UsoLos caso de uso definen una interaccin entre un actor y el sistema, para lograr un objetivo de negocio especifico en un lugar y momento especifico.Requerimientos no funcionalesSon los que especifican la forma en que el sistema debe llevar a cabo esas capacidades, determinan la calidad con la que el sistema brinda los servicios o bien la calidad con la que est construido.Objetivos (goals)Ralph y Wand diferencian un subconjunto de los requerimientos denominados objetivos (goals). Los objetivos resumen el impacto esperado del sistema en el ambiente.Componentes primitivas (primitive components)Son los bloques de construccin provistos por la tecnologa subyacente. En los niveles ms bajos de abstraccin del sistema, las abstracciones utilizadas tienden a coincidir con las herramientas provistas por la tecnologa, tanto en cuanto a sus bloques primitivos de construccin, como en la forma de combinarlos entre s.RestriccionesLas restricciones o constraints pueden tener diferentes orgenes:  Tecnolgicas, tenemos que tener en cuenta qu cosas permite o no permite la tecnologa en la que vamos a construir el sistema.  Leyes y otros reglamentos, incluyendo a los reglamentos internos de la empresa o licencias de las herramientas que usamos.  Negocio, el negocio puede imponer restricciones de tiempo de llegada al mercado, costos y beneficios, tiempo de vida del sistema, entre otras.  De arquitectura, la arquitectura puede imponer restricciones de integridad, correctitud, completitud, constructibilidad o robustez, entre otras.Entorno (Environment)Nos interesa tanto el entorno tecnolgico (con qu tecnologa contamos) como social (caractersticas de las personas que intervienen). Podemos diferenciar dos entornos:Entorno de desarrolloEs el ambiente en el que se disea, construye y/o prueba el sistema.  Desde el punto de vista social debemos tener en cuenta sus conocimientos previos en cuanto a herramientas tecnolgicas, conceptuales y metodolgicas. Por ejemplo, antes de introducir una tecnologa nueva puede ser una buena idea analizar la capacidad del equipo para aprenderla.  Desde el punto de vista tecnolgico debemos tener en cuenta por ejemplo los equipos con los que contamos para trabajar, si estn todos en un mismo lugar o separados, si la comunicacin (redes) entre esos lugares es buena o mala, si tenemos licencias de los programas que queremos usar, etc.Entorno de usoEl entorno en el que se usa el sistema.  Desde el punto de vista social debemos considerar al usuario que esperamos, por ejemplo al disear la interfaz de usuario, o para instalarse el sistema en caso de ser necesario, sus costumbres previas, otros sistemas que usa.:*Desde el punto de vista tecnolgico podemos considerar el hardware del que puede disponer el usuario, su coneccin a Internet, etc."

} ,

{

"title"    : "Errores comunes  usar un predicado como si fuera una variable",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/errores-comunes--usar-un-predicado-como-si-fuera-una-variable.html",
"date"     : "",
"content"  : "A veces se utilizan predicados unarios para representar verdades globales (lo que en otro paradigma sera una constante global).Por ejemplo podemos tener un predicado que nos diga la fecha de hoy:hoy(fecha(2009,10,15)).O podemos tener un predicado que refleje el estado del tablero en un domin:estado([ficha(0,1),ficha(1,4),ficha(4,2),ficha(2,2),ficha(2,5)]).El error consiste en utilizar hoy o estado como si fueran constantes, y no lo son.Ejemplo 1 - Fecha de hoySuponiendo que tengo en la base de conocimientos informacin sobre los downloads que se hicieron el da de hoy, en el predicado que relaciona un usuario, con un archivo bajado y una fecha; una forma incorrecta de utilizarlo sera:bajoAlgunArchivoHoy(Usuario):-download(Usuario,_Archivo,Fecha),Fecha=hoy.%INCORRECTO!La forma correcta de hacerlo podra ser:bajoAlgunArchivoHoy(Usuario):-download(Usuario,_Archivo,Fecha),hoy(Fecha).Se ve que en la nueva versin, hoy se utiliza como predicado y no como individuo.Ejemplo 2 - Estado del dominSi quiero saber los extremos de la lista que representa el estado del juego, es incorrecto hacer cosas como:extremo(E):-estado=[E|_].%INCORRECTO!!extremo(E):-ultimoLista(E,estado).%INCORRECTO!!La forma correcta de hacerlo sera:extremo(E):-estado([E|_]).extremo(E):-estado(Estado),ultimoLista(E,Estado).Asumiendo que el predicado relaciona a una lista con su ltimo elemento."

} ,

{

"title"    : "Errores comunes al comenzar a trabajar con haskell",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/errores-comunes-al-comenzar-a-trabajar-con-haskell.html",
"date"     : "",
"content"  : "Variables mgicasAlgo que se ve mucho en los parciales es gente que inventa variables mgicas por no entender orden superior y aplicacin parcial, por ejemplo hacer algo como:aprobadosalumnos=filter(notaalumno&amp;gt;4)alumnosen vez de:aprobadosalumnos=filter((&amp;gt;4).nota)alumnoso en todo caso usando Expresiones lambda:aprobadosalumnos=filter(&amp;#92;alumno-&amp;gt;notaalumno&amp;gt;4)alumnosLa variable alumno de la solucin errnea no existe, y si existiera estaramos cayendo en el problema explicado en la siguiente seccin.Funciones y valoresEs importante diferenciar:  Qu valores son funciones y qu valores no.  En qu lugares se espera poner una funcin y en qu lugares se espera otro tipo de valor.Por ejemplosonTodasPasablespelicula=all(puntajePromediopelicula&amp;gt;6)(sndpelicula)tiene un error porque la funcin espera como parmetro una funcin, mientras que no es una funcin (denota un valor booleano)._ Otro ejemplo:puntajespelicula=sndpeliculaesRiesgosa=elem1puntajesCul es el problema? La funcin espera como segundo parmetro una lista, sin embargo la expresin no es una lista, sino una funcin que devuelve una lista.Moraleja:  No es lo mismo un booleano/entero/string/etc que una funcin que devuelve un booleano/entero/string/etcComposicin y aplicacin parcialMuchas veces se ven errores que (a veces disfrazados de un me confund con los parntesis) llevan a expresiones invlidas, lo importante es entender qu construcciones son vlidas y cules no.Normalmente hay muchas formas de llegar al mismo resultado. Por ejemplo:(not.esDivisorao)100not(esDivisorao100)Estas dos lineas producen el mismo resultado. Mientras que las siguientes estn mal:not.esDivisorao100(not.esDivisor)ao100(otroBooleano&amp;amp;&amp;amp;(not.esDivisorao))100Porqu? Repasemos las que estaban bien:(not.esDivisor ao)100Lo que est resaltado es una funcin. Es resultado de componer otras dos funciones: not y esDivisor ao. Not como me refiero a esDivisor ao como una nica funcin, que NO es esDivisor. Para ver que son diferentes, podemos solo chequear sus tipos:&#39;&#39;&#39;esDivisor::Int-&amp;gt;Int-&amp;gt;BoolesDivisorao::Int-&amp;gt;Bool&#39;&#39;&#39;Esta es una versin simplificada del tipo, no es exactamente lo que dira haskell, pero a efectos de la explicacin da igual. Not que esDivisor ao espera un argumento menos que esDivisor (justamente, porque ya le pasaste el ao). Obviamente, si aplicamos esta funcin otra vez, esto se repite.esDivisor ao 100 :: BoolEsto ya no es una funcin. Es un booleano. Ya no puedo aplicarlo.Habiendo entendido esto, miremos otra vez la composicin:(not.esDivisorao)Si digo que se est componiendo not con esDivisor ao, pods deducir que la aplicacin de una funcin tiene mayor precedencia que la composicin. Una forma de entender esto es que la aplicacin tiene prioridad, entonces la composicin va a trabajar con el resultado de la aplicacin.Comparemos esto con uno de los casos de error:(not.esDivisorao)100&amp;lt;- Funciona bien. Le aplico 100 al resultado de la composicinnot.esDivisorao100&amp;lt;- Falla! Trata de componer not con esDivisor ao 100, que es un Bool, no una funcin.Los otros casos erroneos tambin podemos deducirlos as:(not.esDivisor)ao100&amp;lt;- Falla porque trats de componer esDivisor, que espera ms de un argumento.(otroBooleano&amp;amp;&amp;amp;(not.esDivisorao))100&amp;lt;- Falla porque (not.esDivisor ao) es una funcin y &amp;amp;&amp;amp; espera un booleano."

} ,

{

"title"    : "Errores comunes con select  y collect",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/errores-comunes-con-select--y-collect-.html",
"date"     : "",
"content"  : "Orden incorrecto entre collect: y select:Como se explica en Mensajes de colecciones, el select: es para filtrar una coleccin en base a un criterio mientras que el collect: es para recolectar los resultados de enviar un mensaje a cada objeto de la coleccin original.Supongamos que queremos obtener una coleccin con los promedios de los alumnos que aprobaron, podramos plantearlo como(alumnosselect:[:unAlumno|unAlumnoaprobo])collect:[:unAlumno|unAlumnopromedio]Si en vez de eso hicieramos(alumnoscollect:[:unAlumno|unAlumnopromedio])select:[:unAlumno|unAlumnoaprobo]Esto no va a funcionar, porque el collect: va a retornar una lista de nmeros, no de alumnos, con lo cual el filtrado no se va a poder hacer.Si lo que queremos es en cambio obtener los promedios &amp;gt; 4 de los alumnos, ah no habra problema en hacer primero el collect: y luego el select:, porque el filtrado se hara sobre promedios y no sobre alumnos:(alumnoscollect:[:unAlumno|unAlumnopromedio])select:[:unPromedio|unPromedio&amp;gt;4]Inicializacin inecesaria de variablesFjense una cosa: siempre que yo hago.a:=cualquiercosaEso es una asignacin destructiva s ya s, lo dije mil veces, pero lo que parece hasta ac fcil despus igual genera confusiones.Qu quiere decir eso de destructiva? Que se pierde lo que fuera que estaba referenciando la variable a, se pierde, o sea no me importa lo que tena la variable a antes de eso.Por qu saco a colacin esto ahora? Bueno el error que yo veo frecuentemente es este:a:=Setnew.a:=otroSetcollect:[...etc]Tiene sentido inicializar la variable a antes del collect:? Y no si yo en la siguiente lnea voy a hacer una asignacin destructiva justamente lo que sea que tiene la variable a se va a perder.Visto de otra manera, acurdense que dijimos el collect: me devuelve una coleccin NUEVA. Es decir, que no usa el valor de la variable a porque me devuelve una coleccin nueva.Y digo ms, si entends la asignacin, pods ver que primero se evala el lado derecho (lo que est despus del :=), y luego se asigna. Entonces a no interviene para nada en la evaluacin de  otroSet collect: [ etc]  (salvo claro que aparezca a en la expresin). Digo esto para desmitificar la idea de que de alguna manera el collect: podra dejar sus valores en el Set que apunta la variable a claramente eso no es posible.(Esa confusin puede que venga de programar en c, donde a veces yo necesito alocar memoria para que otro procedimiento deje datos en esa memora bueno, ac no es necesario alocar memoria, eso pasa solo! wiii! jaja. Adems que an en estructurado para que el proc pueda usar lo que yo aloqu debera pasrselo por parmetro y no como valor de retorno, esa caracterstica s es compartida.)Obviamente, el ejemplo del collect: vale para select: y todo mtodo que devuelva una coleccin. No?"

} ,

{

"title"    : "Errores comunes",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/errores-comunes.html",
"date"     : "",
"content"  : "Contenido del tag web-appThecontentofelementtype&quot;web-app&quot;mustmatch&quot;(icon?,display-name?,description?,distributable?,context-param*,filter*,filter-mapping*,listener*,servlet*,servlet-mapping*,session-config?,mime-mapping*,welcome-file-list?,error-page*,taglib*,resource-env-ref*,resource-ref*,security-constraint*,login-config?,security-role*,env-entry*,ejb-ref*,ejb-local-ref*)&quot;.El mensaje quiere decir que el contenido web-app es invlido, est mal formado.Para entender el mensaje, en la lista entre parntesis estn los posibles tags hijos de webapp, para solucionarlo habra que fijarse si tienen algo que est dependiendo de web-app y que no se ajuste a esa lista.Adems:  Tienen que estar en el orden que estn en esa lista.  Los que tienen ? son opcionales pero pueden 0 o una veces,  los que tienen * pueden estar 0 o ms veces.Un error muy comn podra ser al tener varios servlets poner cada servlet con su servlet mapping y el estndar exige poner primero todos los servlets y recin despus todos los servlet mappings.En este caso puntual, es muy posible tener esa validacin en algn editor y que la aplicacin funcione de todas maneras, porque el tomcat no es estricto al chequear el formato del web.xml. La recomendacin es de todas formas ajustarse al estndar."

} ,

{

"title"    : "Errores en haskell",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/errores-en-haskell.html",
"date"     : "",
"content"  : "Ver Paradigma_Funcional"

} ,

{

"title"    : "Errores frecuentes al programar en logico",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/errores-frecuentes-al-programar-en-logico.html",
"date"     : "",
"content"  : "Errores conceptuales ms importantes  Confundir los conceptos del paradigma, por ejemplo:          predicados con funciones - los predicados no devuelven cosas, tienen valor de verdad. Tenerlo en cuenta para la cantidad de parmetros y para no consultarlos mal      variables con individuos (en particular tomos) - slo escriban variables con mayscula!      predicados con individuos        Errores lgicos propiamente dichos:          Confundir Y con O      Mezclar antecedente y consecuente en un forall      Confundir existe con para todo (forall).        Estilos de programacin no lgicos, por ejemplo:          Utilizacin innecesaria de listas (ver errores comunes).      Estrategias algortmicas.        Programacin con efectos colaterales, por ejemplo intentos de asignar ms de una vez un valor una misma variable.  Falta de abstraccin, que puede verse reflejada en:          Uso de trucos programticos de bajo nivel, en lugar de representaciones abstractas de alto nivel.      Ausencia de predicados auxiliares que abstraigan conceptos reutilizables en diferentes predicados de alto nivel (lo que normalmente lleva a la repeticin de cdigo).      Malas deciciones a la hora de separar un predicado en subtareas, que llevan a tener predicados auxiliares que no representan abstracciones o conceptos tiles.        Problemas de inversibilidad; ya sea por falta de generacin o por hacerlo incorrecta-/innecesariamente.Problemas generales de programacin  Incumplimiento de las consignas.  Cdigo que no se entiende, desprolijo, desordenado.  Inconsistencias en general, por ejemplo:          Las diferentes reglas de un predicado esperan parmetros con significados distintos.      Una misma variable utilizada con diferentes objetivos inconsistentemente.      Errores ms tcnicos  Mal uso del pattern matching, en dos versiones:          No aprovecharlo para quedarse con una parte de una estructura ms grande (functor o lista).      Usar patrones demasiado especficos, perdiendo la oportunidad de construir predicados polimrficos.        Usar igualdad (=) en lugar de is. -&amp;gt; Explicacin: el = no resuelve cuentas. Es la igualdad ms trivial, la igualdad visual y directa de patrones y tomos.   Usar el smbolo = en lugar de la misma variable,  del individuo correspondiente.Cuestiones de estilo  No elegir buenos nombres para variables y/o predicados.  Utilizar pasos intermedios innecesarios que no aportan a la claridad del cdigo.  No utilizar variables annimas donde corresponde.  Complejidad innecesaria.Carteles de Error del SWI-Prolog  Warning: Singleton Variables"

} ,

{

"title"    : "Escribiendo un paper",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/escribiendo-un-paper.html",
"date"     : "",
"content"  : "Un paper es un artculo de difusin cientfica. Dado el caracter cientfico del paper, la comunidad cientfica establece (quizs un poco ad-hoc) una cierta estructura y formato de estructura. En este artculo vamos a tratar la escritura de papers con un formato de tendencia _formal_.Para quienes quieran tener una breve introduccin, recomiendo vean el siguiente video:En ingls: https://www.youtube.com/watch?v=g3dkRsTqdDA Slides  Formato de un paper  El arte de buscar related work"

} ,

{

"title"    : "Esquemas de tipado",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/esquemas-de-tipado.html",
"date"     : "",
"content"  : "IntroduccinQu es un tipo?Toda expresin en un programa puede denotar diferentes valores en diferentes momentos (dependiendo del lenguaje eso puede ocurrir en la misma o en diferentes ejecuciones del programa). Un tipo describe un conjunto de valores. Al asignarle un tipo a una expresin se est delimitando cul es el conjunto de valores que podra denotar esa expresin.Por otro lado, las operaciones computacionales en general no pueden ser aplicadas sobre cualquier valor. Un sistema de tipos me provee una forma de estudiar qu valores tienen sentido para ser utilizados en una operacin dada. Por ejemplo, si x e y son valores numricos, la expresin x + y tiene sentido. En cambio si x e y son valores booleanos, x + y carece de sentido.La idea de tipo nos permite relacionar:  un conjunto de valores que tienen ese tipo o son de ese tipo,  con las operaciones que pueden ser realizadas sobre esos valores.Sistemas de tiposExisten diferentes tendencias en cuanto a cmo se clasifican a los diferentes lenguajes en funcin de la presencia o no de un sistema de tipos o de las caractersticas de ese sistema de tipos. Diferentes autores hablan de lenguajes tipados o no tipados, fuerte o dbilmente tipados, lenguajes estticos o dinmicos. Intentaremos proveer una forma de categorizacin que sea amplia para poder estudiar diferentes lenguajes y autores.Segn Luca Cardelli un lenguaje tipado es el que asocia cada expresin con un tipo (con uno no trivial). El sistema de tipos es el componente que administra la informacin de tipos de un programa. Un lenguaje se considera tipado por la existencia de un sistema de tipos, independientemente de que la sintaxis del lenguaje incorpore informacin de tipos.Los objetivos de un sistema de tipos son:  Ayudar a detectar errores al programar.  Guiar al programador sobre las operaciones vlidas en un determinado contexto, tanto en cuanto a documentacin com en cuanto a ayudas automticas que puede proveer por ejemplo un IDE.  En algunos casos el comportamiento de una operacin puede variar en funcin del tipo de los elementos involucrados en la misma. De esto vamos a diferenciar varios sabores: polimorfismo, sobrecarga, multimethods, etc.Algunas caractersticas de un sistema de tipos:  Proveen informacin al programador, de forma ms precisa que un comentario.  Segn Cardelli, un sistema de tipos debera permitir hacer validaciones utilizando la informacin de tipos, algortmicamente.  Las validaciones basadas en un sistema de tipos, que son ms fcilmente automatizables que otros tipos de especificaciones formales.Tipado implcito o explcitoEl tipado de Java es explcito, esto se ve en dos aspectos:  Toda variable, parmetro, mtodo tiene un tipo definido.  Para que dos objetos puedan ser polimrficos tengo que indicarlo explcitamente: herencia o interfaces.Las interfaces cumplen dos funciones:  Permitir un polimorfismo chequeado estticamente y no restringido por la herencia simple.  Ponerle nombre a un concepto que no quiero representar con una clase: documentar.En Smalltalk no necesito hacer una indicacin explcita de que dos objetos sean polimrficos, basta con que entiendan algn(os) mensaje(s) en comn. Vemos el ejemplo de los bloques y los smbolos.Chequeos estticos y dinmicosAlgunos ejemplos de cmo se comportan los tipos en Java y en Smalltalk  En Java tomamos un String e intentamos mandarle el mensaje caminar, no compila: chequeo esttico.  En Smalltalk hago lo mismo y me permite ejecutarlo, se rompe en tiempo de ejecucin: chequeo dinmico o en tiempo de ejecucin.Eso nos marca una primera categorizacin de los tipos: en funcin de en qu momento se chequean. No necesariamente un lenguaje tiene siempre el mismo comportamiento, en java si yo casteo postergo el chequeo hasta el tiempo de ejecucin. Si se acuerdan de lenguaje C, recordamos que ante un casteo puede pasar cualquier cosas: a veces simplemente no se valida nada.Esta primera diferencia parecera volcar la balanza a favor de los lenguajes con chequeo esttico, porque detectan antes los problemas, sin embargo vamos a ver que tambin tienen desventajas. Por otro lado, ante la presencia de casteos el chequeo esttico se pierde.Finalmente es importante diferenciar entre chequeo dinmico y no chequeo. El chequeo dinmico me permite manejar el problema y manejarlo o por lo menos me lo informa correctamente, la ausencia de chequeo suele causar errores muy difciles de detectar o corregir.Deteccin de erroresCardelli propone discriminar dos tipos de errores que se pueden producir durante la ejecucin de un programa:Trapped (atrapados)Son los errores que se detectan inmediatamente, por ejemplo una divisin por cero.Untrapped (no atrapados)Son errores que pueden no ser detectados. El programa podra continuar ejecutndose por un tiempo antes de detectar el problema. Esto puede ocurrir en algunos lenguajes por ejemplo si se accede a posiciones de un array ms all de su longitud o se salta a una posicin invlida de memoria.Un programa se considera seguro (safe) si no causa untrapped errors. Un lenguaje se considera seguro si todo programa escrito en ese lenguaje est excento de untrapped errors.En todo lenguaje se puede designar un conjunto de los errores como prohibidos. Los errores prohibidos deberan incluir a todos los errores untrapped, ms un subconjunto de los errores trapped. Un programa que no causa errores prohibidos se dice que tiene buen comportamiento (good behavior).En un lenguaje strongly checked, todos los oprogramas tienen buen comportamiento, es decir:  No ocurren errores untrapped.  No ocurren los errores trapped que se consideran prohibidos.Siempre queda a responsabilidad del programador evitar los errores trapped que no se eligieron como prohibidos.Tipos nominales y estructuralesEso nos lleva a una clasificacin ms: tipos estructurales vs. tipos nominales. Llamamos nominales a los tipos que tienen un nombre. En Java los tipos son nominales estn dados por las clases (concretas o abstractas) y por las interfaces. En Smalltalk los tipos son estructurales, por ejemplo todos los objetos que entienden #value son un tipo. La nominalidad del Java se ve en que si hago dos interfaces con los mismos mensajes, los objetos que implementan la primera no son polimrficos con los objetos que implementan la segunda.Algunas combinaciones posiblesSuele haber una fuerte relacin entre los tipos nominales-explcitos y estructurales-implcitos. Esto es porque uno para explicitarlos le pone nombre, pero en algunos lenguajes como Scala existen tipos estructurales y explcitos.Tambin suele haber una fuerte relacin entre el chequeo esttico y el tipado explcito o nominal, sin embargo en Haskell podemos ver que tenemos tipos implcitos y chequeo esttico. Normalmente esto va asociado a un concepto llamado inferencia de tipos, es decir, cmo se hace para poder chequear el tipo de algo sin que me lo digas? Tiene que poder inferirlo el compilador por s mismo.Y ac se ven las desventajas de los sistemas de tipado ms fuertes:  Obligan a la burocracia de decir de qu tipo va a ser cada cosa y de indicar qu cosas pueden ser polimrficas.  Muchas veces me restringen las posibilidades que tengo al programar.Gran parte del trabajo en sistemas de tipos que se hace intenta construir sistemas o lenguajes que puedan evitar errores minimizando la burocracia y/o eliminando las restricciones innecesarias.ClasificacionesEn resumen planteamos tres clasificaciones:  En cuanto a la forma de chequeo puede ser esttico/compile time, dinmico/runtime o nada.  En cuanto a la forma de especificar el tipo de algo puede ser explcito o implcito / inferido.  En cuanto a la forma de constituir un tipo puede ser nominal o estructural (no s si agregar dependientes, tambin hay ms variantes).Ms complicada es la clasificacin en cuanto a los tipos de polimorfismo que se banca (en particular en los lenguajes con tipado esttico).Algunos ejemplos  Java tiene un tipado esttico, nominal y explcito (en presencia de casteos se vuelve dinmico)  Smalltalk es dinmico, estructural e implcito.  Self lo mismo.  Haskell es esttico pero se banca ser explcito o implcito (inferencia de tipos) y en algunos casos tambin se comporta estructuralmente.  Scala es esttico, tiene algo de inferencia y tambin soporta tipos estructurales y nominales.  ObjectiveC puede ser esttico o dinmico si usas los ids.  C aparenta ser esttico, pero ante casteos yo veo que el tipado es nulo."

} ,

{

"title"    : "Estado  identidad y diseno",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/estado--identidad-y-diseno.html",
"date"     : "",
"content"  : "Inmutable vs mutableDecimos que un objeto es inmutable cuando su estado es insignificante, o se mantiene constante a lo largo de su ciclo de vida, o, en una visin ms relajada, luego de su momento de nstanciacin.IdentidadEn el paradigma de objetos, estos componentes agrupan lo que en otros paradigmas en general est claramente separado: datos (estado) y comportamiento. Adems, los entornos de objetos los manejan mediante referencias (C++ es una excepcin notable), lo que nos lleva a otra propiedad fundamental: la identidad."

} ,

{

"title"    : "Estado y diseno",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/estado-y-diseno.html",
"date"     : "",
"content"  : "  REDIRECCIN Estado, Identidad y diseo"

} ,

{

"title"    : "Estereotipos de objetos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/estereotipos-de-objetos.html",
"date"     : "",
"content"  : "Un objeto presenta presentan tres caractersticas fundamentales:  Comportamiento: un objeto sabe hacer cosas, y eventualmente cada uno las podra saber hacer de distinta forma.  Estado: un objeto mantiene relaciones con otros objetos, las cuales pueden cambiar a lo largo de su vida. Muchas veces, al compararlo con paradigmas donde dato y operacin son elementos claramente separados, es til pensar al estado como justamente la parte de datos.  Identidad: un objeto es tratado mediante referencias, y puede ser distinguido de otro, aun cuando el otro presente el mismo estado y comportamiento.Los objetos existen en nuestro sistema para cumplir responsabilidades. Aunque normalmente asociamos fuertemente la idea de responsabilidad a la de comportamiento hay ocasiones en que nos convendr disear nuestros objetos de forma tal que expongan su estado e identidad.En base a estos tres aspectos del objeto, podemos ensayar la siguiente caracterizacin de los objetos:  Entidades: Su identidad es importante (cuando tenemos que enviarle varios mensajes a uno de estos objetos, nos importa que el receptor sea siempre el mismo, y no tan solo uno parecido). Presentan estado significativo y mutable, y poco comportamiento, fuertemente acoplado a las caractersticas anteriores. Su cclo de vida es tpicamente largo. Son ejemplos tpicos de entidades aquellos objetos persistentes en una base de datos transaccional (aunque por motivos de implementacin, su identidad nativa puede perder algo de importancia, y se recurre al uso de atributos que modelan la identidad).  Smbolos: Su identidad es importante, no presentan comportamiento ms que la comparacin por identidad (==) o quizs la representacin textual (toString). No presentan estado, o es inmutable. Se los emplea tpicamente para modelar cdigos, o elementos del metamodelo del lenguaje, como nombres de clases o selectores. Algunos lenguajes como Smalltalk o Ruby soportan nativamente estos objetos, mientras que en otros, como Java, se suple su falta con Strings  Valores  Servicios/Tareas: aquellos objetos con una fuerte carga de comportamiento independiente de su estado  Objetos anmicos/DTOs            Estereotipo      Identidad      Comportamiento      Estado                  Entidad      Importante      Mucho      Mucho y Mutable              Simbolo      Importante      Poco      Poco e Inmutable              Valor      Transparente      Mucho      Mucho e Inmutable              Servicio      -      Mucho      Poco              DTO      Importante      Poco      Mucho y Mutable      Algunas combinaciones nos llevan a: Identidad importante, estado y comportamiento inexistentes: smbolos, candados. Identidad y estado importante: entidades Comportamiento importante, estado e identidad insignificantes: objeto funcin, stratey stateless,Comportamiento...Semntica de referencia vs semntica de valor  Su identidad no es importante  (Consecuencia de lo anterior) Su estado, si importante, es constante."

} ,

{

"title"    : "Estrategias de evaluacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/estrategias-de-evaluacion.html",
"date"     : "",
"content"  : "Estrategias de evaluacinIntroduccinLa operacin que realizamos en funcional es aplicar funciones, la idea del tema que vamos a tratar a continuacin es saber qu se tiene que tener en cuenta para determinar el orden en en que aplicarn las funciones de una expresin.Primer ejemplomasUnox=x+1La expresin masUno (2*3) puede ser evaluada de la siguiente formamasUno(2*3)  aplicamos *masUno6  aplicamos masUno6+1  aplicamos +7Alternativamente podemos evaluar la misma expresin pero aplicando las funciones en el orden inversomasUno(2*3)  aplicamos masUno(2*3)+1  aplicamos *6+1  aplicamos +7No importa el orden en que apliquemos las funciones vamos a llegar al mismo resultado final. Esto no solo vale para ejemplos sencillos sino que se cumple siempre en Haskell.Esta propiedad no se cumple en la mayora de los lenguajes imperativos (Pascal, C, Smalltalk, Java, C#, etc.), veamos un ejemplo en Smalltalk:Si tenemos la expresin n + (n := 1) y n empieza apuntando a 0.Si empezamos a evaluar de izquierda a derechan+(n:=1)  aplicamos n0+(n:=1)  aplicamos :=0+1  aplicamos +1Si empezamos a evaluar de derecha a izquierdan+(n:=1)  aplicamos :=n+1  aplicamos n1+1  aplicamos +2Como se puede observar, si evaluamos las expresiones con distintas estrategias obtenemos resultados distintos; esto sucede porque las operaciones involucradas no tienen  transparencia referencial en este caso particular debido a la introduccin de una  asignacin destructiva.Estrategias bsicasA una expresin que consta de una funcin aplicada a uno o ms parmetros y que puede ser reducida aplicando dicha funcin la vamos a llamar Redex (Reducible Expression). Se le dice reduccin al hecho de aplicar la funcin no necesariamente vamos a obtener una expresin ms corta como veremos ms adelante. Consideremos la funcin mult que tiene como dominio una tupla de 2 nmerosmult(x,y)=x*ySi queremos reducir la expresin mult (1+2,2+3) est expresin contiene 3 redexs            1+2 (la funcin + aplicada a 2 parmetros)                  2+3 (la funcin + aplicada a 2 parmetros)                  mult (1+2,2+3) (la funcin mult aplicada a 1 parmetro que es una tupla)      Si queremos evaluar la expresin qu estrategia usamos?De adentro hacia afueraTambin conocida como call-by-valueUna de las estrategias ms comunes es comenzar desde adentro hacia afuera (innermost evaluation), esta estrategia elige el redex que est ms adentro entendiendo por esto al redex que no contiene otro redex. Si existe ms de un redex que cumple dicha condicin se elige el que est ms a la izquierda. Vamos al ejemplomult(1+2,2+3)  aplicamos el primer +mult(3,2+3)  aplicamos el +mult(3,5)  aplicamos mult3*5  aplicamos *15Esta estrategia me asegura que los parmetros de una funcin estn completamente evaluados antes de que la funcin sea aplicada. Por eso se dice que los parmetros se pasan por valor.De afuera hacia adentroTambin conocida como call-by-nameOtra de las estrategias ms comunes es comenzar desde afuera hacia adentro (outtermost evaluation), esta estrategia elige el redex que est ms afuera entendiendo por esto al redex que no esta contenido en otro redex. Si existe ms de un redex que cumple dicha condicin se elige el que est ms a la izquierda. Vamos al ejemplomult (1+2,2+3)  aplicamos mult(1+2)*(2+3)  aplicamos el primer + (Si seguimos lo que dijimos arriba deberamos aplicar primero el * pero vamos a explicar porque no lo hacemos ms abajo)3*(2+3)  aplicamos +3*5  aplicamos *15Usando esta estrategia las funciones se aplican antes que los parmetros sean evaluados. Por esto se dice que los parmetros se pasan por nombre. Nota: Hay que tener en cuenta que muchas funciones que ya vienen con Haskell requieren que sus parmetros estn evaluados antes de que la funcin sea aplicada, incluso cuando usamos la estrategia de afuera hacia adentro. Por ejemplo, el operador * y el + no pueden ser aplicados hasta que sus dos parmetros hayan sido evaluados a nmeros. A las funciones que cumplen con esta propiedad las vamos a llamar funciones estrictas. Funciones estrictas que nos van a interesar a nosotros:  Operaciones aritmticas (+,*,/,etc.)  Pattern-Matching (sobre listas, tuplas, etc.)Evaluaciones que no terminanTengan en cuenta la siguiente definicininf=1+infIntentar reducir la expresin inf siempre nos va a dar como resultado una expresin ms y ms grande (independientemente de la estrategia de evaluacin que usemos)inf  aplicamos inf1+inf  aplicamos inf (porque + es estricta)1+(1+inf)  aplicamos inf (porque + es estricta).1+(1+(1+(1+(1+(1+....+inf)))))Por ende, est evaluacin nunca terminara.Sabiendo quefst(x,_)=xConsideremos la expresin fst (0,inf)Usando la estrategia call-by-valuefst(0,inf)  aplicamos inffst(0,1+inf)  aplicamos inffst(0,1+(1+inf))  aplicamos inffst(0,1+(1+(1+inf)))  aplicamos infUsando call-by-value la evaluacin de la expresin no termina.Usemos call-by-name:fst(0,inf)  aplicamos fst0Usando call-by-name la expresin se evala por completo con solo una reduccin. En este ejemplo se puede ver que ciertas expresiones que pueden no terminar cuando se evalan con la estrategia call-by-value pueden terminar cuando se usa la estrategia call-by-name.De forma ms general: Si existe alguna secuencia de evaluacin que haga terminar la evaluacin de la expresin entonces con la estrategia call-by-name tambin se termina la evaluacin y se produce el mismo resultado final.Corolario: si te es mucho muy importante que una expresin termine la estrategia que quers usar es call-by-nameLazy EvaluationVisin tcnicaSi tenemos la siguiente definicinalCuadradox=x*xVamos a evaluar la expresin alCuadrado (2*3) usando call-by-valuealCuadrado(1+2)  aplicamos +alCuadrado3  aplicamos alCuadrado3*3  aplicamos *9Ahora vamos a evaluar la misma expresin usando call-by-namealCuadrado(1+2)  aplicamos alCuadrado el primer +(1+2)*(1+2)  aplicamos el +3*(1+2)  aplicamos el *3*3  aplicamos el *9Llegamos la mismo resultado pero en el segundo ejemplo realizamos una reduccin ms (4 reducciones vs 3 reducciones).Con call-by-name la expresin (1+2) se evalu dos veces.Corolario: cuando usamos call-by-value los parmetros son evaluados una y solo una vez; cuando usamos call-by-name el mismo parmetro puede llegar a ser evaluado ms de una vez.Para evitar este quilombo en vez de tener la expresin (1+2) vamos a tener un puntero a la expresin llammoslo p.alCuadrado(1+2)  aplicamos alCuadradoletp=(1+2)inp*p  aplicamos +letp=3inp*p  aplicamos *9Cualquier reduccin que se haga en una expresin se va a conocer automticamente por los punteros a dicha expresin. Al uso de punteros para compartir expresiones que representan la mismo parmetro lo vamos a llamar Sharing. Al uso de la estrategia call-by-name ms el Sharing lo vamos a llamar Lazy Evaluation (esta es la estrategia que usa Haskell). El Sharing nos asegura que usar Lazy Evaluation nunca requiera ms pasos que la estrategia call-by-value.Visin operativaA efectos de resumir lo que vimos hasta ahora vamos a entender lo siguiente Lazy Evaluation: con esta estrategia los parmetros solo se resuelven cuando son necesarios (y son evaluados solo lo necesario). Tambin conocida como evaluacin perezosa o diferida.A la estrategia call-by-value (y sus variantes) tambin se las conoce como Eager Evaluation. Eager Evaluation: con esta estrategia los parmetros tienen que resolverse antes de aplicar la funcin. Tambin conocida como evaluacin ansiosa.Estructuras infinitasPensemos en la siguiente definicinunos=1:unos(A partir de ahora vamos a pensar que evaluamos todo en Haskell as que la estrategia que usamos es Lazy Evaluation)unos  aplicamos unos1:unos  aplicamos unos1:(1:unos)  aplicamos unosEn Haskell&amp;gt;unos[1,1,1,1,1,1,1........Como se puede ver la evaluacin de unos no termina. A pesar de esto podemos usar la expresin unos dentro de nuestro programa y aplicarla a otras funciones. Por ejemploSiendo head (x:_) = x y la expresin head unosheadunos  deberamos aplicar head pero como head me fuerza a tener la lista separada en cabeza:cola tenemos que evaluar unos por el pattern-matchinghead(1:unos)  aplicamos head1Con este ejemplo podemos ver que unos no es una lista infinita sino potencialmente infinita, si aplicamos sobre ella funciones que no la fuerzan a evaluarse por completo la computacin termina (eso son apocalptico). La potencia de Lazy Evaluation est en que la expresin unos se evala solo lo necesario para que pueda usarla la funcin que la recibe como parmetro.Listas infinitasYa vimos la lista de unos que es infinita, ahora veamos como hacer una lista que tenga todos los nmeros naturalesnaturalesDesdex=x:naturalesDesde(x+1)&amp;gt;naturalesDesde1[1,2,3,4,5,6,7,8,9,...........Haskell trae un atajo para estonaturalesDesdex=[x..]Tambin sirve para hacer listas con alguna condicin entre dos de sus elementos consecutivos&amp;gt;[1,3..][1,3,5,7,9,11,.........Entonces si queremos obtener los primeros 24 mltiplos de 13 podemos hacerlo de esta forma:&amp;gt;[13,26..24*13][13,26,39,52,65,78,91,104,117,130,143,156,169,182,195,208,221,234,247]Pero tambin podemos resolverlo con una lista infinita usando take como veremos a continuacin gracias a la evaluacin perezosa.&amp;gt;take24[13,26..][13,26,39,52,65,78,91,104,117,130,143,156,169,182,195,208,221,234,247]EjemplosDada la siguiente definicin de taketake0_=[]take_[]=[]taken(x:xs)=x:(take(n-1)xs)take3[1..]  aplicamos ..take3(1:[2..])  aplicamos take - 3ra lnea1:(take2[2..])  aplicamos ..1:(take2(2:[3..]))  aplicamos take - 3ra lnea1:(2:(take1[3..]))  aplicamos ..1:(2:(take1(3:[4..])))  aplicamos take - 3ra lnea1:(2:(3:(take0[4..]))))  aplicamos take - 1ra lnea1:(2:(3:[])))=[1,2,3]Vamos a otro ejemplotake3[4+5,2/0,3*2]  aplicamos el + (porque dice x: en take 3ra lnea)take3[9,2/0,3*2]  aplicamos take - 3ra lnea9:take2[2/0,3*2]  aplicamos /9:ERRORDIVISONBYZERO!!!Dada la definicin de (!!)(!!)0(x:_)=x(!!)n(_:xs)=(!!)(n-1)xs(!!)2[4+5,2/0,3*2]  aplicamos el !! (no es necesario aplicar el + porque en (!!) dice (_:xs) )(!!)1[2/0,3*2]  aplicamos el !! (no es necesario aplicar la / por lo anterior)(!!)0[3*2]  aplicamos * (porque la primer lnea de !! lo pide)(!!)0[6]  aplicamos !!6Supongamos que hacemos esta consulta:&amp;gt;head(filter(3&amp;lt;)[1..])Si bien la expresin filter (3&amp;lt;) [1..] no termina (seguira buscando cules son mayores a 3 infinitamente), como lo que primero se evala es el head y se difiere la ejecucin del filtrado, la ejecucin va a terminar en cuanto el filter encuentre su primer elemento que pertenezca a la solucin que es el 4.Es importante notar que en este otro caso:&amp;gt;head(filter(&amp;lt;0)[1..])La evaluacin nunca termina por ms que se use head que era lo que antes acotaba la ejecucin, ya que nunca se va a encontrar el primer elemento que cumpla la condicin a diferencia del caso anterior."

} ,

{

"title"    : "Evaluacion diferida y diseno",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/evaluacion-diferida-y-diseno.html",
"date"     : "",
"content"  : "  Como impacta al momento de hacer debug  Como su aplicabildiad est limitada por los efectos  Como simplifica el cdigo (ejemplo con hibernate?)  como puede impactar negativamente o positvamente en el rendimiento  Como se relaciona con LazyObject y FunctionObject"

} ,

{

"title"    : "Excepciones - Resumen avanzado",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/excepciones-avanzadas.html",
"date"     : "",
"content"  : "MaterialPueden ver un apunte completo en este linkFormas de manejar una excepcinPropagarlaEs una buena opcin cuando no se cmo salvar la situacin, e implica  propagar la misma exception (declarando throws XXXException en la firma del mtodo)  envolverla (wrappearla) en otra nueva, que agregar un mensaje de ms alto nivel. Ej:public void enviarResumenMensual(Cliente c) {    try {        String resumen = this.generador.crearResumen(c);        this.clienteMail.enviarMail(c.getEmail(), resumen);    } catch (EmailException e) {        throw new ProgramException(&quot;Error al enviar el resumen por mail al usuario &quot; + c.getNombre(), e);    }}TratarlaCuando tengo un requerimiento especfico como:  Si falla el servidor de mail, intentar con una lista de otros servidores alternativos.  Si falla el servidor de mail, esperar 5 segundos y reintentar. Realizar esto unas 5 veces. Caso que siga fallando, abortar el envo con un mensaje.Buenas Prcticas  Nunca catchear una exception para no hacer nada. No hacer nada tambin incluye el loggearla. Es decir, catchear para loggear y seguir adelante, debera sonar muy raro. Tal vez tenga sentido eso como requerimiento en un nico lugar de la arquitectura, para que no se caiga completamente la aplicacin. Pero en el 99% de las veces es una hackeada.  En general wrappear para agregar informacin de contexto (qu estaba haciendo este mtodo al encontrar un error en otro al que llama)          As al momento de fallar una operacin de negocio no terminamos con un solo mensaje puntual muy especfico que ser dificil de comprender para el usuario/administrador/programador, como No me pude conectar al host 12.23.22.12, si no una jerarqua de mensajes desde lo ms general a lo ms especfico como:      Error al ejecutar el ciclo de facturacin  -&amp;gt; Error al facturarle al usuario numero 5963472     -&amp;gt; Error al enviar el resumen mensual        -&amp;gt; Error al enviar el mail           -&amp;gt; No me pude conectar al host 12.23.22.12No olvidar de pasar la causa original del error al wrappear (en nuestro ejemplo, la referencia a travs de la variable e)  Evitar try-catch dentro de otro try-catch: refactorizar la parte interna que puede fallar, llevndola a otro submtodo.  Evitar cdigo antes y despus de un try-catch, llevando todo el cdigo a la formamtodo() {    try {        logica    } catch}Es decir que el try-catch envuelva todo el cdigo del mtodo. Este va de la mano con la idea de hacer mtodos ms chiquitos. Al hacer una sola cosa, el mtodo solo puede tener un tipo de falla."

} ,

{

"title"    : "Excepciones",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/excepciones.html",
"date"     : "",
"content"  : "IntroduccinCuando un programa se ejecuta, pueden ocurrir errores: problemas de diversa ndole que hacen que el sistema se comporte de una forma no esperada: el usuario ingres un valor invlido, un objeto mal programado envi un mensaje con parmetros incorrectos, etc. Si el programa continuara ejecutndose ignorando esto, lo nico que lograramos sera que se produzcan ms errores, cada vez ms graves. Entonces, qu hacer ante un error?Lo ms seguro es fallar, es decir, abortar el flujo de ejecucin para impedir que el resto del programa contine ejecutndose como si no hubiera pasado nada. Una forma de lograr esto es mediante el lanzamiento de excepciones.En general cada mtodo desarrollado debera seguir las siguientes pautas:  Tener un nombre descriptivo, ya que dicho nombre nos dice qu esperar, es una promesa al usuario de lo que debera suceder luego de mandar el mensaje  Hacer todo y slo lo que el nombre indica  Si por algn motivo no se puede cumplir con lo prometido por el nombre del mtodo, explotar de la forma ms prolija posibleEs importante que aquellas cosas que puedan ser validadas para saber si no se podr cumplir con lo prometido, se validen previamente a producir efectos colaterales, de esa forma podemos evitar algunas posibles inconsistencias en caso de poder seguir adelante manejando el problema de alguna forma.ExcepcionesUna excepcin es la indicacin de un problema que ocurre durante la ejecucin de un programa. La principal particularidad de las excepciones es que cortan el flujo de ejecucin hasta que alguien se encargue de resolverlo. Supongamos que tenemos este cdigo Wollok:object prueba {  method msj1(){    self.msj3(self.msj2())  }    method msj2(){    self.error(&quot;Todomal!&quot;)    return &quot;Estonosevaaejecutarnunca&quot;  }    method msj3(string) = &quot;Opa! &quot; ++ string}De esta forma si el objeto que define esto recibe el mensaje msj1, la excepcin lanzada en msj2 cortar la ejecucin con lo cual no se evaluar la siguiente lnea ni se mandar msj3. Es correcto dejar que la excepcin se propague hacia atrs por la cadena de mensajes enviados siempre que no haya nada para hacer al respecto. Eventualmente, en algn punto donde s sea posible tomar alguna accin, se podr manejar esta excepcin y continuar la ejecucin con normalidad.Bugs vs Errores de usuarioAlgunos errores surgen por un bug en el programa, por ejemplo si un objeto no entiende un mensaje la forma de resolverlo es modificar el cdigo para que o bien lo entienda o el mismo no le llegue dependiendo de si debera o no entenderlo. Por ejemplo, si a un Set le pedimos el primer elemento tira un error porque no es una coleccin ordenada, por ende no debe responder al mensaje first como s lo hace una coleccin ordenada.Otros errores surgen del uso del programa, ya que pueden darse situaciones que llevan a que un objeto no pueda realizar lo que se le pide. Por ejemplo, si a una coleccin vaca el mandamos el mensaje anyOne tira un error porque no tiene forma de resolver el problema.Lanzando ExcepcionesEn Wollok la forma ms fcil de lanzar una excepcin es mediante un mensaje a self (en este caso error(descripcion)) que todos los objetos entienden. Por ejemplo:object pepita {  var energia = 100  method vola(unosKms){    if(energia &amp;lt; unosKms){      self.error(&quot;Energa insuficiente para volar los kilmetros requeridos&quot;)    }    energia = energia - unosKms  }}En el ejemplo vemos que si la energa de pepita es menor a la cantidad de kilmetros pasados por parmetro, la operacin no debera realizarse porque quedara con energa negativa. Para evitar que eso pase se lanza el error con una descripcin simptica para que el usuario o el desarrollador (dependiendo de si debera o no llegarse a esa situacin) entienda qu fue lo que pas. Lo interesante es que la lnea que modifica la energa slo llega a ejecutarse si energia &amp;gt;= unosKms.Otra forma de lanzar excepciones es usando clases pertenecientes a una jerarqua particular, que son de tipo excepcin. El ejemplo anterior podra reescribirse de la siguiente forma, usando DomainException que es el mismo tipo de excepcin que usa el mensaje error por atrs y hereda de la clase Exception:object pepita {  var energia = 100  method vola(unosKms){    if(energia &amp;lt; unosKms){      throw new DomainException(message = &quot;Energa insuficiente para volar los kilmetros requeridos&quot;)  // se usa la palabra reservada throw con la excepcin a lanzar    }    energia = energia - unosKms  }  ...}Esto as como est no tiene ninguna ventaja sobre lo anterior, que era bastante ms bonito y simple. Para que tenga sentido, tenemos que pensar en este problema en un contexto ms amplioCmo evitar que se rompa todo ante situaciones excepcionales?Algunos errores pueden evitarse realizando validaciones previas, pero no siempre es posible o deseable usar este enfoque. Entonces, una vez que se produce el error tenemos que tener una forma de recuperarnos del mismo para que el programa no termine con excepcin.Lo que deberamos hacer en aquellos lugares en donde sabemos qu hacer ante un problema (que idealmente son muy pocos) es atrapar la excepcin que caus el problema y evaluar un determinado cdigo para seguir adelante de forma correcta. Para eso primero tenemos que saber qu parte del cdigo a ejecutar es el que podra terminar en excepcin, luego qu tipo de error queremos tratar y finalmente qu se debera hacer al respecto.El siguiente cdigo va a pedirle a pepita que vuele, que puede romperse y supongamos que la forma de reaccionar ante alguna excepcin segn el requerimiento sea darle de comer para que no se muera:try {  pepita.vola(100)} catch e : Exception {  pepita.come(50)}Un problema que tiene esta solucin es que para cualquier problema se le va a dar de comer a pepita, si la energa de pepita no estuviera inicializada y el error surge de intentar tratar a la nada como un nmero, o si pepita no entiende el mensaje para volar, tambin resolvera el problema con el bloque que le da de comer en vez de romperse, de modo que sepamos que el problema existe. Eso lgicamente no es correcto.Considerando que el mensaje self.error(descripcion) lanza una excepcin ms particular que Exception, una primer mejora que se puede hacer es acotar ante qu tipo de error queremos darle de comer a pepita:try {  pepita.vola(100)} catch e : DomainException {  pepita.come(50)}Eso va a evitar que nos recuperemos incorrectamente de errores como ser mensajes no entendidos, ya que no son de tipo DomainException, sin embargo sera interesante poder refinarlo un poco ms, para tener la certeza de que slo vamos a estar manejando con este mecanismo las excepciones que surjan por tener energa insuficiente.Ac entra en juego nuevamente la jerarqua de clases de excepcin. En vez de simplemente usar self.error(descripcion), podramos tener clases propias que hereden de la clase de excepcin ms apropiada (en este caso DomainException podra tener sentido):class EnergiaInsuficienteException inherits DomainException {}y luego hacer algo as en el mtodo vola(kms) de pepita: throw new EnergiaInsuficienteException(message = &quot;Energa insuficiente para volar los kilmetros requeridos&quot;).Eso permite atrapar slo las excepciones que me interesan y dejar pasar las que no s cmo manejar para que alguien ms se ocupe. Por ejemplo:try {  pepita.vola(100)} catch e:EnergiaInsuficienteException {  pepita.come(50)}Tambin, si estamos testeando podemos verificar que el resultado de ejecutar algo sea no poder volar:assert.throwsExceptionWithType(new EnergiaInsuficienteException(), {pepita.vola(100)})Al usar throwsExceptionWithType el test va a dar verde exclusivamente cuando el bloque al ejecutarse lanza una excepcion cuya clase sea EnergiaInsuficienteException o alguna subclase de la misma. Si el error que lanza ejecutar ese bloque es por ejemplo que un objeto no entendi un mensaje como se explic antes, el test no va a dar verde, y es exactamente lo que necesitamos.Estrategias para manejar excepciones  La forma por excelencia de lidiar con una excepcin es no hacer nada!!. La mayora de las veces no tenemos la capacidad de recuperarnos del problema en el mismo lugar donde se produce, lo ms sano es dejarla burbujear hasta el punto en donde s haya algo para hacer al respecto.  Atraparla, hacer algo y continuar con el flujo normal de ejecucin.  Atraparla, hacer algo y volver a lanzar la misma excepcin. Eso se puede hacer volviendo a usar throw usando la excepcion atrapada en el bloque que maneja el problema.  Atraparla y lanzar otra ms adecuada agregando ms informacin del problema. Las excepciones adems de un mensaje descriptivo pueden tener asociada una causa que es otra excepcin y sirve justamente para los casos en los cuales se usa esta estrategia. Si vemos stacktrace completo de una excepcin que tiene una instancia de otra excepcin como causa, podremos notar que se incluye la informacin de ambas excepciones, sin perder informacin por el camino.Donde es comn atrapar excepciones?Lo ms usual es que las excepciones no se atrapen en el cdigo de nuestros objetos de dominio, sino mucho ms lejos, en unos pocos lugares puntuales. Por ejemplo, si tenemos un sistema con una interfaz grfica que es la que el usuario final usa para interactual, vamos a querer que en esa interfaz se muestre un mensaje razonable para que el usuario vea. Por ejemplo, si el problema est relacionado con alguna accin incorrecta por parte del usuario, lo ideal sera comunicrsela de modo que pueda entender el problema y corregirlo; si en cambio es un problema inesperado sobre el cual el usuario no puede hacer nada (un problema del programa en s, no del uso), se le podra mostrar otro tipo de mensaje para que sepa que hubo un problema y tambin informar del problema a los desarrolladores para que puedan analizarlo y trabajar sobre la causa.En las herramientas de testeo que usan nuestro cdigo tambin de seguro se estn atrapando las excepciones que se lancen al ejecutar nuestra lgica, lo cual lleva a que se reporte adecuadamente si las pruebas pasaron, si fall una asercin o si hubo un error inesperado, y la informacin de esas excepciones que se atraparon debera poder ser vista por quien corre las pruebas.Eso no quiere decir que nunca se atrapen excepciones dentro del modelo, sin embargo hay que entender que no es tan comn, y es importante no abusar de estas herramientas, ya que podran traer ms problemas que soluciones."

} ,

{

"title"    : "Expresiones lambda",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/expresiones-lambda.html",
"date"     : "",
"content"  : "Son funciones annimas. Por ej., una funcin annima que toma solo un nmero como argumento y produce el resultado x + x se puede definir como:xx+xEn Haskell: se escribe &amp;#92; y  se escribe -&amp;gt;;Esa definicin no es ms que una funcin doble, por eso podemos escribirdoble=&amp;#92;x-&amp;gt;x+xA pesar de no tener nombre, pueden usarse como cualquier otra funcin:&amp;gt;(&amp;#92;x-&amp;gt;x+x)24Una expresin lambda puede recibir ms de 1 parmetro separndolos por espacio dentro de la expresin--cuentaLocaesunafuncinquerecibe3parmetroscuentaLoca=(&amp;#92;xyz-&amp;gt;x*2-y+10*z)La gracia de poder definir funciones annimas es que nos permite armar fcilmente una funcin para usar en el momento. En general cuando ms jugo se les saca a las expresiones lambda es para usar funciones de orden superior, sin embargo pueden usarse en cualquier lugar donde se espere una funcin. Como las expresiones lambda son funciones, las mismas pueden combinarse con otras funciones usando Composicin.Una de las ventajas que tienen las lambdas por sobre otros mecanismos de crear nuevas funciones cuando las necesito sin tener que definirlas en otro lado, es que los parmetros tienen un nombre y puedo usar ese mismo parmetro tantas veces como quiera dentro de la definicin. Si por ejemplo quisiramos saber si la edad de una persona es menor a 20 o mayor a 60, podra resolverse de la siguiente forma:&amp;gt;((&amp;#92;e-&amp;gt;e&amp;lt;20||e&amp;gt;60).edad)personaAlgo importante a tener en cuenta es que si no le damos un nombre a nuestras funciones podramos perder abstracciones tiles que podran luego ser utilizadas en otros puntos de nuestro programa, por lo tanto es importante ser criteriosos respecto a si es una buena idea buscar un nombre para nuestra funcin.Por lo general, si tengo una forma sencilla de nombrar una determinada lgica que forma parte de una funcin ms grande, lo ms probable es que no quiera definir ese pedacito de lgica usando una lambda, sino con una funcin que se llame como la idea que tenemos en la cabeza. Si no hay un nombre claro asociado a ese pedacito de lgica, lo ms probable es que no sea un concepto del dominio que merezca la pena modelar como algo aparte.Lambdas y Pattern MatchingAlgo interesante que se puede hacer con las expresiones lambda es descomponer sus parmetros usando pattern matching como cuando definimos funciones normales. Supongamos que dado un alumno modelado con una tupla de tipo (String, [Int]) quiero obtener la primer nota que se sac, se podra resolver de la siguiente forma:&amp;gt;(&amp;#92;(_,(nota:_))-&amp;gt;nota)alumnoAl usar pattern matching hay que tener en cuenta que si el parmetro que le llega a la lambda no matchea (por ejemplo si en este caso el alumno no tiene notas), al ejecutarse va a tirar un error indicando que los patrones usados no fueron exhaustivos, lo que significa que la funcin tiene un dominio acotado, posiblemente ms de lo que queramos.Para este ejemplo no nos interesa contemplar a los alumnos sin notas porque no tenemos una buena respuesta para dar en ese escenario, con lo cual la solucin sera correcta.Uso de lambdas en vez de aplicacin parcialUno de los conceptos fuertes que existen en el paradigma funcional es el de Aplicacin Parcial, que nos permite crear una funcin nueva a partir de otra existente cuando nos hace falta para combinarla con otras funciones mediante composicin o simplemente pasarla por parmetro para que otra funcin la evale cuando corresponda.Siempre que usamos aplicacin parcial podemos tambin usar una lambda, por ejemplo:&amp;gt;map(+1)[1..10]Tiene el mismo resultado que:&amp;gt;map(&amp;#92;n-&amp;gt;n+1)[1..10]En casos como este, el uso de aplicacin parcial es ms interesante que el uso de la expresin lambda. No slo hacemos lo mismo con menos cdigo sino que demostramos un mayor entendimiento de los conceptos ms fuertes del paradigma.Sin embargo hay casos en los cuales no podemos resolver el problema aplicando parcialmente (ver: Puedo aplicar parcialmente el segundo parmetro en vez del primero?) la funcin que queremos usar que s justifican el uso de una expresin lambda."

} ,

{

"title"    : "Expresividad",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/expresividad.html",
"date"     : "",
"content"  : "DefinicinLa expresividad puede definirse informalmente con la heurstica el nivel de lindez del cdigo. En otras palabras, escribir un cdigo expresivo es poner atencin a las cuestiones que hacen que este cdigo fuente sea ms fcil de entender por una persona.Por qu por una persona y no por una pc?Para responder esa pregunta comparemos estos dos cdigos en Pascal:FunctionQuieroMoverElBote(a:ArrayofInteger,c:Integer):Real;Varb:Integer;d:Real;e:Integer;Begin Forb:=1tocdo  Begin   e:=e+a[b];  End; d:=e/c; QuieroMoverElBote:=d;End.FunctionPromedio(numeros:ArrayofInteger,cantidad:Integer):Real;Var i:Integer;sumatoria:Integer;Begin Fori:=1tocantidaddo Begin   sumatoria:=sumatoria+numeros[i];  End; Promedio:=sumatoria/cantidad;End.En la segunda implementacin puede verse con claridad el objetivo de este programa, mientras que en el primero est escondido. Sin embargo, la computadora ejecutando este cdigo produce exactamente el mismo resultado con cualquiera de los dos programas. La diferencia est en el programador que lee un programa  el otro.Es por eso que muchas veces se suele considerar a la Expresividad como algo subjetivo. Sin embargo, en lneas generales, hay formas de alcanzar la expresividad.MotivacinEn general, las tcnicas que favorecen la mejor comprensin del cdigo fuente (por un programador) son tcnicas que no cambian en funcionamiento del programa. Entonces, si en ltima instancia el programa hace lo que corresponde, Por qu habramos de consumir tiempo escribiendo cdigo expresivo?En la industria actual de software (de hecho, en cualquier ambiente en el que sea necesaria la produccin de software) existen ciertas caractersticas / problemas a resolver, consecuencia de que los programas son cada vez ms grandes, complejos, y cambiantes. En consecuencia:  Se espera que sean flexibles (que puedan cambiarse fcilmente)  Se espera que fallen poco (con lo cual es importantsimo encontrar y corregir errores tempranamente).  El desarrollo dura mucho tiempo. (Meses, aos)  El equipo de desarrollo es amplio. (Mucha gente escribiendo el mismo programa).En consecuencia, la labor de un programador es en su amplia mayora, leer y corregir cdigo existente (propio  de otro) y en menor medida producir cdigo nuevo.Es por todo esto que el cdigo fuente no puede ser exclusivamente escrito para la computadora. El ms importante destino del cdigo son las propias personas. Es por eso que no se puede descuidar la expresividad: es una de las varias formas de hacer la vida del programador ms sencilla, para que pueda abordar la construccin de sistemas como el mencionado.Cmo lograr la expresividadHay varias formas de lograr expresividad, entre las que se destacan:  Usar buenos nombres  Usar buenas abstracciones en general (y en particular, la Declaratividad).  Identar correctamente el cdigo.Buenos NombresBuen resumen (en ingls) http://c2.com/cgi/wiki?GoodVariableNames  Un buen nombre debe decir exactamente cul es el propsito de la variable / procedimiento / mtodo.          Por ejemplo, la funcin de arriba pas de llamarse QuieroMoverElBote a Promedio, y el array de llamarse a a llamarse numeros.        Ser descriptivo.          Por ejemplo, no tener miedo de escribir nombres largos. cantAlumnosAprobados es mejor que aprobados.        Ser claro y simple.          Por ejemplo, se pueden usar abreviaciones claras (como cant en vez de cantidad). Aunque las abreviaciones pueden resultar a veces dainas: alumnosAprobados es mejor que alsAp        Respetar las convenciones es buena idea.          Por ejemplo, el cdigo escrito en lenguaje Python separa las palabras dentro de un nombre as: esto_es_una_variable, mientras que en Smalltalk la convencin es as: estoEsUnaVariable.        Dar idea (no muy especfica) del tipo ayuda tambin a la expresividad.          Por ejemplo, en el array del ejemplo de arriba hay una variable que se llama numeros. Esto da a entender rpidamente que son muchos, y que son de algn tipo numrico, exactamente cul no es importante para entender qu hace. Ejemplos de malos nombres son numero, ints  arrayNumeros. Tampoco es buena idea llamar a la funcin realPromedio, porque ensucia la legibilidad. Se sobreentiende que un promedio es de un tipo real  flotante.      El tiempo que uno gasta en encontrar/pensar un buen nombre, es tiempo bien aprovechado.Declaratividad  Ver Declaratividad vs. ExpresividadIdentacinIdentar el cdigo (separar con espacios) es una buena manera de hacer que el cdigo sea legible. Nuevamente, no debe abusarse de sto, ni usarlo poco. Y respetar las convenciones del lenguaje es buena idea. En el ejemplo de arriba se ve claramente cmo la identacin ayuda a leer mejor el programa, y de paso se respeta la identacin sugerida de Pascal."

} ,

{

"title"    : "Articulo Destacado",
"category" : "",
"tags"     : "",
"url"      : "/wiki/internal/featured_article.html",
"date"     : "",
"content"  : "Articulo DestacadoTODO"

} ,

{

"title"    : "Fideos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/fideos.html",
"date"     : "",
"content"  : "Proporciones:  100gr harina  1 huevo"

} ,

{

"title"    : "Flattening vs linearization",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/flattening-vs-linearization.html",
"date"     : "",
"content"  : "Cuando el comportamiento de un objeto es separado en distintas abstracciones, es necesario definir cmo se resolver la tarea de encontrar el comportamiento definido (method lookup).Si las abstracciones son suficientemente dispares (sin comportamiento en comn), pueden pensarse como complementarias, y, en consecuencia, la manera en la que se desarrolle dicha bsqueda no impactar en el comportamiento resultante. Sin embargo, cuando las abstracciones son anlogas, o peor, contradictorias, el mecanismo que define el comportamiento final del objeto es un factor crtico.Todos los lenguajes que brindan dicha modularizacin de abstracciones ofrecen de una u otra manera un mecanismo de bsqueda de comportamiento, de donde se destacan dos visiones principales: linearizacin (o linearization) y el aplanado (flattening).La linearization es un mecanismo que define un orden para las abstracciones, priorizando unas sobre otras. A la hora de proveer un mtodo, aquella con mayor prioridad es la que lo otorga. Todo mecanismo de linearization define un Method Resolution Order (MRO). El caso ms comn es el de la herencia simple, en donde si un objeto recibe un mensaje, el mtodo que se ejecutar es el que est ms cercano avanzando hacia lo ms general en la jerarqua de herencia. Este mecanismo tambin es usado para la herencia mltiple y los Mixins.El flattening es un mecanismo que no prioriza abstracciones, sino que deja al usuario resolver las situaciones contradictorias o conflictos, mediante diferentes herramientas. Los Traits de Smalltalk se manejan con flattening, y la manera de solucionar conflictos se basa en el uso de operaciones para ajustar la composicin de traits a las necesidades de cada caso, siendo un mecanismo muy flexible y a la vez simple de entender. Respecto al method lookup, como este mecanismo aplana los mtodos definidos en la clase usuaria, encontrar el mtodo correspondiente a un mensaje provisto por la otra entidad es lo mismo que encontrar el mtodo para un mensaje propio."

} ,

{

"title"    : "Fold",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/fold.html",
"date"     : "",
"content"  : "Existe una familia de funciones en Haskell para modelar un algoritmo que permite procesar una estructura de datos para construir un valor, a esta idea le decimos foldear (derivado del ingls, to fold) o reducir.Cmo sumo los elementos de una lista? Cmo multiplico los elementos de una lista? Cmo concateno una lista de palabras?sum[]=0sum(x:xs)=x+sumxsprod[]=1prod(x:xs)=x*prodxsconcatenar[]=[]concatenar(x:xs)=x++concatenarxsO bien si usamos los operadores de forma infijasum[]=0sum(x:xs)=(+)x(sumxs)prod[]=1prod(x:xs)=(*)x(prodxs)concatenar[]=[]concatenar(x:xs)=(++)x(concatenarxs)Si vemos las diferencias entre estas funciones notamos que slo cambia la operacin a realizar y el valor inicial, por ende si queremos hacer una funcin que nos generalice el algoritmo tenemos que recibirlos como parmetro.En trminos generales cmo la paso a una funcin de orden superior? Necesitamos:  una funcin que opera con dos parmetros  un valor inicial  una listafoldr::(a-&amp;gt;b-&amp;gt;b)-&amp;gt;b-&amp;gt;[a]-&amp;gt;bCaso base: si la lista es vaca, devuelvo el valor inicial.foldrfvalorInicial[]=valorInicialSi la lista no es vaca, qu voy a tener que hacer? A partir de alguna de las funciones podemos trasladar:concatenar(x:xs)=(++)x(concatenarxs)foldrfvalorInicial(x:xs)=fx(foldrfvalorInicialxs)Sumando con foldrsum=foldr(+)0Para sumar una lista hay que aplicar la suma elemento por elemento arrancando de 0. Como es difcil de asimilar de golpe, vamos a hacer el seguimiento de un caso:&amp;gt;sum[2,3,5]=foldr(+)[2,3,5]=(+2)(foldr(+)0[3,5])=(+2)((+3)(foldr(+)0[5]))=(+2)((+3)((+5)(foldr(+)0[])))=(+2)((+3)((+5)0))&amp;lt;-casobase=(+2)((+35))=(+2)8=10Si revisan el Prelude, van a encontrar otra funcin similar:foldlfz[]=zfoldlfz(x:xs)=foldlf(fzx)xsfoldl vs foldrCul es la diferencia? Revisemos los tipos:foldl::(a-&amp;gt;b-&amp;gt;a)-&amp;gt;a-&amp;gt;[b]-&amp;gt;afoldr::(a-&amp;gt;b-&amp;gt;b)-&amp;gt;b-&amp;gt;[a]-&amp;gt;bFoldr trabaja asociando a derecha la funcin f, mientras que foldl trabaja asociando a izquierda la funcin f. El seguimiento de la sumatoria definida en base a foldl puede ayudar a entender cmo realiza la operatoria:sum=foldl(+)0&amp;gt;sum[2,3,5]=foldl(+)0[2,3,5]=foldl(+)((+)02)[3,5]=foldl(+)((+)23)[5]=foldl(+)((+)55)[]=foldl(+)10[]=10&amp;lt;-casobaseY aqu vemos que el valor inicial del caso base es en realidad el resultado final. Para comparar la forma de trabajar de las dos funciones pueden realizar consultas de este estilo en su intrprete de Haskell (show es una funcin que retorna la representacin de el valor recibido como string):&amp;gt;foldr(&amp;#92;xy-&amp;gt;concat[&quot;(&quot;,x,&quot;+&quot;,y,&quot;)&quot;])&quot;0&quot;(mapshow[1..13])&quot;(1+(2+(3+(4+(5+(6+(7+(8+(9+(10+(11+(12+(13+0)))))))))))))&quot;&amp;gt;foldl(&amp;#92;xy-&amp;gt;concat[&quot;(&quot;,x,&quot;+&quot;,y,&quot;)&quot;])&quot;0&quot;(mapshow[1..13])&quot;(((((((((((((0+1)+2)+3)+4)+5)+6)+7)+8)+9)+10)+11)+12)+13)&quot;Otras variantes de fold son foldl1 y foldr1 que trabajan de forma anloga a las anteriores slo que toman como valor inicial al primer elemento de la lista. Eso es til para los casos en los que la lista no debera estar vaca y/o no hay un valor adecuado para parametrizar. Veamos un ejemplo:maximum&#39;=foldr1max"

} ,

{

"title"    : "Formato de un paper",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/formato-de-un-paper.html",
"date"     : "",
"content"  : "No todas las secciones son necesarias, pueden haber otras secciones o con otros nombres. Este solo es un template de gua.TtuloHay que elegir un buen ttulo :)AbstractEl abstract no es otra cosa que un resumen de todo el paper. Debera contener aproximadamente una oracin para cada uno de los siguientes temas:  contexto  problema  porque es un problema  solucion que se presenta  como lo que presentamos soluciona el problema  quizas algun ejemploDespus de leer el abstract, el lector debera saber de qu se trata el paper a groso modo, y poder decidir si quiere seguir leyndolo o no, si le sirve o noIntroductionLa introduccin le muestra al lector que hicimos la tarea. S, que sabemos de qu estamos hablando, conocemos los problemas, conocemos lo que otra gente hizo. Aca se explica mucho del contexto en el que nos paramos y brevemente los otros puntos, ya que van a ser mejor explicados en las secciones que siguen.  Context: contar el contexto del problema, qu tecnologa, qu ambiente. es relacionado a web apps? A lenguajes con chequeo esttico de tipos? Lenguajes con herencia mltiple?  Problems: contar brevemente los problemas que se quieren solucionar  Current Solutions: contar brevemente las soluciones existentes que existen que atacan el problema  Contributions: que agregamos nosotros a la investigacin en el tema  Outline: contar de qu se tratan las secciones que siguen. Es el tpico In section 2 we present In section 3 we show our implementation of blehProblems  Constraints: Sobre qu limitaciones trabajamos? Ambientes con mucha seguridad? Sin conexin de red? Vms restrictivas?Luego enumeramos los problemas actuales que vamos a encarar:  Problem1  Problem2  Your solution in a nutshell: contamos nuestra solucin muy brevemente, contando en muy pocas lineas qu problemas resolvemos. Estamos invitando a que nos sigan a la prxima seccin.My SolutionContamos la solucin. Hice X, Y y Z, que solucionan los problemas A, B y C, as y as. No comparamos con otra gente ni otras soluciones. Esta seccin es toda nuestra.DiscussionLa discusin es donde:  nuestra solucin se compara con las existentes  abrimos la puerta a lneas que no se llegaron a explorar aca, que podran encararse en el futuro.ImplementationAca podemos hablar de nuestra implementacin en particular. Es la parte menos de investigacin(?).EvaluationQu tan buena es nuestra implementacin y como soluciona los problemas que enumeramos. Aca podemos poner benchmarks, mtricas, etc.Related workAca normalmente se hablar de gente trabajando en cosas parecidas, no necesariamente sobre el mismo campo, o buscando la misma solucin. Es bastante similar a Discussion, y por eso ambas secciones pueden ser una sola.ConclusionEs un resumen post lectura, o sea, el lector ya tiene nuestro laburo en la cabeza: Nuestra solucin X pareciera ser una buena solucin al problema Y, aunque no tanto para el problema Z. Queda por explorar el camino J, que encar inicialmente el autor Fulanito[cita]"

} ,

{

"title"    : "Frases teadepeanas",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/frases-teadepeanas.html",
"date"     : "",
"content"  : "  The way to keep designers sharp and honest is to make them eat their own dog food. Michi Henning"

} ,

{

"title"    : "Funciones por partes",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/funciones-por-partes.html",
"date"     : "",
"content"  : "Concepto MatemticoLas funciones partidas  definidas por partes  por trozos son funciones que para diferentes valores del dominio, tienen una definicin diferente. Por ejemplo, si tenemos que definir la funcin Mdulo, para ciertos valores del dominio la funcin ser f(x) = x y para otros valores ser f(x) = -xNotacin MatemticaCdigo en HaskellEn Haskell, las funciones partidas se escriben con Guardas, y se escribe la imagen de cada parte a la derecha del igual:fx|x&amp;gt;=0=x|x&amp;lt;0=-xLas funciones por partes no son la nica forma de tener diferentes definiciones para una funcin, existen casos en los cuales alcanza con el uso de pattern matching.Errores ComunesNo debemos confundir el uso de guardas (cuyo concepto se explic arriba) con las funciones que devuelven booleanos.Ejemplo 1Tomemos ste ejemplo: Cierta edad es adulta cuando es 18  msesAdultaedad|edad&amp;gt;=18=True|otherwise=FalsePero esto es un uso incorrecto de las guardas! En otras palabras: Si una expresin es verdadera  falsa por s sola, no se lo debo preguntar, tengo que devolver directamente eso.sta es la manera correcta de hacerlo:esAdultaedad=edad&amp;gt;=18Ejemplo 2Representemos una funcin que me diga si alguien siempre dice la verdad, sabiendo que los nios y los borrachos siempre dicen la verdad sta es una manera de hacerlo, errnea:siempreDiceLaVerdadalguien|esNioalguien=True|esBorrachoalguien=True|otherwise=FalseSi bien sto funciona, es un mal uso de las funciones por partes, ya que no es cierto que esa funcin tenga diferentes partes. La definicin es lgica, y es una sola. Es un  lgico:Cuando alguien dice la verdad?  cuando es nio  cuando es borrachoEsa es la definicin de la funcin. Recordemos que el  logico se escribe as:Main&amp;gt;(1&amp;gt;34)||(even4)Truey el y lgico se escribe as:Main&amp;gt;(1&amp;gt;34)&amp;amp;&amp;amp;(even4)FalseEntonces, mi funcin se define sin guardas, de sta manera:siempreDiceLaVerdadalguien=esNioalguien||esBorrachoalguienEjemplo 3: No usar pattern matchingA veces, cuando estamos aprendiendo guardas, nos olvidamos que poseemos Pattern Matching en Haskell.En otras palabras, podramos tener una funcin as:ivaParaactividad|actividad==&quot;cultural&quot;=0.0|actividad==&quot;alimentaria&quot;=10.5|otherwise=21.0Cuando en realidad, con Pattern Matching, podra quedar ms declarativo:ivaPara&quot;cultural&quot;=0.0ivaPara&quot;alimentaria&quot;=10.5ivaPara_=21.0Otro ejemplo de lo mismo:longitudlista|nulllista=0|otherwise=1+longitud(taillista)Cuando quedara ms declarativo:longitud[]=0longitud(_:resto)=1+longitudrestoEjemplo 4: Hacer la guarda antes de tiempo (Repeticin de cdigo)Cuando se repite cdigo a ambos lados de la guarda, sto es un problema:fa|a&amp;lt;3=2+ 5 * g a|otherwise=1+ 5 * g aQue puede arreglarse as:f a = fAux a + 5 * g afAuxa|a&amp;lt;3=2|otherwise=1Nahuel Palumbo (El Rasta) denomin este tipo de repeticin Hacer el if antes de tiempo, y sucede tambin en otros paradigmas y lenguajes.Ejemplo 5: Repeticin de cdigo ms rebuscadaTambin puede pasar que se repita cdigo entre las guardas de esta manera:Se quiere saber el precio del boleto a partir de la cantidad de kms que voy a recorrer. Se sabe que a partir de 4 km, el clculo del boleto es el clculo mximo ($2 + $0.1 x cantidad de kms), mientras que hasta los 4km, el clculo es el 110% del clculo mximoSe propuso esta solucin:precioBoletokms|kms&amp;gt;=4=2 + 0.1 * kms|otherwise=110/100*(2 + 0.1 * kms)Pero arriba y abajo se repite 2 + 0.1 * kms. En este caso, se arregla con la forma ms comn de corregir la repeticin de lgica: delegando en ambos casos en la misma funcin.En otras palabras, si yo tengo:maximokms=2+0.1*kmsEntonces esa lgica est ahora en un slo lugar, que puedo llamar desde donde necesite:--Solucinfinalcorrecta:precioBoletokms|kms&amp;gt;=4=maximo kms|otherwise=110/100*(maximo kms)Hay otras formas mejores y peores de evitar ste tipo de repeticiones, pero sta forma (delegando) es bastante buena y sirve en muchos casos."

} ,

{

"title"    : "Function object",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/function-object.html",
"date"     : "",
"content"  : "Entendemos por Function Object a un patrn funcional aplicado a objetos que consiste en cosificar el envo de mensajes, para poder resolver problemas empleando orden superior y aplicacin parcial de forma similar a como lo haramos en el paradigma funcional.El problemaEn el paradigma de objetos los mensajes no son objetos, y por tanto no tenemos forma de hablar contra los mensajes, mas all de las capacidades reflexivas de algunos lenguajes. Dicho de otra forma los mensajes no son valores, no son cosas.Esto nos restringe en que no tenemos mucho control sobre estos envios: por ejemplo, no tenemos forma nativa de enviar mensajes parciales o de pasar el envo de un mensaje por parmetro.Por ejemplo, en Haskell, uno puede escribir los siguiente:map(1+)[1,2,3]dado que las funciones estn currificadas (lo cual se aprecia en la expresin 1+, donde se aplica parcialmente + con el valor 1, devolviendo otra funcin), y son valores (1+, es un valor que puede ser pasado como argumento a map)Si el envo de mensajes en Smalltalk fuera un valor, uno bien podra escribir lo siguiente:#(123)collect:(1+)(omitiendo el argumento del mensaje +)o#(123)collect:(+1)(omitiendo el receptor del mensaje + 1)Para suplir estas limitaciones, la estrategia usada en objetos consiste justamente en cosificar el envo de mensajes, construyendo objetos que lo modelen. En lenguajes como Smalltalk, tenemos una forma nativa de construir tales objetos: los bloques de cdigo.Por ejemplo, en Smalltalk, la funcionalidad anterior se implementa de la siguiente forma:#(123)collect:[:x|x+1]Lo cual es anlogo al siguiente cdigo Haskell:map(&amp;#92;x-&amp;gt;x+1)[1,2,3]En el sentido de que explcitamente construye un valor que modela una computacin, que los argumentos de la misma son explcitos y estn etiquetados. Pero con la diferencia de que en Haskell, el uso de una lambda es redundante, mientras que en Smalltalk es necesario.Justamente por su semejanza con la definicin de una funcin annima, a este patrn se lo conoce como Function Object: un objeto que entiende en su versin ms simple un nico mensaje (llamado tpicamente apply, value, call, eval, etc) y cosifica un envio de mensajes.Estos objetos pueden entender opcionalmente otros mensajes que permitan implementar la nocin de aplicacin parcial y/o currificacin, y que implementen operaciones tpicas sobre funciones como, por ejemplo, la composicin.En lenguajes como Java, dnde no tenemos una sintaxis especfica para instanciar estos bloques de cdigo, tenemos que recurrir a la definicin e instanciacin explcita de clases, tpicamente definiendo una o varias interfaces que representen a las funciones de diferentes aridades, e implementdolas e instanciandolas conjuntamente, mediante el uso de clases annimas.As por ejemplo, es comn encontrar encontrar cdigo que emplea bibliotecas (no estndares) de colecciones de la siguiente forma:javaCollections.map(Arrays.asList(1,2,3),newFunction&amp;lt;Integer, Integer&amp;gt;(){publicIntegerapply(Integerx){returnx+1;}});`Lo cual es evidentemente mas verborrgico y tiene mucha mas redundancia que las soluciones anteriores, pero igualmente cumple su cometido.Function Object y Orden SuperiorFunction Object y ClosureFunction Object, Strategy y Command"

} ,

{

"title"    : "Garbage collector",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/garbage-collector.html",
"date"     : "",
"content"  : "El garbage collector es un mecanismo que provee la Mquina Virtual para manejar la memoria de forma transparente para el desarrollador. Cuando un objeto ya no es referenciado por ningn otro, deja de ser til porque nadie puede mandarle mensajes. Si ya no es til, est ocupando espacio innecesariamente, con lo cual el garbage collector se encarga de liberar ese espacio sin afectar al sistema.Al tener un garbage collector podemos evitarnos los problemas asociados al manejo manual de memoria que ocurren comunmente, por ejemplo, en lenguajes como C como liberar ms de una vez la misma posicin de memoria, leaks de memoria, etc. A su vez nos permite concentrarnos en los que nuestro programa debe hacer con un grado de abstraccin ms alto.Hay garbage collectors con diferentes estrategias, la ms utilizada es la generacional que se basa en el hecho de que los objetos con mayor propensin a no ser necesitados nuevamente son los ms nuevos (por ejemplo, el resultado de un clculo que se usa en el momento y no se necesita ms), a partir de esta idea es posible optimizar el algoritmo de recoleccin. Resolver esta problemtica a mano para cada programa no slo desva nuestra atencin del objetivo, adems que sea igualmente o ms eficiente que un algoritmo genrico y ampliamente probado es muy poco probable.Para la gente curiosa, ac hay un artculo simptico que muestra grficamente distintos algoritmos de recoleccin: Visualizing Garbage Collection Algorithms"

} ,

{

"title"    : "Git  un versionador distribuido",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/git--un-versionador-distribuido.html",
"date"     : "",
"content"  : "Distribuido            Se dice de git que es un sistema de control de versiones distribuido. Que sea distribuido implica que van a existir al menos tantos repositorios como personas trabajando en el proyecto, a lo que se le pueden sumar uno o ms repositorios que se usen como intermediarios para compartir cambios entre las distintas personas. Un lugar prctico para hostear repositorios pblicos puede ser [https://github.com/      gtihub]      RepositorioPor repositorio se entiende el lugar donde se van guardando todas las versiones de un proyecto o de cada una de las cosas que forman parte de l.En el mundo git en vez de pensar en que cada archivo es una parte que va cambiando de versiones prefirieron pensar en que es todo el proyecto el que se va versionando entonces cada vez que se modifica una parte en realidad se est modificando todo el proyecto.Un proyecto no es otra cosa que una arbol de directorios y archivos donde la raz del arbol es la carpeta raz del proyecto. Este Arbol es lo que va cambiando a medida que avanza el proyecto.La forma en que git elige modelar el proyecto es como un arbol por lo que en el interior de un repositorio git van a existir tantos rboles como versiones distintas existan del proyecto. Estos rboles van a formar parte de un DAG?DAG lo qu?Veamos primero un dibujito:DAG es la forma cheta de decir grafo dirigido acclico. O sea un dibujo con circulitos (nodos) y flechitas (vrtices) que unen los circulitos sin que se pueda llegar al mismo crculo saltando de crculo en crculo siguiendo las flechitas que los unen.Un rbol es de por s un DAG por lo que no tiene problemas en ser parte de un DAG ms grande que lo contiene.Cada uno de los crculos representa un objeto almacenado en el repositorio (nodos en el DAG). Los rectngulos son referencias que sirven como punto de entrada a los objetos que viven en el repositorio, podran considerarse parte del DAG pero estn representados como rectngulos para diferenciar las referencias de los objetos almacenados.Los distintos colores de los circulos representan cada uno de los 4 tipos de objetos que existen:  blob. Representa un archivo en el proyecto.  tree. Representa una carpeta en el proyecto, el primero corresponde al directorio raiz del proyecto o el mismsimo proyecto.  commit. La forma de agregar objetos al repositorio es con la opercin commit. Esto agrega un objeto commit que tiene un vrtice hacia un tree que representa al directorio raz del proyecto. El sub-grafo que comienza en este tree representa el estado de todo el proyecto tras la ejecucin del commit. En el dibujo se ve que los subgrafos que parten de cada commit comparten un objeto blob, esto significa que el commit B no modific el archivo que agreg el commit A.El commit tambin conoce a su padre que es el commit que lo antecede, entonces los cambios que aplica un commit al proyecto son las diferencias entre el rbol al que apunta y el rbol al que apunta su padre. Cuando se ejecuta la operacin merge se qenera un commit que tiene al menos dos padres entonces los cambios que aporta este commit depende de contra cual de sus padres se lo compare.  tag. La operacin tag genera un objeto tag en el repositorio y una referencia de tipo tag para accederlo.Un tag conoce un commit y a partir de este el estado del proyecto para ese commit. En su cuerpo tambin uncluye un ttulo un comentario y opcionalmente se le puede agregar una firma gpg. Todos los objetos (crculos en el dibujo) tiene un nombre bastante feo para identificarlos (algo as como 8357799df0b47164c9726be6610ea1b7ed41ff32), este nombre es el resultado de aplicar un funcin de hash (SHA1) al objeto.Referencias: Las referencias son los rectngulos en el dibujo, son simplemente puntos de entrada a los objetos almacenados en el repositorio.  Referencia de tipo tag (amarillo en el dibujo) apunta a un objeto de tipo tag y es inmutable, o ms o menos inmutable.  Referencia de tipo branch (verde en el dibujo) apunta a un ojeto commit, es mutable y al commit al que apunta es al * ltimo que se agreg para ese branch.  Referencia de tipo branch remoto (gris en el dibujo) es muy parecida a un branch slo que se usa para seguir el estado de un branch en otro repositorio (recuerden que esto era distribuido). La del dibujo (origin/master) significa que sigue un branch llamdo master en un repositorio llamado origin. El nombre del repositorio es un shortcut de la url completa.  HEAD esta referencia la usa git para saber que commit ser el padre del prximo commit, normalemnte apunta indirectamente a un commit a travez de un branch. Si almomento de ejecutar la opercin commit el HEAD apunta a un branch el branch se actualiza para apuntar al nuevo commit.Todo muy lindo pero cmo lo uso?Bueno primero lo tendras que tener instaldo. Eso se explica  ac. Ahora que git ya est git intalado y configurado podemos ver un ejemplo partiendo de un proyecto nuevo.En la consola (git bash si ests en windows)$ mkdir ~/prueba $ cd ~/prueba $ git init Lo que estamos haciendo es comenzar un proyecto cuya carpeta raz ser ~/prueba, y en esa carpeta inicializamos un repositorio git para mantener las versiones de nuestro proyecto de prueba. El repositorio est en una carpeta llamada .git adentro de la carpeta raz del proyecto. La carpeta ~/prueba con todo su contenido menos la carpeta .git es lo que git llama working tree, algo similar a la working copy de svn.Git lo llama working tree porque un directorio en el file system que estemos usando es tambin un rbol y como git entiende los proyectos como rboles dice que la carpeta donde editamos los archivos del proyecto no es otra cosa que el rbol de trabajo.El repositorio no tiene todava ningn objeto almacenado (crculos del dibujo) pero s, tiene la referencia HEAD que apunta a ref/heads/master esto siginifica que apunta a un branch llamado master, el nombre master es el que se les ocurrio a los amigos de git para ponerle al branch principal, algo as como el trunk del svn. Un branch no es otra cosa que una referencia a un commit, pero como todava no existe ningn commit tampoco existe el branch master. La referencia HEAD sirve para que git sepa en que branch estamos trabajando actualmente, lo que significa que al hacer el prximo commit actualizar el branch apuntado por HEAD. En este caso que todava no se hizo ningn commit el branch master se crear con el primer commit.Vamos a crear nuestro primer commit$cd~/prueba#carpetarazdelproyecto$touchunTexto.txt#creounarchivo$gitaddunTexto.txt#agregoelarchivoalindexdegit$gitcommit-m&quot;primercommit&quot;#ejecutolaoperacincommitpasndoleelcomentario&quot;primercommit&quot;Basicamente la forma de trabajo es:Modifico el contenido del working tree (agrego y modifico archivos) Agrego alguno o todos los cambios al index (git add) Ejecuto un commit (git commit) Los cambios que aporta el commit es todo los que est en el index. Y qu es el index? Es un lugar donde voy acomodando los cambios que van a entrar en el prximo commit. Tambin llamado staging, pero en casi toda la documentacin de git aparece como index.como qued el grafo de nuestro repo:"

} ,

{

"title"    : "Introducción a Gradle",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/gradle.html",
"date"     : "",
"content"  : "IntroduccinGradle es una herramienta que ayuda a desarrollar un proyecto basado en el entorno de una JDK (Java, Kotlin, Xtend, Scala, Groovy, etc.) y que cumple con las siguientes funciones principales que vamos a explicar en las siguientes secciones:  Reificacin del Proyecto  Manejo de Dependencias a partir de repositorios locales y remotos  Plugins y tareasReificacin de ProyectoJava no trabaja la idea de proyecto, no lo representa como concepto, y eso se traslada a todos los lenguajes basados en la JDK. Entonces, cada uno de los IDEs pensados para Java agregan su propia forma de definirlo:  en Eclipse tenemos los archivos .classpath y .project  en IntelliJ tenemos el directorio .idea  en Visual Studio Code tenemos la carpeta .vscodeGradle permite trabajar en cualquiera de estos IDEs con su propio modelo de proyecto, que se guarda en el archivo build.gradle.kts en el caso de trabajar utilizando el lenguaje Kotlin o build.gradle a secas, cuando la configuracin se hace utilizando el lenguaje Groovy. A partir de ahora vamos a continuar la explicacin asumiendo que ests usando Gradle con Kotlin.Identificacin de un proyecto GradleTodo proyecto en Gradle tiene tres cosas que lo identifican:  group: representa la organizacin autora/duea del artefacto. Por ejemplo, los proyectos de Algoritmos 2 suelen usar el groupId ar.edu.unsam.algo2.  artifact: este campo define el nombre por el que se conoce al proyecto en s mismo. Algunos ejemplos: commons-collections, eg-seguros-kotlin, tp-futbol5-grupo01, etc.  Aclaracin: los trminos componente y artefacto son sinnimos de proyecto.  version: es el ltimo componente del rompecabezas, dado que groupId:artifactId denota un nico proyecto pero no alcanza para definir en qu versin del proyecto nos estamos parando. Se agrega entonces un nmero de versin para completar la informacin que Gradle necesita para generar una identificacin unvoca. Conviene seguir las reglas de versionado semntico, para liberar versiones productivas. A veces se suele acompaar de un sufijo RELEASE (para versiones estables) o SNAPSHOT (para versiones intermedias que pueden estar sujetas a cambios).Gradle tom de Maven, su antecesor directo, esta misma forma de identificar un proyecto. Vemos cmo se definen estos valores en el archivo build.gradle.kts:group = &quot;ar.edu.unsam.algo2&quot;version = &quot;1.0-SNAPSHOT&quot;El artifact se define en el archivo settings.gradle.kts:rootProject.name = &quot;eg-seguros-kotlin&quot;Manejo de dependenciasRepositorios localesLas dependencias son tiles para poder acceder a cdigos escritos por otros (como la biblioteca Mockk o Apache Commons Collections). Cuando instalamos Gradle, se crea un repositorio local en una carpeta que por defecto suele ser HOME/.gradle, donde descargamos los componentes localmente una sola vez (muchos proyectos que usan la misma dependencia van a buscar el artefacto en ese mismo lugar). Podemos encontrar al componente cuyo identificador es io.kotest:kotest-assertions-core:5.1.0 en~/.gradle cachesmodules-2files-2.1  io.kotest kotest-assertions-core 4.4.3 (otra versin) 5.1.0 --&amp;gt; dentro de esta carpeta estar el artefacto  recordemos que el identificador de un componente se arma a partir del groupId + el artifactId + la versin  en la cache de Gradle estn todos los componentes que descargamos localmente. Esto permite que cuando estemos trabajando en otro proyecto que comparta la misma dependencia no necesitemos ir a descargarla desde los repositorios. El comportamiento en una mquina Windows es exactamente igual, hay que explorar los directorios incluyendo los que son ocultos, y navegar a partir de la carpeta de usuario + &amp;#92;.gradle.Repositorios remotosAhora bien, desde dnde descargamos las versiones 4.4.3 y 5.1.0 de io.kotest:kotest-assertions-core? Existen para eso repositorios remotos donde se publican artefactos:  Maven Central, que es el repositorio principal donde estn subidos artefactos publicados con tecnologa Maven. Las dependencias ms importantes suelen estar en este repositorio y tens una pgina de bsqueda de artefactos, muy til cuando necesitamos bajarnos Mockito, Log4J, Kotest o cualquier otra dependencia.  para los proyectos en Kotlin, otro repositorio importante es el de Google (tambin en Maven) ya que contiene componentes relacionados con el desarrollo de Android, entre otros.  hay eventualmente otros repositorios remotos e incluso pods crear un servidor que funcione como repositorio de artefactos. Pods investigar Artifactory o JFrog, por el momento es suficiente con saber simplemente desde dnde estamos descargando nuestros componentes.En el archivo build.gradle.kts pods ver cmo se referencian los repositorios remotos:repositories {    mavenCentral()}Definiendo dependencias en el proyectoLas dependencias se definen dentro de un tag dependencies:val kotestVersion = &quot;5.8.0&quot;dependencies {    implementation(kotlin(&quot;stdlib&quot;))    testImplementation(&quot;io.kotest:kotest-runner-junit5:$kotestVersion&quot;)    testImplementation(&quot;io.kotest:kotest-assertions-core:$kotestVersion&quot;)}En este caso, estamos definiendo que nuestro proyecto tiene como pre-requisitos:  la biblioteca estndar de Kotlin  y los componentes kotest-runner-junit5 y kotest-assertions-core de io.kotest. La versin se define en una referencia val, el cdigo que escribimos para definir el archivo de configuracin es Kotlin.Una vez que hagamos un cambio en las dependencias, nos aparece el botn para sincronizar las definiciones del archivo con el IntelliJ, como vemos en este video:Al agregar una dependencia lo hacemos con el formato group:artifact:version y tambin definimos el tipo de alcance (scope), que puede ser  implementation: el componente es necesario para hacer el build de nuestro proyecto.  testImplementation: el componente es necesario para ejecutar los tests de nuestro proyecto.  runtimeOnly: el componente se utiliza nicamente cuando tenemos levantada la aplicacin. Esta variante es til cuando trabajamos con objetos de resguardo (stubs o mocks) para ejecutar los tests (testImplementation) pero queremos tener un componente real que enva mails en la versin productiva (runtimeOnly).  otras variantes pueden estudiarse leyendo la documentacin del plugin de Gradle para Java  custom: para les interesades dejamos un artculo que explica cmo definir configuraciones propias extendiendo el modelo de GradleResumen general del manejo de dependencias de GradleFuente: https://docs.gradle.org/current/userguide/dependency_management.htmlAl hacer el build de nuestro proyecto  si la versin de ese componente se encuentra descargado en nuestro repositorio local, se utiliza como dependencia vlida  en caso contrario habr que buscar en los repositorios definidos en nuestro proyecto, como Maven Central, google, etc. en el orden en que fueron definidos  si en ninguno de los repositorios fue posible encontrarlo, entonces recibiremos un mensaje de error cuando intentemos hacer build del proyecto:Dependencias transitivasUn detalle no menor de la resolucin de dependencias de Gradle es que tambin funciona para las dependencias transitivas.Por ejemplo:  proyectoA &amp;gt; proyectoB  proyectoB &amp;gt; proyectoC  proyectoC &amp;gt; proyectoD, proyectoE, proyectoFAl resolver las dependencias, el proyectoA necesitar descargar los componentes B, C, D, E y F. Incluso podramos requerir diferentes versiones de los mismos componentes.Noten que un proyecto comercial normal o mediano, puede incluir decenas y hasta cientos de dependencias. Esto se puede ver en IntelliJ desde la solapa Gradle, e inspeccionar  compileClasspath: dependencias base para compilar los fuentes (que estn en src/main/kotlin)  runtimeClasspath: dependencias que tendremos a la hora de ejecutar nuestra aplicacin en Kotlin, que incluye dependencias runtimeOnly. En Algoritmos 2 no vamos a levantar ninguna aplicacin, pero s ms adelante en Algoritmos 3.  testCompileClasspath: dependencias que incluyen tanto fuentes como las marcadas como testImplementation, que sirven para ejecutar los tests.PluginsSi bien Gradle provee una plataforma para poder facilitar el manejo de dependencias, el build del proyecto y muchas otras actividades ms, quienes verdaderamente se encargan de esta tarea son los plugins, que terminan resolviendo cada una de estas cosas.Cada plugin permite  definir qu elementos van a participar, extendiendo el modelo original de Gradle: por ejemplo el plugin de Kotlin configura la carpeta donde se ubican las clases principales en src/main/kotlin  crear tareas, como la compilacin de todos los archivos Kotlin, o la ejecucin de los tests unitarios indicando cul es el framework, entre muchas otras cosas  agregar configuraciones a nuestro proyecto, como repositorios adicionales donde ir a buscar dependencias, o definir una versin de la JDK por defecto.Pods ver en cualquiera de nuestros ejemplos qu contiene la seccin plugins del build.gradle.kts:plugins {    kotlin(&quot;jvm&quot;) version &quot;1.9.22&quot;    jacoco}En este ejemplo  estamos utilizando una determinada versin del plugin de Kotlin para la JVM, para poder trabajar el proyecto adecuadamente en esa tecnologa  y adems se agrega JaCoCo (Java Code Coverage), que agrega tareas para poder escribir reportes de porcentaje de cobertura de nuestros tests que luego sern utilizados por sitios que los publican, como Codecov o CoverallsPara ms informacin pueden consultar esta pgina.TareasUna tarea de Gradle no es otra cosa que una porcin de cdigo que se ejecuta en un determinado contexto. Por ejemplo, si escribimos en el archivo build.gradle.kts estas lneas de cdigo:tasks.register(&quot;saludar&quot;) {    doLast {        println(&quot;Hola, qu tal?&quot;)    }}Podemos ejecutarlo desde el men de IntelliJ:Como se ve, es cdigo Kotlin lo que se ejecuta.En particular, el plugin Kotlin define la mayora de las tareas que vamos a utilizar:  build construye el proyecto  jar sirve para empaquetar las clases y generar un Java ARchive, un zip de archivos .class  clean elimina carpetas temporales, algo til previo a un build  test ejecuta las pruebas unitarias, algo que igualmente se hace tambin desde el IDE  y muchas otras tareas ms que no hace falta conocer.Todas se pueden ejecutar de la misma manera que nuestra tarea custom saludar.Temas adicionalesGradle WrapperEn lugar de trabajar directamente con Gradle, cada proyecto en IntelliJ va a trabajar con un script genrico que constituye el Gradle Wrapper o wrapper a secas, que tiene algunas ventajas:  no requiere instalacin local de Gradle, con lo cual es ms fcil estandarizar el proyecto y llevarlo a entornos de integracin continua  permite trabajar cada proyecto con una versin particular de Gradle y actualizarla a futuro cuando lo deseemosLa pregunta que podemos hacernos es: esto cambia algo en mi forma de trabajar? No, en nada, pero es til entender por qu utilizamos gradlew como ejecutable por consola en lugar de gradle, y qu hace esta estructura dentro de nuestro proyecto:.gradlew.gradlew.batgradlewrappergradle-wrapper.jargradle-wrapper.properties # link a la versin de Gradle que estamos usandoPara ms informacin pueden ver esta pgina.Ejecutando gradle desde la consolaUna alternativa es trabajar directamente con Gradle desde la consola, algo que puede ser til para automatizar tareas, como cuando trabajemos con herramientas de integracin continua../gradlew clean buildEsto ejecuta varios plugins en forma sincronizada:  por un lado la tarea clean borra el directorio build donde estarn los archivos compilados  y luego compila los fuentes del proyecto, lo cual implica descargarse las dependencias, y compilar los archivos Kotlin a .class que una JRE pueda interpretarSi queremos ver el rbol de dependencias transitivas, podemos escribir./gradlew -q dependencies Documentacin oficialPara ms informacin recomendamos leer  la documentacin oficial del proyecto Gradle  tens tambin una pgina de tutoriales de Gradle  un video bastante exhaustivo de personas que trabajan en Gradle: Getting Started with the Gradle DSL Kotlin de Paul Merlin &amp;amp; Rodrigo de Oliveira.  y un tutorial sobre Kotlin DSL de Anton ArhipovLinks relacionados  Pgina principal de Algoritmos 2"

} ,

{

"title"    : "Groovy vs scala",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/groovy-vs-scala.html",
"date"     : "",
"content"  : "Advertencia: Esta articulo tiene una cuota importante de subjetividad; no es una comparativa exacta. As que tomalo con pinzas y record charlarlo con tu ayudante asignado.Para la materia diseo, ambas opciones son igualmente buenas. Te explico los pros (+), contras (-), y neutros (*) de cada una:Groovy:  (+) Es sintcticamente el ms simple. Se parece mucho a Ruby o pseudocdigo. Usa pocas palabras reservadas y el cdigo es muy limpio.  (+) El metamodelo es similar al de Java: tiene clases, mtodos, herencia, etc. Agrega mixins, pero tambin se codifican como clases. Tiene interfaces al estilo Java, pero no son necesarias. Esto te ayudar si quers usar el segundo cuatrimestre un fmwk de persistencia o presentacin para la JVM (como los dos para los que damos soporte)  (+) Si vos y tu grupo quieren sacarle jugo, tiene cosas muy avanzadas y pods aplicar ms tcnicas de diseo. Por eso es que lo estamos usando para TADP  (*) Tiene tipado dinmico e implcito (no escribs el tipo, los errores saltan en tiempo de ejecucin). Pods usar tambin tipado explcito si quers (ponerle tipo a las variables), pero en la mayora de los casos el chequeo de tipos seguir ocurriendo en tiempo de ejecucin, como en Smalltalk.  (*) Se usa bastante en el mercado, aunque son pocas las empresas que lo utilizan como su lenguaje principal; se suele usar en proyectos medianos o chicos mas que grandes (hay excepciones notables, como MercadoLibre). Tambin se lo usa como herramienta complementaria para el testing y scripting.  (-) Eventualmente, si bajas a mucho detalle, el metamodelo de Groovy es complejo y algo inconsistente. Y ocurrirn errores muy raros (que se pueden solucionar). Pero esto normalmente ocurre cuando lo uss a su lmite y jugs mucho con tcnicas de metaprogramacin, cosa que no es el objetivo de diseo. Por eso, esto no debera ser problema, pero igual ests advertido.  (-) Para entender los mensajes de error en Groovy, es recomendable entender el metamodelo de Java. Por lo cual, una leda sobre este lenguaje, sus properties (getters y setters) y sobrecarga es una buena idea.Scala:  (-) Es sintcticamente mucho mas complejo. De todas formas, el cdigo en general es muy limpio, aunque hay excepciones, sobre todo en lo que concierne a tipos.  (-) El metamodelo est inspirado en el de Java, pero no es idntico. Y es ms complejo. Es un hbrido de objetos y funcional. Esto puede traer algunos problemas con algunos fmwks para la JVM; de todas formas, los que usars en la materia (hechos por nosotros), deberan andar bien de una.  (*) Tiene tipado esttico e implcito (similar al de Haskell, tiene inferencia).Eso es bueno para detectar errores en el cdigo pronto. De todas formas, su inferencia es ms limitada que la de Haskell, por lo que tendrs que escribir ms informacin de tipo que en Haskell, pero mucha menos que en lenguajes como Java o C.  (+) Si tu grupo quieren sacarle el jugo, tiene cosas muy avanzadas (mucho ms que Groovy). Es hoy en da uno de los lenguajes de programacin ms poderosos que existen y uno de los que ms tcnicas de diseo ofrece.  (+) El metamodelo, aunque complejo, es muy consistente, por lo que todo cierra y uno puede tener la tranquilidad de que si algo no funciona, es porque est haciendo algo mal y no porque hay un bug en el lenguaje.  (+) Aunque no es la panacea, en mi opinin, es uno de los lenguajes del futuro a mediano plazo (ya hay varias empresas que lo estn usando de forma intensiva, ejemplo, Despegar.com).El resumen: ambos lenguajes me parecen buenos para la materia diseo. Y de ambos te podemos dar soporte. Mi consejo: hagan algunos experimentos, bjense los entornos, y vean cual les gusta ms. Algunos links:  Referencia de Groovy que usamos en TADP: https://docs.google.com/viewer?a=v&amp;amp;pid=sites&amp;amp;srcid=ZGVmYXVsdGRvbWFpbnx1dG50YWRwfGd4OjczNjhhOWY1NjZmNDQxZjU  Pgina de Scala que algunos docentes usan en la materia PHM (de San Martin): https://sites.google.com/site/programacionhm/te/scala"

} ,

{

"title"    : "Guia de instalacion de maven",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/guia-de-instalacion-de-maven.html",
"date"     : "",
"content"  : "IntroduccinMaven es una herramienta que permite automatizar tareas de los desarrolladores, y facilitar el manejo de dependencias, la configuracin de entornos de trabajos locales, entre muchas otras cosas. Por defecto, al instalar Eclipse tambin viene el plugin para utilizar Maven, pero a veces es necesario ejecutar instrucciones adicionales por consola y para eso son estas instrucciones.Instalacin en WindowsRecomendamos seguir este tutorial, ignorando la versin de JDK que es indistinta.Instalacin en SO Unix-based (Linux, Solaris y Mac OS X)Mediante apt-get$sudoapt-getinstallmaven$sudoln-s/usr/share/maven3/bin/mvn/usr/bin/mvnVale la pena aclarar que si bien este mtodo es ms simple, generalmente las versiones de repositorio de Ubuntu suelen estar atrs de las vigentes. Igualmente no les va a traer problemas.ManualmenteDescargar Apache Maven 3 desde este link.Descomprimir el tarball y mover el directorio a donde usualmente se guardan los programas. Ejemplo: /home/john/programs/.$tar-xzvfapache-maven-3.6.0-bin.tar.gz$mvapache-maven-3.6.0/home/john/programs/Agregar la siguiente lnea al archivo .bashrc. Este archivo oculto (su nombre empieza con .) contiene comandos que se ejecutan cuando se abre una terminal (consola). Se puede abrir con cualquier editor de textos (gedit, vim, emacs, notepad++, etc) y se encuentra en el directorio home del usuario.exportPATH=$PATH:$HOME/programs/apache-maven-3.5.0/binUna forma sencilla de hacer sto (sin tener que abrir un editor) es usando el programa echo y agregando al final del archivo el valor ingresado. Prestar atencin al hecho de que se usan dos signos mayor:$echo&#39;exportPATH=$PATH:$HOME/programs/apache-maven-3.5.0/bin&#39;&amp;gt;&amp;gt;.bashrcChequeos posteriores a la instalacinCorroboramos que podemos usar Maven. El output sera algo parecido a ste:john@notebook:~$mvn-vApacheMaven3.5.0(r...)Mavenhome:/home/john/programs/apache-maven-3.6.0Javaversion:1.8...Javahome:/usr/lib/jvm/...Defaultlocale:en_US,platformencoding:UTF-8OSname:&quot;linux&quot;,version:&quot;3.0.0-19-generic&quot;,arch:&quot;i386&quot;,family:&quot;unix&quot;Configuracin de MavenPor defecto no necesits hacer nada, la configuracin por defecto est bien para comenzar a trabajar. Pero en caso de ser necesario algunos ajustes, tens que mirar el archivo settings.xml, que por defecto se ubica en  home/usuario/.m2 para sistemas operativos Unix-based  C:&amp;#92;Users&amp;#92;Usuario&amp;#92;.m2 para Windows, donde C: es el drive donde se instal Maven  si quieren modificar el directorio por defecto, pods chequear esta pregunta en stack overflow.  si el archivo no existe, tens que crearlo. Para ms informacin te dejamos la documentacin oficial de la configuracin de MavenPropiedades de Maven en EclipseWindow &amp;gt; Preferences te permite configurar algunas propiedades para Maven. Te recomendamos  tener chequeado Do not automatically update dependencies from remote repositories para que no intente bajarte permanentemente nuevas versiones de los componentes que utilices. Esto requiere que lo hagas en forma manual, algo que quizs sea ms recomendable.  tener chequeado Download artifact sources te permite ver el cdigo fuente de los .jars que te bajes, esta opcin hace que las descargas inicialmente tarden un poco ms de tiempo pero es bueno cuando tens algn error y necesits entender cmo funciona alguna parte de un componente.  tambin es bueno chequear Download artifact javadocs para obtener documentacin de los componentes que utilizamos  Y por ltimo tener deschequeada la opcin Update Maven projects on startup permite que manualmente vos actualices los proyectos solamente ante un cambio y no cuando levantes el Eclipse.Una configuracin ms que puede ser til para encontrar versiones nuevas de artefactos en los repositorios es dejar chequeada:  La opcin Download repository index on startup (opcin por defecto chequeada): para ms informacin pueden leer http://stackoverflow.com/questions/8647769/what-is-eclipse-doing-when-it-says-that-its-updating-indexes.Material  Gua de referencia rpida"

} ,

{

"title"    : "Guia de instalacion de rails",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/guia-de-instalacion-de-rails.html",
"date"     : "",
"content"  : "Guia de Instalacin de RailsIntroduccinRuby On Rails es, entre otras cosas, un framework de presentacin Web MVC, que utiliza el lenguaje de programacin Ruby. Para instalarlo, hay que instalar primero Ruby, algunas herramientas de desarrollo estndar de esta tecnologa, y finalmente, Rails.Antes de empezar  Este tutorial asume que ya seguiste la Gua de Instalacin de Ruby  Este tutorial asume que ests trabajando en un entorno Linux. Si bien Ruby funciona en Windows, no se recomienda usar Rails en este sistema operativo.PasosInstalar RailsgeminstallrailsCrear un Proyectorailsnew`cd`Configurar la versin de RubyPor ejemplo:rbenvlocal2.0.0-p481Problemas FrecuentesNo se puede instalar SQLITE3Si tienen un error de este estilo:Gem::Ext::BuildError:ERROR:Failedtobuildgemnativeextension./usr/bin/ruby1.9.1-r./siteconf20140902-24182-zuispu.rbextconf.rb/usr/local/lib/site_ruby/1.9.1/rubygems/core_ext/kernel_require.rb:54:in`require&#39;:cannotloadsuchfile--mkmf(LoadError)Anerroroccurredwhileinstallingsqlite3(1.3.9),andBundlercannotcontinue.Makesurethat`geminstallsqlite3-v&#39;1.3.9&#39;`succeedsbeforebundling.Verifiquen que instalaron ruby usando rbenv, y rbenv usando rbenv-installer, como explica Guia de Instalacin de Ruby. No usen apt-get para instalar ninguno de estos componentesNo se puede instalar libv8Si tienen un error de este estilo:ERROR:Errorinstallinglibv8:ERROR:Failedtobuildgemnativeextension./usr/bin/ruby1.9.1extconf.rb/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in`require&#39;:cannotloadsuchfile--mkmf(LoadError)from/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in`require&#39;fromextconf.rb:1:in`&amp;lt;main&amp;gt;&#39;Gemfileswillremaininstalledin/var/lib/gems/1.9.1/gems/libv8-3.11.8.0forinspection.Resultsloggedto/var/lib/gems/1.9.1/gems/libv8-3.11.8.0/ext/libv8/gem_make.outVerifiquen lo mismo que en el ttulo anterior.Falta el runtime de JSSi al intentar levantar el servidor conrailsserverLes dice que falta un JavaScript Runtime, descomenten en en Gemfile la lnea que dicegem&#39;therubyracer&#39;Y ejecuten de nuevobundleinstallMs informacinhttps://gorails.com/setup/ubuntu/14.04"

} ,

{

"title"    : "Guia de instalacion de ruby",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/guia-de-instalacion-de-ruby.html",
"date"     : "",
"content"  : "Gua de Instalacin de RubyIntroduccinLa siguiente es una gua de instalacin de Ruby utilizando un gestin de versiones (rbenv). Si bien este no es estrictamente necesario, simplifica el proceso de instalacin, y es adems fundamental cuando se desea trabajar con mltiples versiones de Ruby, algo bastante comn cuando se est trabajando en ms de un proyecto Ruby en una misma computadora.Esta gua adems instala algunas dependencias que en verdad son slo necesarias para el framework Rails, pero de todas formas las incluimos porque son livianas, fciles de instalar, y previenen problemas futuros.Pasos1. Instalar essentialssudoapt-getinstallcurlgitbuild-essentiallibssl-devautoconfbisonlibreadline6libreadline6-devzlib1gzlib1g-devlibsqlite3-devsqlite3Explicacin: varias herramientas y bibliotecas de Ruby necesitan bajar contenido de Internet, y compilar cdigo nativo.2. Instalar RBENVSeguir las instrucciones en el repositorio de github de rbenv-installer. El resumen es:curlhttps://github.com/rbenv/rbenv-installer|bashecho&#39;exportPATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39;&amp;gt;&amp;gt;~/.bash_profileecho&#39;eval&quot;$(rbenvinit-)&quot;&#39;&amp;gt;&amp;gt;~/.bash_profileExplicacin: Ruby suele cambiar bastante entre versiones, lo cual genera incompatibilidades. Para no tener problemas, se recomienda instalar Ruby a travs de un manejador de versiones, que adems de simplificar el proceso, permite usar versiones diferentes de esta tecnologa en cada proyecto.Nota: Si usan Ubuntu y lo anterior no funciona revisen estas instrucciones https://github.com/sstephenson/rbenv#installation3. Verificar que se haya instalado rbenvecho$PATHLa linea ~/.rbenv/bin tiene que estar presente. Si no lo est, asegrense de que el cdigo del punto 2 se agreg correctamente en .bashrc o .bash_profile, y de que hayan reiniciado la terminal.4. Instalar una versin de Ruby y dejarlo como opcin por defectorbenvinstall2.0.0-p481rbenvglobal2.0.0-p481rbenvrehashExplicacin: con esto instalamos una versin concreta de Ruby, y la dejamos lista para ser utilizada.5. Instalar BundlergeminstallbundlerExplicacin: Bundler es una herramienta, que al igual que Maven, permite gestionar las dependencias de un proyecto.Problemas frecuentes  No se reconoce el comando rbenv: asegrense de que hayan reiniciado la terminal, y que hayan colocado el cdigo de inicializacin en el archivo correcto (.bashrc o .bash_profile, segn qu Linux usen)"

} ,

{

"title"    : "Guiso de Lentejas",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/guiso-de-lentejas.html",
"date"     : "",
"content"  : "Receta para 8 a 10 personas (12 a 15 porciones, la gente repite)  1.5kg de carne repartido a gusto entre:          chorizo colorado (no puede faltar)      panceta (no puede faltar)      carne de vaca, por ejemplo roast beef      carne de cerdo, por ejemplo bondiola      (opcional) salchicha parrillera        1kg de lentejas  0.5 kg de cebolla  2 papas  2 batatas  1/2 calabaza  2 morrones (uno rojo y uno verde)  3 zanahorias  cebolla de verdeo  Condimento a gusto          sal      pimienta      pimenton dulce      aj molido        Queso rallado para el platoPreparacin:  Saltar la carne, de a poco, la idea es que est dorada y si metemos todo de una no va a pasar. Si podemos hacer esto sin que se queme el fondo, lo vamos a poder aprovechar en la coccin.Reservar lo ya saltado para ms adelante, separando las carnes que requieren ms coccin (roast-beef, bondiola) de los chorizos, panceta o salchichas.          Antes de saltar la carne la podemos cortar en pedazos del tamao de un bocado.      Ojo con cortar los chorizos demasiado chicos porque se pueden deshacer del todo.        Poner a hervir las lentejas, con la papa, batata y calabaza.          Para ganar tiempo, uno puede poner a hervir casi al mismo tiempo que comienza a saltar la carne y apenas saltaste el roast beef y la bondiola los tirs a la olla tambin.      No hace falta ser muy puntilloso al cortar la verdura, los pedazos ms chiquitos van a desaparecer en el guiso y los grandes quedan.Slo tener en cuenta que el pedazo ms grande tiene que ser un bocado razonable.        Una vez saltada toda la carne, en el fondo de coccin saltar la cebolla, con un poco de sal.          De la cebolla de verdeo, pon slo la parte blanca, las hojas verdes las ponemos al final de todo.      Vamos raspando un poquito el fondo que la cebolla se lleva todo el fondo de coccin de la carne, el fondo de la olla tiene que quedar limpio en esta operacin.        Cuando el cido de la cebolla haya sacado todo lo que haba pegado en el fondo de coccin de la carne, echar el morrn y la zanahoria.          Cort la zanahoria bastante chica para que no te quede dura, daditos de menos de 1cm.        Al mismo tiempo, ya pods poner la panceta y los chorizos en la olla principal, con las lentejas.  Cuando la cebolla est lista, echar todo tambin el la olla principal.  Ahora es momento de verificar el condimento.  Dejalo hervir hasta que espese, si se ve el agua no es un guiso. Espesa en parte porque el agua se evapora pero tambin porque parte de la verdura se deshace.  Apagalo y mezclale las hojas verdes de la cebolla de verdeo.  Es mejor dejarlo reposar un rato en la olla, igual en este momento est tan caliente que no lo pods comer, dale 5 o 10 minutos.  Idealmente servir en cazuelas y comer con cuchara.  No olvidarse de ponerle queso rallado."

} ,

{

"title"    : "Herencia",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/herencia.html",
"date"     : "",
"content"  : "La herencia es un mecanismo que tiene por objetivo principal el compartir lgica/cdigo similar. Esto lleva a evitar la duplicacin de lgica/cdigo. Cuando un objeto recibe un mensaje, mediante Method lookup buscar el comportamiento requerido en la clase de la cual es instancia y, en caso de no tener un mtodo para el mismo, en sus superclases.Herencia SimpleUna clase tiene siempre una superclase pero solo una.Lenguajes que implementan este tipo de herencia: Smalltalk, Java, C#, entre muchos otrosHerencia MltipleUna clase puede tener ms de una superclase.Lenguajes que implementan este tipo de herencia: C++, EiffelGeneralizacinEmpezamos con dos clases, Golondrina (con una variable de instancia energia) y Picaflor (con una variable de instancia energia) , definimos mtodos para ambosSmalltalk#Golondrina&amp;gt;&amp;gt;energia^energia&amp;gt;&amp;gt;come:gramos&quot;Unagolondrinaaumentasuenergiaencuatroveceslosgramosingeridos&quot;energia:=energia+(gramos*4)&amp;gt;&amp;gt;vola:kms&quot;Unagolondrinadisminuyesuenergiaen1Jouleporcadakilometrorecorrido+10Joulesqueutilizaparaeldespegue&quot;energia:=energia-(kms+10)#Picaflor&amp;gt;&amp;gt;energia^energia&amp;gt;&amp;gt;come:gramos&quot;Unpicafloraumentasuenergiaencuatroveceslosgramosingeridos&quot;energia:=energia+(gramos*4)&amp;gt;&amp;gt;vola:kms&quot;Unpicaflordisminuyesuenergiaen1Jouleporcadakilometrorecorrido+20Joulesqueutilizaparaeldespegue&quot;energia:=energia-(kms+20)Wollokclass Golondrina {  var energia  method energia() {    return energia  }  method come(gramos){    //Unagolondrinaaumentasuenergiaencuatroveceslosgramosingeridos    energia=energia+(gramos*4)  }  method vola(kms) {    // Unagolondrinadisminuyesuenergiaen1Jouleporcadakilometrorecorrido+10Joulesqueutilizaparaeldespegue    energia=energia-(kms+10)  }}class Picaflor {  var energia  method energia() {    return energia  }  method come(gramos){    //Un picafloraumentasuenergiaencuatroveceslosgramosingeridos    energia=energia+(gramos*4)  }  method vola(kms) {    // Un picaflordisminuyesuenergiaen1Jouleporcadakilometrorecorrido+20Joulesqueutilizaparaeldespegue    energia=energia-(kms+20)  }}Lo que nos permite la idea de generalizacin utilizando herencia es crear nuevas abtracciones.En el cdigo de arriba nos podemos dar cuenta que tanto las golondrinas como los picaflores saben decirnos su energia, comer y volar.Ahora bien, las golondrinas y los picaflores (por ejemplo) saben comer pero adems comen de la misma forma. Estara bueno poder generalizar eso, si las nicos pajaritos con los que estoy trabajando son golondrinas y picaflores puedo decir que todas las aves comen de la misma forma. Entonces generalizo el concepto de Golondrina y Picaflor utilizando una nueva abstraccin, como necesito poner en esa abstraccin mtodos y definir atributos nada mejor que esa nueva abstraccin sea una nueva claseSmalltalk#Ave&amp;gt;&amp;gt;come:gramos&quot;Unaveaumentasuenergiaencuatroveceslosgramosingeridos&quot;energia:=energia+(gramos*4)Wollokclass Ave {  method come(gramos){    //Un aveaumentasuenergiaencuatroveceslosgramosingeridos    energia=energia+(gramos*4)  }Pero no puedo poner ese cdigo en la clase Ave porque esa clase no tiene una variable de instancia energia.Si todas las aves tienen que tener una variable de instancia es algo que me gustara dejar escrito solo en Ave.SmalltalkAvetienedefinidaunavariabledeinstanciaenergiaWollokclass Ave {  var energia  ....Cmo sigue esto?Tengo que explicitar que las golondrinas tienen todo el comportamiento que esta en la clase Golondrina y tambin tienen el comportamiento que est en la clase Ave. Adems tengo que explicitar que los picaflores tienen todo el comportamiento que esta en la clase Picaflor y tambin tienen el comportamiento que est en la clase Ave.Esto se hace diciendo que Ave es superclase de Golondrina y Ave es superclase de Picaflor; adems tenemos que eliminar el cdigo repetido de las clases Golondrina y Picaflor.SmalltalkEn Smalltalk la forma de crear una clase es envindole el mensaje #subclass:instanceVariableNames:classVariableNames: (o uno similar, depende del dialecto de Smalltalk utilizado) a la superclase de la clase que queremos crear.Superclasssubclass:#NameOfSubclassinstanceVariableNames:&#39;variableInstancia1variableInstancia2variableInstanciaN&#39;classVariableNames:&#39;variableClase1variableClase2variableClaseN&#39;En nuestro ejemploObjectsubclass:#AveinstanceVariableNames:&#39;energia&#39;classVariableNames:&#39;&#39;.Avesubclass:#GolondrinainstanceVariableNames:&#39;&#39;classVariableNames:&#39;&#39;.Avesubclass:#PicaflorinstanceVariableNames:&#39;&#39;classVariableNames:&#39;&#39;.WollokEn Wollok, lo ponemos directamente en la definicin de las clases, usando la palabra clave inherits:class Ave {  var energia = 0  method come(gramos){    //Un aveaumentasuenergiaencuatroveceslosgramosingeridos    energia=energia+(gramos*4)  }class Picaflor inherits Ave {  method vola(kms) {    // Un picaflordisminuyesuenergiaen1Jouleporcadakilometrorecorrido+20Joulesqueutilizaparaeldespegue    energia=energia-(kms+20)  }}class Golondrina inherits Ave {  method vola(kms) {    // Unagolondrinadisminuyesuenergiaen1Jouleporcadakilometrorecorrido+10Joulesqueutilizaparaeldespegue    energia=energia-(kms+10)  }}Clase abtractaEn el ejemplo anterior la clase Ave se est usando como superclase de Golondrina y Picaflor. Si nosotros queremos instanciar un ave deberamos elegir si ser una golondrina o un picaflor para mandarle el mensaje new a alguna de esas clases. Lo que no sera correcto es:Smalltalk:unAve:=Avenew.Wollok:var unAve=new Ave()Este cdigo va a funcionar en principio, pero si yo considero que un ave tiene que poder volar y no hay una implementacin en Ave para esta operacin ya que est definido de formas diferentes en sus subclases, unAve no va a entender el mensaje.Entonces, una clase abstracta es aquella que no tiene sentido instanciar porque es demasiado genrica y no tiene una implementacin concreta para algunos mensajes que debera entender porque est definido en sus subclases.Una buena prctica para formalizar el contrato de lo que es ser un ave es definir los mtodos faltantes en la clase Ave de la siguiente forma:Smalltalk#Ave&amp;gt;&amp;gt;vola:unosKilometrosselfsubclassResponsibilityCuando un objeto recibe el mensaje #subclassResponsibility se produce un error indicando que el mtodo debera redefinirse en alguna subclase.WollokSe indica con la palabra clave abstract antes del mtodoclass Ave{  abstract methodvola(unosKilometros)....}De esa forma si agregamos otra subclase de Ave, como ser Gaviota, y olvidamos redefinir vola, cuando una instancia de Gaviota reciba ese mensaje el error ser ms descriptivo que el error de no entender el mensaje, y el desarrollador sabr que las gaviotas deberan definir su forma de volar."

} ,

{

"title"    : "Herramientas de desarrollo con android",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/herramientas-de-desarrollo-con-android.html",
"date"     : "",
"content"  : "LogCatPara poder mostrar informacin en consola, hay que reemplazar los println por   Log.v()//Verbose`   Log.d()//Debug`   Log.i()//Info`   Log.w()//Warning`   Log.e()//Error`y   Log.wtfque muestran los errores por el LogCat, una consola especial de Android.Cmo usarloLog.w(&quot;Librex&quot;,libro.toString());El primer parmetro indica la aplicacin o agrupador, la segunda es el valor a mostrarCundo usar cada unoLeer esta recomendacinNotificaciones al usuarioEl concepto toast permite enviar al frente un mensaje al usuario sin la incomodidad que tiene el popup de tener que confirmar la lectura de ese mensaje. Es una herramienta til tanto para informar acciones que corrieron en background como para mostrar el estado de la aplicacin en modo desarrollo.Para ms informacin  http://developer.android.com/guide/topics/ui/notifiers/toasts.html"

} ,

{

"title"    : "Herramientas de instanciación",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/herramientas-de-instanciacion.html",
"date"     : "",
"content"  : "Llamamos instanciacin a la creacin de un objeto a partir de una clase, la cual define cul es el comportamiento y los atributos que debera tener dicha instancia.Los mecanismos para instanciar objetos a partir de una clase varan bastante entre los distintos lenguajes. En particular, en aquellos lenguajes en los cuales las clases no son a su vez objetos (como Wollok y Java por porner algunos ejemplos) se proveen herramientas para instanciar objetos que se escapan un poquito de la mecnica ms comn de trabajo que es la de enviarle un mensaje a un objeto.En general, desde el punto de vista del uso, lo que los lenguajes proveen es una forma de crear cada instancia indicando cul es la clase que se est instanciando y, en caso de que sea necesario, con qu valores debe inicializarse la instancia en cuestin. De esa forma, el objeto ya estar listo para su uso desde el momento de la creacin.A continuacin se detallan algunas herramientas de construccin a modo de referencia.Inicializacin directaEste es el mecanismo disponible en el lenguaje Wollok en su versin actual. Permite crear instancias de una clase parametrizando los valores iniciales para los atributos que correspondan usando parmetros nombrados. Supongamos que tenemos una clase Golondrina con un atributo energia, cuyo valor por defecto es 100:classGolondrina{varenergia = 100//...todoslosotrosmtodosparalasgolondrinas,//entreloscualeshabrnmuchosquetrabajenconlaenergaasumiendoqueestinicializadaconalgnvalornumrico}Podemos crear una instancia de la clase Golondrina manteniendo el default para la energa de esta forma: new Golondrina(). Si nos interesara crear una golondrina con 25 de energa, la inicializacin directa permite parametrizar esta informacin de esta forma: new Golondrina(energia = 25), y el default simplemente no se usar.En caso de haber varios atributos, pueden inicializarse tantos como querramos, por ejemplo: new Direccion(calle = &quot;Amenabar&quot;, numeracion = 140). No importa el orden en el cual se indiquen estos parmetros, solamente debe coincidir con el nombre del atributo que se est inicializando.Esta herramienta, combinada con buenos defaults en caso de que existan, permite construir objetos listos para usar de forma sencilla y con muy poca burocracia.Constructores  Nota: Los ejemplos que se muestran a continuacin son en el lenguaje Wollok en sus versiones previas a la 1.8, slo a modo ilustrativo.Los constructores son mtodos especiales cuya finalidad es la creacin de objetos de la clase indicada con la inicializacin de estado interno correspondiente. Para invocarlos se usa la palabra reservada new seguido por el nombre de la clase y los parmetros segn corresponda. Este es el mecanismo que se puede encontrar en varios lenguajes industriales muy usados, como Java y C#, y tambin fue el mecanismo soportado por el lenguaje Wollok en sus primeras versiones (luego se deprec intrudiciendo el mecanismo de inicializacin directa).En general esta forma de definir lgica de inicializacin permite definir ms de un constructor con distinta cantidad de parmetros, de modo que se permita al usuario elegir la forma ms adecuada para crear las instancias. Por ejemplo, las fechas podran permitir instanciarse con un constructor sin parmetros retornando la fecha del da de hoy (porque es muy comn querer obtener instancias con esa configuracin particular, entonces se considera como la inicializacin por defecto si no se indica nada), o con otro de 3 parmetros para que al instanciar la fecha se la inicialice con el da, el mes y el ao deseados:newDate()//retornaralafechadehoynewDate(22,10,2016)//retornaralafechaparaelda,mesyaoespecificados.Esto permite que siempre que obtengamos un objeto, el mismo ya est en condiciones de ser usado en vez de requerir que el usuario recuerde indicar los valores necesarios uno por uno mediante setters, teniendo mientras tanto un objeto con un estado invlido que no puede ser usado.Si no definimos ningn constructor, por defecto la clase viene con un constructor vaco implcito para poder crear los objetos haciendo, por ejemplo: newGolondrina()Supongamos que queremos construir golondrinas con una cantidad de energa que nosotros elijamos como valor inicial, podramos definir:classGolondrina{varenergiaconstructor(_energia){energia=_energia}//...todoslosotrosmtodosparalasgolondrinas,//entreloscualeshabrnmuchosquetrabajenconlaenergaasumiendoqueestinicializadaconalgnvalornumrico}Al definir ese constructor, el constructor vaco por defecto ya no estar disponible para instanciar objetos, de esa forma slo podremos crear objetos con un estado interno vlido en base al constructor particular que hayamos definido.Si el lenguaje que uss usa constructores para definir cmo se inicializan las instancias, asegurate de investigar no slo cuestiones sintcticas, sino tambin qu recaudos hay que tener respecto a la herencia."

} ,

{

"title"    : "Herramientas utiles",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/herramientas-utiles.html",
"date"     : "",
"content"  : "Primeros pasos  Amigandonos con el entorno de desarrollo  Configuracin de Maven para poder utilizar las herramientas de UqbarMis plugins de eclipseTexLipsePara edicin de latex: http://texlipse.sourceforge.net/Sysdeo.Permite manejar el Tomcat desde dentro del eclipse, se lo baja de: http://www.eclipsetotale.com/tomcatPlugin/tomcatPluginV321.zip.Rinzo.Plugin de eclipse para editar XML y HTML, y se puede bajar de http://sourceforge.net/projects/editorxml/.Tomcat-XT.Extensin al plugin de sysdeo para facilitar la interaccin con Tomcat, lo pueden bajar de ac: http://sourceforge.net/projects/uqbar-tomcat-xt/."

} ,

{

"title"    : "Orden superior y calculo variacional (Referencia Externa)",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/high-order-functions-and-variational-calculus.html",
"date"     : "",
"content"  : "IntroductionShamessly taken from http://web.archive.org/web/20070209204638/http://ergodicity.iamganesh.com/2006/08/07/higher-order-functions/Higher order functionsJoel Spolsky, of the JoelOnSoftware fame, recently wrote about higher order functions in modern languages. While these features have existed for decades in functional programming languages, they have gained a lot of attention lately due to Googles MapReduce technology.Simply put, map and reduce are primitives in languages such as lisp. Thinking in terms of lists (naturally), map lets you apply a function to every element of a list, while reduce lets you combine values of the list in some way. Pick up any lisp book for more details on this programming paradigm.I find a great deal of similarity between functionals in programming, and functionals in variational calculus. Unfortunately, variational calculus is a much neglected field of calculus specially at the undergraduate level. Variational calculus lets you define functions of functions. For example, the functional defined for the continuous function y(t) in the region [a,b]:is the area under the y(t) curve. See how J is completely independent of y(t)? Thats the power of variational calculus.In general, if we have functions of the form:we can use the Euler-Lagrange equations to derive a differential equation to solve the problem.Variational calculus finds much use in diverse fields such as aerospace control (optimize a trajectory based on fuel cost), operations research (optimize FedExs drop off targets based on distance travelled), and image inpainting (total variational models). If you havent figured it out yet, optimization is the reason this entry is posted under Numerical."

} ,

{

"title"    : "Home",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/home.html",
"date"     : "",
"content"  : "Las Homes son objetos que representan a un conjunto de objetos. Hay situaciones donde hay requerimientos que no son propios de ningn objeto en particular sino del conjunto de los mismos. De ah surge la necesidad de tener un objeto que permita representar ese concepto y poder as agregarle esa responsabilidad.De all se desprende que las Homes son objetos que tienen cierta lgica de negocio que aplica a todo un conjunto (por ejemplo en el ejercicio de Atencin Mdica, la HomePrestadores es un buen lugar para poner el mensaje getPrestadoresDisponibles ya que itera sobre todos los Prestador). Pero no debera convertirse en un God Object, sino que debera delegar en algn punto en otros objetos. En general deberan slo tener la lgica que aplica a nivel de grupo para luego delegar en los objetos que contiene.Tampoco se debe confundir la Home con el punto de entrada a todos los casos de uso. Los casos de uso deberan comenzar desde el objeto de negocio que corresponda, que puede o no ser una Home.La idea de Home no tiene que ver con performance, o base de datos."

} ,

{

"title"    : "Html",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/html.html",
"date"     : "",
"content"  : "HTMLHTML (HyperText Markup Language) es el lenguaje principal que se utiliza para construir pginas web. Es un lenguaje declarativo que permite describir el contenido de una pgina.Estructura General de una pgina HTMLSintaxisEl HTML es un lenguaje de etiquetas o marcas. Por cada etiqueta que abre hay otra igual pero que cierra, se escribe igual pero con una / adelante.&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;&amp;lt;h3&amp;gt;&amp;lt;/h3&amp;gt;La notacin inline permite abrir y cerrar el tag en un mismo paso:&amp;lt;img /&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;hr/&amp;gt;Si bien muchos browsers relajan la sintaxis de apertura y cierre de tags (como en los casos de &amp;lt;ul&amp;gt; y &amp;lt;br&amp;gt;) es una buena prctica respetar esta idea, lo que permite definir XHTML o HTMLs bien formados.Tag HTMLCada tag puede tener  contenido, que es un texto  atributos, demarcados con una clave y un valor  otros tags, que se anidan en forma jerrquica&amp;lt;tag atributo1=&quot;valor1&quot; atributo2=&quot;valor2&quot;&amp;gt;    contenido con &amp;lt;otrotag&amp;gt;otro subcontenido&amp;lt;/otrotag&amp;gt;&amp;lt;/tag&amp;gt;Estructura de una pgina HTMLEl contenido de una pgina web se estructura en forma jerrquica. A partir de HTML 5 tenemos tags especiales que permiten definir una semntica estndar para nuestro documento:  un encabezado o header principal de la pgina  el cuerpo principal o body, que arma el contenido de la pgina y puede agrupar tags visuales y los de contenido, como          section y article: que sirven como elementos que agrupan contenido, y que pueden a su vez tener elementos head, footer o nuevos section/article      nav: que contiene links de navegacin      aside: elementos que no forman parte del contenido principal        un pie de pgina o footer principal de la pginaEjemploUn ejemplo posible de estructuracin del body de una pgina puede ser:&amp;lt;section&amp;gt;  &amp;lt;h1&amp;gt;El pato&amp;lt;/h1&amp;gt;  &amp;lt;section&amp;gt;    &amp;lt;h1&amp;gt;Introduccin&amp;lt;/h1&amp;gt;    &amp;lt;p&amp;gt;En esta seccin, ampliaremos nuestro concepto del pato.&amp;lt;/p&amp;gt;  &amp;lt;/section&amp;gt;  &amp;lt;section&amp;gt;    &amp;lt;h1&amp;gt;Hbitat&amp;lt;/h1&amp;gt;    &amp;lt;p&amp;gt;Esta especie de animal lleg en tiempos remotos, trados en diversas expediciones desde Europa y China, se fueron expandiendo por todo el mundo rpidamente y debido a su temperamento fueron criados como animales domsticos para el consumo de su carne y huevos, as como para mascotas en muchos hogares.&amp;lt;/p&amp;gt;  &amp;lt;/section&amp;gt;   &amp;lt;aside&amp;gt;    &amp;lt;p&amp;gt;otros estudiosos del pato&amp;lt;/p&amp;gt;  &amp;lt;/aside&amp;gt;&amp;lt;/section&amp;gt;&amp;lt;footer&amp;gt;  &amp;lt;p&amp;gt;(c) 2010 The Example company&amp;lt;/p&amp;gt;&amp;lt;/footer&amp;gt;Anlisis semntico de un HTMLEsto permite que haya plugins como el HTML 5 Outliner que pueda ordenar los elementos segn su orden de importancia (la jerarqua la define el nivel de anidamiento dentro de HTML pero tambin el tag le dice semnticamente a qu corresponde cada contenido).Aqu vemos que algunas pginas estn semnticamente mejor ordenadas que otras: a veces no hay un ttulo que identifique la seccin, o no se respeta bien el orden jerrquico de los contenidos.En Firefox tenemos el add-on headingsMap que construye una estructura en paralelo para navegar las pginas de otra manera (para por ejemplo ordenar las noticias segn las ms ledas):Links relacionados  Temario Algoritmos III  W3 - Web Architecture"

} ,

{

"title"    : "Hugs trex insertfield not in scope",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/hugs-trex-insertfield-not-in-scope.html",
"date"     : "",
"content"  : "Si estn en Hugs y luego de cargar su programa aparece el siguiente error:Haskell 98 does not support extensible records ERROR - Hugs.Trex.insertField not in scope            Possible cause: Hugs.Trex module not imported      Revisen que en sus funciones no estn usando = para comparar dentro de la definicin de una funcin. Para comparaciones por igualdad se usa =="

} ,

{

"title"    : "Igualdad vs. Identidad",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/igual-o-identico-----vs---.html",
"date"     : "",
"content"  : "DefinicionesIdentidad: decimos que dos objetos son idnticos si son el mismo objeto. Dentro del ambiente podemos tener dos referencias diferentes al mismo objeto. En Wollok el operador usado para comparar dos objetos por identidad es ===.Igualdad: (o equivalencia) por defecto dos objetos son iguales si son idnticos, o sea si son el mismo objeto. A diferencia de la identidad, la igualdad puede ser redefinida con una implementacin especfica si el problema lo amerita. En Wollok el operador usado para comparar dos objetos por igualdad es ==.EjemplosAlgunos objetos literales como los nmeros o los booleanos son nicos en el sistema, por ese motivo evaluar 3 === 3 da true al igual que 3 == 3.Sin embargo, lo normal es hacer las comparaciones con == y no con ===, ya que en general lo que interesa saber es si dos objetos son iguales desde el punto de vista de dominio. Un ejemplo muy comn son los strings: supongamos que queremos saber si el resultado de concatenar hola con mundo es el string holamundo. No es relevante si el resultado de esa concatenacin fue exactamente el mismo objeto que se puede obtener al escribir el literal holamundo, de hecho, es normal que no lo sea:&amp;gt; &quot;hola&quot; + &quot;mundo&quot; == &quot;holamundo&quot;=&amp;gt; true&amp;gt; &quot;hola&quot; + &quot;mundo&quot; === &quot;holamundo&quot;=&amp;gt; falseDando un paso ms, en qu casos podra ser til redefinir la igualdad? Hay algunos objetos que tienen como principal objetivo representar datos ms all de los literales que ya conocemos, como ser las fechas. Si evaluamos esto en una consola:&amp;gt; const fecha1 = new Date(day = 24, month = 11, year = 2017)&amp;gt; const fecha2 = new Date(day = 24, month = 11, year = 2017)Luego podemos confirmar que la igualdad para las fechas est definida en trminos de los datos, la identidad no es relevante:&amp;gt; fecha1 == fecha2=&amp;gt; true&amp;gt; fecha1 === fecha2=&amp;gt; falseImportante Slo debera redefinirse la igualdad basado en valores que no vayan a cambiar. Por ejemplo si quisiramos modelar una direccin que tiene como atributos la calle y la numeracin y nos interesara definir la igualdad en esos trminos, es importante que una vez construido el objeto direccin con la calle y la numeracin, no sea posible cambiar esas referencias, ya que la relacin de igualdad entre dos objetos debera mantenerse a lo largo del tiempo. O sea, el objeto no necesita ser totalmente inmutable pero s debemos garantizar que mnimamente lo sea respecto a los valores usados para la igualdad.Otra cosa a tener en cuenta si se redefine la igualdad es que podran existir otros objetos del sistema (como las colecciones) que se basan en otro mensaje (suele llamarse hash o hashCode) para encontrar rpidamente objetos que son (o podran ser) iguales al receptor de dicho mensaje, es comn que se use para algoritmos de bsqueda. Su particularidad es que, en vez de recibir otro objeto por parmetro para poder compararlo, no recibe parmetros y retorna un nmero al que se denomina cdigo de hash. En general si la igualdad se define de una forma particular y se mantiene la forma de calcular el cdigo de hash predefinida, eventualmente surgirn comportamientos inesperados. Por eso, independientemente de la tecnologa que uses, asegurate de averiguar cal es la forma ms adecuada de implementar ese mensaje.En el caso del ejemplo planteado de las direcciones, podra ser razonable que la igualdad se defina preguntando si la calle de la direccin que recibi el mensaje es igual a la calle de la otra direccin y adems la numeracin de esa direccin tambin es igual a la numeracin de la otra direccin. Luego el cdigo de hash podra obtenerse mediante un clculo que involucre tanto al cdigo de hash de la calle de la direccin que recibi el mensaje y tambin al cdigo de hash de su numeracin."

} ,

{

"title"    : "Portada",
"category" : "",
"tags"     : "",
"url"      : "/",
"date"     : "",
"content"  : "&quot;Generar una forma de pensar crtica, rigurosa, donde no cabe el dogma, la fe ni el principio de autoridad para sustentar un argumento&quot; (1)PortadaHola!Bienvenidos a la herramienta colaborativa del grupo Uqbar. Somos un grupo de docentes, investigadores y alumnos de diferentes universidades de la Argentina que enseamos, aprendemos y trabajamos en diferentes temas relacionados con la construccin de software.El objetivo de esta pgina es proveer un lugar integrado en el cual agrupar y organizar el conocimiento con el que trabajamos, que sirva tanto para compartirlo entre las distintas universidades en las que nos desempeamos como para la comunidad en general. Tambin nos permite publicar material asociado con las asignaturas pero que muchas veces por motivo de espacio no es posible abordarlo durante la cursada, as que este es el lugar en el que el estudiante curioso puede ir un poquito ms all de lo que podemos alcanzar a ver en clase.Si sos un estudiante en busca del material de una materia, tal vez te convenga ingresar por uno de estos links:UTN  Paradigmas de Programacin  Diseo de Sistemas  Tcnicas Avanzadas de ProgramacinUNSAM  Algoritmos II  Algoritmos III  Programacin con Herramientas ModernasMaterial adicionalPara el que busca algo que vaya ms all de lo visto en las clases aqu hay una lista con algunos artculos sobre otros Temas Interesantes de Programacin. Finalmente, otra posibilidad es browsear nuestra coleccin de propuestas de Herramientas tiles, que incluye tanto herramientas propias como algunas herramientas de terceros que recomendamos.Discusiones  Robustez de los lenguajes  Lombardizacin  Comidas  Portal del investigador  Tips para Concursos Docentes  Coeficiente de Felicidad Docente"

} ,

{

"title"    : "Inferencia de tipos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/inferencia-de-tipos.html",
"date"     : "",
"content"  : "Entendemos por inferencia de tipos la capacidad que tienen algunos lenguajes con chequeo esttico de tipos para calcular el tipo de una expresin, funcin o variable sin necesidad de contar con anotaciones de tipo como s se necesitan en C y Java por ejemplo.La clave de este proceso es la regla por la cual se obtiene el tipo de la aplicacin de una funcin:f::AB-&amp;gt;e::A-------------------fe::BEn trminos ms mundanos, lo que la regla dice es:  si f es una funcin cuyo dominio es A e imagen es B y,  si e es una expresin de tipo A  entonces, el tipo de f e (usamos a e como argumento de f) es BEjemplo, el tipo de not False se puede inferir con esta regla:  si not es una funcin cuyo dominio es Bool e imagen es Bool y,  si False es una expresin de tipo Bool  entonces, el tipo de not False es BoolOtro ejemplo, si queremos saber de que tipo es la expresin not 3 vemos que no tiene un tipo siguiendo la regla que especificamos anteriormente, porque requerira que 3 sea de tipo Bool pero 3 no es un booleano.Expresiones como not 3, 2 + True, length (4,3), fst [1,2], etc. no tienen un tipo y por lo tanto no son expresiones vlidas en Haskell. Analicemos el siguiente caso:funcionLocax|x&amp;gt;0=1|otherwise=TrueComo por una rama retornamos un Int (1 :: Int) y por la otra retornamos un Bool (True :: Bool) no se puede obtener la imagen de la funcin funcionLoca, ergo la funcionLoca no se puede escribir en Haskell porque no tiene un tipo.Sin embargo, que una expresin tenga tipo no significa que sea una expresin libre de errores.head::[a]-&amp;gt;ahead[]::aPero a pesar de esto, si evaluamos la expresin&amp;gt;head[]ErrorComo la inferencia de tipos es un proceso ANTERIOR a la evaluacin, los programas que hacemos en Haskell son Type SafeLa inferencia de tipos es una caracterstica del paradigma funcional?S, es un concepto que fue desarrollado primero en el contexto del paradigma funcional e histricamente se lo ha encontraro principalmente asociado a lenguajes funcionales; sin embargo la idea de inferencia no est limitada este tipo de lenguajes y cada vez ms est siendo utilizada en todo tipo de lenguajes.Algunos lenguajes que poseen formas de inferencia de tipos son: Ada, BitC, Boo, C# 3.0, Cayenne, Clean, Cobra, D, Delphi, Epigram, F#, Haskell, haXe, JavaFX Script, ML, Mythryl, Nemerle, OCaml, Oxygene, Scala.Por otro lado, la inferencia es ms simple en los lenguajes que no permiten realizar asignaciones; y eso hace que sea ms fcil de implementar en los lenguajes declarativos puros como Haskell.EjemplosVer Clculo del tipo de una funcin en HaskellRecuerden que en Haskell ustedes pueden obtener el tipo de cualquier expresin escribiendo :t (type) en el interprete&amp;gt;:tnotnot::Bool-&amp;gt;Bool&amp;gt;:tnotFalsenotFalse::Bool&amp;gt;:tnot3ErrorProblemas de inferencia en HaskellSi bien Haskell puede inferir correctamente el tipo de las funciones que definimos casi siempre, existen casos en los cuales necesita un poco de ayuda de parte del programador. En caso de que eso pase, conviene explicitar el tipo de nuestra funcin adems de su definicin en el .hs.Por ejemplo, si estamos haciendo una funcin f que recibe una lista de a y retorna una lista de a, podemos hacer:f::[a]-&amp;gt;[a]flista=&amp;lt;lo que sea que hay que hacer con la lista para retornar otra&amp;gt;"

} ,

{

"title"    : "Inject into",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/inject-into-.html",
"date"     : "",
"content"  : "El inject:into: es un solo mensaje que entienden todas las colecciones, recibe 2 parmetros.UtilidadLa idea de este mensaje es realizar una operacin de acumulacin sobre todos los elementos de una coleccin.Parmetros del inject:into:El primero parmetro del inject:into: (valorInicialAcumulador) representa el objeto al cual va a apuntar el acumulador antes de empezar a evaluar el bloque (el 2do parmetro del inject:into:) sobre cada elemento de la coleccin.El segundo parmetro del inject:into: (bloqueConDosParametros) es un bloque que va a ser evaluado sobre cada elemento de la coleccin y el acumulador actual.            bloqueConDosParametros = [ :acumuladorActual :elementoDeLaColeccion       &amp;#92;]      El inject:into: retorna el valor final del acumuladorEjemplosSumatoria de una coleccin de nmerosSi col es una coleccin de nmeros y queremos obtener su sumatoria podemos hacercolinject:0into:[:sumatoria:numero|sumatoria+numero]valorInicialAcumulador = 0acumulador = sumatoriaelementoDeLaColeccion = numerooperacin que retorna el nuevo valor del acumulador = sumatoria + numeroProductoria de una coleccin de nmerosSi col es una coleccin de nmeros y queremos obtener su productoria podemos hacercolinject:1into:[:productoria:numero|productoria*numero]valorInicialAcumulador = 1acumulador = productoriaelementoDeLaColeccion = numerooperacin que retorna el nuevo valor del acumulador = productoria * numeroMximo de una coleccin de nmerosSi col es una coleccin de nmeros y queremos obtener el mximo podemos hacercolinject:colanyOneinto:[:maximo:numero|maximomax:numero]valorInicialAcumulador = col anyOne (algn elemento de la coleccin)acumulador = maximoelementoDeLaColeccion = numerooperacin que retorna el nuevo valor del acumulador = maximo max: numeroLa altura ms alta de una coleccin de personasSi col es una coleccin de personas y queremos obtener la altura ms altacolinject:colanyOnealturainto:[:maximaAltura:persona|maximaAlturamax:personaaltura]valorInicialAcumulador = col anyOne altura (alguna altura de alguna persona de la coleccin)acumulador = maximaAlturaelementoDeLaColeccion = personaoperacin que retorna el nuevo valor del acumulador = maximaAltura max: persona alturaLa persona ms alta de una coleccin de personasSi col es una coleccin de personas y queremos obtener la persona ms altacolinject:colanyOneinto:[:personaMasAlta:persona|personaMasAltaaltura&amp;gt;personaalturaifTrue:[personaMasAlta]ifFalse:[persona]]valorInicialAcumulador = col anyOne (alguna persona de la coleccin)acumulador = personaMasAltaelementoDeLaColeccion = personaoperacin que retorna el nuevo valor del acumulador = personaMasAlta altura &amp;gt; persona altura ifTrue: [personaMasAlta] ifFalse: [persona]Nota: si asumimos que persona es instancia de la clase Persona podemos hacer lo siguientecolinject:colanyOneinto:[:personaMasAlta:persona|personaMasAltapersonaMasAlta:persona]Persona&amp;gt;&amp;gt;personaMasAlta:otraPersona^selfaltura&amp;gt;otraPersonaalturaifTrue:[self]ifFalse:[otraPersona]Aplanando coleccionesSi col es una coleccin donde cada uno de sus elementos son colecciones y quiero obtener una coleccin con todos los elementos de sus subcolecciones puedo hacercolinject:Bagnewinto:[:unaColeccionConTodosLosElementos:unaColeccion|unaColeccionConTodosLosElementosaddAll:unaColeccion.unaColeccionConTodosLosElementos]&quot;HayqueretornarexplcitamenteunaColeccionConTodosLosElementos&quot;Si no nos interesan los elementos repetidos podemos escribircolinject:Setnewinto:[:unaColeccionConTodosLosElementos:unaColeccion|unaColeccionConTodosLosElementosunion:unaColeccion]Al menos en Pharo recordar que:      #union: retonarna una instancia de Set        #add, #addAll:, #remove:, #removeAll: retornan el objeto que recibieron como parmetro NO retornan al objeto receptor del mensaje  "

} ,

{

"title"    : "Inmutabilidad",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/inmutabilidad.html",
"date"     : "",
"content"  : "El concepto de inmutabilidad est asociado a la ausencia de cambio. En los paradigmas Funcional y Lgico, la inmutabilidad est garantizada, ya que no es posible modificar los datos con los que trabaja una funcin o un predicado, en todo caso lo que se puede hacer para emular un cambio sobre una estructura es retornar o relacionar con una nueva estructura a partir de la original con la informacin que tendra como consecuencia de la transformacin deseada.Por ejemplo, si en Haskell quisiramos representar que una persona de la cual conocemos su nombre y su edad cumpla un ao tendramos que definir una funcin como esta:data Persona = Persona String IntcumplirAos :: Persona -&amp;gt; PersonacumplirAos (Persona nombre edad) = Persona nombre (edad + 1)En los paradigmas en los cuales se trabaja con efecto colateral trabajar de forma inmutable es una decisin de diseo. Pensemos un poco en el paradigma de objetos.Decimos que un objeto es inmutable si no puede cambiar su estado interno (su conjunto de atributos) despus de su inicializacin.Los Strings son un ejemplo de objetos inmutables, cualquier operacin que hagan sobre un string (concatenacin, cambiar a mayscula o minscula, etc) slo retorna otro string, el receptor nunca se modifica.Si la interfaz del objeto tiene una forma de inicializar sus variables, pero no exhibe el comportamiento para settear sus atributos, sus usuarios no podrn alterar su estado interno ms adelante. Para construir un objeto ya inicializado solemos usar mtodos de clase u otras herramientas de instanciacin, de esa forma no ser necesario usar setters para configurar un estado que no sera esperable que cambie luego de la construccin del objeto.Que un objeto sea inmutable permite que pueda ser compartido por varios objetos sin que puedan afectarse entre s, ya que no hay nada que puedan hacer sobre ese objeto compartido que produzca un cambio visible para el otro objeto que lo conoce.Es importante tener en cuenta que no alcanza en algunos casos con que el objeto no exhiba comportamiento que permita mutarlo, ya que podra tener un atributo que referencie a un objeto que s es mutable. Luego si alguien le manda un mensaje que retorna a ese objeto mutable, y a ese objeto le manda un mensaje que lo modifica, el objeto inicial habr sufrido cambios.Volviendo al caso de los Strings, estos objetos estn compuestos por otros objetos que representan a los caracteres, qu pasa si al string hola le pido su primer elemento y a ese caracter $h le mando un mensaje para que se cambie a mayscula, luego el string original ya no sera hola sino, Hola, no? Eso no es un cambio sobre el string tambin??Bueno, como resulta que los caracteres tambin son inmutables, realmente no hay nada que se pueda hacer para que el string cambie.Entonces, si estamos haciendo nuestros propios objetos inmutables, hay que tener en cuenta si los objetos que conocen pueden o no cambiar su estado. En el caso de que no, listo, pero si s pueden, hay que plantearse si dichos objetos no deberan ser tambin inmutables, y en el caso de no querer que as sea, retornar copias de los mismos cuando sea necesario. De esa forma, quien enve el mensaje que retorna uno de estos objetos mutables, pueda realizar modificaciones sobre el mismo sin que el objeto inmutable se vea afectado.Otra cosa a mencionar es sobre los objetos inmutables es que la igualdad ya no se basa en la identidad. Debera ser cierto por ejemplo que hola sea igual a ho concatenado con la, independientemente de que sean o no el mismo objeto. La igualdad termina dependiendo de los valores de sus atributos (o un subconjunto de ellos). Por eso es muy comn redefinir la igualdad para los objetos inmutables."

} ,

{

"title"    : "Intro a colecciones",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/intro-a-colecciones.html",
"date"     : "",
"content"  : "Las colecciones nos resultan de utilidad porque nos permiten agrupar objetos, para luego poder operar sobre un elemento en particular, sobre algunos elementos seleccionados mediante un filtro, o sobre una coleccin como conjunto.Esto nos permite modelar conjuntos o agregados de cosas, que son muy comunes en casi todos los dominios en los que podemos pensar: las piezas de un tablero de ajedrez, los integrantes de un equipo de ftbol, las lneas de una factura, de todo!A primera vista una coleccin es un conjunto de objetos. Si la vemos con ms precisin nos damos cuenta que es ms preciso pensarla como un conjunto de referencias: los elementos no estn adentro de la coleccin, sino que la coleccin los conoce. Y como no poda ser de otra forma, las colecciones tambin son objetos.No hay un nico tipo de coleccin, hay distintos sabores de colecciones que nos van a servir para distintos fines, sin embargo la mayora de las colecciones entiende un conjunto grande de  mensajes en comn, o sea, son polimrficas :) Slo van a diferir en algunos mensajes particulares debido a la naturaleza de la coleccin.Qu podemos hacer con una coleccin?Para tratar de responder esta pregunta no es necesario estar familiarizado con la implementacin de las colecciones. Recordemos que una de las caractersticas ventajosas del Paradigma de Objetos es que acerca nuestro modelado a la forma en que percibimos la realidad.Entonces que haramos nosotros con una coleccin? Pensemos en una coleccin de estampillas. Podemos:  Mirarlas -&amp;gt; recorrer la coleccin y hacer algo con cada elemento  Encuadernarlas por fecha -&amp;gt; ordenar la coleccin  Conseguir nuevas estampillas -&amp;gt; agregar elementos a la coleccin  Regalar una estampilla -&amp;gt; quitar elementos de la coleccin.  Quedarme con las estampillas de Brasil -&amp;gt; hacer un filtro o seleccin de los elementos segn un criterio.  Saber si tengo una determinada estampilla -&amp;gt; preguntarle a una coleccin si incluye o no un determinado objeto como elemento.Qu otra coleccin podemos modelar del mundo real? Un carrito del supermercado!!Mientras vamos de gndola a gndola del super vamos agregndole elementos (referencias a objetos) a esa coleccin. Cuando llegamos a la caja recorremos esa coleccin y obtenemos informacin de la misma: cunto suma el costo total de sus artculos, cuntos artculos comprAhora, como podemos modelar todas estas situaciones en objetos? Enviando mensajes a colecciones! Recordemos que en el paradigma de objetos todo programa es un conjunto de objetos envindose mensajes para concretar un objetivo en comn. Bien, en este caso los objetos sern las distintas colecciones y sus elementos. Los mensajes que puede recibir una coleccin sern dependientes del lenguaje, claramente, pero la idea detrs es bsicamente la misma.Un ejemplo rpido en Wollok: En este ejemplo vamos a usar un tipo de coleccin al que llamamos Set. Supongamos que tenemos 4 objetos distintos que son estampillas (nos interesa que nos sepan decir su origen y su superficie, no importa cmo lo hacen), agreguemos algunas a la coleccin.varcoleccionEstampillas=#{}coleccionEstampillas.add(estampillaBrasileraGrande)coleccionEstampillas.add(estampillaAlemana)coleccionEstampillas.add(estampillaBrasileraMediana)Alternativamente, si ya conozco los elementos que va a tener inicialmente, usando el set literal de Wollok podemos crear directamente la coleccin con esos elementos.varcoleccionEstampillas=#{estampillaBrasileraGrande,estampillaAlemana,estampillaBrasileraMediana}A esta coleccin de estampillas ya le puedo hacer algunas preguntascoleccionEstampillas.size()//devuelve3coleccionEstampillas.contains(estampillaAlemana)//devuelvetruecoleccionEstampillas.contains(estampillaBrasileraChica)//devuelvefalseClaro que para que la coleccin me sea realmente til, me debe permitir interactuar con sus elementos, poder hablarle (p.ej.) a estampillaAlemana a travs de la coleccin. Antes de ver cmo hacer esto, clarifiquemos un poco la relacin entre una coleccin y sus elementos.Colecciones y referenciasComo ya dijimos en la introduccin, si miramos una coleccin en detalle, vemos que es mejor entenderla como un conjunto de referencias a objetos, y no como un conjunto de objetos. Cul es la diferencia? Que conceptualmente, la coleccin no tiene adentro suyo a sus elementos.Los elementos de una coleccin son objetos como cualesquiera otros, al agregarlos a una coleccin estoy, en realidad, agregando una referencia que parte de la coleccin y llega al objeto agregado. Los objetos que elijo agregar una coleccin pueden estar referenciados por cualesquiera otros objetos.En el ejemplo anterior, algunas de las estampillas que creamos son elementos de la coleccin, y adems estn referenciadas por variables. Grficamente tenemos: Si se estn preguntando en qu orden estn las estampillas en el Set? Un Set no mantiene sus elementos en un orden determinado, ms adelante veremos que hay distintos sabores de colecciones, algunos mantienen orden y otros no. En este momento, no es lo que nos interesa.Ahora agreguemos un objeto ms: pedro, el coleccionista, que sabe cul es su estampilla favorita (la estampillaBrasileraMediana). El ambiente queda as:Ahora hay un objeto que tiene 3 referencias:      es el objeto referenciado por la variable estampillaBrasileraMediana        es un elemento del Set        es la estampilla preferida de pedro  Ya podemos ver un poco ms en detalle la relacin entre una coleccin y sus elementos. La coleccin maneja referencias a los elementos que le voy agregando (p.ej. envindole el mensaje add(elemento) ), anlogas a las referencias de las variables de instancia de otros objetos. Hay dos diferencias entre las referencias que mantiene una coleccin y las que mantienen nuestros objetos p.ej. pedro:  Las referencia que usan nuestros objetos tienen un nombre, que es el nombre que luego usar para hablarle al objeto referenciado; las de la coleccin son annimas.  Nuestros objetos tienen una cantidad fija de referencias (en este caso pedro tiene una nica referencia, estampillaPreferida), una coleccin puede tener una cantidad arbitraria, que puede crecer a medida que le agrego elementos.As, los objetos que quedan referenciados por la coleccin pueden tener otras referencias sin problema. Un objeto no tiene nada especial por ser elemento de una coleccin, slo tiene una referencia ms hacia l. Un objeto no conoce de qu colecciones es elemento (podra tener una referencia explcita a la coleccin para saberlo, pero eso habra que programarlo a mano y por lo general tampoco nos interesa).La referencia a un objeto por ser elemento de una coleccin cuenta para que el objeto no salga del ambiente cuando pasa el Garbage collector. Eso significa que si dejamos de referenciar a nuestra estampilla alemana mediante la referencia estampillaAlemana, como la coleccin de estampillas la conoce, el objeto va a seguir en el sistema.Hablando con los elementosHay algunas operaciones que se hacen sobre una coleccin en las cuales parte de lo que hay que hacer es responsabilidad de cada elemento.Por ejemplo, supongamos que quiero obtener de mi coleccin de estampillas aquellas que tengan ms de 10 cm2 de superficie. La coleccin no sabe la superficie de cada estampilla, s conoce a las estampillas, entonces puede enviarle mensajes a cada una. Lo que no sabe es qu mensajes puede enviarle, un Set no sabe si lo que tiene son estampillas, perros, nmeros, otros Set, o cualquier otro objeto, slo representa al conjunto, sin saber nada de sus elementos. Por otro lado, cada estampilla no sabe en qu coleccin est, de hecho un mismo objeto podra estar en varias colecciones.Por lo tanto, para resolver mi problema necesito que acten tanto la coleccin (que es la que conoce a los elementos) como cada elemento (que es el que sabe su superficie). Veamos cmo lograr esta interaccin. Empecemos por decidir a quin le pedimos lo que queremos. Quiero aquellas estampillas, de las que son elementos de coleccionEstampillas, que cumplan una determinada condicin.A qu objeto le voy a pedir esto? A la coleccin.El mensaje es filter(algo) en Wollok o sea que necesita un parmetro. Este parmetro va a representar una condicin para el filtrado, que es un cdigo que la coleccin debera evaluar sobre cada elemento, y debe devolver true o false para que la coleccin sepa si debera o no estar en la coleccin nueva a devolver.Los objetos que representan cachos de cdigo son los Bloques, en este caso un bloque con un parmetrocoleccionEstampillas.filter({estampilla=&amp;gt;estampilla.superficie()&amp;gt;10})Mientras que todos los elementos de la coleccin entiendan el mensaje superficie y al recibirlo retornen un nmero, el filtrado va a funcionar correctamente.En resumen: cuando quiero hacer una operacin sobre una coleccin que necesita enviarle mensajes a cada elemento, la operacin se la pido a la coleccin, y le voy a enviar como parmetro un bloque que describe la interaccin con cada elemento."

} ,

{

"title"    : "Introduccion a las metodologias de desarrollo de software",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/introduccion-a-las-metodologias-de-desarrollo-de-software.html",
"date"     : "",
"content"  : "Para qu sirve una metodologa?Una metodologa nos ordena, nos contiene, nos permite definir lmites. Construir software complejo requiere un gran esfuerzo: tecnologa, dinero y sobre todo: personas. Personas que interactan entre s, con diferentes grados de conocimiento, con diferentes roles, con diferentes intereses. Una metodologa propone un esquema de trabajo que nos permite entender cul es nuestro rol dentro del proyecto, nos acerca una cierta sensacin de tranquilidad, de seguridad. Sin un proceso no sabemos cmo comenzar y cundo terminar.Metodologas secuenciales / iterativasEn las metodologas secuenciales, el proceso de desarrollo de software se divide en varios pasos o fases. Cada fase tiene un conjunto de metas a cumplir. El fin de cada fase delimita el comienzo de la fase siguiente. Aunque son normales la superposicin de fases, estas metodologas proponen una gran fase de anlisis de requerimientos, otra de diseo, otra de construccin y otra de pruebas donde el alcance de cada fase es la totalidad de los requerimientos de un proyecto.En las metodologas iterativas se divide el proyecto en entregas o iteraciones. Si cada iteracin define un conjunto de metas a cumplir, podramos pensar que no hay una gran diferencia con la metodologa secuencial. No obstante, cada iteracin define como entregable un software testeable por el usuario. Entonces hay etapas de anlisis de requerimientos, diseo, construccin y prueba en cada iteracin. Adems, cada iteracin permite revisar y cambiar los requerimientos a resolverse.Metodologas orientadas al proceso / a las personasOtra taxonoma que divide las metodologas es el grado de importancia que le dan  al proceso de desarrollo  y a las personas que ejecutan ese planSi bien la mayora de las metodologas contemplan tanto la serie de pasos que conforman el proceso como qu tipo de tareas deben desarrollar las personas (en base a sus perfiles), hay metodologas en las que el proceso est por encima de las personas. Dicho de otra manera, respetar el proceso garantiza el xito del proyecto. El margen de discrecionalidad (cunto puedo salirme del libreto) es mnimo, slo en lo operacional (en el da a da). Por eso es importante para estas metodologas poder medir cada tarea del proyecto, sea un ejecutable o documentacin.Por el contrario, las metodologas orientadas a las personas consideran que stas definen el xito o fracaso de un proyecto. Les asignan un grado mayor de decisin en cada tarea y confan en su capacidad de resolucin de un problema antes que en las mtricas que dan los indicadores. Esto no quiere decir que el proceso no importe, sino que ocupa un puesto de menor relevancia en la consecucin de un logro.Metodologas orientadas a la documentacin / al productoHay metodologas que sostienen que un producto de software bien elaborado nace de una documentacin extensa y que contemple todas las decisiones que surgieron del anlisis y del diseo. De esa manera el desarrollador no tendr dudas ni excusas a la hora de escribir cada lnea de cdigo.Por el contrario, hay metodologas que privilegian tener un software testeable para el usuario antes que tener el documento que respalde ese software que est corriendo. Esto no significa que haya que programar sin tener una especificacin, sino que:  tomamos una documentacin que puede tener definiciones pendientes, estar incompleta en su diseo o que sepamos que est sujeta a cambios  construimos el software  y luego actualizamos las decisiones principales en el documentocon la ventaja de tener la certeza de que lo que hace el sistema es eso.Metodologas predictivas / adaptativasQu ocurre con los cambios que piden los usuarios mientras se va construyendo el software? Cmo se manejan?  algunas metodologas creen que es posible anticipar los cambios a travs de un buen anlisis y un buen diseo que contemple diferentes alternativas. Este enfoque no es inocente, sabe perfectamente que el usuario puede cambiar de opinin, que las disposiciones legales e impositivas sufren modificaciones y que los proyectos estn siempre sujetos a vaivenes polticos. Pero justamente por eso busca minimizar los cambios para conservar lo ms estable posible el entorno: resistirse al cambio es su naturaleza.  otras metodologas consideran que el cambio es inevitable, que no tiene sentido resistirse a l. De manera que el proceso mismo contempla momentos en los que el usuario puede modificar los requerimientos: esto implica agregar nuevos, descartar otros o modificarlos (no importa si ya fueron construidos o no). El usuario tiene derecho a cambiar de opinin, sostienen.Algunos ejemplos  Modelo de Cascada: nunca existi, fue una maliciosa interpretacin del paper de Winston Royce: Managing the development of large software systems. Les recomendamos ver este interesante video al respecto, para entender lo inapropiado y excesivamente optimista que es aplicar esta metodologa en un proceso de desarrollo actual.  Espiral de Boehm: originado en el paper de Barry Boehm: A Spiral Model of Software Development and Enhancement, surge como primer contracara del modelo de cascada. Sigue un modelo de planificacin de objetivos, identificacin de riesgos y desarrollo y verificacin del producto en n iteraciones,          esto lo convierte en adaptativo (contempla cambios acomodndolos en el plan de las sucesivas iteraciones). Tomamos prestada una fase del artculo donde sostiene la importancia de que el proceso no fuerce al diseador a tomar decisiones en forma anticipada: [The spiral approach] fosters the development of specifications that are not necessarily uniform, exhaustive, or formal, in that they defer detailed elaboration of low-risk software elements and avoid unnecesary breakage in their design until the high-risk elements of the design are stabilized.      El modelo de espiral tiene un contenido altamente orientado al proceso (en el artculo no hay una sola mencin sobre el papel que juegan las personas dentro del proyecto)      No podemos afirmar que sea una metodologa orientada al producto ni a la documentacin, en cada iteracin debemos armar el anlisis de riesgo, relevar los requerimientos de sistema y de software, hacer el plan de la iteracin siguiente, el diseo global y detallado y los casos de prueba, pero por otra parte tambin la iteracin contempla la posibilidad de prototipar y exige la presentacin de un software testeable para el usuario.        Proceso unificado: comercializado por varias empresas, el proceso unificado es el primero que permite adaptarse segn el tamao del proyecto y su complejidad. Se autodefine como un proceso iterativo e incremental, dirigido por los casos de uso, orientado a la arquitectura y que busca anticipar los riesgos del proyecto. Las fases del proyecto se dividen en: Inception, Elaboration, Construction y Transition. Cada una es susceptible de dividirse en iteraciones y lo que diferencia una fase de otra es la madurez del producto que se est construyendo.          Desde la fase de Elaboracin hay construccin, test y deploy de un ejecutable, por eso su naturaleza es iterativa.      De la misma manera, se evita tomar decisiones en forma prematura y se contempla la posibilidad de modificar los requerimientos hasta la ltima iteracin, por lo que tambin encaja perfectamente en las metodologas adaptativas.      UP sugiere una gran cantidad de artefactos de documentacin, aunque podemos minimizarlos para concentrarnos en el cdigo funcionando para el usuario. En la discusin filosfica documentacin vs. producto podemos decir que UP est a mitad de camino de ambas, como lo confirma esta frase: El producto no es slo el ejecutable, tambin es la documentacin que acompaa al sistema: manual de usuario, casos de uso, diagramas de clase, diagrama de arquitectura, etc.      Respecto a la orientacin persona o proceso podemos decir que UP se mantiene en una zona gris. Por un lado define que las personas son importantes y tienen que saber qu hacer, mientras que al mismo tiempo cada persona cumple un rol que sugiere que esas personas estn supeditadas a un proceso en el cual confiar.        Metodologas giles: como extreme Programming, Scrum (segn el artculo de Jeff Sutherland y Ken Schwaber, basado en el artculo original de Takeuchi, Hirotaka; Nonaka, Ikujiro), ASD, etc. Todas se basan en el manifiesto gil que establece sus principios metodolgicos para desarrollar software:          Las personas y cmo se relacionan entre s son ms importantes que los procesos y las herramientas tecnolgicas (es orientado a las personas, por definicin)      Un producto funcionando es ms importante que la documentacin exhaustiva (orientado al producto)      La colaboracin del cliente es ms importante que la negociacin del contrato (que discrimina al cliente como parte externa del producto)      Responder al cambio es ms importante que seguir el plan (adaptativo/iterativo)      Links relacionados  Volver a Diseo de Sistemas  The New Methodology, artculo de Martin Fowler"

} ,

{

"title"    : "Java",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/java.html",
"date"     : "",
"content"  : "Sobre el lenguaje:  Lambdas en Java 8  Java - Pgina oficial  Java (Wikipedia)  Oracle Technology Network for Java Developers(Algunas) Herramientas basadas en Java:  JVM  JDK  Android SDK  Eclipse IDE  intelliJ IDE  Apache Commons  Google Guava  Joda Time    UI/Web Development          Swing      SWT      GWT      Wicket      Play Framework      Apache Tomcat      Persistencia-   [Hibernate](http://www.hibernate.org/)-   [JDBC](http://en.wikipedia.org/wiki/Java_Database_Connectivity)SCM (Software Configuration Management)-   Maven    -   [Apache Maven](http://maven.apache.org/)    -   [Maven (Wikipedia)](http://en.wikipedia.org/wiki/Apache_Maven)"

} ,

{

"title"    : "Javascript",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/javascript.html",
"date"     : "",
"content"  : "Sobre el lenguaje  JavaScript (Wikipedia)  Mozilla Developer NetworkHerramientas basadas en JavaScript  La mayora de los web browsers modernos (Google Chrome, Mozilla Firefox, Opera, Safari) estn implementados usando JS.  Adobe Acrobat, Reader, Dreamweaver, Photoshop, Illustrator, etc.  Apache OpenOffice  Google Apps Script  Adobe AIR  GNOME Shell  JSON  JQuery  Node.js  Ajax (tcnicamente no es una herramienta, sino un conjunto de tcnicas para desarrollo de aplicaciones web)"

} ,

{

"title"    : "JDK vs. JRE",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/jdkVsJre.html",
"date"     : "",
"content"  : "Cuando nos piden instalar Java (a secas) en nuestra mquina, es importante tener en claro la diferencia entre:  JRE o Java Runtime Environment: un conjunto de herramientas que permite ejecutar cdigo compilado en Java. El environment o ambiente donde viven los objetos se implementa con la JVM (Java Virtual Machine).  JDK o Java Development Kit: incluye al JRE y adems le agrega herramientas propias para desarrollar en Java: el compilador (javac), el generador de documentacin html para las clases (javadoc), el debugger (jdb), entre otros.Para tener el listado completo de las herramientas que trae OpenJDK (una de las tantas variantes), recomendamos ingresar a esta pgina.Arquitectura general del entorno JavaEn este diagrama vemos el proceso de desarrollo de un programa Java desde que lo escribimos hasta que se ejecuta en una mquina (nuestra o de un usuario). Para compilar el programa Java a un cdigo intermedio o bytecode necesitamos el ejecutable javac, que viene con el JDK. El archivo .class generado puede ser interpretado en cualquier otro sistema operativo, solo necesitamos tener el JRE adecuado. Ejecutamos entonces el programa java (o javaw en Windows) pasando como argumento nuestro archivo .class para que el bytecode sea interpretado al cdigo de la mquina.Tu IDE integra todas estas herramientas de manera que cada vez que grabs un archivo Java realiza la compilacin para generar el .class y ejecutarlo desde el mismo entorno. Por eso recordemos que un IDE es un Integrated Development Environment.Desarrollo en Kotlin/JVMHaciendo la aclaracin de que hay variantes de Kotlin que no necesitan la JDK (Kotlin Native o bien Kotlin/JS), en las materias Algoritmos 2, Algoritmos 3 y Programacin con Herramientas Modernas trabajamos con Kotlin/JVM que precisan instalarse la JDK.De esa manera cuando generamos nuestro archivo .kt con el cdigo fuente, el compilador automticamente genera el bytecode asociado (el .class, que est en la carpeta build/classes/kotlin) utilizando tanto el compilador de Kotlin como las herramientas que trae la JDK.Como estamos trabajando dentro de un IDE, este paso adicional es transparente para nosotros. Solo debemos tener en cuenta que adems del plugin de Kotlin, necesitaremos tener instalada una JDK para que el proceso de fondo convierta los archivos .kt a .class.Como resultado, nuestros programas pueden ejecutarse utilizando la mquina virtual de Java a partir de cualquier JRE.Links relacionados  Volver al men principal del entorno Kotlin  Pgina principal de Algoritmos 2"

} ,

{

"title"    : "json",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/json.html",
"date"     : "",
"content"  : "JSONIntroduccinJSON (JavaScript Object Notation) es un estndar para expresar estructuras de datos en un subset del lenguaje javascript. Se hizo popular en los ltimos tiempos como el estndar de formato para transferir informacin entre sistemas. El JSON es una estructura arbrea, donde cada objeto es un mapa o diccionario.Facebook, Twitter, Foursquare proveen una forma de acceder a su informacin (contactos, tweets, y lugares, respectivamente) que nos retorna la informacin en formato JSON. La idea es parecida a la idea de XML (asumiendo que ya conocen esta idea), pero menos verborrgico.Ejemplo de una personaEjemplo de una persona en formato JSON:  Un objeto es un conjunto de clave-valor entre llaves.  Las claves tienen nombres en strings (entre comillas)  Los valores pueden ser strings o nmeros, o bien otras estructuras.  telefonos tiene como valor una lista o array, que se escribe con literales corchetes. Y elementos separados por comas.  mascota tiene como valor otro objeto JSON, que a su vez tiene sus propios atributos como clave-valor.{  &quot;nombre&quot;: &quot;Juan&quot;,  &quot;apellido&quot;: &quot;Prez&quot;,  &quot;edad&quot;: 45,  &quot;telefonos&quot;: [    47574933,    29298122,    88384831  ],  &quot;mascota&quot;: {    &quot;nombre&quot;: &quot;Colita&quot;,    &quot;tipo&quot;: &quot;perro&quot;  }}Material complementario  Tutorial de JSON"

} ,

{

"title"    : "Juegos de estrategia",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/juegos-de-estrategia.html",
"date"     : "",
"content"  : "Modelo inicialSe desea modelar un juego de estrategia en el cual existen unidades que se pueden atacar las unas a las otras.Al atacar una unidad a otra, se compara el potencial ofensivo del atacante con el potencial defensivo del defensor. En caso que el primero sea mayor al segundo, la unidad atacada pierde tanta energa como la diferencia entre el potencial ofensivo y el defensivo involucrados. En otro caso, no ocurre nada.Por ejemplo, si un atacante con 30 de potencial ofensivo ataca a un defensor con 20 de potencial defensivo, este ltimo pierde 10 de energia.Hay tres tipos de unidades:  Guerreros -&amp;gt; Que pueden ser atacados o atacar. Tienen un potencial ofensivo especfico cada uno y tambin su propio potencial defensivo. Comienzan con 100 unidades de energa.  Murallas -&amp;gt; Que pueden ser atacados pero no atacar. Tienen un potencial defensivo que equivale a su energa sobre 20, con un mnimo que depende de cada muralla. Comienzan con 1000 unidades de energa.  Misiles -&amp;gt; Que no pueden ser atacados pero pueden atacar. Su potencial ofensivo equivale a 100 multiplicado por la cantidad de kg de explosivos que tenga, que es propia de cada misil.Problemas con Herencia SimpleAl intentar modelar este ejercicio con herencia simple, uno se encuentra con el problema de que no es posible separar en dos clases el comportamiento de Atacante y de Defensor, para luego hacer que Guerrero utilice ambos comportamientos. La herencia simple entonces no contribuye a una solucin aceptable y se debe entonces buscar soluciones alternativas como composicin que requieren una porcin importante de glue code.Resolucin con Mixins en RubyRequerimiento descansar"

} ,

{

"title"    : "Testeo unitario avanzado",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/kotest-testeo-unitario-avanzado.html",
"date"     : "",
"content"  : "Este artculo presenta algunas guas para desarrollar los casos de prueba, considerando que ya tienen una base de testeo unitario automatizado. Si ests buscando estudiar el tema en profundidad, te recomendamos el siguiente apunte de Testing.Por otra parte, aqu explicamos la mecnica utilizando Kotest como framework de testeo, si ests buscando una variante que siga los lineamientos de JUnit, pods ver esta pgina.EjemploUn sistema de seguros de automotor define en qu casos se puede pagar un siniestro:  para los clientes normales, si no son morosos (la deuda debe ser 0)  para las flotas de autos, se soporta una deuda de hasta $ 10.000 si el cliente tiene ms de 5 vehculos  hasta $ 5.000 en caso contrarioDefiniendo los escenariosEn base al ejemplo anterior, podemos considerar los siguientes escenarios:  un cliente normal moroso: si debe $ 1  $ 50.000 no nos importa, porque est en la misma clase de equivalencia  una flota con menos de 5 autos ( 5 autos) =&amp;gt; seran pocos autos  una flota con ms de 5 autos =&amp;gt; seran muchos autosElegimos cuntos autos en base al valor lmite: como a partir de los seis autos se considera mucho y menos de 6 son pocos autos, 6 es el valor de una flota con muchos autos, 5 es el valor de una flota con pocos autos.Estructura de los testsLa estructura que tienen los tests en base a los escenarios propuestos podra ser:dado un cliente normalque es moroso: no puede cobrar un siniestroque no es moroso: puede cobrar un siniestrodado un cliente de flota con muchos autos (6 autos)si el cliente debe ms de $ 10.000 no puede cobrar un siniestrosi el cliente debe $ 10.000 o menos, puede cobrar un siniestrodado un cliente de flota con pocos autos (5 autos)si el cliente debe ms de $ 5.000 no puede cobrar un siniestrosi el cliente debe $ 5.000 o menos puede cobrar un siniestroDefiniendo las especificaciones de los testsNecesitamos  un cliente normal  una flota de 6 autos  otra flota de 5 autosa los que podemos configurar diferentes grados de deuda. Podemos seguir algunas recomendaciones adicionales:Agrupar los escenarios en diferentes archivosPor el momento, no tenemos demasiados requerimientos. Entonces vamos a trabajar los tres escenarios desde el mismo archivo, al que llamaremos CobroSiniestroSpec.kt para explicitar el caso de uso que estamos testeando.A la hora de disear nuestros tests, hay dos ideas que estn en tensin  reutilizar nuestros escenarios, es decir, los objetos que estamos testeando  que en cada test quede claro qu objetos participan de esa prueba (lo que se llama SUT, System Under Test)Por ejemplo, podramos tener una flota con 6 autos y hacer tests para diferentes casos de uso: el cobro de un siniestro, el valor mensual de la cuota, el horario de atencin, etc. El tema es que los tendremos en distintos archivos de test. La reutilizacin nos lleva a poner las cosas en un solo lugar, por ejemplo definiendo variables de instancia en una superclase comn (o cualquier mecanismo que aumenta el alcance de la variable, volvindola ms global). Todo eso dificulta el entendimiento posterior del test, porque el cdigo que se ejecuta previo a l est en varios lugares que adems no son fciles de rastrear. Ms abajo veremos qu tcnicas podemos utilizar para mantener nuestros tests simples.Cada uno de los escenarios se implementa con un describe diferente, entonces tendremos 3 describes:  uno para clientes normales,  otro para una flota con pocos autos  y otro para una flota con muchos autosEs importante que no haya demasiados detalles de implementacin en la descripcin de los describes: dada una flota con 5 autos o data una flota con 6 autos provoca que cualquier cambio del negocio respecto a lo que son muchos o pocos autos necesite modificar esa descripcin: es una duplicidad difcil de detectar.Intention revealing - parte 1Queremos expresar lo ms claramente posible qu clase de equivalencia est testeando el describe. Por eso comenzamos escribiendo:describe(&quot;Tests Cobro Siniestro&quot;) {        describe(&quot;Dado un cliente normal&quot;) {            ...        describe(&quot;Dada una flota con muchos autos&quot;) {            ...Los describes agrupan los tests e incluso se pueden anidar, aunque por simplicidad solo vamos a utilizar un describe raz para explicitar qu caso de uso estamos testeando. Una vez ms recordamos: muchos autos es mejor que decir 6 autos. En otras palabras, explicitar el caso de prueba y no el dato de prueba: 6 autos es un dato concreto, pero lo que representa es el caso de prueba de una flota con muchos autos.Expresividad en los testsUn primer approachPara crear nuestro fixture de una flota con muchos autos, los enunciados suelen traer ejemplos como: Lidia Pereyra tiene una flota con 6 autos. Es tentador escribir un test como el siguiente:describe(&quot;Lidia Pereyra&quot;) {    val pereyra = Flota().apply {        cantidadAutos = 6    }    it(&quot;no puede cobrar siniestro&quot;) {        pereyra.generarDeuda(10001)        pereyra.puedeCobrarSiniestro() shouldBe false    }    ...}Pero qu pasa si hay un error en el cdigo de negocio? Supongamos esta implementacin, donde la clase Cliente tiene la definicin de la deuda como un entero:class Flota : Cliente() {    var autos: Int = 0    override fun puedeCobrarSiniestro() =        this.deuda &amp;lt;= maximoPermitido()    fun maximoPermitido() =        if (autos &amp;lt;= 5) 5000 else 20000 // debera ser 10000 en lugar de 20000}Cuando ejecutamos el test tenemos muy poca informacin relevante:  la variable pereyra no est revelando que es un cliente de flota con muchos autos  y tampoco est claro por qu no puede cobrar el siniestro el cliente.Al fallar la condicin tenemos que bucear en el cdigo y extraer este dato para determinar si el error est en el test o en el cdigo de negocio.Una segunda oportunidadVamos a mejorar la semntica del test, renombrando la variable pereyra por un nombre ms representativo de la clase de equivalencia que estamos modelando y cambiando la descripcin para el test:describe(&quot;Dada una flota con muchos autos&quot;) {    val flotaConMuchosAutos = Flota()    flotaConMuchosAutos.autos = 6    it(&quot;si tiene mucha deuda no puede cobrar siniestro&quot;) {        flotaConMuchosAutos.generarDeuda(10001)        flotaConMuchosAutos.puedeCobrarSiniestro() shouldBe false    }Ahora al fallar el test sabemos ms cosas:  el test con su stack trace, pero tambin  qu es lo que estamos testeando, tratando de no entrar en detalles para no duplicar lo que dice el cdigoAAA PatternLos tests suelen estructurarse segn el patrn AAA: Arrange, Act y Assert.describe(&quot;Dada una flota con muchos autos&quot;) {    // Arrange    val flotaConMuchosAutos = crearFlota(6)    it(&quot;si tiene mucha deuda no puede cobrar siniestro&quot;) {        // Act        flotaConMuchosAutos.generarDeuda(10001)        // Assert        flotaConMuchosAutos.puedeCobrarSiniestro() shouldBe false    }    it(&quot;si no tiene poca deuda puede cobrar siniestro&quot;) {        // Act        flotaConMuchosAutos.generarDeuda(10000)        // Assert        flotaConMuchosAutos.puedeCobrarSiniestro() shouldBe true    }}ArrangeEn el Arrange: donde instanciamos los objetos a testear, con sus colaboradores: en el ejemplo son la flota y sus autos.Instanciar un objeto adecuado para el test puede involucrar varios pasos, en ese caso es conveniente definir mtodos helpers que adems puedan reutilizarse en diferentes contextos:fun crearFlota(cantidadAutos: Int) =    Flota().apply {        autos = cantidadAutos    }...        describe(&quot;Dada una flota con muchos autos&quot;) {    // Arrange    val flotaConMuchosAutos = crearFlota(6)En el ejemplo tenemos un mtodo helper del test que permite crear un objeto Flota pasndole la cantidad de autos a crear. De esa manera la configuracin de una flota ocurre en una sola lnea y se puede incluir dentro del test mismo. El nmero 6 representa el valor lmite para la flota, podramos setearlo en base a una constante asociado a la clase Flota:// clase Flotaval LIMITE_MUCHOS_AUTOS = 5// el testdescribe(&quot;Dada una flota con muchos autos&quot;) {    // Arrange    val flotaConMuchosAutos = crearFlota(LIMITE_MUCHOS_AUTOS + 1)La nica cuestin a tener en cuenta aqu es que est bueno que los tests tengan la mnima lgica posible, de manera de no estar repitiendo la misma lgica que ya tiene el negocio: la ventaja que tiene escribir crearFlota(6) es que si el lmite de lo que se considera muchos autos cambia, el test falla y eso puede ser til.  Una heurstica posible sobre el setup del test es tratar de mantenerlo simple y de alto nivel, ms cercano al lenguaje del dominio que con detalles de implementacin. En el ejemplo de arriba se logra con mensajes que se encargan de instanciar objetos de dominio y que esconden la complejidad de conocer la colaboracin entre la flota y sus autos). Una alternativa a tener mtodos en el test puede ser crear un objeto especfico que construya otro objeto, algo que dejaremos para ms adelante.ActAct: son las operaciones que tienen efecto. En el caso de la flota que tiene una deuda abultada, enviamos el mensaje que le genera la deuda. Hay tests que quizs no necesiten disparar acciones, y est bien que eso ocurra.AssertEn el Assert indicamos qu esperamos que pase, generalmente asociado a las respuestas que da el envo de un mensaje al objeto testeado. Para esto utilizamos los matchers de Kotest.One assert per testHay ciertas controversias respecto a si podemos tener varios asserts en el mismo test, ya que cuando el primer assert falla los siguientes no se siguen evaluando: esto en realidad depende del runner de los tests, podramos eventualmente trabajar con un framework que continue buscando asserts y discrimine cules anduvieron y cules no (RSpec, framework de testeo para Ruby, hace sto).En verdad, la heurstica que nos interesa recomendar es: los tests deben fallar por exactamente un solo motivo, esto relaja esa restriccin. Lo importante no es tener un solo assert, sino que todos los asserts estn relacionados con la misma funcionalidad. Dejamos un ejemplo concreto:describe(&quot;Dado un parser de patentes de autos&quot;) {    it(&quot;se obtiene correctamente la parte numrica de una patente vieja&quot;) {        val lista = PatenteParser(&quot;ABC257&quot;).parsearNumeros()        lista.size shouldBe 3        lista[0] shouldBe 2        lista[1] shouldBe 5        lista[2] shouldBe 7    }}El lector puede profundizar con estos artculos:  Multiple Asserts Are OK  Good Unit Test - One AssertTL;DREste es el resumen de buenas prcticas a la hora de definir tus tests:  arm los escenarios que definen las clases de equivalencia de los tests  escrib la descripcin de los describes y los tests explicando qu estamos testeando. El cmo lo termins de ver en el cdigo, evit duplicidades entre el texto que explica y el cdigo escrito  separ los describes por requerimientos / casos de uso y los tests por escenarios donde quede claro la clase de equivalencia (cliente comn, flota, etc.)  los nombres de las variables deben reflejar la clase de equivalencia que estn resolviendo, y no casos particulares que no revelan la intencin de lo que estamos modelando (s flotaConPocosAutos, no flotinha o miFlota)  los tests se suelen estructurar utilizando las tres A: Arrange (el setup que conviene mantenerlo simple), Act (operaciones con efecto cuando corresponde) y Assert (las aserciones que deben testear el mismo concepto en cada test)Links relacionados  Video en youtube que explica cobertura y clases de equivalencia en un proyecto Kotlin  Si conocs Ruby, te recomendamos Better specs  Pgina principal de Algoritmos 2"

} ,

{

"title"    : "Kotlin - control de versiones",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/kotlin-amigandonos-git.html",
"date"     : "",
"content"  : "Los archivos a versionar en GitNo todos los archivos deben subirse al repo. Como regla general no deberan subir archivos que se puedan generar a partir de otros, por ejemplo:  los binarios que se generan a partir del cdigo fuente de ustedes (el directorio build). Ocupan espacio en el repositorio y se corre el riesgo de estar trabajando con versiones desactualizadas.  archivos de configuracin propios de IntelliJ (el directorio .idea), que se pueden armar en base al build.gradle.kts cuando se importa el proyecto en nuestra mquina la primera vez.  archivos que genera Gradle localmente (el directorio .gradle, distinto al gradle que es donde est el script ejecutable o wrapper). Si quers conocer ms en profundidad la estructura de las carpetas que utiliza Gradle, te recomendamos esta pgina.Archivos a ignorarDebemos crear un archivo .gitignore (que en Wollok se los cre el propio entorno), en la carpeta raz del proyecto, que debe tener al menos esta lista:HELP.md.gradlebuild/!gradle/wrapper/gradle-wrapper.jar!**/src/main/**/build/!**/src/test/**/build/### STS ###.apt_generated.classpath.factorypath.project.settings.springBeans.sts4-cachebin/!**/src/main/**/bin/!**/src/test/**/bin/### IntelliJ IDEA ###.idea*.iws*.iml*.iprout/!**/src/main/**/out/!**/src/test/**/out/### NetBeans ###/nbproject/private//nbbuild//dist//nbdist//.nb-gradle/### VS Code ###.vscode/Git por consola o Git con una herramienta visual?Da lo mismo, eleg la herramienta que mejor te resulte. El plugin de IntelliJ tiene un buen soporte para Git, aun as hay otras opciones (tens los links en la pgina), lo importante es cmo te organizs con tus compaeres.Recomendaciones para trabajar con mi grupoUn da en la vida de una persona que desarrolla (si van a trabajar en una rama sola)  Cuando empiezo el da primero sincronizo el repositorio para ver los cambios que no tengo en el cdigo. Si no hay cambios, simplemente corro los tests y empiezo a codear como un campen. Si no          Acepto los cambios entrantes y en caso de ser necesario resuelvo conflictos      Corro los tests y veo que todo anda sobre ruedas      Vuelvo a sincronizar y veo que ya no quedan ni conflictos ni cambios sin aceptar      Subo mis cambios al repositorio remoto para que mis compaeros lo vean        Ahora s, a programo, programo, programo y cuando termino, corro los tests  Y vuelvo a sincronizar contra el repositorio remotoEn resumen:  No pasa un da de trabajo sin hacer un commit y push al repositorio remoto. Esto implica planificar mi trabajo para que pueda subir algo al repositorio sin que rompa todo: hay que partir un cambio grande en pequeos pasos (iterativo, incremental).  Nunca deberan subir nuevos fuentes al repositorio sin explicar brevemente qu cambiaron. Si los mensajes son descriptivos (y fix, asdsadsa o arreglo una cosita definitivamente no lo son) rpidamente puedo detectar qu modificaron mis compaeros con slo leer lo que escribieron en los commits. Una buena descripcin me ayuda tambin a entender qu es lo que se modific y por qu razn, especialmente til a la hora de solucionar un conflicto o entender por qu se rompieron los tests.  El que rompe los tests paga las facturas.Y si cada uno trabaja en una rama separada?  mejor, no voy a tener conflictos: eso no es cierto. Cada vez que integres tu cdigo en el branch principal se pueden romper tests o funcionalidades  no puede pasar ms de 3 das sin abrir el PR (Pull Request), dejar pasar el tiempo hace que integrar tu cdigo sea un proceso largo y tedioso  un TP no se puede entregar en 5 ramas distintas, tiene que haber una sola fuente de verdad y es la rama principal del repositorio remoto  tener integracin continua es fundamental si queremos trabajar con ramasMetodologa para trabajar en grupo  los tests tienen que estar en verde siempre  los tests son de todos y todos somos responsables por mantenerlos  si encontramos un bug y no haba un test que lo probaba agregamos uno  los tests son rpidos de correr (no pueden tardar 10 minutos)Links tiles  Siguiente paso: Gua rpida de Kotlin  Volver al men principal del entorno Kotlin"

} ,

{

"title"    : "Bajar un proyecto Kotlin - Gradle de un repositorio git",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/kotlin-bajar-un-proyecto-gradle-de-un-repositorio-git.html",
"date"     : "",
"content"  : "DescripcinEste artculo asume la presencia de un entorno de trabajo Kotlin. En caso de que todava no tengas instaladas esas herramientas, te recomendamos leer estas instrucciones.Tambin se asume la preexistencia de un proyecto construido con Gradle y publicado en un repositorio Git, si lo que se desea es crear el proyecto en lugar de descargarlo, aqu estn las instrucciones para la creacin de un proyecto y su posterior publicacin en el repositorio.El proceso tiene los siguientes pasos, que se detallan a continuacin:  Clonar el proyecto desde el repositorio remoto y alojarlo en nuestro espacio de trabajo local.  Hacer el build del proyecto Kotlin en IntelliJ tomando como base las definiciones de Gradle.Descarga (clone)El checkout se puede hacer  desde el IntelliJ  o por consolaA continuacin explicaremos ambos pasos por separado.Por lnea de comandoPaso 1: clonacinPara esto debemos  ubicarnos en el directorio de trabajo  saber la URL del repositorio en el que se public el proyectoPor ejemplo:# busc el directorio principal donde estn tus proyectos$ cd ~/workspace/algo2# clonamos la URL$ git clone https://github.com/uqbar-project/eg-seguros-kotlin# en la carpeta eg-seguros-kotlin se baja el proyectoEn el directorio local (en este caso eg-seguros-kotlin) se bajan los recursos del proyecto, incluyendo un directorio .git donde est la informacin. De ser necesario debemos cambiar la rama o branch de trabajo, por ejemplo al branch dev:$ git checkout devPaso 2: Importacin del proyecto en IntelliJPara importar un proyecto en IntelliJ una vez descargado  si tens un proyecto abierto, desde el men principal: File &amp;gt; Open  si no hay ningn proyecto abierto, el botn OpenNos puede aparecer una ventana de dilogo para que confiemos en el proyecto:Aceptamos seleccionando la opcin Trust project y entonces se importar el proyecto, al detectar que est hecho en Gradle se utilizar el archivo correspondiente para hacer el build. Te recomendamos que actives el check para que IntelliJ confe en todos los proyectos que te descargs en la carpeta raz de la materia.Y ya podemos comenzar a trabajar!Descarga desde IntelliJIntegracin de tu usuario de github (solo la primera vez)En caso de utilizar directamente el plugin de IntelliJ, te recomendamos integrar tu usuario de Github de la siguiente manera  si tens un proyecto abierto, desde el men principal: Git &amp;gt; Clone  si no hay ningn proyecto abierto, el botn Get from VCSAparece esta ventana de dilogo, seleccionamos Github:Se abre una ventana de un navegador donde nos pide autorizacin para acceder a nuestra cuenta de github:Confirmamos qu cuenta de Github es la que vamos a integrary presionamos el botn Authorize JetBrains:Ingresamos la contrasea(si activaste la autenticacin en 2 pasos o 2FA es probable que tengas que ingresar tu token tambin).Una vez finalizado este paso ya podemos cerrar el navegador y volver a IntelliJ:Clonar un proyecto en IntelliJUna vez que tengamos asociado el usuario el proceso es muy sencillo, porque tendremos acceso a todos los repositoriosAqu podemos hacer una bsqueda y nos aparecern todos los repositorios a los que tenemos acceso. Por ltimo, solo debemos seleccionar el directorio donde vamos a bajar localmente nuestro proyecto para trabajar con el IDE y presionar el botn Clone. Nos puede aparecer una ventana de dilogo para que confiemos en el proyecto:Aceptamos seleccionando la opcin Trust project y entonces se importar el proyecto, al detectar que est hecho en Gradle se utilizar el archivo correspondiente para hacer el build. Te recomendamos que actives el check para que IntelliJ confe en todos los proyectos que te descargs en la carpeta raz de la materia.Si necesitamos movernos a otra rama, eso se puede hacer mediante la opcin Git &amp;gt; Branches y seleccionando la rama que quieras + Checkout. Tambin tens la opcin de hacer click sobre la rama que se muestra en la parte inferior del IDE:Y ya podemos comenzar a trabajar!Links tiles  Cmo trabajar con el control de versiones  Cmo crear un proyecto Kotlin con Gradle  Volver al men principal del entorno Kotlin"

} ,

{

"title"    : "Integración continua para materias con Kotlin",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/kotlin-ci.html",
"date"     : "",
"content"  : "Integracin continua (CI)DefinicinLa integracin continua busca automatizar los cambios en el cdigo que escriben varias personas en un proyecto de software. De esa manera  facilita la experiencia de descargarse un proyecto y hacerlo funcionar localmente en nuestras mquinas  permite la deteccin temprana de errores, cuando es ms fcil resolverlos.Qu necesitamos para implementarla en nuestro proyectoPara poder implementar la integracin continua, necesitamos  la comunicacin entre las personas que desarrollan en el proyecto (es importante que se hablen entre ustedes)  un servidor de integracin continua: Github Actions, CircleCI, Jenkins, etc.  configurar nuestro proyecto contra ese servidor: eso puede involucrar uno o ms archivos  una herramienta de versionado: git, Mercurial, etc.  y sobre todo, una buena calidad de tests automatizadosEstrategia propuesta para proyectos con KotlinA continuacin vamos a describir los pasos necesarios para que tu proyecto Kotlin tenga integracin continuaServidor de integracin continuaEl servidor de integracin continua ser el que provee Github, y tiene las ventajas de estar integrado a tu repositorio y no tener que hacer nada para activarlo. Pods navegarlo en la solapa Actions:Configuracin del CI en el proyectoCopiate este archivo en la siguiente estructura que hay que crear&amp;lt;directorio raz&amp;gt;.githubworkflowsbuild.ymlQu pasa entoncesA partir de aqu, cada vez que  hagas un push en las branches main o master  crees un PR que quiera mergear a main o master o hagas un push a esa ramaGithub Actions automticamente har lo siguiente:  clonar tu repositorio  lo compilar (build) en Kotlin mediante el script de Gradle  ejecutar los tests  en caso de error, mandar un mail avisando que el build fall (por el momento solo al autor del commit/PR)          si anduvo ok, por defecto no recibirs ninguna notificacin        si es un push directo a la rama principal, actualizar la badge de cobertura de JaCoCo en .github/badges/jacoco.svg  si es un pull request comentar la cobertura actual luego de aplicar los cambios sugeridos (lo vas a ver en la pgina del PR mismo)  finalmente, subir a la descripcin de esta instancia del action un artefacto con un reporte de cobertura generado por JaCoCo en HTML          los artefactos son archivos que github permite almacenar, junto a logs, junto a un intento de build durante un periodo determinado de tiempo (actualmente un mximo de 90 das, tras lo cual son eliminados)      La principal ventaja: al automatizarlo no tendremos que acordarnos de hacerlo. Queda adems registrado si cada commit pasa o no, lo cual nos ayuda a encontrar dnde se origin un error en el cdigo.Agregando el Badge de Build al READMEEl badge es un indicador visual de cmo result el ltimo build, que ubicaremos en el archivo README. Para eso,  ingresamos a nuestro repositorio, solapa Actions,  elegimos cualquiera de los builds  luego a la derecha hacemos click sobre el botn que tiene los tres puntos: ...  en el men contextual elegimos la opcin Create Status Badge, elegimos la rama que queremos y  presionamos el botn de copia.  luego vamos al editor, pegamos el texto en el README y pusheamos al repositorio.Links tiles  Video en youtube que explica cmo es la integracin continua con Kotlin y Github Actions  Volver al men principal del entorno Kotlin"

} ,

{

"title"    : "Kotlin - Cómo generar un proyecto desde cero",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/kotlin-creacion-proyecto.html",
"date"     : "",
"content"  : "Para realizar las prcticas, vas a crear un proyecto desde cero.Crear proyecto KotlinDesde IntelliJ tenemos dos opciones:  sin ningn proyecto abierto, nos aparece un botn New project  o bien si tenemos un proyecto abierto, tenemos que abrir el men File &amp;gt; New &amp;gt; Project...Eso abre la siguiente ventana de dilogo:  El nombre del proyecto no debe contener espacios ni caracteres especiales (IntelliJ te va a avisar)  Todos los ejemplos que vas a descargar de la materia, as como los proyectos en los que vas a trabajar, se basan en la tecnologa Gradle. Asegurate que tengas seleccionada la opcin Gradle en Build System y Kotlin para la opcin Gradle DSL.  Revisamos que la opcin en Project JDK por defecto sea la JDK 21, en caso contrario debemos ir a configurar la versin de Java  Te recomendamos que el group id sea ar.edu.zzzz.xxx donde zzzz sea la universidad y xxx sea la materia que ests cursando. Por ejemplo ar.edu.unsam.algo2 para la materia Algoritmos 2 de UNSAM. Esta opcin est disponible si expands el grupo Advanced settings.  El nombre del artefacto (Artifact ID) es el nombre de tu proyectoCuando finalizamos, se genera un proyecto con un archivo build.gradle.kts, que es fundamental para que IntelliJ lea esas definiciones para el proyecto en otra mquina y descargue las dependencias.Archivo de configuracin de GradleTe dejamos un archivo con las dependencias base para la cursada de Algoritmos 2 (UNSAM) del ao 2025: build.gradle.kts de ejemplo. Luego tendrs que  renombrar el archivo a build.gradle.kts  copiarlo al directorio raz de tu proyecto ya creado  revisar el groupId para ver si es el adecuado  revisar las dependencias para ver si es necesario agregar algn elemento msUna vez que actualicemos ese archivo, desde IntelliJ nos aparecern dos conos para indicarnos que debemos sincronizar las definiciones de Gradle con las de nuestro IDE:Al hacer click automticamente se actualizarn las dependencias. Este proceso es muy importante ya que de otra manera podremos experimentar problemas como imports que no funcionan, o mtodos que no se pueden encontrar (por estar usando versiones diferentes a las que queremos realmente).Continuous integrationPor el momento, lo que necesits es nicamente copiar este archivo en la siguiente estructura que hay que crear&amp;lt;directorio raz&amp;gt;.githubworkflowsbuild.ymlPara ms informacin pods consultar la pgina de integracin continua para proyectos en Kotlin.Primeros pasosVamos a crear nuestra primera clase Perro. Es importante notar que tendremos dos carpetas donde ubicaremos los fuentes:  src/main/kotlin: donde irn las clases  src/test/kotlin: donde irn los testsPor eso, nos ubicamos en src/main/kotlin y con un botn derecho, seleccionaremos New &amp;gt; Kotlin Class/File.Shortcuts de IntelliJA continuacin te dejamos algunas recomendaciones para que tu estada en IntelliJ + Kotlin sea ms feliz:  Cmo era para? Lo mejor es preguntarle al propio IDE, presionando dos veces Shift + Shift. Desde esa ventana de dilogo pods buscar cualquier palabra clave, como New, Save, Run, Select.  Presionar dos veces Ctrl + Ctrl te permite ejecutar cualquier comando vlido desde el componente donde ests ubicado.  Alt + Enter activa sugerencias tanto para errores como para cosas que se pueden mejorar (warnings).Presionando la tecla F2 te pods mover al siguiente lugar del archivo donde hay un error o warning:  Nunca nos olvidemos de que nuestro cdigo tiene que ser entendible para el resto de la humanidad y lo mejor es pedirle al IDE que lo haga mediante Ctrl + Alt + L o bien con Ctrl + Alt + Shift + L (te abre una ventana de dilogo con ms opciones).Tip: si ests trabajando en una distribucin de Linux que utiliza KDE, el shortcut Ctrl + Alt + L es tomado por el sistema como la accin para bloquear la pantalla. Para desactivarlo segu estas instrucciones.La configuracin base se puede definir mediante File &amp;gt; Settings y luego: Editor &amp;gt; Code Style &amp;gt; Kotlin, aunque te recomendamos que dejes los valores por defecto, as como recomendamos que todas las personas tengan la misma configuracin.Por ltimo, dos muy buenas opciones para seleccionar elementos son  Ctrl + Alt + Shift + J: selecciona todas las ocurrencias de un elemento (para renombrarlo existe otro shortcut, Shift + F6)  Alt + J: permite ir seleccionando elementos similares uno por uno.Otros comandos tiles:  Ctrl + D: duplica una lnea  Ctrl + Y: elimina una lneaSi ests trabajando con Mac los shortcuts son diferentes, en ese caso o bien para ms informacin pods ver este artculo.Packages para agrupar cdigo comn  Utilizacin de packages (paquetes). Es una buena prctica agrupar las clases afines en paquetes para organizar semnticamente el cdigo. No hay una gua firme a seguir con respecto a cmo organizar nuestros archivos, ya que suele depender del contexto en el cual estamos trabajando, pero a medida que veas nuestros ejemplos y vayas haciendo las prcticas notars que hay clases que se pueden agrupar en contextos similares. Te dejamos un ejemploproyectohomeregistrationProfile.ktUser.ktsettingsCustomPrivacy.ktDefaultPrivacy.ktPrivacy.ktSetting.ktDe esta manera, logramos mayor granularidad en la organizacin de nuestras clases.Links tiles  Video en youtube que explica cmo crear un proyecto Kotlin desde cero  Cmo trabajar con el control de versiones  Cmo importar un proyecto Kotlin con Gradle  Volver al men principal del entorno Kotlin"

} ,

{

"title"    : "Guia rapida de Kotlin",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/kotlin-guia-rapida.html",
"date"     : "",
"content"  : "La siguiente es una gua de syntactic sugars de Kotlin, algunos de los cuales trabajan conceptos ms profundos que veremos a lo largo de la materia.Definicin de una claseUna clase necesita un nombre, atributos a los cuales referencia y mtodos, definidos mediante el prefijo fun.val ENERGIA_MINIMA = 10class Ave {    var energia = 0    fun volar() { energia = energia - 10 }    fun comer(cuanto: Int) { energia = energia + (cuanto * 2) }    fun esFeliz() = energia &amp;gt; ENERGIA_MINIMA    fun resetearEnergia() { energia = 0 }}Reglas generales para la clase  podemos escribir mltiples clases en un archivo Kotlin  la definicin de la clase se encierra entre llavesAtributos  la variable ENERGIA_MINIMA se define como una constante y es referenciable dentro de cualquier clase que est dentro de ese archivo. Otra variante es definir atributos asociados a una clase especfica (ver companion object), suele usarse como constantes o valores que difcilmente cambien.  la variable energia es una variable de instancia porque cada objeto Ave tiene su propio valor.  las variables tienen un tipo que se infiere en base al valor: en el caso de la energia es un nmero (Int) porque se asocia al valor 0 aunque podemos explicitarla nosotros de la siguiente manera:var energia: Int = 0// la variable energia //    tiene el tipo Int y el valor por defecto 0  Kotlin automticamente define getters y setters para la variable energia (no es necesario hacer nada, mientras no especifiquemos la visibilidad del atributo a privada, de la siguiente manera: private var energia = 0)  La manera de invocar al getter es: objeto.atributo y la manera de invocar al setter es objeto.atributo = valor:pepita.energia = 100    // &amp;lt;-- equivale a pepita.setEnergia(100)pepita.energia          // &amp;lt;-- equivale a pepita.getEnergia()Ojo! si bien parece que estamos accediendo dirctamente a la variable de instancia, no es as. Kotlin simplemente traduce esa sintaxis a la anterior. Es decir que en ambos casos estamos igualmente llamando al getter y al setter. Pueden probar definiendo la variable energia como privada y el IDE mostrar un mensaje de error Cannot access energia: it is private in Ave.Mtodos  respecto a los mtodos, algunos producen efecto (volar y comer) y otros simplemente devuelven un valor (esFeliz).  en el caso de los mtodos con efecto, se delimitan con llaves. Por defecto los mtodos que no devuelven nada no tienen ninguna anotacin de tipo, se dice que son void o Unit.fun volar() { energia = energia - 10 }  los mtodos que solo devuelven valores y tienen una sola lnea se definen con el smbolo =:fun esFeliz() = energia &amp;gt; ENERGIA_MINIMA  tambin es posible definir un mtodo que devuelve un valor mediante las llaves, definiendo una anotacin de tipo para el mtodo:fun esFeliz(): Boolean {     return energia &amp;gt; ENERGIA_MINIMA}En este caso el tipo de retorno del mtodo es Boolean. Si el mtodo tiene varias lneas es necesario utilizar este formato en lugar del =.Referencias variables y valoresEn Kotlin, al igual que muchos otros lenguajes, se diferencian las referencias como  Variables: son referencias que pueden inicializarse apuntando a un objeto, y luego reasignarse a otro:var unString = &quot;Pepito&quot;unString = &quot;Otro String&quot;  Constantes: son referencias que nacen apuntando a un valor y no pueden ser modificadas para apuntar a otro objeto. Seran como constantes.val constante = &quot;Constante&quot;constante = &quot;Otro&quot;  // &amp;lt;----- NO COMPILA !Ojo! no confundir el hecho de que no se pueda modificar la referencia de la mutabilidad/inmutabilidad del objeto al que apunta. Puedo tener un val apuntando a un elemento que s mute.val perro = Perro()perro.nombre(&quot;Juan&quot;)perro = Perro()        // &amp;lt;----- NO COMPILA: no puedo modificar la referenciaperro.nombre(&quot;Carlos&quot;) // &amp;lt;---- SI COMPILA y puedo mutar la referencia nombre de perroCundo debera usar val y cundo varPor defecto defin tus variables como val, a menos de que necesites modificar las referencias. Por ejemplo: la edad de una persona debera poder modificarse, en cuanto al nombre puede ser que no necesites modificarlo o s, eso depender de las reglas de negocio. El motivo principal es acotar el efecto en nuestros programas, mientras menor sea el efecto, ms fcil es controlar nuestro software, y ms fcil ser testearlo.Companion objectKotlin provee la posibilidad de definir un objeto companion dentro de una clase, que es global para todas sus instancias:class Ave {    companion object {        var ENERGIA_MINIMA = 100        fun subirEnergiaMinima(cuanto: Int) { ENERGIA_MINIMA += cuanto }        fun crear() = Ave()    }    var energia = 0    fun esFeliz() = energia &amp;gt; ENERGIA_MINIMA    ...  en lugar de definir la referencia ENERGIA_MINIMA como constante por fuera de la clase, la asociamos al companion object  para manipular la energa mnima (como por ejemplo para subirla o bajarla en base a un valor), debemos hacerlo tambin dentro del companion  y tambin ofrecemos un mtodo para crear un Ave, que por el momento solamente hace Ave(), pero el mecanismo de instanciacin podra tornarse ms complejo y el companion object es adecuado para tal fin.Todo lo que definimos en el companion object es accesible para atributos y mtodos de instancia (como por ejemplo el mtodo esFeliz). Desde otra clase, podemos invocar a la funcin que crea un ave de la siguiente manera:val ave = Ave.crear()Objetos singletonKotlin provee la capacidad de definir objetos:object Pepita {    var energia = 100    fun volar(minutos: Int) {        energia -= minutos * 2 + 10    }    fun comer(gramos: Int) {        energia += gramos * 4    }}fun main() {    Pepita.energia = 150    Pepita.volar(5)    Pepita.comer(2)    System.out.println(&quot;La energia de pepita es ${Pepita.energia}&quot;)  // &quot;La energia de pepita es 88&quot;}Pepita es una instancia que se puede acceder globalmente, representa una implementacin thread safe del Singleton que es ms trabajosa de implementar en Java (pods investigar ms en este artculo). Si trabajaste en Wollok (o Scala) el concepto es exactamente similar, solo que el nombre debe comenzar con mayscula.Tipos de datosStringsUn string se encierra entre dobles comillas, o bien podemos aprovechar para escribir un texto largo con triples comillas dobles (lo que nos permite incluso utilizar enters). Podemos interpolar referencias de Kotlin mediante $ o bien utilizar cdigo ejecutable usando ${zzz} donde zzz es cdigo Kotlin.class Cliente {    var nombre = &quot;Juan&quot; // string simple    fun saludo() = &quot;Hola $nombre&quot; // string simple interpolando una referencia    fun otroSaludo() = &quot;Hola ${nombre.uppercase()}&quot; // interpolamos una expresin        // string con mltiples lneas interpolando cdigo Kotlin    fun saludoFormal() =        &quot;&quot;&quot;        Bienvenido, ${nombre.trim()} a nuestra aplicacin.        En breve nos contactaremos con ud.        &quot;&quot;&quot;}NmerosExisten muchos tipos de datos diferentes para nmeros:  Int: es un nmero entero que admite negativos pero sin decimales  Double, Float: son nmeros reales que admiten decimales pero con errores en las operaciones, es por ello que no debemos usarlo para operaciones sensibles (como transacciones bancarias o que requieran clculos exactos). Por qu? Por este cdigo que pods probar en este REPLfun main() {    val a: Double = 0.02    val b: Double = 0.03    val c: Double = b - a    System.out.println(c)  // 0.009999999999999998}  BigDecimal: es el tipo de dato que conviene utilizar ya que no produce errores de redondeo (permite trabajar con una cantidad exacta de decimales y truncarlos o redondearlos en caso de ser necesario)import java.math.BigDecimalfun main() {    val a: BigDecimal = BigDecimal(&quot;0.02&quot;)    val b: BigDecimal = BigDecimal(&quot;0.03&quot;)    val c: BigDecimal = b - a    System.out.println(c)    // 0.01}Tanto Int, como Double como BigDecimal representan objetos a los que pods enviarle mensajes:fun main() {    val numero: Double = 10.0    System.out.println(numero.inc())   // 11.0    System.out.println(numero.rem(3))  // 1.0}Para ms informacin pueden ver esta pgina.Colecciones mutables e inmutablesEn Kotlin, todas las colecciones vienen en dos sabores: mutables e inmutables. Las primeras soportan modificar sus elementos (agregar, quitar, actualizar), mientras que las segundas solo permiten acceder a sus elementos. Queda a criterio de quien programa cul utilizar en cada caso, prefiriendo desde este espacio las inmutables (porque algo que no se puede modificar es menos propenso a errores).Existen literales para definir listas, conjuntos y mapas (dictionaries):fun main() {    // Lista inmutable    val myList = listOf(&quot;Hello&quot;, &quot;World&quot;)    myList.size    // ERROR, no puedo agregar un elemento a una lista inmutable    //  myList.add(&quot;Goodbye&quot;)        // Lista mutable    val myMutableList = mutableListOf(&quot;Hello&quot;, &quot;World&quot;)    myMutableList.add(&quot;Goodbye&quot;)    System.out.println(&quot;${myMutableList[1]}&quot;)  // &quot;World&quot;    // Set inmutable    val mySet = setOf(&quot;Hello&quot;, &quot;World&quot;)    // ERROR, no puedo agregar un elemento a un set inmutable    //  mySet.add(&quot;Goodbye&quot;)    // Set mutable    val myMutableSet = mutableSetOf(&quot;Hello&quot;, &quot;World&quot;)    myMutableSet.add(&quot;Goodbye&quot;)    myMutableSet.add(&quot;Hello&quot;)  // no tiene efecto porque ya hay un elemento &quot;Hello&quot;    System.out.println(&quot;${myMutableSet.size}&quot;)  // 3    // Mapa/Diccionario inmutable    val myMap = mapOf(&quot;a&quot; to 1 , &quot;b&quot; to 2)    // ERROR, no puedo agregar un elemento a un set inmutable    //  myMap.set(&quot;c&quot;, 3)        val myMutableMap = mutableMapOf(&quot;a&quot; to 1 , &quot;b&quot; to 2)    myMutableMap.set(&quot;c&quot;, 3)    System.out.println(&quot;${myMutableMap.size}&quot;)  // 3}Recordemos que  listas: respetan el orden en el que se agregan (como una fila) y admiten duplicados.  conjuntos: no tienen orden y tampoco admiten duplicados. Dos objetos son iguales en base a la definicin de equals() y hashCode().  mapas: son un conjunto de pares clave/valor. Se acceden por clave.  Ojo : no hay que mezclar las ideas de val y var con la (in)mutabilidad de las colecciones. Por ejemplo, una coleccin inmutable podra estar referenciada con var, mientras que una mutable podra ser val.Para ms informacin recomendamos leer  el apunte de la materia sobre Colecciones  la pgina oficial de Kotlin sobre colecciones.Rangos con arraysEs posible generar un rango de nmeros:// Array de enteros con valores [0, 0, 0, 0, 0]val arrZeros = IntArray(5)// Array de enteros de tamao 5 con valores [42, 42, 42, 42, 42]val arrConstants = IntArray(5) { 42 }// Podemos utilizar una lambda para inicializar un array: [0, 1, 2, 3, 4]var arrLambda = IntArray(5) { it }// ... o [1, 2, 3, 4, 5]var arrLambda = IntArray(5) { it + 1 }Ms abajo explicamos definicin de bloques o lambdas.Inferencia de tiposKotlin cuenta con inferencia de tipos, lo que permite  que exista chequeo de tipos  pero que muchas veces no sea necesario definir los tipos de las expresionesVemos un ejemplo en vivo, mostrando cmo cambia la solapa Structure (disponible mediante Alt+ 7) cuando modificamos el cdigo:Volviendo a la inferencia de tipos, es fundamental poder contar con un lenguaje que tenga chequeo de tipos para detectar errores en forma temprana pero que no me obligue a definir los tipos todo el tiempo. La definicin de tipos es obligatoria cuando la definicin pueda resultar ambigua para Kotlin, por ejemplo cuando definas un mtodo que retorna un valor pero no lo anotes en la definicin:fun resetearEnergia() {    energia = 0    return true   // ERROR: la definicin del mtodo conflicta con este return}En ese caso el IDE te mostrar un error y lo pods solucionar fcilmente indicando el tipo del valor a retornar (o bien eliminando la instruccin return):Instanciacin y constructoresInstanciacin por defectoPara instanciar un objeto, Kotlin no utiliza la palabra new, simplemente se invoca mediante el nombre de la clase y parntesis:class Entrenador {    val ave = Ave()Definiendo constructoresAdicionalmente, podemos definir parmetros en la construccin de una clase (lo que en otros lenguajes se conoce como constructor):class Ave(var energia: Int = 0) {    ...}El valor por defecto indica que podemos crear un ave sin pasar parmetros, en cuyo caso el valor de su energa ser 0:val pepita = Ave() // un ave con energia = 0Pero tambin podemos pasar un valor:val pepita = Ave(energia = 150) // un ave con energia = 150Si en cambio no definimos un valor por defecto para energiaclass Ave(var energia: Int) {    ...es obligatorio pasarle un valor para energa:val ave = Ave()              // ERROR: No value passed for parameter &#39;energia&#39;val ave = Ave(energia = 200) // OKConstructores secundariosPor lo general solo es necesario definir un constructor por defecto, pero en caso de que lo necesites te dejamos este artculo que explica cmo escribir constructores secundarios.Herencia y redefinicin de mtodosA continuacin vemos cmo definir Golondrina como subclase de Ave.open class Ave() {    ...    open fun esFeliz() = energia &amp;lt; ENERGIA_MINIMA}class Golondrina : Ave() {    override fun esFeliz() = true}Aqu vemos que  Golondrina hereda de Ave, indicado mediante el smbolo :  Golondrina debe llamar al constructor de Ave, que al no tener parmetros se indica por el momento con parntesis vacos: class Golondrina : Ave()  Golondrina redefine el comportamiento de esFeliz, lo pisa, y esto requiere la palabra clave override, de lo contrario el IDE mostrar un mensaje de error  Para que una clase pueda subclasificarse Kotlin obliga a utilizar la palabra clave open. Una segunda variante es que la clase sea abstracta en cuyo caso automticamente es abierta.  La misma operatoria debe seguir un mtodo: debe marcarse con la palabra clave open (como en el caso esFeliz) para poder redefinirse en las subclases, a menos de que el mtodo sea abstracto. Esto es un poco burocrtico y extrao para el objetivo general que suele tener Kotlin, pero por el momento es as.Torcaza: This y superSi queremos definir una clase Torcaza que redefina el comportamiento de volar pero que adems delegue el comportamiento en la superclase, debemos utilizar la palabra clave super junto con el mensaje a enviar:class Torcaza : Ave() {    var vecesQueVolo = 0    override fun volar() {        super.volar()        vecesQueVolo++    } }Como regla general solo deben utilizar super cuando no puedan utilizar this, como en este caso: de lo contrario entraran en loop infinito si invocaran a this.volar().Constructores delegadosSi la clase Ave se definiera de la siguiente manera:open class Ave(var energia: Int = 0) {eso no producira ningn cambio en las definiciones de Golondrina y Torcaza ya que en cada invocacin tomara el valor por defecto de energa:class Torcaza : Ave() { // considera energia = 0Ahora bien, si la definicin del constructor en Ave no tuviera valor por defecto:open class Ave(var energia: Int) {Entonces es necesario redefinir el constructor por defecto para Golondrina y Torcaza y pasarle ese valor al constructor de Ave. Esto se hace de la siguiente manera:class Golondrina(energia: Int) : Ave(energia) {Si bien esto puede convertirse en algo tedioso, veremos que el IDE nos simplifica bastante esta tarea, utilizando Alt + Enter para aceptar la sugerencia:Clases y mtodos abstractosPodemos definir a Ave como clase abstracta, esto producir que no podamos instanciar objetos Ave. Una clase abstracta puede definir solo la interfaz de un mtodo, lo que se conoce como mtodo abstracto. Veamos el siguiente ejemplo:En el ejemplo:  primero definimos Ave como abstracta  eso provoca que el compilador tire un error cuando queremos instanciar un Ave en la clase Ornitologo  lo corregimos instanciando una Golondrina  luego, queremos definir un mtodo abstracto: esFeliz. Para ello reemplazamos la definicin por una cscara que solo dice que esFeliz debe devolver un booleano. Dado que no hay cdigo Kotlin nos fuerza a definir el tipo de retorno del mtodo (y de sus parmetros) porque no puede inferirlo.  todos los mtodos abstractos deben estar implementados en las subclases: el compilador nos avisa que falta la definicin de esFeliz() en Torcaza. Con un botn derecho Implement members pegamos la definicin copiada.y finalmente todo compila.Te dejamos el cdigo completo:val ENERGIA_MINIMA = 10abstract class Ave(var energia: Int) {    open fun volar() { energia = energia - 10 }    fun comer(cuanto: Int) { energia = energia + (cuanto * 2) }    abstract fun esFeliz(): Boolean    fun resetearEnergia() { energia = 0 }}class Golondrina(energia: Int) : Ave(energia) {    override fun esFeliz() = true}class Torcaza(energia: Int) : Ave(energia) {    var vecesQueVolo = 0    override fun volar() {        super.volar()        vecesQueVolo++    }    override fun esFeliz() = energia &amp;lt; ENERGIA_MINIMA}class Ornitologo {    fun trabajar() {        val ave = Golondrina(energia = 100)        ave.comer(2)        ave.volar()    }}InterfacesLas interfaces son un mecanismo que permite definir un contrato, provisto por una serie de mtodos que pueden o no estar definidos. Por ejemplo, veamos la interfaz Flying que expresa el contrato para cualquier elemento que sepa volar:interface Flying {    fun isHappy(): Boolean    fun fly()}Esto implica que cualquier definicin que implemente la interfaz Flying debe poder responder a esos dos mensajes: isHappy() y fly(). Por ejemplo, la clase Bird, donde el smbolo : sirve tanto para marcar herencia como implementacin:interface Flying {    fun fly()    fun isHappy(): Boolean}// clase Bird implementa Flyingclass Bird(var energy: Int = 100) : Flying {    fun eat(howMuch: Int) { energy = energy + (howMuch * 2) }    fun resetEnergy() { energy = 0 }    override fun fly() { energy = energy - 10 }    override fun isHappy() = energy &amp;gt; MIN_ENERGY}Cada mtodo implementado debe anotarse con el prefijo override para indicar que est implementando los mtodos que le pide su interfaz.Por qu Flying no se define como clase abstracta? Podramos, pero mientras que una clase solo tiene una superclase puede implementar varias interfaces a la vez. Supongamos que ahora definimos la interfaz Living para representar seres vivos:interface Living {    var energy: Int    fun eat(howMuch: Int)}Living define un atributo sin ningn valor concreto, ya que no puede definir un estado, a diferencia de la clase abstracta. Ahora Bird puede implementar ambas interfaces, para lo cual tiene que indicar que va a redefinir el atributo energy y todos los mtodos abstractos requeridos por las interfaces Flying y Living:// clase Bird implementa las interfaces Flying y Livingclass Bird(override var energy: Int = 100) : Flying, Living {    override fun eat(howMuch: Int) { energy = energy + (howMuch * 2) }    fun resetEnergy() { energy = 0 }    override fun fly() { energy = energy - 10 }    override fun isHappy() = energy &amp;gt; MIN_ENERGY}Por ltimo, las interfaces permiten definir implementaciones para los mtodos, como podemos ver en este ejemplo completo:val MIN_ENERGY = 100interface Flying {    fun fly()    fun isHappy(): Boolean    fun canFly() = !isHappy()}interface Living {    var energy: Int    fun eat(howMuch: Int) { energy = energy + (howMuch * 2) }    fun resetEnergy() { energy = 0 }}class Bird(override var energy: Int = 100) : Flying, Living {    override fun fly() { energy = energy - 10 }    override fun isHappy() = energy &amp;gt; MIN_ENERGY}Aqu vemos que cuando le preguntemos a un pjaro si puede volar, la definicin la tomar de la implementacin de Flying. Por otra parte cuando le pidamos a un pjaro que coma, lo har en base a la definicin de la interfaz Living. De todas maneras hay que estar seguro de que vamos a reutilizar en ms de un lugar cada una de nuestras definiciones para no caer en el sobrediseo.  TIP: A la hora de reutilizar, una interface nos permite tomar definiciones de mltiples lugares aunque no permite definir un estado mientras que una superclase abstracta nos permite definir una sola vez nuestros atributos aunque solo podemos tener una superclase.BloquesUn bloque permite definir una porcin de cdigo, tambin llamada expresin lambda:val cuadrado = { num: Double -&amp;gt; num.pow(2) }cuadrado.invoke(5.0)  // 25En este caso cuadrado es un bloque que recibe como parmetro un nmero con decimales y devuelve el cuadrado de dicho nmero. Si queremos definir el tipo de dato de cuadrado podemos:val cuadrado: (Double) -&amp;gt; Double = { num: Double -&amp;gt; num.pow(2) }cuadrado.invoke(5.0)  // 25En general un bloque en Kotlin tiene la siguiente sintaxis:{ parametro: Tipo, parametro2: Tipo2 -&amp;gt; expresin a resolver }De esta manera podemos enviar bloques como parmetros, algo muy til para trabajar entre otras cosas con las colecciones (map, filter, fold, etc.)Variable implcita itDentro de una expresin lambda, it es la variable implcita del primer parmetro, por lo tanto todas estas expresiones son equivalentes:System.out.println(alumnos.filter { alumno: Alumno -&amp;gt; alumno.estudioso() })System.out.println(alumnos.filter { it.estudioso() })Para ms informacin pueden consultar la pgina oficial de lambdas de Kotlin.Manejo de nulls100 veces no deboLos valores nulos son siempre un dolor de cabeza, Kotlin es uno de los primeros lenguajes orientados a objetos que nace con una estrategia para mitigarlos. En principio una referencia definida como String o Int no acepta valores nulos.Ok, entonces podramos pensar que una solucin es sacar el null explcito, y si como dijo Ivn Noble algunos errores son deliciosos, sin dudas uno es ste:Debemos inicializar la referencia, exacto! porque de otra manera lo que pasa es que arrastramos un String que puede ser null por todo nuestro cdigo, solo por no tomar la decisin de que ese valor nunca puede ser nulo.LateinitUna variante para resolver el problema es definir el atributo como lateinit:class Persona {    lateinit var nombre: String    fun tieneNombreLargo() = nombre.length &amp;gt; 10}El efecto que provoca es que Kotlin confa en que nosotros vamos a definir siempre un valor para el nombre de cada persona antes de utilizarlo. Por ejemplo:fun main() {    val pepe = Persona()    pepe.nombre = &quot;Pepe&quot;    System.out.println(pepe.tieneNombreLargo())  // false}Y no hay ningn inconveniente. Qu pasa si en cambio probamos con esta variante?fun main() {    val pepe = Persona()    System.out.println(pepe.tieneNombreLargo())}Kotlin se va a quejar de que nosotros le dijimos quedate tranquilo que yo me ocupo del nombre y result que el nombre qued sin inicializar:Exception in thread &quot;main&quot; kotlin.UninitializedPropertyAccessException: lateinit property nombre has not been initialized at Persona.getNombre (File.kt:2)  at Persona.tieneNombreLargo (File.kt:3)  at FileKt.main (File.kt:8)Ms adelante, cuando trabajemos con algunos frameworks como Spring, veremos que el modificador lateinit nos va a ser de mucha utilidad. Mientras tanto, cuando nosotros controlamos la inicializacin de las referencias para cada objeto, la mejor estrategia es definir un valor no-nulo por defecto:class Persona {    var nombre: String = &quot;&quot;    fun tieneNombreLargo() = nombre.length &amp;gt; 10}Valores que aceptan nullPara aceptar valores null todos los tipos deben incorporar el sufijo ?, por ejemplo String?, Int?, etc.class Persona {    var nombre: String? = null    ...El inconveniente es que para saber si una persona tiene nombre largo, tenemos que considerar ahora si tiene un nombre nulo:Operador !!Una opcin es utilizar el operador !! sobre nombre, que implica nuevamente confiar en que el nombre no va a ser nulo:fun tieneNombreLargo() = nombre!!.length &amp;gt; 10Esto implica que anulamos la validacin y nos puede pasar lo mismo que en otros lenguajes como Java: al enviar un mensaje a una referencia nula el programa explota en tiempo de ejecucin.Exception in thread &quot;main&quot; java.lang.NullPointerException at Persona.tieneNombreLargo (File.kt:3)  at FileKt.main (File.kt:8)  at FileKt.main (File.kt:-1) Elvis operatorParece un emoticn, pero ?: es un shortcut para utilizar un valor por defecto cuando una expresin pueda ser nula:fun tieneNombreLargo() = (nombre ?: &quot;&quot;).length &amp;gt; 10En este caso, si la referencia nombre no est inicializada, se toma en cuenta la segunda expresin (el string vaco).Null safe operatorTambin podemos resolver envos de mensajes a referencias que potencialmente podran ser nulas:class Alumno(var nombre: String = &quot;&quot;) {    fun estudioso() = ...    fun felicitar() { ... }}fun main() {    val alumnos = listOf(Alumno(nombre = &quot;Valar&quot;), Alumno(nombre = &quot;Arya&quot;))    val estudioso = alumnos.find { it.estudioso() }    System.out.println(estudioso?.nombre) // null    estudioso?.felicitar()}Si estamos buscando informacin del primer alumne estudiose (o de algune) enviando el mensaje find a la coleccin puede pasar que la bsqueda no encuentre ningn elemento. En ese caso el operador ?. es equivalente a escribir:val estudioso = alumnos.find { it.estudioso() }System.out.println(if (estudioso === null) null else estudioso.nombre) // nullif (estudioso !== null) {    estudioso.felicitar()}pero como vemos es bastante menos tedioso de escribir. De todas maneras cuando sea posible es una buena prctica evitar la manipulacin de tipos de datos con valores nulos, porque no siempre se puede resolver mgicamente con un ? cualquier operacin:Entonces el consejo que te dejamos es solo dejar valores que acepten nulls cuando el negocio realmente lo necesite. Por ejemplo: si un perro puede tener dueo o no, entonces el atributo puede ser nullable.Comparar referenciasTenemos dos formas de comparar referencias en Kotlin:  Igualdad referencial: definido por el operador ===. ref1 === ref2 si ambas referencias apuntan al mismo objeto. Esto lo determina la VM y no se puede cambiar.  Igualdad estructural: definido por el operador ==. ref1 == ref2 en base a la definicin del mtodo equals() en la clase a la que pertenece ref1.Tener especial atencin a los strings, ya que dos strings con el mismo contenido pueden ser iguales pero no idnticos, dependiendo de las estrategias de optimizacin de la VM. Vemos un ejemplo ilustrativo:fun main() {    val nombre = &quot;Ernesto&quot;    val nombre2 = &quot;Ernesto &quot;.trim()    System.out.println(nombre == nombre2)   // true, tienen el mismo contenido    System.out.println(nombre === nombre2)  // false, no son el mismo objeto}  Tip: Siempre es conveniente utilizar ==, que adems se puede redefinir en nuestras clases / objetos.Features avanzadosExtension methodsUna de las herramientas ms poderosas consiste en definir extension methods. Supongamos que un negocio tiene un horario de apertura y de cierre y queremos saber, dada una hora, si est abierto.class Negocio {    var horarioApertura: Int = 9    var horarioCierre: Int = 18    fun estaAbierto(horaActual: Int) =        horaActual.between(horarioApertura, horarioCierre)}Por supuesto, no compila. No existe el mtodo between asociado a los enteros. Pero podemos definir un extension method en cualquier archivo:fun Int.between(from: Int, to: Int) = this in from..toSi definiste la extensin en otro paquete, lo imports como cualquier otra definicin:package otroPackageimport betweenclass Negocio {    ...En resumen, un extension method permite que nosotros agreguemos comportamiento por afuera de la definicin de una clase como si estuviramos trabajando en ella, algo muy importante cuando la clase no podemos modificarla (como en el caso de Int, String), o bien cuando se est regenerando todo el tiempo (cuando tenemos un framework que genera cdigo para nosotros), sin contar que adems estamos respetando la idea de mensaje (y por consiguiente, la posibilidad de seguir trabajando con polimorfismo).Data classesKotlin provee el concepto de Data class para definir clases que sirven para modelar valores (value objects):data class Point(val x: Int, val y: Int) {    // ... definiciones adicionales ...}fun main() {    val punto = Point(2, 4)    System.out.println(punto.x)               // 2    System.out.println(punto)                 // Point(x=2, y=4)    System.out.println(punto == Point(2, 4))  // true}Aqu vemos que el data class Point  define un constructor con dos parmetros que a su vez definen las variables x e y  los getters para x e y existen automticamente  como x e y son val esto hace que nuestro objeto Point sea inmutable, si sumamos dos puntos obtenemos un nuevo punto (como pasa al concatenar los strings hola y mundo donde se obtiene un nuevo string holamundo o al sumar 2 + 3 el resultado es un nuevo nmero 5)  si definimos x (o y) como var, Kotlin le agrega los setters correspondientes  el mtodo toString de un data class que crea Kotlin es muy conveniente, permite mostrar tanto la clase como su estado interno (a comparacin del toString por defecto que tiene Object que muestra solo el nombre de la clase y un nmero interno en formato hexadecimal)  y por ltimo tambin redefine el mtodo equals de manera de utilizar igualdad estructural: dos puntos son iguales si tienen la misma informacin, porque cuando modelamos value objects es frecuente crear objetos para representar ciertos datos y despus se descartan  Tip: qu objetos son candidatos a modelarse con data class: un Mail, un domicilio, en general cuando estamos agrupando informacin que est junta pero que no es especfica de un dominio, la identidad no es importante como pasa cuando definimos objetos cliente, producto, etc.Operadores para procesar mltiples envos de mensajesOtro syntactic sugar muy interesante de Kotlin es la posibilidad de enviar mltiples mensajes al mismo objeto, mediante varios operadores:  apply  let  with  run  alsoval ventaNacional = Venta().apply {    cantidadKilos = 12    fechaVenta = LocalDate.now()    parcela = parcela50    comprador = CompradorNacional()}De esta manera, todos los mensajes se apuntan al objeto que resulta de evaluar la expresin Venta(), y simplifica el envo de mensajes:ventaNacional.cantidadKilos = 12ventaNacional.fechaVenta = LocalDate.now()ventaNacional....Otras variantesLas scope functions let, also, run y with son similares pero tienen ligeras variaciones para lo que sea ms conveniente en cada caso:LetEl valor que le pasamos como parmetro se referencia como it y lo que devuelve es el resultado de toda la operacin:Venta().let { it.cantidadKilos * it.parcela.tamanio } // devuelve un nmeroWithEl valor que le pasamos como parmetro se referencia como this y lo que devuelve es el resultado de toda la operacin. Tambin es til para trabajar el ejemplo original de la creacin de una venta diciendo a este objeto enviale estos mensajes:val ventaNacional = Venta()with(ventaNacional) {    cantidadKilos = 12    fechaVenta = LocalDate.now()    parcela = parcela50    comprador = CompradorNacional()}Para ms informacin (como las scope functions run y also) pueden ver este artculoLinks relacionados  Colecciones  Intro a manejo de errores con excepciones  Ejercicio del Monedero para ver cmo interactan la UI y el dominio a partir de errores del dominio y del sistema  TestingLinks tiles  Volver al men principal del entorno Kotlin"

} ,

{

"title"    : "Kotlin - Preparacion del entorno de desarrollo",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/kotlin-preparacion-de-un-entorno-de-desarrollo.html",
"date"     : "",
"content"  : "Instalacin baseGit Bash (slo para Windows)Para simplificar el uso de Git en entornos Windows, existe la herramienta Git Bash que pods descargar a partir de esta pgina, haciendo click en el link Download.Si ests en Mac o Linux, pods saltear este paso.JDK: Java Development KitPrimero instalaremos el compilador de Java.Ingresamos a una de las siguientes direcciones, y descargamos la JDK 21, que es la versin que manejamos desde 2024:  (Recomendado) Adoptium Eclipse Temurin - JDK provisto por la Fundacin Eclipse, y con apoyo activo al proyecto de parte de multiples compaas como Microsoft y RedHat (entre otras).  Amazon Corretto - Otra variante de JDK distribuida (y con soporte a largo plazo) por parte de Amazon. Si bien se encuentra optimizada para sus sistemas de AWS (Amazon Web Services), es una alternativa que funciona sin inconvenientes en sistemas tradicionales, para los que ofrece descargas.Pasos de instalacinUna vez descargado el binario en una carpeta (supongamos que es C:&amp;#92;jdk21), hay que configurar dos variables de entorno de tu sistema operativo:  JAVA_HOME: tiene que apuntar a C:&amp;#92;jdk21)  PATH: hay que incorporarle C:&amp;#92;jdk21&amp;#92;bin (cuidando de no borrar lo que ya est)Te dejamos un video que explica cmo hacerlo para Windows (el procedimiento es similar para MacOS / Linux)Chequeos posteriores a la instalacin  Dentro de las variables de entorno de tu sistema operativo debe estar JAVA_HOME asignada. En Linux / Mac esto es env | grep JAVA_HOME, y en Windows SET JAVA_HOME. Si la variable no est seteada, eso significa que te salteaste un paso, lo mismo si la carpeta que muestra JAVA_HOME no es la que contiene la versin que vos descargaste. En ese caso volv al punto anterior y segu nuevamente las instrucciones para encontrar lo que est faltando.  En una ventana de lnea de comandos, verificar la versin de java instalada con java -version, y el compilador mediante javac -version. En ambos casos mostrar la versin por defecto para tu mquina. Si no aparece la versin que descargaste, el sistema operativo asume por defecto otra instalacin, que podra ser incluso de una JRE (ver ms abajo). En ese caso, revis el link del punto anterior para ver qu puede estar faltando y repet los pasos.JDK s, JRE no  IMPORTANTE: tens que instalar una JDK, no una JRE (Java Runtime Environment) que solo te permite ejecutar programas Java ya compilados. Para saber si tens una JDK, deberas ir al directorio de instalacin y en la carpeta bin debe estar un programa llamado javac, que es el compilador de Java.Si no tens ese programa, no vas a poder pasar tus objetos a cdigo ejecutable en el entorno Kotlin: la solucin es muy simple, descarg e instal una JDK. Para ms informacin te recomendamos esta pginaIntelliJ IDEANuestro entorno integrado de desarrollo (IDE) permite que en una misma herramienta editemos nuestro cdigo fuente, compilemos, hagamos pruebas, y muchas cosas ms. En Algoritmos 1 ya conociste otro IDE: Eclipse, modificado especialmente para soportar el lenguaje Wollok. Aqu utilizaremos IntelliJ IDEA que tiene muchas similitudes con Eclipse.Pasos de instalacinTens que descargarlo desde esta pgina y te va a ofrecer dos opciones:  Ultimate: es la versin que recomendamos, para obtener una licencia pods enviar una solicitud con tu cuenta de UNSAM (debe terminar en @unsam.edu.ar ya que de esa manera se comprueba el origen educativo de la cuenta) siguiendo los pasos que cuenta esta pgina.  Community: es la versin open-source que no tiene disponibles los plugins para Spring, herramienta que vemos en Algoritmos 3 y Programacin con Herramientas Modernas.Chequeos de instalacinUna vez que te descargaste el instalable, solo tens que  elegir la ruta donde va a quedar el ejecutable (pods dejar la que te ofrece el instalador)  chequear la opcin para que te aparezca el link al ejecutable IntelliJ (64-bit launcher)  las otras opciones no son necesarias activarlasy finalmente presionar Next hasta terminar el asistente.Necesitars definir un espacio de trabajo o workspace, que es la carpeta donde vas a ubicar todos tus proyectos. Por defecto ese directorio es ~/IdeaProjects donde ~ es tu carpeta personal (como C:&amp;#92;Users&amp;#92;fernando o /home/fernando).Configuraciones adicionalesPor lo general no es necesario hacer nada ms, solo en algunos casos en los que notes que funciona lento, pods configurar el tamao de memoria de la Virtual Machine de Java mediante el men Help &amp;gt; Custom VM Options. Esto abre un archivo de texto similar al siguiente-Xms128m-Xmx2048m-XX:ReservedCodeCacheSize=512m-XX:+UseConcMarkSweepGC-XX:SoftRefLRUPolicyMSPerMB=50-XX:CICompilerCount=2-XX:+HeapDumpOnOutOfMemoryError-XX:-OmitStackTraceInFastThrow-ea-Dsun.io.useCanonCaches=false-Djdk.http.auth.tunneling.disabledSchemes=&quot;&quot;-Djdk.attach.allowAttachSelf=true-Djdk.module.illegalAccess.silent=true-Dkotlinx.coroutines.debug=off-Dsun.tools.attach.tmp.only=trueLos parmetros que tens que revisar son:  la memoria inicial con la que levanta IntelliJ: Xms  la memoria mxima que puede ser utilizada para IntelliJ, que corre en una Virtual Machine de Java propia: Xmx. Por defecto viene con 2GB y para las necesidades de la materia no deberas tener que subirlo, pero en todo caso charlalo con tu docente favorito.          Este parmetro especfico puede alterarse ms sencillamente mediante el men Help &amp;gt; Change Memory Settings      Para ms informacin pods chequear esta pgina.Plugin KotestSolo necesitamos agregar un plugin para ejecutar los tests unitarios: Kotest. Para instalarlo pods ir a esta pgina y clickear el botn Install to IntelliJ xxx donde xxx es la versin ms reciente que hayas instalado.Alternativamente se puede instalar abriendo el men File &amp;gt; Settings, abriendo la seccin Plugins &amp;gt; Marketplace y buscando Kotest all.Plugins de temas (Themes)Si te interesa configurar un tema de tu inters, pods buscar plugins que contengan la palabra Theme en el Marketplace, como se describe en esta pgina. Luego podrs seleccionar el tema de tu preferencia.InlaysEn versiones recientes puede ser que te aparezca un inlay que muestra informacin sobre los autores del cdigo en el repositorio que ests trabajando, algo que puede resultar un poco molesto. Para deshabilitarlo, pods seguir los pasos que se explican a continuacin: Settings -&amp;gt; Editor -&amp;gt; Inlay Hints -&amp;gt; Code vision y desactivar la opcin Code author. Luego cerr los archivos que tengas abierto y volvelos a abrir nuevamente.Actualizaciones automticasUna vez instalado IntelliJ, el sistema te avisa cuando hay actualizaciones. Nuestra recomendacin es que esperes para instalarlo a que finalice el cuatrimestre a menos de que ests teniendo un problema serio para trabajar en tu entorno y sepas que la actualizacin lo resuelve.Links tiles  Siguiente paso: Creacin de un proyecto en Kotlin  Volver al men principal del entorno Kotlin"

} ,

{

"title"    : "Kotlin - pagina principal",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/kotlin-principal.html",
"date"     : "",
"content"  : "A continuacin te vamos a dejar los pasos de instalacin del entorno Kotlin para las materias Algoritmos 2, Algoritmos 3 y Programacin con Herramientas Modernas. Segu metdicamente los puntos y no saltees las verificaciones para asegurarte que en tu mquina tengas todas las herramientas necesarias para trabajar.  Instalacin del entorno base  Recomendaciones para trabajar en la materia          Cmo generar un proyecto Kotlin nuevo      Cmo importar un proyecto Kotlin con Gradle desde Github      Cmo testear con Kotest      Sobre el control de versiones      Gua de Gradle      Integracin continua en proyectos Kotlin        Ayudas para manejarte con el lenguaje          Gua rpida de Kotlin      Colecciones      Intro a manejo de errores con excepciones      Testing avanzado      "

} ,

{

"title"    : "Lambdas en java 8",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/lambdas-en-java-8.html",
"date"     : "",
"content"  : "En la versin 8 del lenguaje Java se introduce una herramienta fundamental para cualquier lenguaje de programacin orientado a objetos y que era una de sus principales falencias: las expresiones lambda, tambin conocidas como bloques de cdigo o funciones annimas.Con ellas podemos implementar fcilmente mensajes de alto nivel de abstraccin, que reciben o devuelven bloques de cdigo y se comportan de forma parecida a las funciones de orden superior que podemos encontrar en el Paradigma Funcional.Dado que el lenguaje Java existi mucho tiempo sin presentar Lambdas (a partir de utilizar Clases Annimas), estas presentan caractersticas distintivas si las comparamos con los bloques de Ruby o Smalltalk, o las funciones annimas de Scala o C#.Uso bsicoEn una primera aproximacin, una lambda es cualquier objeto que implementa algunas de las siguientes interfaces:  Function: una funcin que toma un slo argumento  Predicate: una funcin que toma un slo argumento pero que devuelve exclusivamente booleanos  Consumer: una funcin que toma un slo argumento y no devuelve nada, probablemente porque produce un efecto. Es decir, los Consumers normalmente NO son computaciones puras.  Para otras variantes, ver: http://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.htmlSi queremos recibirlas por parmetro, debemos simplemente tipar al parmetro de nuestro mtodo con alguna de estas interfaces.Ejemplo:PersonaprimerPersonasQueCumple(Predicate&amp;lt;Persona&amp;gt;predicado){ for(Personapersona:personas)  if(predicado.test(persona))   returnpersona;  thrownewPersonaNoExisteException();}Para pasarlas por parmetro, la sintaxis es la siguiente:(TipoParametroparametro)-&amp;gt;cuerpoque es anlogo al siguiente bloque en Smalltalk (recordar que en Smalltalk las variables no se tipan explcitamente):[:parametro|cuerpo]Ejemplo:primerPersonaQueCumple((Personap)-&amp;gt;p.esMayorDeEdad())En muchos casos como el anterior tipo del parmetro puede ser obviado, cuando este puede ser inferido por el contexto:primerPersonaQueCumple(p-&amp;gt;p.esMayorDeEdad())Referencias a mtodosSi el cuerpo del mtodo es el envo de un slo mensaje (como en el ejemplo anterior), entonces podemos usar una MethodReference:primerPersonaQueCumple(Persona::esMayorDeEdad)Interfaces de un slo mensajePor motivos de retrocompatibilidad, en realidad, cualquier interface que defina un slo mensaje puede ser usada con la sintaxis de lambda. Ejemplo:interfaceChequeadorDePersona{booleanchequear(Personap);}PersonaprimerPersonasQueCumple(ChequeadorDePersonapredicado){ for(Personapersona:personas)  if(predicado.chequear(persona))   returnpersona;  thrownewPersonaNoExisteException();}Y se usa exactamente igual. De todas formas, si no pensamos darle alguna semntica particular a nuestro bloque de cdigo, preferiremos usar normalente las interfaces estndar comentadas anteriormente.Colecciones en JavaUna de las principales utilidades de las lambdas es el manejo de colecciones. Java 8 incorpora mensajes a sus colecciones para poder transformarlas usando mensajes anlogos a las funciones de orden superior de Haskell: map, filter y reduce(fold), limit(take), entre otros: http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.htmlLa forma de trabajar siempre es la misma: cuando tengamos una colecciones, le enviaremos el mensaje stream() para obtener una secuencia potencialmente infinita (anloga a las listas de Haskell), al cual le podemos enviar mensajes para filtrar, mapear, etc. Cuando hayamos terminado, y si queremos reconvertir nuestro Stream a una coleccin (como una List, Set, o Collection), le enviaremos el mensaje collect, indicandole a que tipo de coleccin queremos convertirlo:  collect(toList()) (anlogo al asOrderedCollection de ST)  collect(toSet()) (anlogo al asSet de ST)  entre otros. Ver http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.htmlEjemplo:List&amp;lt;Persona&amp;gt;personas=Arrays.asList(jose,pedro,maria,anabela);Set&amp;lt;Persona&amp;gt;nombresDeDocentesSinRepetidos=personas    .stream()    .filter( Persona::esDocente)    .map(Persona::getNombre)    .collect(toSet());Lo cual es anlogo al siguiente cdigo Smalltalk:personas:={jose.pedro.maria.anabela}nombresDeDocentesSinRepetidos:=     ((personasselect:[:p|pesDocente])collect:[:p|pnombre])asSetOrdenarEl orden superior se puede aprovechar para ordenar colecciones en Java. Supongan que tienen:publicclassFoo{privateStringbar;privateintbaz;//ysusgettersyconstructor}Cuando quieran tener algo ordenado segn un criterio, antes o despus, necesitarn un Comparator: es un objeto que nos dice si un objeto es menor que otro (precede a otro, diran en discreta). La buena noticia es que normalmente no tendrn que declarar una clase que implemente esta interfaz, sino que podrn definirlo usando una lambda. Por ejemplo, si quieren crear una priorirty queue que est ordenada segn bar, pueden hacer:PriorityQueue&amp;lt;Foo&amp;gt;foos=    newPriorityQueue&amp;lt;&amp;gt;((x,y)-&amp;gt;x.getBar().compareTo(y.getBar()));En general ni siquiera es necesario hacer la comparacin a mano. Si quieren ordenar por una propiedad (como en este caso) pueden utilizar Comparator.comparing:PriorityQueue&amp;lt;Foo&amp;gt;foos=    newPriorityQueue&amp;lt;&amp;gt;(Comparator.comparing(foo-&amp;gt;foo.getBar()));o lo que es lo mismo:PriorityQueue&amp;lt;Foo&amp;gt;foos=    newPriorityQueue&amp;lt;&amp;gt;(Comparator.comparing(Foo::getBar));Si tienen que ordenar por multiples propiedades, pueden utilizar el mensaje thenComparing. Ejemplo de creacin de un TreeSet que ordene segun bar y luego segun baz:Set&amp;lt;Foo&amp;gt;foos=    newTreeSet&amp;lt;&amp;gt;(        Comparator.comparing(Foo::getBar).thenComparing(Foo::getBaz)    );Finalmente, si tienen que ordenar al revs del orden de precedencia, pueden usar el mensaje reversed. Por ejemplo, ac se est obteniendo un stream ordenado por baz, de mayor a menor:Arrays.asList(newFoo(&quot;hola&quot;,2),              newFoo(&quot;hello&quot;,9))        .stream()        .sorted(Comparator.comparing(Foo::getBaz).reversed());Para ms informacin, miren la documentacin de Comparator: http://docs.oracle.com/javase/8/docs/api/java/util/Comparator.htmlNombres alternativosA veces se referencia a las lambda de Java como closure. En trminos generales esto no es correcto, dado que son ideas diferentes: una lambda es una funcin que no tiene nombre, mientras una closure o cierre o clausura es una funcin que puede acceder a las variables disponibles en el contexto en que se la declar.Sin embargo en este lenguaje informalmente y en trminos prcticos ambos conceptos son intercambiables, ya que todas las lambdas encierra su contexto, y el unico tipo de closure que se puede tener es con una lambda.Como prueba de esto, histricamente, los frameworks de Java llamaban a la interfaz a ser implementada con una clase annima indistintamente como Closure, Function o Lambda.Ms informacinPara ms informacin consultar:  http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html  http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html"

} ,

{

"title"    : "Lectura de un paper",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/lectura-de-un-paper.html",
"date"     : "",
"content"  : "Un Paper puede leerse con distintos niveles de profundidad, segn el inters que tengamos sobre el tema. Obviamente esto es una gua, no hace falta ser tajante al respecto:Profundidad 1Leemos el ttulo y/o el abstract. A veces al leer el ttulo ya sabemos si nos interesa o no el tema. A veces hace falta leer el abstract para saber si el contexto sobre el que se trabaj es aplicable a mi trabajo o no.Por ejemplo, si leo en el contexto que solucion un problema X para lenguajes funcionales con chequeo esttico de tipos, y yo busco soluciones para Smalltalk, probablemente no me sirva :).Profundidad 2Ok, le el abstract y pareci bueno. Leemos la introduccin, los problemas que se presentan, Related work y conclusiones. Con eso nos empapamos bastante en el tema sin entrar en detalles. Obviamente a partir de aca podemos decidir si nos interesa o no ver en detalle la solucin que propone el tipo. En caso que nos interese, podemos pasar a la profundidad 3.Profundidad 3Leemos todo, includa la solucin, discusin Ok, podemos saltearnos la implementacin, je."

} ,

{

"title"    : "Lenguajes del paradigma logico",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/lenguajes-del-paradigma-logico.html",
"date"     : "",
"content"  : "IconSi bien es un lenguaje basado en procedimientos, su ejecucin goal oriented posibilita un estilo de programacin que guarda bastantes similitudes con el paradigma lgico. Adems la posibilidad de contar con generators permite utilizar backtracking dentro de los procedimientos.Por otro lado tiene soporte para realizar aplicaciones con interfaces grficas. Tambin existe una versin denominada Jcon que permite un fcil integracin con Java.La pgina principal del lenguaje Icon es: https://www2.cs.arizona.edu/icon/ pero la introduccin ms clara la encontr en: http://en.wikipedia.org/wiki/Icon_programming_language"

} ,

{

"title"    : "Lenguajes especificos de dominio",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/lenguajes-especificos-de-dominio.html",
"date"     : "",
"content"  : "Este artculo est en construccin, tenemos por ahora algunos puntos de referencia solamente:                              En este post de Debasish Ghosh hay buenas ideas sobre cmo utilizar el lenguaje scala para construir DSLs [http://debasishg.blogspot.com/2008/04/external-dsls-made-easy-with-scala.html          ]                    "

} ,

{

"title"    : "Lenguajes para centrales nucleares",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/lenguajes-para-centrales-nucleares.html",
"date"     : "",
"content"  : "  REDIRECCIN Robustez de los lenguajes"

} ,

{

"title"    : "Lenguajes",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/lenguajes.html",
"date"     : "",
"content"  : "A continuacin mencionamos algunos lenguajes que siguen las ideas del paradigma orientado a objetos, y les dejamos algunos links y ejemplos para los curiosos.  Smalltalk  Self  Java  Objective C  C++  Groovy  RubyHbridosAlgunos lenguajes si bien implementan ciertas ideas del paradigma de objetos, tambin implementan abstracciones de otros paradigmas. Algunos de ellos son:  Scala  Python  C#  JavaScript  Object Pascal"

} ,

{

"title"    : "Ley de demeter",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ley-de-demeter.html",
"date"     : "",
"content"  : "Usamos la ley de demeter siempre que es posible (que es la mayora de las veces), pueden consultarla ac, un resumen:  You can play with yourself.  You can play with your own toys (but you cant take them apart),  You can play with toys that were given to you.  And you can play with toys youve made yourself.You can play with yourselfEsto significa que podemos enviarnos mensajes a uno mismo:Wollok:object pepita {    method graznar(){        self.gastarEnergia()    }    // ...}(self soy yo mismo, me envo el mensaje gastarEnergia())You can play with your own toys (but you cant take them apart)Esto significa que nuestros atributos estn para mandarles mensajes:Wollok:object pepita {    var ciudadActual = bsAs    method estasContenta(){        return ciudadActual.esGrande()    }    // ...}(ciudadActual es un atributo de pepita, al que se le enva el mensaje esGrande())Pero no est bueno meterme con su composicin interna:object pepita {    var ciudadActual = bsAs    method estasContenta(){        return ciudadActual.poblacion().size() &amp;gt; 50000 //esto es incorrecto    }    // ...}(es incorrecto hablar con los objetos que le pido a los objetos que le pido a los objetos. Ya que eso es como desarmar a ciudadActual. Directamente debo pedirle lo que necesito, que es saber si es grande)You can play with toys that were given to youEsto significa que puedo hablar con los parmetros que me lleguenobject pepita {    method queresIrA(otraCiudad){        return otraCiudad.esGrande()    }    // ...}(otraCiudad es un parmetro que me llega en este mtodo, por eso ahora mismo puedo hablarle y mandarle el mensaje esGrande())And you can play with toys youve made yourselfEsto significa que puedo hablar con los objetos que yo haya creado:object pepita {    method anioActual{        return new Date().year()    }    // ...}(new Date() representa el da de hoy, que lo acabo de crear, y le mando el mensaje year())ResumenPuedo mandarles mensajes a self, a mis atributos, a lo que me llega por parmetro, y a los objetos que cre yo.Entonces, esto es incorrecto:object pepita {    method queresIrA(){        return otraCiudad.esGrande()    }    // ...} porque de dnde sac la otraCiudad? No es un parmetro, no es un atributo.Nota sobre los WKOsHay muchos lenguajes que ofrecen puntos de acceso globales a ciertos objetos, con quienes tambin se puede hablar.Por ejemplo, en Smalltalk puedo hablar con las clases, que son objetos globales:#Golondrina&amp;gt;&amp;gt;ciudadNatal   ^ Ciudad getInstance: &#39;BuenosAires&#39;(Hablo con Ciudad, que es una clase, y le digo getInstance:, lo que me da una ciudad bien conocida)Y en Wollok existen los WKOs (well known objects), que permiten hablarles directamente sin conocerlos:object pepita {    method enQueKMNaciste() {        return buenosAires.kilometro()    }    // ...}(puedo hablar con buenosAires, aunque no sea ni un parmetro ni un atributo, ya que es un WKO)"

} ,

{

"title"    : "Libreria y framework",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/libreria-y-framework.html",
"date"     : "",
"content"  : "LibreraUna librera es un conjunto de funciones llamadas desde afuera por un cliente. Dentro del POO, esto es una clase que recibe un mensaje, lo ejecuta y devuelve luego el control al cliente. La instanciacin de una librera es relativamente sencilla.FrameworkEl framework representa una abstraccin de diseo y tiene un comportamiento en s mismo. No es solamente una clase, sino que es un conjunto de objetos que se relacionan para servir a un dominio especfico.La integracin con mi sistema se da de mltiples maneras  a veces extiendo de una superclase propia del framework,  o defino un objeto que respeta el contrato que pide el framework,  o envo un mensaje a un objeto del frameworkpero es usual que el framework me pida luego cosas a m, no tengo control sobre el flujo de envo de mensajes.La instanciacin del framework no es tan sencilla, ya que requiere un conocimiento del mismo."

} ,

{

"title"    : "Lista de proyectos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/lista-de-proyectos.html",
"date"     : "",
"content"  : ""

} ,

{

"title"    : "Listas por comprension",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/listas-por-comprension.html",
"date"     : "",
"content"  : "Tal vez recuerden de matemtica que se pueden definir conjuntos por extensin (por ejemplo {1,2,5,9}) o por comprensin ({X &amp;#92; X  Enteros ^ X &amp;gt; 3 ^ X &amp;lt; 15} ). La forma por extensin ya la vimos con en Haskell con las listas [1,2,5,9] y por comprensin podemos definirla mediante filtros y transformaciones (filter y map) sobre otra lista que sera el conjunto base.Las listas por comprensin en Haskell son un azcar sintctico que nos permite armar listas a partir de los elementos de otra luego de aplicar filtros y transformaciones, o sea, permiten escribir de una forma simple y elegante expresiones que podran ser ms complejas utilizando las funciones que ya conocemos para este fin.Veamos un ejemplo simple usando filter y map:nombresDeAlumnosQueAprobaron=mapnombre.filteraproboEsta funcin puede tambin escribirse con una lista por comprensin:nombresDeAlumnosQueAprobaronalumnos=[nombrealumno|alumno&amp;lt;-alumnos,aproboalumno]Una diferencia que podemos notar entre ambas definiciones es la cantidad de parmetros a la izquierda del igual, en el segundo caso hay uno, mientras que en el primero no hay. Por qu pasa eso?Eso pasa porquemapnombre.filteraproboes una funcin ya que es la composicin de dos funciones.En cambio[nombrealumno|alumno&amp;lt;-alumnos,aproboalumno]es una lista, esa es una diferencia importante y es un criterio que nos va a permitir saber cundo nos conviene usar map y filter en lugar de listas por comprensin.Otra cosa que agregan las listas por comprensin es la posibilidad de hacer pattern matching quedando an ms expresivo:[nombre|(nombre,nota)&amp;lt;-alumnos,nota&amp;gt;4]Otro ejemplo si tengo una lista de remeras de la forma:modelos=[(&quot;GoodIdeaBadIdea&quot;,&quot;flex&quot;,2,&quot;negro&quot;),...]A partir de esa lista podemos construir otra usando listas por comprensin y pattern matching:[(nombre,color)|(nombre,_,cant,color)&amp;lt;-modelos,cant&amp;gt;2]Aqu se puede ver la verdadera potencia de las listas por comprensin vs. map y filter, la posibilidad de utilizar el pattern matching.En resumen:  Las listas por comprensin nos dan funcionalidades similares a las del map y filter, entonces es probable que en muchas situaciones se presenten como soluciones alternativas a un mismo problema.  Las listas por comprensin permiten aprovechar mejor el pattern matching, entonces en los casos donde pueda usar esa caracterstica probablemente sea ms piola usar listas por comprensin en lugar de map y filter.  Con listas por comprensin yo siempre defino una lista, mientras que combinando map y filter con aplicacin parcial yo puedo definir funciones, eso los hace ms aptos para la composicin, por lo tanto en los casos en que yo necesite componer (o trabajar al nivel de funcin por cualquier otro motivo, puede resultar ms adecuado usar map, filter, aplicacin parcial, composicin, etc."

} ,

{

"title"    : "Locro",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/locro.html",
"date"     : "",
"content"  : "Nuestra mega receta para 30 personas:Para el locro:  2kg Maiz Blanco  1Kg de Porotos  2kg de Rost beef  2kg de Bondiola  2kg de Pechito de cerdo y Patitas  1kg de Panceta  5 Chorizos colorados  4kg de ZapalloPara la salsa:  3 Cebollas  Aj molido c/n  1/2 kg Grasa  Comino c/n  Pimentn c/nReceta original 1"

} ,

{

"title"    : "Logico   trabajo con valores",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/logico---trabajo-con-valores.html",
"date"     : "",
"content"  : "Cundo se usa isCuando tengo que hacer una operacin aritmtica, p.ej..ingresoTotal(Pers,IT):-ingresoPorSueldo(Pers,IS),ingresoPorRenta(Pers,IR),ITisIS+IR.en este caso, la cuenta es una suma, debo usar is.Si lo de la izquierda es un valor, o una variable ligada con un valor, entonces el is se verifica si el resultado de la cuenta es el valor. P.ej. si quiero saber si juan tiene exactamente el doble de ingreso que roque, puedo hacer esta consulta?-ingresoTotal(juan,IngrJuan),ingresoTotal(roque,IngrRoque),IngrJuanisIngrRoque*2.No est bien usar el is cuando lo de la derecha no es una cuenta. Ms detalles a continuacin.Si s qu valor es, pongo el valorSi en un programa quiero representar bart es hijo de homero, pongo?hijo(X,Y):-X=bart,Y=homero.o pongohijo(bart,homero).Est claro que pongo lo segundo. Por qu? Porque no quiero decir X e Y son hijo y padre si a X le pasa tal cosa y a Y le pasa tal otra, sino que ya s quines son los que quiero relacionar, bart y homero.En todos (todos) los casos en los que ya s el valor, lo correcto es poner el valor, no hace falta pasar por una variable (como sera la variable X para bart en el ejemplo de arriba). Algunos ejemplos menos obvios.  Estoy haciendo un programa que modela gustos en propiedades de la gente, donde a cada propiedad la modelo con un tomo que describe su direccin (p.ej. lavalle851). Tengo estas reglas  A los que viven en Belgrano le gustan los departamentos lujosos.  A Roque le gustan los departamentos chiquitos.  A los que viven en Boedo les gusta el departamento de Corrientes 3804.En la primera regla slo me dan condiciones sobre persona y depto:gusta(Pers,Depto):-vive(Pers,belgrano),esLujoso(Depto).En la segunda, no me estn hablando de una persona cualquiera, me estn hablando de Roque. Entonces el primer argumento no necesita ser una variablegusta(roque,Depto):-esChiquito(Depto).Para la tercera, del que me estn hablando especficamente es del depto, de la persona me dan condiciones. Entoncesgusta(Pers,corrientes3804):-vive(Pers,boedo).  En el mismo programa, quiero decir que un departamento es alternativa para otro si sale exactamente 5000 pesos menos. En este caso tengo que hacer una cuenta que es la diferencia entre los precios; s que el resultado de esa cuenta tiene que ser exactamente 5000.Entonces, pongoesAlternativa(Depto1,Depto2):-precio(Depto1,Pr1),precio(Depto2,Pr2),DifisPr2-Pr1,Dif=5000.oesAlternativa(Depto1,Depto2):-precio(Depto1,Pr1),precio(Depto2,Pr2),DifisPr2-Pr1,Difis5000.? Noooooo, el 5000 ya lo s, no necesito pasarlo por la variable Dif. O seaesAlternativa(Depto1,Depto2):-precio(Depto1,Pr1),precio(Depto2,Pr2),5000isPr2-Pr1."

} ,

{

"title"    : "Lombardizacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/lombardizacion.html",
"date"     : "",
"content"  : "Dcese de aquella actitud donde una propuesta viene siempre acompaada de un compromiso de accin. Es decir, una persona lombardizada es aquella que cuando hace una propuesta, se compromete a que esa propuesta se lleve a cabo. La Lombardizacin acepta como compromiso diversas actitudes que incluyen desde llevarlo a cabo completamente uno mismo hasta el movilizar gente para hacerlo.El trmino Lombardizacin proviene de la palabra Lombardi, tambien conocida como apellido de Carlono, en honor a Carlos Carlono Gran Vikingo Lombardi, perteneciente a este grupo. El orgen del uso de este vocablo se debe aLa Lombardizacin se ha extendido durante aos en muchos grupos de personas. El tpico grito de guerra con el que estas personas extienden estas creencias es Lombardizate!Ejemplos de LombardizacinHablando de escribir una entrada en la wiki:No Lombardizado: Deberamos tener una pgina en la wiki que explique la Lombardizacin a los mas nuevitos.Lombardizado: Che, escrib esta pgina en la wiki que explica la Lombardizacin para los mas nuevitos.Para conseguir alguien que de una clase:No Lombardizado: Che, hay que dar la clase de polimorfismoLombardizado: Che, puedo ayudar a dar la clase de polimorfismo? No me animo a darla soloMisconcepciones ComunesLa lombardizacin no significa: eh, gato, por qu en lugar de chamuyar no te pons a hacer algo, gil!Originalmente no era esa la idea. Lombardizacin es lo que en los crculos de la chetez empresarial se llama empowerment (pfff). Aplica cuando alguien viene con una idea pero su idea no pasa de eso, de una propuesta, entonces lombardizate significa: si tens una buena idea, no esperes a que otro la lleve a cabo o a que un comit de notables le de su bendicin, empujala vos, hacelo. Frecuentemente eso pasaba con los ms jvenes o recin llegados al grupo, que tal vez por no conocer la mecnica interna esperaba que las decisiones las tomaran los ms viejos y no se animaba a tener ms iniciativa. Entonces lombardizar es justamente hacer que este grupo funcione sin depender de uno que centraliza o que toma decisiones o que no se puede hacer nada sin tener su visto bueno."

} ,

{

"title"    : "Macros en Scala",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/macros-scala.html",
"date"     : "",
"content"  : "IntroduccinMacros es una herramienta muy poderosa que permite definir reescrituras de AST (Abstract Syntax Tree) y est presente en muchos lenguajes y tecnologas. A grandes razgos, la tilidad de las macros consiste en tomar una construccin sintctica vlida y reemplazarla por otra en tiempo de compilacin, permitiendo as que la sintaxis que normalmente construira un cierto programa construya otro totalmente diferente. En Scala, la utilizacin de macros est definida en el paquetescala.language.experimental.macrosel cual debe ser importado para poder trabajar.Una macro de Scala se compone de dos partes: Una declaracin y una implementacin. Al momento de compilar, los usos de la funcin declaracin son procesados para reemplazarlos por el resultado de aplicar la funcin implementacin. Definir la declaracin de una macro es muy similar a definir una funcin comn pero, en lugar del cuerpo, se utiliza la palabra clave macro seguida del nombre de la funcin implementacin.  // declaracin  def miMacro(parametro1: String, parametro2: Int) = macro miMacro_impl    // implementacin  def miMacro_impl(c: Context)(parametro1: c.Expr[String], parametro2: c.Expr[Int]) = ???Whitebox y Blackbox macrosExisten 2 tipos de macros, las llamadas de caja blanca o whitebox y las de caja negra o blackbox. La diferencia entre los dos enfoques es que las macros de caja negra se usan cuando puedo definir claramente una firma para la funcin que quieroimplementar usando macros, mientras que las de caja blanca se usan cuando no puedo definir dicha firma. Las macros de caja blanca son ms flexibles pero menos seguras, ya que no pueden tiparse y van a ser discontinuadas en versiones futuras de Scala, por esa razn vamos a concentrarnos en las definiciones de caja negra.Para elegir uno de estos dos enfoques es necesario importar el paquete correspondienteimport scala.reflect.macros.whiteboxpara las de caja blanca yimport scala.reflect.macros.blackboxpara las de caja negra.La clase Context que se us en el cdigo anterior est definida en estos paquetes.Mirando el ejemplo, se puede ver que hay una relacin entre el tipo de la declaracin de la macro y su implementacin que, adems de recibir un parmetro Context, espera tambin un parmetro por cada parmetro de la declaracin que debe tener el mismo nombre y un tipo de expresin que coincida. creado a partir del contexto.UsosVeremos que hay varias maneras de colgarse del proceso de compilador, por lo que tenemos distintos tipos de macros propuestos por scala, solo que en este caso nos estaremos enfocando en uno de los tipos de macros. Otra consideracin a tener en cuenta es que la interfaz que tenemos de macros como la de reflection en scala puede ir variando en el tiempo, ya que son an implementaciones experimentales y no se ha llegado a un estado final de como sera la implementacin definitiva.Las macros han sido utilizados durante la versin 2.10 de Scala, tanto para aplicaciones de investigacin como industriales, y la conclusin segn (Burmako), es que las macros han sido tiles para aplicaciones tales como:  Code Generation  Implementation of DSLs  Static checking among othersMas informacinVer ms en detalle sobre macros en scala 2.10 en el siguiente link    Bibliografa    Burmako, Eugene. Scala Macros: Let Our Powers Combine! On How Rich Syntax and Static Types Work with Metaprogramming."

} ,

{

"title"    : "Manejo de booleanos en haskell",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/manejo-de-booleanos-en-haskell.html",
"date"     : "",
"content"  : "El Tipo BoolLos booleanos son datos que representan la condicin de verdad o falsedad.Recordemos que even es una funcin que recibe un nmero, y devuelve un booleano. (True si el nmero es par)Hagamos estas consultas en la consola (El simbolito &amp;gt; al inicio de la lnea indica que se est haciendo una consulta):&amp;gt;even6True&amp;gt;notTrueFalse&amp;gt;notFalseTrueAqu se ve que not es una funcin recibe un Bool (y que devuelve el booleano opuesto).Hay otras funciones que devuelven booleanos:&amp;gt;5&amp;lt;1True&amp;gt;&quot;mama&quot;==&quot;papa&quot;FalseEntonces, si queremos que una funcin devuelva un booleano, basta con devolver el mismo resultado que obtuvimos. Por ejemplo,--&quot;lagolondrinapepitaestempachadasisuenergaesmayorque100&quot;estaEmpachadaenergia=energia&amp;gt;100Conjuncin y Disjuncin Lgica&amp;gt;True||FalseTrue&amp;gt;True&amp;amp;&amp;amp;FalseFalsePara saber si el 6 es par y divisible por 3:&amp;gt;even6&amp;amp;&amp;amp;(esDivisible63)TrueErrores Comunestrue vs true vs TrueEn Haskell,  true es un nombre de variable  de funcin. Si trato de usarlo, me va a tirar el error Not in Scope.&amp;gt;nottrue``Notinscope:`true&#39;``  true es un String, por lo que si se lo mando a una funcin que espera un booleano, va a haber un error de tipos:&amp;gt;not&quot;true&quot;`` Couldn&#39;tmatchexpectedtype`Bool&#39; ```` withactualtype`[Char]&#39; ``  True es la manera correcta de referirse al booleano. True es un Constructor del tipo de dato Bool.&amp;gt;notTrueFalseProblemas con Booleanos y Guardas  En Funciones_por_Partes#Errores_Comunes hay algunos errores comunes.Mal Uso de Booleanos (algo == True, etc.)Una variante de los problemas con Guardas es lo siguiente:desaprueba nota= estaAprobadanota== FalsepierdePromocion nota = estaAprobada nota == True &amp;amp;&amp;amp; nota &amp;lt; 8Ese cdigo est mal. Por qu? Porque estaAprobada ya devuelve un Booleano. De la misma manera la funcin menor tambin devuelve un Booleano. Entonces, en el caso de pierdePromocion, est dems la comparacin por True. Y en el caso del desaprobada, si lo que necesito es el opuesto del booleano, entonces debo usar la funcin not:desaprueba nota= not (estaAprobadanota)pierdePromocion nota = estaAprobada nota &amp;amp;&amp;amp; nota &amp;lt; 8Ese cdigo es el correcto. Comprobamos as que funcionan igual:&amp;gt;estaAprobada7==TrueTrue&amp;gt;estaAprobada 7True&amp;gt;estaAprobada3==FalseTrue&amp;gt;not (estaAprobada3)TrueAdems, algo muy importante, es ms expresivo usar el not, ya que se lee: desaprueba una nota cuando no est aprobada desaprueba nota= not (estaAprobadanota) .Y por ltimo, estoy ocultando un poquito el cmo . Es decir, nos concentramos en la idea de negacin, ms que en comparar booleanos por ==True o ==False. Como dice Fidel, un profe de la Universidad Nacional de Quilmes: No le tengamos miedo al booleano!"

} ,

{

"title"    : "Manejo de booleanos en smalltalk",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/manejo-de-booleanos-en-smalltalk.html",
"date"     : "",
"content"  : "Los Booleanos como objetosLos booleanos son objetos que representan la condicin de verdad  falsedad.Recordemos que even es un mensaje que entienden los nmeros, y devuelve un booleano. (true si el nmero es par)6even.&quot;devuelvetrue&quot;truenot.&quot;devuelvefalse&quot;falsenot.&quot;devuelvetrue&quot;Aqu se ve que not es un mensaje que entienden los booleanos (y que devuelve el booleano opuesto).Hay otros mensajes que devuelven booleanos:5&amp;lt;1&quot;devuelvefalse&quot;1between:0and:3&quot;devuelvetrue&quot;Entonces, si queremos que un mtodo devuelva un booleano, basta con devolver el mismo resultado que obtuvimos. Por ejemplo,&quot;lagolondrinapepitaestempachadasisuenergaesmayorque100&quot;&amp;gt;&amp;gt;estasEmpachada^energia&amp;gt;100.Conjuncin y Disjuncin Lgicatrue|false&quot;devuelvetrue&quot;true&amp;amp;false&quot;devuelvefalse&quot;Para saber si el 6 es par y divisible por 3:6even&amp;amp;(6isDivisibleBy:3)&quot;devuelvetrue&quot;Agregando VitaminasAdems de los mensajes binarios &amp;amp; y |, tenemos los mensajes and: y or:, que en vez de recibir un booleano, reciben un bloque de cdigo (que adentro tiene un booleano). Veamos:6even|5even&quot;devuelvetrue&quot;6evenor:[5even].&quot;devuelvetrue&quot;5even&amp;amp;6even.&quot;devuelvefalse&quot;5evenand:[6even].&quot;devuelvefalse&quot;Para qu queremos estos mensajes? Porque son lazy. Es decir, tienen algo de evaluacin perezosa. sto significa que si estoy haciendo un or y el receptor ya es verdadero, no hace falta analizar el segundo elemento (el or es verdadero):5&amp;gt;1or:[7*2].&quot;devuelvetrue,sinanalizarelbloquebasura&quot;5&amp;gt;1|(7*2).&quot;tiraerror,porque14noesunbooleano&quot;Y si estoy haciendo un and y el receptor es falso, no hace falta analizar el segundo elemento (el and es falso):5evenand:[4].&quot;devuelvefalse,sinanalizarelbloquebasura&quot;5even&amp;amp;4.&quot;tiraerror,porque4noesunbooleano&quot;En general, es buena prctica utilizar and: y or:.Para pensarQu pasara en cada caso si dentro del bloque hay una operacin con efecto sobre el estado del sistema? La respuesta a sta pregunta nos va a ayudar a entender por qu no est bueno tener efecto cuando hacemos un and:  un or:.Errores Comunestrue vs TrueEn el ambiente hay un objeto llamado true y otro llamado True.El que representa el valor de verdad, el s, es el true con minscula.True es la clase de la cual true es instancia. Lo que empieza en mayscula es casi-casi siempre nombre de clase (o de variable de clase, eso lo vemos cerca del final de la parte de objetos).Si uno se confunde y usa True, claro, el ifTrue: no anda bien, porque el mensaje ifTrue: lo entiende el objeto true, no su clase.ifTrue: [^true], est bien? Miremos este mtodo que est en una clase cuyas instancias entienden el mensaje paismismoPaisCon:unaCiudad((selfpais)=(unaCiudadpais))ifTrue:[^true]ifFalse:[^false]y supongamos que la comparacin((selfpais)=(unaCiudadpais))da true.Qu quiere decir que da true? Que si evalo esa parte, el objeto que me devuelve es el objeto true, el nico objeto true de Smalltalk. A ese le estoy diciendo ifTrue:ifFalse:, y en el bloque que ejecuta si es true  le digo que devuelva true, o sea que devuelva el mismo objeto al que le dije ifTrue:ifFalse:. Lo mismo con el false.En resumen, el ifTrue:ifFalse: sobra, este mtodo se puede escribir asmismoPaisCon:unaCiudad^(selfpais)=(unaCiudadpais)y listo.=== ^(algo = true) === Una variante del caso anterior es un cdigo como este, dentro de una clase cuyas instancias entienden los mensajes estaLibre y estaAndandopuedeUsarse^(selfestaLibre=true)&amp;amp;(selfestaAndando=true)Analicemos la parte(selfestaLibre=true)La expresin self estaLibre hace lo nico que puede hacer una expresin en Smalltalk: devolver un objeto. Qu objeto puede ser ese?1.Si la condicin es cierta, entonces el objeto que devuelve es el objeto true, el nico objeto en un ambiente Smalltalk que representa el valor de verdad cierto. Si a ese objeto le pregunto = true, qu objeto va a ser el resultado?Si pregunto si dos objetos son iguales, o me va a responder true, o me va responder false, no hay otra. En este caso, true es el mismo objeto que true, o sea el = da cierto, o sea  devuelve true!, que es el mismo objeto que obtena con(selfestaLibre)2.Ahora supongamos que la condicin no es cierta, en ese caso me devuelve el objeto false, si a false le digo = true el resultado de eso es el objeto false, que otra vez es lo mismo que obtengo poniendo solamente(selfestaLibre)ConsecuenciaEl mismo anlisis lo puedo hacer con(selfestaAndando=true)y la conclusin es que el mtodo puede escribirse aspuedeUsarse^(selfestaLibre)&amp;amp;(selfestaAndando)En esta versin estamos manejando mejor los booleanos, porque aceptamos que el resultado de self estaLibre es un booleano, que va a ser true o false, y que va a entender &amp;amp; con el otro booleano como parmetro.Un caso parecidoY si en lugar de estaLibre tengo estaOcupado, qu hago, pongopuedeUsarse^(selfestaOcupado=false)&amp;amp;(selfestaAndando=true)nooooo  quiero el booleano contrario al resultado de self estaLibre, para eso los booleanos entienden not, en este casopuedeUsarse^(selfestaOcupadonot)&amp;amp;(selfestaAndando)"

} ,

{

"title"    : "Manejo de booleanos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/manejo-de-booleanos.html",
"date"     : "",
"content"  : "  Manejo de booleanos en Haskell  Para el Paradigma Funcional  Manejo de booleanos en Smalltalk  Para el Paradigma de Objetos"

} ,

{

"title"    : "Manejo de errores",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/manejo-de-errores.html",
"date"     : "",
"content"  : "  REDIRECCIN Excepciones"

} ,

{

"title"    : "Manejo de memoria en c",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/manejo-de-memoria-en-c.html",
"date"     : "",
"content"  : "https://github.com/jwise/minilib"

} ,

{

"title"    : "Maquina virtual",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/maquina-virtual.html",
"date"     : "",
"content"  : "Puede haber un poco de confusin con la palabra Mquina Virtual (VM).La imagen de Pharo corre sobre una mquina virtual, llamada Pharo VM o Squeak VM o Cog VM. Esta VM es un programa ms o menos comn y corriente, sobre el cual se carga una imagen de Pharo. Esta VM es indispensable.Mas all de que existe una diferencia tcnica enorme, en una primera aproximacin pods comparar a la VM de Pharo con el intrprete de Hugs o swi-prolog: son programas responsables de ejecutar tu cdigo. Luego, pods comparar a la imgen de Pharo con los archivos .pl o .hs: contienen cdigo y datos de tu programa.Por otro lado, en el laboratorio de sistemas, la VM de Pharo est instalada directamente sobre el sistema operativo (un Windows), mientras que los interpretes de Haskell y Prolog estn instalados, por cuestiones prcticas para la gente del laboratorio, en un sistema operativo virtualizado montado sobre una VM VMware, pero bien podran haberlo instalado sobre el mismo Windows.Esta ltima VM (VMWare) es de naturaleza totalmente distinta a la VM de Pharo: emula un hardware completo, y se la conoce como Mquina Virtual de Sistema. La mquina virtual de Pharo, en cambio, emula slo algunos algunos aspectos del hardware, y tiene como nica finalidad correr cdigo en Smalltalk. Se la conoce como Mquina Virtual de Aplicacin (en azul):Recalco que la virtualizacin en amarillo es totalmente opcional, en el labo est as porque ayuda a organizar el software para cada materia, pero normalmente en tu casa no vas a necesitar hacer eso para instalar el software de PDP."

} ,

{

"title"    : "Masa de pizza",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/masa-de-pizza.html",
"date"     : "",
"content"  : "Cantidad: 4 pizzasIngredientes:  1kg harina 000 o ms ceros  50 gr levadura  sal,  4 cucharadas de aceite  salsa de tomatePasos:  Diluir la levadura con un poquito de agua, una cucharada de azucar, una cucharada de harina, dejarla espumar (que se haga una esponja). Si despus de un rato no esponja NO SIRVE. Tiene que quedar del mismo color.  Poner la harina en bol cacerola o palangana, hacer un hueco en el centro agregar 3 cucharadas de aceite (o 4) y una cucharada de sal alrededor (sobre la corona).  Poner la levadura sobre el aceite, agregar agua (medio litro de agua, de a poco) y mezclar, de adentro hacia afuera. Amasarla, golpearla hasta que quede blandita uniforma y que no se pegue en los dedos (o muy poquito).  Se pone en un bol, se tapa y se deja descansar. Hasta que esta el doble de su tamao original (aproximadamente 20-30 minutos). NO PONER EN CORRIENTE DE AIRE.  Volver a masar, sacarle bien el gas. Separar en bollos. Aceitar los moldes. Estirar la masa en los moldes con la mano aceitada para que no se pegue.          Si dejamos los bollos hay que taparlos bien con papel film        Cuando esta bien estirada ponerle muy poquitito de salsa (para que no se humedezca).  Dejar leudar hasta que vuelva a duplicar su volumen.  Poner en el horno bien caliente. Cuando hace piso, se le pone toda las cosas locas."

} ,

{

"title"    : "Introducción a Maven",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/maven.html",
"date"     : "",
"content"  : "Maven es una herramienta que ayuda a desarrollar un proyecto basado en el entorno de una JDK (Java, Xtend, Scala, Groovy, etc.)FuncionalidadesMaven cumple con las siguientes funciones principales que vamos a explicar en las siguientes secciones:  Reificacin de Proyecto / Artefacto en forma standard, declarativa y extensible  Manejo de Dependencias  Manejo del Ciclo de Vida del Artefacto, incluyendo releasesReificacin de Proyecto/ArtefactoJava no trabaja la idea de proyecto, no lo representa como concepto. Entonces, cada uno de los IDEs pensados para Java agregan su propia forma de definirlo: en el caso de Eclipse tenemos  el archivo .classpath que define los directorios donde compilar y las dependencias que necesita  el archivo .project que contiene el nombre del proyecto, entre otras cosasSi nosotros trabajamos con otro IDE (como IntelliJ IDEA o NetBeans) tenemos que adaptar estos archivos para generar el proyecto con sus dependencias adecuadamente. Maven permite trabajar entre IDEs con su propio modelo de proyecto, que se guarda en el archivo pom.xml (de Project Object Model)Identificacin de un proyecto MavenEn el archivo pom se declaran, entre otras cosas, un identificador nico de nuestro proyecto/artefacto, que resulta de la unin de tres identificadores:  groupId: representa la organizacin autora/duea del artefacto. Por ejemplo, los proyectos de Algoritmos 2 suelen usar el groupId org.uqbar.  artifactId: este campo define el nombre por el que se conoce al proyecto en s mismo. Algunos ejemplos: commons-collections, eg-seguros-xtend, tp-futbol5-grupo01, etc.  versin: es el ltimo componente del rompecabezas, dado que groupId:artifactId denota un nico proyecto pero no alcanza para definir en qu versin del proyecto nos estamos parando. Se agrega entonces un nmero de versin para completar la informacin que Maven necesita para generar una identificacin unvoca. Conviene seguir las reglas de versionado semntico, para liberar versiones productivas. A veces se suele acompaar de un sufijo RELEASE (para versiones estables) o SNAPSHOT (para versiones intermedias que pueden estar sujetas a cambios)A continuacin un ejemplo bsico.&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;      xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0                          http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;    &amp;lt;groupId&amp;gt;org.uqbar&amp;lt;/groupId&amp;gt;    &amp;lt;artifactId&amp;gt;uqbar-commons&amp;lt;/artifactId&amp;gt;    &amp;lt;version&amp;gt;1.1.2&amp;lt;/version&amp;gt;&amp;lt;/project&amp;gt;  Cuando se publica un componente, se empaquetan todas las clases compiladas (.class) en un archivo comprimido que tiene la extensin .jar (de Java Archive). Opcionalmente podemos tener un archivo comprimido extra con los fuentes.Repositorios MavenUn repositorio Maven es un lugar donde estn los artefactos Maven, estructurados en cierta forma estndar para hacer las descargas de las dependencias. Cuando instalamos Maven, se crea un repositorio Maven local en una carpeta que por defecto suele ser HOME/.m2. Si queremos ubicar al componente cuyo identificador es org.eclipse.xtend:org.eclipse.xtend.core:2.21.0.M1 podremos encontrarlo localmente en%M2_HOME%/repositoryorg eclipse      xtend           org.eclipse.xtend.core                          2.19.0 (otra versin)                  2.21.0.M1 --&amp;gt; dentro de esta carpeta estar el .jar  recordemos que el identificador de un componente se arma a partir del groupId + el artifactId + la versin  se suele exportar como variable la carpeta HOME/.m2 con el nombre M2_HOME  en M2_HOME puede haber opcionalmente un archivo settings.xml que veremos ms adelante  en la subcarpeta repository estn todos los componentes que descargamos localmenteVemos un video de ejemplo, en una mquina Linux. El comportamiento en una mquina Windows es exactamente igual, hay que explorar los directorios incluyendo los que son ocultos, y navegar a partir de la carpeta de usuario.m2:Relacionando proyectos maven desde el POMEs posible referenciar a otros proyectos maven desde un POM, esto es muy til para cuando necesitamos  declarar dependencias,  definir un proyecto padre,  agregar pluginsa la hora de compilar nuestro proyecto.DependenciasLas dependencias se definen dentro de un tag &amp;lt;dependencies&amp;gt;:&amp;lt;project ...&amp;gt;    &amp;lt;...&amp;gt;    &amp;lt;dependencies&amp;gt;        &amp;lt;dependency&amp;gt;            &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;            &amp;lt;artifactId&amp;gt;junit-jupiter-params&amp;lt;/artifactId&amp;gt;            &amp;lt;version&amp;gt;5.5.2&amp;lt;/version&amp;gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;        &amp;lt;/dependency&amp;gt;    &amp;lt;/dependencies&amp;gt;En este caso, estamos definiendo que nuestro proyecto tiene como pre-requisito el componente junit-jupiter-params asociado a org.junit.jupiter. Si utilizamos Maven como un plugin de Eclipse  agregamos la dependencia en el pom,  actualizamos el proyecto (Maven &amp;gt; Update project)  y eso dispara la descarga del componente al repositorio Maven local como vemos en el videoAl agregar una dependencia a un proyecto es posible especificar el type (por ej., jar), el scope (por ejemplo: test), y si es o no optional.Parent projectOtra variante es utilizar un proyecto padre mediante el tag &amp;lt;parent&amp;gt;, como ocurra en versiones anteriores de los ejemplos de Uqbar hasta 2019:&amp;lt;parent&amp;gt;    &amp;lt;groupId&amp;gt;org.uqbar-project&amp;lt;/groupId&amp;gt;    &amp;lt;artifactId&amp;gt;uqbar-xtend-parent&amp;lt;/artifactId&amp;gt;    &amp;lt;version&amp;gt;2.17.1&amp;lt;/version&amp;gt;&amp;lt;/parent&amp;gt;El parent project permite reutilizar definiciones comunes entre varios proyectos. En este caso particular, uqbar-xtend-parent (el nombre que le dimos a este artefacto) sirve para definir  que utilizaremos la versin 2.17.0 de Xtend  con una dependencia para correr tests unitarios  compilando a JDK 1.8PluginsLos plugins de Maven no solo permiten reutilizar lgica sino que adems ejecutan acciones cuando son descargados. As funciona el ncleo central de Maven: uno de los plugins ms conocidos es clean, que elimina el directorio de destino (en el caso de Xtend, donde estn los archivos Java y los .class que se generan a partir de los fuentes originales). Otro plugin conocido es Surefire, que ejecuta los tests de un proyecto basado en JDK.Distintos proyectos maven requieren/ofrecen distintos settings al ser referenciados como plugins. Veamos un ejemplo de la configuracin del plugin de xtend:  &amp;lt;plugins&amp;gt;        &amp;lt;plugin&amp;gt;      &amp;lt;groupId&amp;gt;org.eclipse.xtend&amp;lt;/groupId&amp;gt;      &amp;lt;artifactId&amp;gt;xtend-maven-plugin&amp;lt;/artifactId&amp;gt;      &amp;lt;version&amp;gt;2.20.0&amp;lt;/version&amp;gt;      &amp;lt;executions&amp;gt;        &amp;lt;execution&amp;gt;          &amp;lt;goals&amp;gt;            &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;            &amp;lt;goal&amp;gt;testCompile&amp;lt;/goal&amp;gt;          &amp;lt;/goals&amp;gt;          &amp;lt;configuration&amp;gt;            &amp;lt;outputDirectory&amp;gt;${project.build.directory}/xtend-gen/main&amp;lt;/outputDirectory&amp;gt;            &amp;lt;testOutputDirectory&amp;gt;${project.build.directory}/xtend-gen/test&amp;lt;/testOutputDirectory&amp;gt;          &amp;lt;/configuration&amp;gt;        &amp;lt;/execution&amp;gt;      &amp;lt;/executions&amp;gt;        &amp;lt;/plugin&amp;gt;  &amp;lt;/plugins&amp;gt;Aqu le estamos indicando a maven las caractersticas de la ejecucin del plugin, es decir:  los goals (metas/capacidades del plugin). Este es un plugin de compilacin por lo que indica los valores compile y testCompile.  la configuracin de las rutas del filesystem para los archivos java compilados.Lo recomendable en cada caso es siempre revisar la documentacin oficial del proyecto maven que queremos referenciar, para entender qu settings son requeridos o convenientes para nuestro proyecto.Dependencias transitivasUn detalle no menor de la resolucin de dependencias de maven es que tambin funciona para las dependencias transitivas.Por ejemplo:  proyectoA &amp;gt; proyectoB  proyectoB &amp;gt; proyectoC  proyectoC &amp;gt; proyectoD, proyectoE, proyectoFAl resolver las dependencias, el proyectoA necesitar descargar los componentes B, C, D, E y F. Incluso podramos requerir diferentes versiones de los mismos componentes.Noten que un proyecto comercial normal o mediano, puede incluir decenas y hasta cientos de dependencias. Eclipse permite integrar todas las definiciones de un pom junto con sus parents en la solapa Effective POM:Repositorios remotosLa pregunta que puede hacerse el lector es: desde dnde se descargan los componentes la primera vez? Cmo es que Maven sabe dnde ubicarlos, y cmo saber a qu versin apuntar? Por defecto, Maven apunta a un repositorio central donde se suben todos los componentes que utiliza la comunidad que trabaja con la JDK: https://repo.maven.apache.org/maven2/Cuando tenemos dudas sobre las versiones de algn componente, podemos hacer una bsqueda enhttp://search.maven.orgpor ejemplo, podemos buscar el componente uqbar-domain, que direcciona a https://search.maven.org/search?q=uqbar-domain. All tenemos todos los releases, con sus fechas correspondientes:Para publicar un componente en el repositorio Sonatype que est relacionado con Maven Central, hay que cumplir algunas reglas. En particular, para los componentes Uqbar hay que seguir estas instrucciones.Definiendo repositorios remotosEn nuestro pom.xml podemos definir repositorios adicionales donde encontrar componentes de Maven:&amp;lt;project&amp;gt;  ...  &amp;lt;repositories&amp;gt;    &amp;lt;repository&amp;gt;      &amp;lt;id&amp;gt;my-internal-site&amp;lt;/id&amp;gt;      &amp;lt;url&amp;gt;http://myserver/repo&amp;lt;/url&amp;gt;    &amp;lt;/repository&amp;gt;  &amp;lt;/repositories&amp;gt;  ...&amp;lt;/project&amp;gt;Otra opcin es escribir esto en el archivo settings.xml del directorio raz de nuestro M2, como cuenta este artculo.Flujo general de descarga de componentesA continuacin mostraremos el algoritmo que utiliza Maven para encontrar las dependencias de nuestro proyecto: si no lo tenemos en nuestro repositorio local, lo ir a buscar al repositorio Maven Central, y en ltima instancia, en los repositorios adicionales definidos por nuestro proyecto o la configuracin general de Maven (el archivo settings.xml).Ejecutando maven desde la consolaUna alternativa es trabajar directamente con Maven desde la consola, algo que puede ser til para automatizar tareas, como cuando trabajemos con herramientas de integracin continua.mvn clean compileEsto ejecuta varios plugins en forma sincronizada:  por un lado borra los directorios de destino, como hemos contado en el prrafo plugins  y luego compila los fuentes del proyecto, lo cual implica descargarse las dependencias, y en el caso del plugin de Xtend, convertir los archivos .xtend a .java (y luego generar los .class)Si queremos ver el rbol de dependencias transitivas, podemos escribirmvn dependency:treePero cmo sabemos qu comando debemos ejecutar? Para eso hay que entender el ciclo de vida de un build de Maven.Ciclos de buildMaven est pensado para todo el ciclo de vida del proyecto. Lo vamos a usar para compilar, para generar cdigo (de ser necesario), para correr los tests, para empaquetar, y hasta para publicar nuestros artefactos generando releases con trazabilidad.Maven define un conjunto de etapas en la construccin (build) de nuestro proyecto. Resumimos algunas ac:  generate-sources: generar cdigo, previo a compilacin.  compile: compila el cdigo fuente.  test: ejecuta los test cases  package: genera un paquete con el cdigo (.jar por ejemplo)  install: hace pblico el paquete en nuestro repositorio local (ver repositorios locales en las siguiente seccin)  deploy: publica el artefacto en un repositorio remoto (ver repositorios locales en las siguiente seccin)Podemos indicar a Maven que ejecute hasta cierta fase. Por ejemplo:mvn compileVa a ejecutar las dos primeras fases.mvn testLas tres primeras. Es decir es igual a mvn compile + correr los tests.De la misma manera podemos trabajar en Eclipse con el plugin M2:Relacin entre plugins y ciclos del buildA continuacin dejamos un diagrama bsico que muestra la relacin entre plugin y el ciclo de vida del build:El grfico no incluye plugins que estamos usando en Algoritmos 2: Xtend, cobertura de tests, etc. pero sirve como referencia para entender qu goals se ejecutarn en base al comando Maven pedido.Resumen general de la arquitectura MavenDocumentacin oficialPara ms informacin recomendamos leer la documentacin oficial del proyecto Maven:  POM reference  Introduction to the POMY estos links:  Maven in 5 minutes  Simple Explanation of Maven - video de la Universidad de CincinnatiLinks relacionados  Pgina principal de Algoritmos 2"

} ,

{

"title"    : "Mejorar la experiencia del pharoer",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/mejorar-la-experiencia-del-pharoer.html",
"date"     : "",
"content"  : ""

} ,

{

"title"    : "Mensajes de colecciones",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/mensajes-de-colecciones.html",
"date"     : "",
"content"  : "Este es un pequeo resumen de mensajes que entiende una coleccin. Lo que sigue sirve para todos los sabores de colecciones.Qu puedo hacer con los conjuntos de objetos? Muchas cosas, las colecciones entienden mensajes muy tiles para ayudarnos a abstraernos un poquito. Vamos a separarlos en los que tienen efecto colateral sobre la coleccin receptora y los que no.Con efectoEstos mensajes alteran a la coleccin que recibe el mensaje. Si no quiero perder la coleccin original puedo o bien copiar la coleccin mandndole shallowCopy y luego usar estos mensajes, o replantearme si no quera usar alguno de los mensajes de colecciones sin efecto :)Agregarle objetosSmalltalkpajarosadd:pepita.Wollokpajaros.add(pepita)Tambin existe el mensaje addAll: en Smalltalk y addAll(conjunto) en Wollok que recibe otra coleccin y agrega todos los elementos del parmetro a la coleccin receptora.SmalltalkpajarosaddAll:picafloresWollokpajaros.addAll(picaflores)Quitarle objetosSmalltalkpajarosremove:pepita.Wollokpajaros.remove(pepita)Anlogamente al addAll:/addAll(conjunto), existe el removeAll:/removeAll(conjunto) que le quita a la receptora todos los que estn en la coleccin parametrizada.Sin efectoEstos mensajes se pueden mandar tantas veces como queramos sin miedo de alterar la coleccin receptora.Saber cuntos objetos tieneSmalltalkpajarossize.Wollokpajaros.size()Que me devuelve? Un objeto nmero con la cantidad de objetos que conoce.Preguntarle si tiene un objetoSmalltalkpajarosincludes:pepita.Wollokpajaros.contains(pepita)Que me devuelve? Un objeto booleano, true o falseUnirlo o intersectarlo con otro conjuntoSmalltalkgolondrinasunion:picaflores.Wollokgolondrinas.union(picaflores)Que me devuelve? Una nueva coleccin con la unin de ambas.Smalltalkavesintersection:voladores.Wollokaves.intersection(voladores)Que me devuelve? Una nueva coleccin con la interseccin de ambas.Siendo que la unin y la interseccin est pensada para conjuntos matemticos, estos mensajes slo lo entienden los sets.Adems en Wollok puede hacerse:golondrinas+picafloresQue retorna la concatenacin de ambos conjuntos, retornando una coleccin del mismo sabor que la receptora.Seleccionar los elementos que cumplen con un criterioSmalltalkpajarosselect:[:unPajaro|unPajaroestaDebil].usuariosselect:[:unUsuario|unUsuariodeuda&amp;gt;1000].Wollokpajaros.filter({unPajaro=&amp;gt;unPajaro.estaDebil()})usuarios.filter({unUsuario=&amp;gt;unUsuario.deuda()&amp;gt;1000})Que me devuelve? Una nueva coleccin con los objetos que cuando se los evala con el bloque, dan true.Buscar algn elementos que cumpla con un criterioSmalltalkpajarosdetect:[:unPajaro|unPajaroestaDebil].Wollokpajaros.find({unPajaro=&amp;gt;unPajaro.estaDebil()})Que me devuelve? Un objeto de la coleccin que cuando se lo evale con el bloque, de true.Qu pasa si no hay ningn objeto que cumpla la condicin? Explota, lo cual tiene sentido porque no sabe qu hacer si no lo tiene. Por eso existe otra versin en la cual podemos decirle qu devolvernos si no hay ninguno.Smalltalkpajarosdetect:[:unPajaro|unPajaroestaDebil]ifNone:[pajarosanyOne].Wollokpajaros.findOrElse({unPajaro=&amp;gt;unPajaro.estaDebil()},{pajaros.anyOne()})Recolectar el resultado de hacer algo con cada elementoSmalltalkpajaroscollect:[:unPajaro|unPajaroultimoLugarDondeFue].Wollokpajaros.map({unPajaro=&amp;gt;unPajaro.ultimoLugarDondeFue()})Que me devuelve? Una nueva coleccin con los objetos que devuelve el bloque al aplicarlo con cada elemento.Verificar si todos los elementos de la coleccin cumplen con un criterioSmalltalkpajarosallSatisfy:[:unPajaro|unPajaroestaDebil].Wollokpajaros.all({unPajaro=&amp;gt;unPajaro.estaDebil()})Que me devuelve? un booleano que indique si todos los objetos de la coleccin dan true al evaluarlos con el bloque.Verificar si algn elemento de la coleccin cumple con un criterioSmalltalkpajarosanySatisfy:[:unPajaro|unPajaroestaDebil].Wollokpajaros.any({unPajaro=&amp;gt;unPajaro.estaDebil()})Que me devuelve? un booleano que indique si alguno de los objetos de la coleccin da true al evaluarlo con el bloque.Reducir una coleccin haciendo algo un elemento y el resultado de la reduccin con el elemento anteriorSi queremos evaluar un bloque de dos parmetros con cada elemento de la coleccin, usando como primer parmetro la evaluacin previa, y como segundo parmetro ese elemento (o sea, lo que en funcional vimos como fold)Smalltalkpajarosinject:0into:[:inicial:unPajaro|inicial+unPajaropeso].&quot;sumatoriadepesos&quot;pajarosinject:(pajarosanyOne)into:[:masFuerte:unPajaro|(unPajaroenergia&amp;lt;masFuerteenergia)ifTrue:[unPajaro]ifFalse:[masFuerte]]&quot;maximosegunenergia&quot;Wollokpajaros.fold(0,{inicial,unPajaro=&amp;gt;inicial+unPajaro.peso()})//sumatoriadepesospajaros.fold(pajaros.anyOne(),{masFuerte,unPajaro=&amp;gt;if(unPajaro.energia()&amp;lt;masFuerte.energia())unPajaroelsemasFuerte})//maximosegunenergiaQue me devuelve? La ultima evaluacin del bloque.Para qu me sirve? Para muchas cosas: obtener el que maximice o minimice algo, obtener el resultado de una operacin sobre todos (p.ej. sumatoria), y ms. Por lo general existen operaciones de ms alto nivel para la mayora de las reducciones ms comunes, de ser as obviamente es preferible usar esos mensajes en vez de hacer la reduccin.Por ejemplo, en Wollok podramos haber hecho directamente:pajaros.sum({unPajaro=&amp;gt;unPajaro.peso()})pajaros.max({unPajaro=&amp;gt;unPajaro.energia()})Obtener una coleccin de otro saborEn Smalltalk existen los mensajes asSet, asBag, asOrderedCollection y asSortedCollection: que retornan una coleccin nueva a partir de la receptora que tiene otras caractersticas (ver sabores de colecciones). En particular asSet y asSortedCollection: son de uso ms comn para quitar repetidos u ordenar en base a un criterio respectivamente.usuarios.asSortedCollection:[:usuarioJoven:usuarioViejo|usuarioJovenedad&amp;lt;usuarioViejoedad]En Wollok, al slo haber sets y listas, lo que ambas entienden son asSet() y asList(). Las listas ordenadas por un criterio pueden obtenerse mediante el mensaje sortedBy(criterio), que retorna una nueva coleccin con los elementos de la receptora ordenadas segn el bloque recibido.usuarios.sortedBy({usuarioJoven,usuarioViejo=&amp;gt;usuarioJoven.edad()&amp;lt;usuarioViejo.edad()})A su vez en Wollok tambin existe el mensaje sortBy(criterio) que se diferencia en que en vez de retornar una nueva coleccin ordenada de esa forma, modifica la coleccin receptora para quedar ordenada as. O sea, produce un efecto colateral.Y la iteracin?El mensaje do: en Smalltalk o forEach(bloque) en Wollok, sirve para hacer algo con cada objeto de la coleccin. Este mensaje en s mismo no tiene efecto colateral, pero tampoco tiene un valor de retorno que pueda interesarnos. Entonces, cundo se usa? Slo tiene sentido usar este mensaje cuando lo que queremos hacer sobre cada elemento (o sea, el bloque) s produce un efecto.Smalltalkpajarosdo:[:unPajaro|unPajarovola:100].Wollokpajaros.forEach({unPajaro=&amp;gt;unPajaro.vola(100)})Yo no pretendo recolectar resultados, slo quiero que pasen cosas con cada elemento.Importante: no usar el do:/forEach para todo, los mensajes que vimos anteriormente son abtracciones mucho ms ricas que nos permiten concentrarnos en nuestro objetivo y no en el algoritmo para lograr el resultado, seamos declarativos!"

} ,

{

"title"    : "Mensajes y metodos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/mensajes-y-metodos.html",
"date"     : "",
"content"  : "DefinicionesUn mensaje es algo que yo le puedo decir a un objeto.Un mtodo es una secuencia de lneas de cdigo que tiene un nombre.Cuando se le enva un mensaje a un objeto, se activa un mtodo cuyo nombre coincide con el mensaje enviado. La palabra mtodo puede entenderse como forma, describe la forma en que algunos objetos responden a un determinado mensaje cuando alguien se los enva.P.ej. si tengo un objeto referenciado por la variable pepe, y pongoSmalltalk:pepedireccionWollok:pepe.direccion()entonces  estoy enviando el mensaje direccion  se va a activar un mtodo llamado direccion. Qu mtodo? El que decida el method lookupA quines se le pueden mandar mensajes en un mtodo?  A los objetos que conocidos mediante atributos  A los objetos que me pasan por parmetro  A m mismo usando self  A los objetos bien conocidos (incluyendo a los literales)Importante no olvidar  Los mensajes los entienden los objetos  Si a un objeto que entiende el mensaje m le envio el mensaje m entonces se va a activar el mtodo m para ese objeto  Cuando en un mtodo dice self, es una referencia al objeto que recibi el mensaje por el cual se activ el mtodo.En el ejemplo, si en el mtodo direccion dice self, entonces al hacer pepe direccion este self va a ser una referencia al objeto referenciado por pepe."

} ,

{

"title"    : "Metamodelo",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/metamodelo.html",
"date"     : "",
"content"  : "Un modelo es una descripcin abstracta que describe aquello que se desea construir. Al definir un modelo uno sigue un conjunto de reglas. Por ejemplo: en un diagrama de secuencia las flechas (mensajes) entre las lneas deben darse de determinadas maneras, no pueden tener cualquier organizacin porque no tendra sentido. A este conjunto de reglas lo denominamos metamodelo.El metamodelo nos dice:  qu tipo de abstracciones podemos usar en nuestro modelo (por ejemplo: clases)  qu caractersticas podemos asociarle a esas abstracciones (por ejemplo: mtodos, atributos)  qu mecanismos tenemos para relacionar esas abstracciones entre s (herencia, asociacin)Al construir, si utilizamos un lenguaje de alto nivel (o sea, no assembler) ese lenguaje tambin tendr la capacidad de especificar abstracciones dentro del lenguaje, como procedimientos, funciones, tipos abstractos de datos, clases, objetos, herencia, polimorfismo, aspectos, mixins, servicios, componentes, etc. Obviamente, las abstracciones que puedo construir en un lenguaje dado, dependen tambin de un conjunto de reglas; dicho de otra manera el lenguaje tiene su propio metamodelo."

} ,

{

"title"    : "Metaprogramacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/metaprogramacion.html",
"date"     : "",
"content"  : "ConceptoMetaprogramacin es el proceso o la prctica por la cual escribimos programas que generan, manipulan o utilizan otros programas.Ejemplos:  Un compilador se puede pensar como un programa que genera otro programa.  Un formateador de cdigo es un programa que manipula otro programa.  Una herramienta como javadoc utiliza nuestro programa para generar su documentacin.Para qu se usa la metaprogramacin ?En general la metaprogramacin se utiliza ms fuertemente en el desarrollo de frameworks. Simplemente porque un framework va a resolver cierta problemtica de una aplicacin, pero no va a estar diseado para ninguna en particular. Es decir, la idea de framework es que se va a poder aplicar y utilizar en diferentes dominios desconocidos para el creador del framework.Entonces estos frameworks van a manipular objetos, sin conocerlos de antemano.Ejemplos:  ORMs como hibernate: que van a encargarse de persistir las instancias de nuestras clases sin siquiera conocerlas de antemano.  Frameworks de UI: que debern saber mostras cualquier objeto.  Otras herramientas:          javadoc: es una herramienta como el compilador de java, que lee el cdigo fuente y genera documentacin html.      code coverage: herramientas que miden cunto de nuestro cdigo es realmente ejecutado al correr los tests, y cuales lineas no.      analizadores de cdigo: que evalan nuestro cdigo y genera mtrics o miden violaciones a reglas definidas. Como el estilo de cdigo, complejidad ciclomtica, etc. Por ejemplo para java existe sonar que junto a maven automatizan y concrentran varias otras herramientas.      Modelos y metamodelosAs como todo programa construye un modelo para describir su dominio. El domino de un metaprograma es otro programa denominado programa objeto o base y tendr un modelo que describe a ese programa, al que llamamos metamodelo.En el siguiente ejemplo, nuestro dominio contiene diferentes tipos de animales, entre ellos perros y humanos.El programa describe las caractersticas de los elementos del dominio utilizando (por ejemplo) clases, mtodos y atributos. Entonces, el modelo contiene una clase Perro, que modela a los perros en el domino. Y el programa manipula instancias de la clase Perro.Un metaprograma tendr a su vez un (meta)modelo que describe a su dominio, el programa base. As como en el dominio hay animales concretos, los habitantes del metadominio (= programa base) sern los elementos del programa: por ejemplo, clases, atributos, mtodos. Entonces el metamodelo deber tener clases que permitan describir esos conceptos, por ejemplo en el metamodelo de Java encontraremos las clases Class, Method, Field. Este metamodelo describe la estructura posible de un programa Java. En otro lenguaje, ese metamodelo tendra diferentes elementos.As como el programa manipula las instancias de las clases Perro o Animal, el metaprograma manipula las instancias de las clases que conforman el metamodelo (Class, Method, Field, o las que fueran).Los lenguajes pueden proveen herramientas de Reflection para trabajar sobre su propio metamodelo.Ejemplo de metaprogramacin en Java: XUnitEjemplo de metaprogramacin en Ruby: XUnit"

} ,

{

"title"    : "Method lookup",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/method-lookup.html",
"date"     : "",
"content"  : "Es el mecanismo por el cual se determina para el envo de un mensaje qu mtodo se debe ejecutar. Este mecanismo puede variar en funcin de la tecnologa usada, la explicacin que se da a continuacin se basa en Smalltalk usando clases, para leer sobre este mecanismo usando prototipos ver Prototipado.Qu pasa cuando a un objeto i instancia de la clase C se le enva un mensaje de nombre m?Tenemos (a efectos de entender el mecanismo porque esto lo hace internamente el ambiente) que mantener una referencia a la clase donde estamos buscando en un momento determinado.Al principio la clase actual es C por ser la clase a partir de la cual instanciamos al objeto receptor del mensaje que es i.El algoritmo es el siguiente:1. se busca en la clase actual un mtodo con el nombre m1a. si se encuentra se ejecuta el mtodo encontrado; se ejecuta el mtodo en el objeto i y se termin el method lookup1b. si no se encuentra y la clase actual no es Object la clase actual pasa a ser la superclase de la clase actual y se vuelve a 1.1c. si no se encuentra y la clase actual es Object entonces el objeto i no entiende el mensaje mEl comportamiento por defecto en Smalltalk cuando un objeto no entiende un mensaje es lanzar un error. Esto se logra a travs del envo de un mensaje llamado #doesNotUnderstand: al objeto i (el mtodo #doesNotUnderstand: est definido en la clase Object)Ejemplo bsicoSi le enviamos el mensaje asUppercase al objeto &#39;hola&#39; (o sea, al string &#39;hola&#39;) qu debera pasar?Asumamos (porque no es as) que &#39;hola&#39; es instancia de String, que String es subclase de Collection y que Collection es subclase de Object.Siguiendo el algortmo de arriba a travs de los pasos indicados con -i es &#39;hola&#39;clase actual es Stringm es #asUppercase- se busca en String un mtodo con el nombre #asUppercase- se encuentra el mtodo #asUppercase en la clase String- se ejecuta el mtodo #asUppercase de la clase String sobre i el objeto receptor del mensaje (o sea hola)Conclusin: &#39;hola&#39; entiende el mensaje #asUppercaseEjemplo (heredando un mtodo)Basndonos en el ejemplo 1, si le enviamos el mensaje isNil al objeto &#39;hola&#39; (o sea, al string &#39;hola&#39;) qu debera pasar?i es &#39;hola&#39;clase actual es Stringm es #isNil- se busca en String un mtodo con el nombre #isNil- no se encuentra el mtodo #isNil en String y la clase actual no es Object entonces la clase actual pasa a ser Collection (la superclase de la clase actual) y se vuelve a 1.- se busca en Collection un mtodo con el nombre #isNil- no se encuentra el mtodo #isNil en Collection y la clase actual no es Object entonces la clase actual pasa a ser Object (la superclase de la clase actual) y se vuelve a 1.- se busca en Object un mtodo con el nombre #isNil- se encuentra el mtodo #isNil en la clase Object- se ejecuta el mtodo #isNil de la clase Object sobre i el objeto receptor del mensaje (o sea hola)Conclusin: &#39;hola&#39; entiende el mensaje #isNilEs importante entender que, independientemente de dnde se mande un determinado mensaje (por ejemplo, podra ser en un mtodo heredado donde se mande un mensaje a self), el method lookup va a arrancar por la clase a partir de la cual se instanci el objeto. Lo nico que puede alterar este mecanismo para empezar a buscar desde una clase distinta es si se mand el mensaje a super.Ejemplo (no entiende el mensaje)Basndonos en el ejemplo 1, si le enviamos el mensaje factorial al objeto &#39;hola&#39; (o sea, al string &#39;hola&#39;) qu debera pasar?i es &#39;hola&#39;clase actual es Stringm es #factorial- se busca en String un mtodo con el nombre #factorial- no se encuentra el mtodo #factorial en String y la clase actual no es Object entonces la clase actual pasa a ser Collection (la superclase de la clase actual) y se vuelve a 1.- se busca en Collection un mtodo con el nombre #factorial- no se encuentra el mtodo #factorial en Collection y la clase actual no es Object entonces la clase actual pasa a ser Object (la superclase de la clase actual) y se vuelve a 1.- se busca en Object un mtodo con el nombre #factorial- no se encuentra y la clase actual es Object entonces el objeto i no entiende el mensaje mO dicho de otra forma, &#39;hola&#39; no entiende el mensaje #factorial"

} ,

{

"title"    : "Method missing",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/method-missing.html",
"date"     : "",
"content"  : "Method missing (o Does not understand en Smalltalk) es un punto de intercepcin en el method lookup que ofrecen algunos lenguajes para definir cdigo a ejecutar si el objeto receptor no entiende el mensaje recibido. Si el method lookup falla, el objeto receptor recibir el mensaje method_missing que en Object lanza un error por no entender el mensaje, pero qu pasa si redefinimos este mensaje?Poder interceptar el method lookup de esta forma y redefinir lo que debera suceder en caso de que un objeto de la clase A no entienda el mensaje recibido es una herramienta muy poderosa ya que permite armar definiciones genricas para cualquier mensaje (o para un amplio conjunto que nosotros estemos interesados).Algunos ejemplos de uso:  en ocasiones es til usar un objeto que ante cualquier mensaje no haga nada, pero tampoco explote (un deaf object), en este caso la implementacin es trivial ya que un method_missing vaco har que la interfaz de nuestro objeto sea infinita.  se puede usar para hacer APIs que, en base a algn patrn del nombre del mensaje, se pueda ejecutar una lgica particular. Por ejemplo, en Ruby on Rails se pueden consultar todos los objetos persistidos que cumplan un cierto criterio en base a los atributos de los mismos con un mensaje a la clase find_by que recibe un diccionario:Person.find_by(user_name:user_name,password:password)Pero tambin se puede usar de la siguiente forma:Person.find_by_user_name_and_password(user_name,password)  si se quiere implementar un decorator para lo cual el decorador tendr muchos mtodos que sean slo delegar en el decorado el mismo mensaje que recibi, podra resolverse el dispatch de forma genrica en el method_missing y slo definir aquellos mtodos en los cuales s existe alguna lgica propia que aportar.Supongamos que queremos hacer el method_missing para nuestro decorador, podra ser algo como:defmethod_missing(symbol,*args,&amp;amp;block)if@decorado.responds_to?(symbol)@decorado.send(symbol,*args)elsesuperendendDe esa forma si el objeto decorado entiende el mensaje, se lo mandar, de lo contrario ejecutar method_missing de la superclase."

} ,

{

"title"    : "Metodos de clase para crear objetos inicializados",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/metodos-de-clase-para-crear-objetos-inicializados.html",
"date"     : "",
"content"  : "A veces, es necesario inicializar alguna/s de la/s variable/s de un objeto, con objetos fijos, o con objetos que hay que pasarle apenas se crea el objeto.Para esto hacemos un mtodo al que por convencin se lo llama initialize, y le enviamos el mensaje correspondiente a cada objeto que creamos desde el workspace. Por ejemplo#Camioninitializeviajes:=Setnew.desgasteDeLasRuedas:=0.puedeViajar:=true.chofer:=unFerchochofer:=unFercho&quot;...enelworkspace...&quot;elReyDelAcceso:=Camionnew.elReyDelAccesoinitialize.elReyDelAccesoconductor:cacho.&quot;cacholotenacreadomsarribaenelworkspace&quot;Ahora bien, seran muy felices dos cosas  ahorrarme el decirle inicialize a cada Camion que creo  poder pasarle el chofer al camin en el momento de crearlo,Con la lazy inicialization, puedo lograr lo primero pero no lo segundo.Una forma de lograr las dos cosas es definir un mtodo de clase que tiene como objetivo crear un objeto ya configurado y listo para usar.Cmo hacemos? Fcil#CamionclassnuevoConducidoPor:unFercho|camionNuevo|camionNuevo:=selfnew.camionNuevoinitialize.camionNuevochofer:unFercho.^camionNuevoVemos que el mtodo  crea un camin nuevo envindose un mensaje a self, que es la clase Camion.  lo configura  lo devuelve (muuuuy importante)En el workspace nos quedaelReyDelAcceso:=CamionnuevoConducidoPor:cacho.qu ganamos?  que no nos olvidamos de inicializar ningn camin  que el workspace queda ms compacto, importante para los workspace de TP que pueden implicar la creacin de muchos objetos.  que si le digo a la gente que va a usar los camiones que los cree siempre dicindole a la clase lo que yo les indico, todos los camiones van a nacer ya con chofer asignado, lo que tal vez es necesario para que los camiones no den errores despus."

} ,

{

"title"    : "Min  y max",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/min--y-max-.html",
"date"     : "",
"content"  : "ejemplo: un remis cobra 2 pesos por kilmetro, mnimo 5 pesos. Tengo que escribir el mtodo precioViaje: en la clase Remis. Hago esto?precioViaje:unViaje|precio|precio:=2*unViajedistancia.precio&amp;gt;=5ifTrue:[^precio]ifFalse:[^5]nuuuuuuu  los programadores objetosos con estilo slo usan  min: y max:. Estos mensajes los entienden los nmeros, reciben otro nmero como parmetro, y devuelven el ms chico / ms grande entre self y el parmetro. Pueden probar esto en un workspace3min:83max:83min:13max:1Entonces cmo queda el precioViaje:? Lo que tengo que devolver es el mximo entre 5 y el resultado de la cuenta (pinsenlo ), entonces queda asprecioViaje:unViaje^5max:(2*unViajedistancia)bel-lezaPara practicar, hagamos que a un remis le pueda preguntar  la cantidad de pasajeros legal, que es la que tiene, pero nunca puede ser ms de 5. O sea, si en realidad lleva 7 personas, la cantidad legal es 5.  el consumo por combustible, que es 1 litro cada 8 km, mnimo 2 litros.Los remises entienden distancia y cantPasajeros"

} ,

{

"title"    : "Mixins",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/mixins.html",
"date"     : "",
"content"  : "Similares a los Traits, estas construcciones, que proveen la implementacin de un conjunto de mtodos, pueden ser combinadas y conforman un mecanismo de comparticin de cdigo complementario a las clases. Su principal diferencia con los Traits es que pueden definir y acceder a variables y su combinacin no producen conflictos, ya que estos se resuelven automticamente por un mecanismo de linearization.Los Mixins tienen implementaciones en varios de los lenguajes ms modernos, como ser Ruby, Scala (en el lenguaje se les dice trait, pero son mixins), Python y Groovy.Gracias al mecanismo de linearization, los mixins resuelven el problema del rombo o diamante presente en la herencia mltiple, definiendo una precedencia entre los mixins que componen una clase dependiendo del orden de composicin, es decir, si la clase C se compone de los mixins {A, B}, se tomarn los mtodos de B en los casos en los que se presenten conflictos. Como consecuencia de esta decisin de diseo de los mixins, resultar diferente la composicin {A, B} que {B, A}.DescripcinUn Mix-In es una subclase abstractas: como una subclase que no est ligada a ninguna superclase. Se puede aplicar a cualquier superclase (can be mixed-in)Se puede ver como una refactorizacin de la herencia hacia una chain of resposibilities.  En una herencia normal, cada clase (nodo) de la cadena, conoce exactamente a su siguiente (superclase). Por lo que la cadena es rgida.  Un mixin es un nodo que no conoce est atado al siguiente en la cadena, aunque puede usarlo (como en el chain of resposibilities de GoF). Por lo que se puede reutilizar y aplicar a diferentes cadenas.Concepto  Cumplen el rol de la reutilizacin que cumple una clase, sin tener el rol de ser generadores de instancias.  Representan o modelan un cierto feature que puede ser reutilizado y aplicado a varias clases en diferentes jerarquas  Generalmente se utilizan para roles o caractersticas de una clase como Observable.  No presentan el problema del diamante de la herencia mltiple, ya que el orden de composicin acta como tcnica de resolucin implcita. Es decir el primer mixin declarado que entienda el mensaje lo va a responder.Clasificacin  Completo: cuando todo su comportamiento depende de s mismo y no de un comportamiento externo (definido en la clase sobre la que se aplica).  Parcial: cuando su comportamiento usa/delega/depende de otro comportamiento de la clase sobre la que se aplica.Ejemplos  Uso de mixins en Ruby  Uso de mixins en Scala  Juegos de EstrategiaEn Scala es posible, no slo aplicar el mixin estticamente en la jerarqua, sino tambin al instanciar un objeto particular. En este ejemplo vemos una alternativa al decorator basado en mixins: Stackable Trait PatternPapersMixin-Based Inheritance"

} ,

{

"title"    : "Modelando objetos   responsabilidades y delegacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/modelando-objetos---responsabilidades-y-delegacion.html",
"date"     : "",
"content"  : "A la hora de querer resolver un problema parados en el paradigma de objetos, hay ciertas cuestiones bsicas que debemos tener en cuenta para triunfar y ser felices :). De todas aquellas, vamos a nombrar principalmente a las que se destacan en este paradigma en contraposicin de los otros que conocemos (lgico, funcional y estructurado o procedural).ObjetoCuando programamos en objetos, debemos pensar en objetos. Solo tenemos objetos a los que mandarles mensajes para que nos resuelvan nuestro problema. A su vez, a veces es conveniente tener muchos objetos, para poder partir el problema en varias partes ms pequeas y que sea sencillo resolver cada parte por separado. Cada un de esos otros objetos van a tener una responsabilidad.ResponsabilidadEs aquello que hace un objeto. Aquello que nosotros queremos que haga. Si tenemos un solo objeto que hace demasiadas o todas las tareas de nuestro programa (a.k.a. God Object), probablemente sea complicado que nuestro programa cambie y resuelva nuevos problemas. Va a ser complicado saber si funciona correctamente (testearlo). Va a ser complicado arreglar los errores que tenga!! (si es que los tiene). Si tenemos varios objetos con menos responsabilidades cada uno (mas chiquitos), va a ser ms sencillo intercambiarlos usando polimorfismo, reutilizar partes de cdigo en otras partes de nuestro programa, evitar repeticiones de lgica Por esas razones, es que queremos que nuestros objetos tengan bien repartidas las responsabilidades entre ellos.Delegacion y ColaboracinCuando tenemos bien repartidas las responsabilidades entre nuestros objetos, probablemente hayamos encontrado varios objetos. Ahora, cada uno resuelve su problema Cmo los pegamos? Los objetos se conocen a travs de referencias, y as pueden mandarse mensajes. Cuando un objeto resuelve parte de un problema y le pasa otra parte del problema a algun objeto que conozca, hablamos que ambos objetos estan colaborando. As, cuando un objeto le encarga toooda la tarea a resolver a otro objeto, decimos que este delega la responsabilidad.EjemploSupongamos que queremos que un tanque que dispara misiles trmicos le dispare a otro tanque. El dao que hace un misil trmico es 10 veces la cantidad de ocupantes del tanque al que es disparado. El tanque enemigo tiene una coraza que va decrementando a medida que recibe dao (el mismo es destrudo cuando la coraza llega a 0) y debe ser manejado por 3 personas. Una solucin bien delegada podra ser:objecttanqueDeMisiles{varmisil=misilTermicomethoddispararA(otroTanque) {otroTanque.recibirDanio(misil.cuantoDanioPara(otroTanque))}}objecttanqueEnemigo{varcoraza=100methodrecibirDanio(cant){coraza=(coraza-cant).max(0)}methodcantidadOcupantes() {return3}}objectmisilTermico{methodcuantoDanioPara(unTanque){returnunTanque.cantidadOcupantes()*10}}Es particularmente importante que la forma de recibir dao est delegada en el tanque enemigo, ya que no hay ningn motivo para que el tanque de misiles sepa de la existencia de una coraza del enemigo (mejor en trminos de encapsulamiento).El mismo ejemplo en Smalltalk:#TanqueDeMisiles&amp;gt;&amp;gt;dispararA:otroTanqueotroTanquerecibirDao:(misilcuantoDaoPara:enemigo).#TanqueEnemigo&amp;gt;&amp;gt;recibirDao:cantcoraza:=(coraza-cant)max:0&amp;gt;&amp;gt;cantidadOcupantes^3#MisilTermico&amp;gt;&amp;gt;cuantoDanioPara:unTanque^unTanquecantidadOcupantes*10"

} ,

{

"title"    : "Monada",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/monada.html",
"date"     : "",
"content"  : "Este artculo est en construccin.  Functors, Applicatives, And Monads In Pictures  Un artculo con la introduccin a las mnadas: http://james-iry.blogspot.com/2007/09/monads-are-elephants-part-1.html  Formulacin alternativa de mnadas: http://en.wikipedia.org/wiki/Monad_(functional_programming)#fmap_and_join"

} ,

{

"title"    : "No hay instancias para el Show",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/no-hay-instancias-para-el-show.html",
"date"     : "",
"content"  : "A muchos probablemente les haya sucedido encontrarse con el error No instance for Show. Esto, contrario a lo que muchos creen, no significa que nos quedamos sin show por falta de instancias.Lo que significa es, en criollo, ARRRGH, no s mostrar esto en la consolaSlo que lo dice aproximadamente as:&amp;lt;interactive&amp;gt;:2:1:    No instance for (Show (a0 -&amp;gt; Bool))      (maybe you haven&#39;t applied enough arguments to a function?)      arising from a use of print    In the first argument of print, namely it    In a stmt of an interactive GHCi command: print itSolucin rpidaLa mayora de los datos son mostrables. Si yo quiero mostrar un 3, la consola lo sabe mostrar:Main&amp;gt; 33Pero no puedo mostrar una funcin:Main&amp;gt; even&amp;lt;interactive&amp;gt;:2:1:   No instance for (Show (a0 -&amp;gt; Bool))     (...)Solucin rpida 1Arriba de todo en el archivo .hs escribir:import Text.Show.FunctionsEsto hace que las funciones sean mostrables:Main&amp;gt; even&amp;lt;function&amp;gt;Solucin rpida 2En realidad, tcnicamente lo que estamos haciendo al hacer el import de Text.Show.Functions es lo mismo que agregar esto al principio de nuestro archivo:instance Show (a -&amp;gt; b) where  show f = &quot;&amp;lt;una funcin&amp;gt;&quot;Esto hace que las funciones sean mostrables:Main&amp;gt; even&amp;lt;una funcin&amp;gt;ExplicacinPara entender ms sobre el tema, se recomienda la lectura de Definiendo nuestros TiposTambin se recomienda la lectura de Learn you a Haskell, el captulo sobre clases de tipos"

} ,

{

"title"    : "Nombres de clases",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/nombres-de-clases.html",
"date"     : "",
"content"  : "Singular o plural?Partimos de que una clase representa un concepto, y cada instancia de esa clase va a representar a un ente que corresponde a ese concepto.P.ej. la clase Golondrina representa al concepto de ser golondrina, cada instancia representa a una golondrina (un ente de la vida real que en el contexto del software que estoy construyendo corresponde al concepto Golondrina).El nombre de una clase debe referirse a lo que va a representar una instancia cualquiera. Si le pongo Golondrina a una clase, es porque cada instancia va a representar a una golondrina.Entonces, si p.ej. a una clase le pongo Camiones, qu quiere decir?. Que cada instancia va a representar a un conjunto de camiones. Si quiero que cada instancia represente a un camin, entonces est mal ponerle plural al nombre de la clase, en este caso debera llamarse Camion."

} ,

{

"title"    : "Normalizacion en objetos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/normalizacion-en-objetos.html",
"date"     : "",
"content"  : "ObjetivoEl proceso de normalizacin se origina con el esquema relacional y ha sido ampliamente estudiado y difundido, ya que los RDBMS surgieron como una alternativa a los motores de bases de datos jerrquicos que permitan redundancia de la informacin y tenan problemas de consistencia, lo que llevaba a tener datos faltantes o duplicados.Si bien el modelo de objetos tiene algunas caractersticas diferenciales respecto al relacional, podemos encontrar decisiones que tienen que ver con la aplicacin (o no) de la normalizacin y el almacenamiento redundante de la informacin.EjemploConsideraremos como ejemplo un dominio conocido: la relacin many-to-many entre alumnos y cursos. Un alumno se inscribe en varios cursos y en cada curso tenemos muchos alumnos.Recordemos qu busca la normalizacin  Evitar redundancias  Evitar inconsistencias: no quiero que un profesor renuncie y el curso quede apuntando a un profesor inexistente  Reducir el impacto de los cambios en los datos: si cargu mal la informacin de un profesor, debera actualizarlo en un solo lugarPrimer modelo posibleEl alumno tiene como atributos nombre, y los cursos. El curso tiene el nombre del profesor (un String) y los alumnos que participan.Aplicando reglas de normalizacin (o no)Campos calculadosEs una tcnica usual en muchas tecnologas, en objetos tambin. Podramos pensar ejemplos:  la cantidad de alumnos de un curso  la cantidad de alumnos de un curso en condiciones de firmar  el promedio de notas de un alumno en un cursose trata de atributos que pueden calcularse pero que por algn motivo elegimos almacenarlos como dato, ya sea1) porque es conveniente cuando lo migramos a un esquema relacional, para facilitar las consultas posteriores, ej: conocer los cursos con ms de 40 alumnos seraselect*fromcursoscwherec.cantidad_alumnos&amp;gt;40Mientras que si no estuviera ese dato necesitaramos hacer un join con la tabla de relacin cursos-alumnos + el correspondiente count.2) porque queremos mejorar la performance, aun en objetos, en especial cuando es ms frecuente consultar la cantidad de alumnos en un curso vs. inscribir un alumno a un cursoCampos calculados vs. datos del negocio no siempre calculablesSi necesitamos saber cuntos inscriptos hubo al comienzo del cuatrimestre, debemos tener en cuenta que  el campo se puede calcular en un momento t0  pero una vez pasado ese momento, el clculo puede perderse (por ejemplo porque algn alumno abandona la cursada o se cambia de curso)Este requerimiento no tiene nada que ver con la normalizacin, porque no hay redundancia, en ese caso lo que tenemos que hacer es crear un atributo en el Curso1FN: Aplicabilidad en objetosLa primera forma normal nos pide que  no haya filas duplicadas, y esto se da mediante la identificacin de claves candidatas  no haya campos repetitivos / atributos multivaluadosAqu vemos que las restricciones de primera forma normal no aplican para el modelo de objetos, dado que no existe el concepto de relacin o tabla como punto de concentracin de todos los alumnos. Cada alumno que se crea forma parte del ambiente mientras tenga una referencia, y no hay riesgo de filas duplicadas ni necesidad de usar una clave candidata, ya que cada objeto nuevo tiene su propia identidad respecto a los dems objetos.Por otra parte, un alumno puede tener una coleccin de cursos y cada curso una coleccin de alumnos (o un mapa alumno-notas). La restriccin de no tener atributos multivaluados, o un atributo subdivisible en una estructura interna no aplica tampoco al modelo de objetos, donde la referencia es a cualquier tipo de objeto, incluido una coleccin.2FN y 3FN en objetosTanto 2 como 3FN buscan que todo determinante sea clave candidata, o explicado en una manera ms simple, no haya dependencias de ningn atributo con otro atributo  que forme parte de la clave principal  que no forme parte de la clave principalDado que en objetos no utilizamos el concepto de clave primaria, no tiene sentido discriminar cada caso en particular. Lo que s podemos revisar es el ejemplo nuevamente, donde en el objeto Curso se registra la informacin sobre el legajoDocente (un entero) y el nombreDocente (un String).pasa aNosotros podemos llegar a encontrar una abstraccin Docente de dos maneras posibles:  aplicando la lgica de normalizacin, donde vemos que existe una dependencia funcional entre el nombre del docente y su legajo (slo que el legajo y el nombre forman parte de la abstraccin Docente y la forma de normalizarlo implica generar una referencia del curso hacia el objeto Docente)  o bien mucho antes, cuando necesitamos la abstraccin Docente, porque es necesario agregarle comportamientoEl proceso de normalizacin de entidades en el esquema relacional surge naturalmente como un proceso de generacin de abstracciones posibles en el modelo de objetos.Por ltimo, podramos decidir que nuestro objeto Curso tuviera los atributos docente (una referencia a un objeto Docente), legajoDocente y nombreDocente por dos motivos:  uno de negocio, si como en el caso anterior necesitramos almacenar la informacin del docente en el momento de tomar el curso  para mejorar la performance, en ese caso introducimos una redundancia desnormalizando la informacin del curso. Eso permite que podamos obtener la informacin de un curso sin necesidad de navegar hacia otras entidades (dejando la referencia al docente en modo LAZY), algo que todo diseador debe contemplar para los casos de uso que el negocio exige.Redundancias por problemas de navegabilidadEl modelo relacional es sumamente flexible, en una relacin many-to-many Alumno-Curso, podemos navegar la relacin partiendo desde el curso o bien desde el alumno. En cambio, si en el modelo de objetos necesitamos resolver estos requerimientos  saber qu alumnos del curso de Diseo aprobaron el primer parcial  saber en cuntos cursos est anotado un alumno de lunes a viernesEs mucho ms fcil encarar estos objetivos si la relacin de asociacin entre Alumno y Curso es bidireccional, es decir que un alumno conoce la lista de cursos en los que est inscripto y un curso conoce la lista de alumnos que forman parte.ResumenEn el modelo de objetos podemos aplicar ciertas reglas de normalizacin o redundancia, generando referencias hacia nuevas entidades o bien duplicando la informacin de un objeto en otro.Diferencias entre el modelo relacional y el de objetos            Modelo relacional      Objetos                  Elimina duplicados mediante la primary key      Trabaja con identidad, no necesita claves naturales ni subrogadas              No permite atributos multivaluados      Permite referenciar a cualquier tipo de objeto, incluido conjuntos y mapas              Es un modelo flexible para navegar en cualquier direccin      Las referencias tienen una sola direccin, para tener una relacin bidireccional es necesario utilizar otra referencia              Puedo manipular los datos, los triggers o constraints me permiten asegurar la consistencia de los datos      No accedo directamente a los datos sino que envo mensajes, y los mtodos permiten asegurar la consistencia del estado de cada objeto      "

} ,

{

"title"    : "Notacion point free",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/notacion-point-free.html",
"date"     : "",
"content"  : "A veces, como consecuencia de definir solamente en trminos de Aplicacin Parcial y/o Composicin de funciones, escribir explcitamente los parmetros de la misma se vuelve redundante.Por ejemplo, se podra escribiresMultiploDeab=((==0).(`mod`a))bSin embargo, lo que est dentro del parntesis principal ya es una funcin que hace lo que queremos, con el tipo adecuado. Por lo que puede reescribirse de la siguiente manera:esMultiploDea=(==0).(`mod`a)Lo cual se conoce como notacin point-free, la cual es interesante porque pone nos permite concentrarnos en la combinacin de las funciones en lugar del pasaje de paramtro, subiendo as nuestro nivel de abstraccin.Al principio puede generar cierta confusin sobre la pregunta cuantos parmetros recibe la funcin?. As que analicemos algunos casos concretos.Una reglita bsicaLa regla es que una funcin como esa tiene tantos parmetros como la suma entre:  Los parmetros que aparecen a la izquierda del igual.  Los parmetros que le faltan a la expresin a la derecha del igual.Analizando el caso anterior vemos:  Un parmetro a la izquierda del igual: a. (Esta parte es la ms directa.)  La expresin de la derecha es una composicin y por lo tanto una funcin a-&amp;gt;b entonces le falta un parmetro.  En total la funcin recibe dos parmetros.Analizando un poco ms los tiposPara no confundirse, en la forma ms tradicional de escribir funciones a la expresin a la derecha del igual no le falta ningn parmetro:siguientex=x+1Se ve claramente que x+1 es una expresin que denota un valor numrico y no una funcin, o dicho de otra manera no le faltan parmetros. En cambio s le faltaran si uno pusiera por ejemplo (+1).La definicin anterior es totalmente equivalente a:siguiente=(+1)Al aplicar parcialmente la funcin (+) :: Num a =&amp;gt; a -&amp;gt; a -&amp;gt; a obtenemos otra funcin que es del tipo Num a =&amp;gt; a -&amp;gt; a. Si siguiente es igual a la funcin (+1), entonces su tipo es el mismo que el de (+1).En general lo ms comn es ver funciones que slo les falta el ltimo parmetro, como en el caso de esMultiploDe, ya que est definida en funcin de una composicin. No sera correcto definirla de esta forma a pesar de que ambos parmetros vayan en ese orden aplicados al final:esMultiploDe=(==0).flipmodComo no coincide la imagen de la funcin flip modflipmod::Integralc=&amp;gt;c-&amp;gt;c -&amp;gt; ccon el dominio de (==0)(==0)::(Eqa,Numa)=&amp;gt;a-&amp;gt;BoolLa composicin de estas dos funciones no es correcta (de hecho esa expresin tipa, pero no lo van a poder usar porque el tipo de esMultiploDe requerira un nico argumento que sea a la vez una funcin y un nmero equiparable y como que no tiene mucho sentido)Este otro ejemplo s sera correcto:resto=flipmodEl tipo de la funcin resto es el mismo que el de la funcin flip mod que ya mostramos antes.Pros y Cons de la notacin point-freeA favor de usar la notacin point-free es que nos fuerza a dejar de pensar en funcin de la aplicacin y los valores con los que estamos acostumbrados a trabajar, teniendo que pensar en definir funciones como equivalencia de otras funciones combinadas. El paradigma funcional se basa en la idea de combinar funciones, ellas son las divas de esta forma de pensar la programacin, por eso cuando definimos funciones como composicin de otras funciones y/o a la aplicacin parcial de las mismas con estilo point-free, el cdigo resultante es ms limpio :)La notacin point-free puede llevar a ofuscar el cdigo cuando se usa malintencionadamente. Al combinar funciones puede que se vuelva ms complicado inferir mentalmente el tipo de una expresin ya que cuesta ms deducir la cantidad de parmetros necesarios para que la funcin definida se reduzca a un valor concreto mediante la aplicacin.Otro problema que podra surgir dada una funcin compleja escrita de esta forma es que al intentar introducir un cambio menor de funcionalidad en la misma haya que hacer un cambio radical en el cdigo, sin embargo para el nivel de paradigmas esto no debera suceder."

} ,

{

"title"    : "Manejo de dependencias con NPM",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/npm-dependencias.html",
"date"     : "",
"content"  : "Versionado semnticoRecordemos que todo componente tiene una versin compuesta por tres nmeros:  major  minor  patchEjemplo: el componente typescript tiene la versin 3.6.3, donde 3 es el major number, 6 el minor y finalmente 3 es el patch.Para respetar el versionado semntico, al liberar una nueva versin tenemos que indicar qu es lo que trae ese nuevo componente:  si soluciona bugs, debera incrementar el patch: el componente typescript pasara a tener la versin 3.6.4  si trae nuevos features o funcionalidades que no rompen la retrocompatibilidad, debera incrementar el minor a 3.7.0  si trae nuevas funcionalidades que rompen la retrocompatibilidad (ej. mtodos o clases que dejaron de existir, o tienen diferente cantidad de parmetros), deberamos incrementar la major a 4.0.0Dependencias de un proyecto con NPMpackage.jsonEl Node Package Manager (NPM) almacena las dependencias de nuestro proyecto (entre otras configuraciones) en el archivo package.json, por ejemplo:  &quot;dependencies&quot;: {    &quot;@angular/animations&quot;: &quot;^8.2.7&quot;,    &quot;@angular/common&quot;: &quot;^8.2.7&quot;,    &quot;@angular/compiler&quot;: &quot;^8.2.7&quot;,    &quot;@angular/core&quot;: &quot;^8.2.7&quot;,  },  &quot;devDependencies&quot;: {    &quot;@angular-devkit/build-angular&quot;: &quot;^0.803.5&quot;,    &quot;@angular/cli&quot;: &quot;~8.3.5&quot;,    &quot;@angular/compiler-cli&quot;: &quot;^8.2.7&quot;,    &quot;@angular/language-service&quot;: &quot;^8.2.7&quot;,    &quot;typescript&quot;: &quot;~3.6.3&quot;  }Por ejemplo, ~3.6.3 implica que podemos subir hasta una versin minor (3.7.x), pero no ms (no a la 3.8.1 por ejemplo). El modificador ^8.2.7, implica que podemos subir todas las versiones minor y patch que necesitemos, pero no actualizaremos la versin major a 9.0.0 por ejemplo.Para ms informacin pueden leer el componente de node que trabaja el versionado semntico.package-lock.jsonMientras que el package.json permite configurar las dependencias para un rango de versiones posibles, el package-lock.json es la foto de las dependencias exactas que se descargaron en tu mquina, incluyendo las dependencias indirectas.Esto permite que todos los desarrolladores (y especialmente el CI) puedan replicar el mismo entorno y que las versiones que instalamos no dependa del momento en el que hacemos npm install.Primera instalacin con npm installLa primera vez que descargamos un proyecto, debemos descargar las dependencias, para eso debemos ejecutarnpm installSi existe el archivo package-lock.json, npm partir de esa definicin para ir a buscar las dependencias y bajarlas a nuestro directorio node_modules. Si no existe el archivo package-lock.json, entonces se basar en las definiciones del package.json para buscar las ltimas versiones posibles de cada uno de los componentes.Tengo que versionar el package-json? (subirlo a git)TL;DR S.La justificacin es que de esa manera estaremos seguros de que todos los que trabajamos en el proyecto tengamos las mismas dependencias.Actualizando nuestras dependenciasPara mantener al da las dependencias de nuestros ejemplos, tenemos dos opciones:Subir las versiones minor - npm updatePodemos detectar si hay nuevas versiones minor que no rompan la retrocompatibilidad escribiendo en nuestra consola o git bash:npm outdatedO directamente podemos escribir:npm updateAl ejecutar este comando:  se actualiza el package-lock.json  y tambin en el directorio node_modules descargamos los paquetes con el cdigo que vamos a utilizarSubir las versiones major (con coraje)Si ests seguro que vas a poder seguir manteniendo estable tu conjunto de dependencias, pods trabajar con npm-check-updates. Lo instals globalmente la primera vez:npm install -g npm-check-updatesY luego lo ejecutsncu -uEsto te va actualizar las versiones de tu package.json tratando de subir a la mayor versin posible. Luego pods correr npm update (o bien npm install si te bajaste el proyecto la primera vez)"

} ,

{

"title"    : "Objective c",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/objective-c.html",
"date"     : "",
"content"  : "Sobre el lenguaje  Objective C (wikipedia)  Programming with Objective CHerramientas basadas en Objective C:  Apple Developer Libraries  Apple OS X  Apple iOS"

} ,

{

"title"    : "Observer en pharo smalltalk",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/observer-en-pharo-smalltalk.html",
"date"     : "",
"content"  : "ResumenEl mecanismo de observer es as:  Hay un observador (que entiende el mensaje update:, y hay que implementarlo)  Hay un observado (que entiende los mensajes changed: y addDependent:, que no hay que implementar pero s usar)InicializacinAl inicializar todo (antes de que empiece a funcionar) tens que hacer:observadoaddDependent:observador.UsoDespus, el observado necesita avisar que l mismo cambi, y eso lo hace con:selfchanged:#variableQueCambiPharo mgicamente le va a mandar el mensaje update: #variableQueCambio a todos sus observadores. Entonces, en cada observador tens que definir el mtodo:update:nombreDeLoQueCambio&quot;achagoloqueseaquequierahacerelobserver.&quot;Algo comn para hacer ah es chequear si me interesa ese nombreDeLoQueCambio,  bien hacerle preguntas a mi observado (que me guard de antemano).Diagrama de Clases"

} ,

{

"title"    : "Objetos factory - instanciando objetos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/oo-objetos-factory.html",
"date"     : "",
"content"  : "IntroduccinInstanciar objetos no siempre resulta fcil, especialmente en los tests, cuando debemos tener en cuenta:  valores por defecto para esa clase de equivalencia  configuraciones para algunos tests especficos  tratando siempre de que sea fcil de usar y no repetir cdigoPor ejemplo, necesitamos definir una computadora que tiene 16 GB de RAM y un disco HDD de 2048, con mouse, en base a esta definicin:class SSD {  method precio() = 500  method estaCopado() = true}class HDD {  var property tamanio = 1024   // expresado en GB    method precio() = if (tamanio &amp;gt; 1024) 400 else 250  method estaCopado() = tamanio &amp;gt; 1024}class Memoria {  var property tamanio          // expresado en GB    method precio() = tamanio / 10  method estaCopada() = tamanio &amp;gt; 16}class Computadora {  var memoria  var disco = new HDD()  var mouse = true  method precio() = memoria.precio() + disco.precio() + 1000  method estaCopada() = memoria.estaCopada() || disco.estaCopado()}Clases de equivalencia para el precioLas clases de equivalencia para el precio se forman en base a diferentes configuraciones de computadoras  ssd, no importa la memoria  hdd de ms de 1TB, no importa la memoria  hdd de 1TB, no importa la memoria  hdd de menos de 1TB, no importa la memoriaLa presencia o no del mouse no juega ningn papel, y realmente tampoco la memoria que calcula siempre el mismo valor.Clases de equivalencia para estaCopadaEn cambio, las clases de equivalencia que configuran a una computadora copada son:  computadora con ssd, no importa la memoria (copada)  computadora con hdd de ms de 1TB, no importa la memoria (copada)  computadora con hdd de 1TB, memoria de 16 (no copada - caso borde en ambas configuraciones)  computadora con menos de 1TB, memoria ms de 16 (copada)  computadora con menos de 1TB, memoria de menos de 16 (no copada)Unificando las clases de equivalenciaAhora vemos que si intersectamos las clases de equivalencia para precio y estaCopada, las primeras 4 de estaCopada coinciden con las de precio, por lo tanto vamos a tener que buscar estas configuraciones:  var computadoraConSsd      = new Computadora()  var computadoraConPocoHdd  = new Computadora(disco = new HDD(tamanio = 512))  var computadoraComun       = new Computadora(disco = new HDD(tamanio = 1024))  var computadoraConMuchoHdd = new Computadora(disco = new HDD(tamanio = 2048))Dnde lo implementamosLas opciones son varias:  en cada test configuramos la computadora que necesitamos: eso tiene la desventaja de que si es necesario resolver la inicializacin en ms pasos, se empezarn a repetir en cada uno de los tests.  lo ubicamos en el describe como variables, eso tiene dos desventajas: a) los tests tienen pocas variables compartidas entre s (baja cohesin), no es fcil ver qu tests usan qu variables y la inicializacin tambin est lejos del momento en que se prueban, y b) cada vez que corremos un test se evalan todas las expresiones del describe, por lo que hay una penalizacin en performance.  delegar en otro objeto la inicializacin de las clases de equivalencia que necesitamos, algo comoobject computadoraFixture {  method computadoraConSSD() =    new Computadora()    method computadoraConPocoHdd() =    new Computadora(disco = new HDD(tamanio = 512))    method computadoraComun() =    new Computadora(disco = new HDD(tamanio = 1024))    method computadoraConMuchoHdd() =    new Computadora(disco = new HDD(tamanio = 2048))}Es decir, tenemos un objeto que nos ayuda a crear otros objetos, lo que podramos llamar objetos factory (fabrican configuraciones de objetos que nosotros necesitamos frecuentemente).Ventajas en el mantenimientoEl costo que pagamos es mantener una nueva abstraccin, la ventaja es que si la computadora tuviera ahora una lista de dueos:object juan {  method esCopado() = ...}object ceci {  method esCopado() = ...}class Computadora {  var memoria  var disco = new HDD()  var mouse = true  const duenios = []  method precio() = memoria.precio() + disco.precio() + 1000  method agregarDuenio(duenio) {    duenios.add(duenio)  }  method estaCopada() =    memoria.estaCopada() || disco.estaCopado() || duenios.any { duenio =&amp;gt; duenio.esCopado() }}Y necesitramos agregar en la computadora comn a dos dueos, solo debemos modificar un mtodo:  method computadoraComun() {    const compu = new Computadora(disco = new HDD(tamanio = 1024))    compu.agregarDuenio(ceci)    compu.agregarDuenio(juan)    return compu  }Tambin podramos hacer que los otros mtodos se llamen entre s para agregar los duenios:method computadoraConMuchoHdd() {  const compu = self.computadoraComun()  compu.disco(new HDD(tamanio = 2048))  return compu}Esto tambin podemos hacerlo con la variante del fixture, solo que cada vez que ejecutemos cada test se evaluarn todos los mtodos."

} ,

{

"title"    : "Temporary variables",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/oo-temporary-variable.html",
"date"     : "",
"content"  : "Introduccin: persona instrudaSupongamos que tenemos que conocer si Helmut es una persona instruida, esto ocurre cuando ley ms de 20 libros y conoce ms de 3 idiomas.Tenemos esta implementacin:object helmut {  var librosLeidos = 0  const idiomasQueConoce = []  method leerLibro() { librosLeidos = librosLeidos + 1 }  method conocerIdioma(idioma) { idiomasQueConoce.add(idioma) }  method esInstruido() ...}Bad smell: temporary variableEs un patrn frecuente la resolucin del ejemplo agregando un nuevo atributo en helmut:object helmut {  ...  var instruido = false  method esInstruido() = instruido}Una solucin similar puede ser definir instruido como una property, el efecto es el mismo. Esto tiene algunas desventajas:  el problema no es tanto incorporar un nuevo atributo, sino que es un atributo que podra calcularse  y que adems tiene dependencias con las otras dos variablesPara mantener consistente el estado de Helmut, deberamos codificar su comportamiento de la siguiente manera:object helmut {  var librosLeidos = 0  const idiomasQueConoce = []  var instruido = false  method leerLibro() {    librosLeidos = librosLeidos + 1    // sincronizo esInstruido...    instruido = librosLeidos &amp;gt; 20 &amp;amp;&amp;amp; idiomasQueConoce.size() &amp;gt; 3  }  method conocerIdioma(idioma) {    idiomasQueConoce.add(idioma)    // sincronizo esInstruido...    instruido = librosLeidos &amp;gt; 20 &amp;amp;&amp;amp; idiomasQueConoce.size() &amp;gt; 3  }  method esInstruido() = instruido}Por supuesto, podemos extraer un mtodo aparte, igualmente estaremos enviando el mismo mensaje en ambos casos:object helmut {  ...  method leerLibro() {    librosLeidos = librosLeidos + 1    self.actualizoInstruido()  }  method conocerIdioma(idioma) {    idiomasQueConoce.add(idioma)    self.actualizoInstruido()  }  method actualizoInstruido() {    instruido = librosLeidos &amp;gt; 20 &amp;amp;&amp;amp; idiomasQueConoce.size() &amp;gt; 3  }  ...}Otra variante similar consiste en que el mtodo instruido haga algo como:method leerLibro() {  librosLeidos = librosLeidos + 1  self.esInstruido()}method conocerIdioma(idioma) {  idiomasQueConoce.add(idioma)  self.esInstruido()}method esInstruido() {  instruido = librosLeidos &amp;gt; 20 &amp;amp;&amp;amp; idiomasQueConoce.size() &amp;gt; 3  return instruido}lo cual agrega ms desventajas:  la variable instruido da lo mismo si es una variable de instancia (atributo) o una variable local del mtodo esInstruido, solo se asigna para ser retornada  mtodos que representan acciones como leer el libro o conocer idioma, llaman a una aparente pregunta (esInstruido) solo para actualizar el estado, se confunde as mtodos que tienen efecto y que no lo tienen  si hay ms atributos cuyos valores dependen de otros, puede no resultar trivial el momento de actualizar el estado del objeto sin que quede momentneamente inconsistente (o puede resultar en errores si no respetamos el orden en que actualizamos dichos atributos)  En general, intentar guardarse cosas que pueden ser calculadas es un smell, conocido tambin como precalcular, trmino popularizado por Maese Rasta.Una alternativa ms simpleLa alternativa ms sencilla es descartar todos los atributos que pueden calcularse, de esa manera evitamos sincronizar el estado de Helmut:object helmut {  var librosLeidos = 0  const idiomasQueConoce = []  method leerLibro() { librosLeidos = librosLeidos + 1 }  method conocerIdioma(idioma) { idiomasQueConoce.add(idioma) }  method esInstruido() = librosLeidos &amp;gt; 20 &amp;amp;&amp;amp; idiomasQueConoce.size() &amp;gt; 3}Aqu vemos cmo tenemos  mtodos que producen efecto (acciones): leerLibro, conocerIdioma  y mtodos que no tienen efecto (contestan preguntas): esInstruidoHeurstica para tener atributos que pudieran ser calculablesEn general, intentar guardarse cosas de antemano para optimizar es un smell. Como dijo Donald Knuth, premature optimization is the root of all evil.Sin embargo, s hay ocasiones donde guardarse un resultado de antemano es aceptable:  si el clculo lleva tiempo (o implica acceder a recursos externos costosos, como un archivo o un servicio web)  si la tasa de actualizacin es poco frecuente pero necesitamos conocer esa informacin una gran cantidad de veces al dason seales en los que tener un clculo como atributo es justificable, algo que es improbable que ocurra en cursos iniciales de programacin OO."

} ,

{

"title"    : "Orden superior y diseno",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/orden-superior-y-diseno.html",
"date"     : "",
"content"  : "Ver tambin Orden SuperiorUnaconsecuenciadeimplementarelpasajedefuncionescomoargumentosenlenguajesorientadosaobjetos#esqueelenvodemensajesdesdeunobjetohaciaotroocurreendosmomentos:Un objeto A enva el mensaje de orden superior a otro B, pasando por argumento un bloque de cdigo El objeto receptor B enva un mensaje al bloque de cdigo, que es evaluado, potencialmente, enviando mensajes a objetos que slo A conoca.Es decir, mientras que en la programacin imperativa el cdigo cliente llama es aquel que llama a la biblioteca, aqu es la biblioteca quien termina llamando al cdigo cliente, lo que se conoce como Inversin de Control (IoC).object PruebaIoC {defsumaDeInversas(valores:List[Int])=valores.map{1/_}.sum}scala&amp;gt; PruebaIoC.sumaDeInversas( List(4,0,6) )java.lang.ArithmeticException: / by zeroatPruebaIoC$$anonfun$sumaDeInversas$1.apply$mcII$sp(:8)atPruebaIoC$$anonfun$sumaDeInversas$1.apply(:8)atPruebaIoC$$anonfun$sumaDeInversas$1.apply(:8)atscala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:194)atscala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:194)atscala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)atscala.collection.immutable.List.foreach(List.scala:45)atscala.collection.TraversableLike$class.map(TraversableLike.scala:194)atscala.collection.immutable.List.map(List.scala:45)atPruebaIoC$.sumaDeInversas(:8)..  Se pierde la secuencialidad  El control queda en manos de la biblioteca, que se constituye en un motor responsable de evaluar el cdigo -&amp;gt; ganamos en declaratividad  el codigo puede ser evaluado de forma diferente a la planteada por el cliente, incluso de forma diferida, asincrnica o ignorado completamenteevaluacion diferida mediante thunks"

} ,

{

"title"    : "Orden superior",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/orden-superior.html",
"date"     : "",
"content"  : "GeneralidadesLlamamos a una determinada operacin de orden superior si la misma recibe otra operacin (comportamiento) por parmetro, siendo capaz de ejecutarla internamente.Al usar orden superior tenemos las siguientes ventajas:  Puedo aislar y reutilizar comportamiento comn.  Puedo partir mi problema, separando responsabilidades, entre el cdigo que tiene orden superior, y el comportamiento parametrizado.  Puedo tener un cdigo con partes incompletas, esperando rellenarlos pasando comportamiento por parmetro, y no slo datos.  Puedo generar abstracciones ms jugosas! Ms all de las abstracciones de orden superior que ya me proveen los lenguajes, la mayora de los mismos me dan la posibilidad de armar mi propio comportamiento de orden superior (En la materia lo vemos en Haskell ms directamente, aunque se puede tambin en SWI-Prolog).  Con abstracciones ms adecuadas, con responsabilidades repartidas, y sin repeticin de lgica, genero un cdigo ms expresivo (porque en general es ms fcil de leer), y ms declarativo (porque en general al usar orden superior oculto detalles algortmicos)Paradigma FuncionalTanto en matemtica como en informtica, se definen las funciones de orden superior como funciones que reciben funciones por parmetro o bien devuelven una funcin como resultado.La funcin filter (en haskell y otros lenguajes funcionales) es un ejemplo comn de este tipo de funciones ya que recibe por parmetro una funcin f y una lista y retorna una nueva lista que contiene aquellos elementos que al ser aplicados como parmetros a f devuelven verdadero. La funcin f debe tener entonces aridad 1 y devolver un valor booleano.filter::(a -&amp;gt; Bool)-&amp;gt;[a]-&amp;gt;[a]Otras funciones comunes son map, fold, funciones de ordenamiento o bsqueda, composicin de funciones (.), flip, etc (pueden consultar sus tipos en el intrprete con :t).Ejemplos comunes del anlisis matemtico que es ms difcil de ver en los lenguajes de programacin son la derivada y la integral (Vemos al proceso de derivar como una funcin que recibe otra funcin cualquiera y devuelve su derivada).En el Clculo lambda no tipado todas las funciones son de orden superior. En el clculo lambda con tipado, desde el cual la mayora de los lenguajes funcionales se derivan, las funciones de orden superior son generalmente aquellas cuyos tipos de parmetros contienen una o ms flechitas.En matemtica a las funciones que retornan funciones se las conoce como operadores o functionals. Un ejemplo comn es el clculo derivativo, ya que mapea una funcin a otra funcin.La aplicacin parcial es tambin orden superior?En primer lugar, recordemos que en Haskell las funciones estn currificadas. La Aplicacin Parcial no es una funcin, lo que s podemos analizar es la Aplicacin y lo importante es qu recibe y qu devuelve, eso se ve cuando se analiza el tipo de la funcin. Existe una funcin que nos va a servir para realizar este anlisis llamada $ que lo que hace es aplicarle un parmetro a una funcin.($)::(a -&amp;gt; b)-&amp;gt;a-&amp;gt;b($)funcionparametro=funcionparametroSi el primer parmetro de la funcin $ es una funcin de aridad mayor a 1 (por ejemplo, mod) y la aplicamos de la siguiente forma:mod$10El resultado ser una funcin:mod$10::Integrala=&amp;gt;a -&amp;gt; aLa aplicacin, entonces es una funcin de orden superior ya que recibe una funcin por parmetro y si la misma no queda totalmente aplicada tambin retorna una funcin.Paradigma LgicoDecimos que un predicado es de Orden Superior si este recibe como argumento una consulta a otro/s predicado/s. Algunos ejemplos son not, findall y forall.Hacer nuestros propios predicados de orden superior en Prolog no es tan natural como resulta en Haskell, lo cual se desprende de que los predicados y consultas no son valores, sin embargo Prolog nos permite hacerlo mediante el predicado call.Paradigma EstructuradoEn el paradigma estructurado, una porcin de cdigo puede alcanzar resultados algortmicos como si fuesen obtenidos a travs de funciones de orden superior, ejecutando cdigo dinmicamente (a veces denominadas operaciones Eval o Execute) durante la evaluacin. Desafortunadamente hay limitaciones al alcance del mismo:      El cdigo en el argumento a ser ejecutado usualmente no posee tipado esttico; estos lenguajes generalmente dejan relegado al tipado dinmico la determinacin de la seguridad y la buena disposicin del cdigo a ser ejecutado.        El parmetro es usualmente provisto como un String, cuyo valor no puede ser conocido hasta el momento de ejecucin. Este string debe ser o bien compilado durante la ejecucin del programa (usando compilacin just-in-time) o bien evaluado durante la interpretacin, causando un overhead adicional y usualmente generando cdigo menos eficiciente.  Tambin pueden ser utilizadas Macros para lograr algunos de los efectos del orden superior. No obstante ello, estas macros no pueden evitar fcilmente el problema de la captura de variables; tambin resultan en grandes cantidades de cdigo duplicado, el cual puede ser ms difcil de optimizar para un compilador. Generalmente las Macros no son fuertemente tipadas, aunque pueden producir cdigo fuertemente tipado.Si les interesa profundizar en el uso de orden superior en el lenguaje C, pueden leer el siguiente apunte realizado por ayudantes de la ctedra.Y los objetos?Esta me gust ms, ah vamos, en objetos no tiene sentido reconocer ordenes, porque lo natural es que si la operacion es el mensaje (recordar valores y operaciones), entonces tanto el receptor del mensaje como los parametros son siempre objetos.Entonces, estoy estudiando para el final, que tengo que entender:  que es eso de orden: un X que puede admitir otro X como parametro.  digo que reconozco dos ordenes, si eso es una caracterstica especial que quiero remarcar, si no lo que pasa es que no tiene sentido la distincin de rdenes en este contexto  para cada paradigma: si tiene sentido decir algo asi como orden superior, y en que casos  para qu uso la idea superior, en particular en funcional. Una vez que entendi eso, que herramienta que vimos de Wollok me sirve para un propsito similar.          En Haskell: filter (&amp;gt;3) unaLista      En Wollok: unaLista.filter({elemento =&amp;gt; elemento &amp;gt; 3})      Est claro que ambos ejemplos sirven para lo mismo, pero qu es lo que recibe por parmetro el filter de la solucin objetosa? Es un bloque, y los bloques son objetos.En general no aplicamos el concepto de orden superior a los objetos porque si la definicin fuera un obeto que recibe otro objeto por parmetro eso incluye a todos los objetos que reciban algn parmetro en algn mensaje porque. todos son objetos. Pods pensar que todos son de orden superior, si prefers, pero no pods clasificar a los objetos en rdenes.Por otro lado me gustara disentir con la idea de relacionar muy fuertemente a los bloques con orden superior, es cierto que estoy pasando comportamiento por parmetro. Pero, como deca, eso pasa muchas veces en objetos, entonces hacer una mencin especial a los bloques no me parece. En algn momento nosotros mismos lo contamos en esos trminos, pero bueno, evolucionamos. Igualmente esa respuesta no se considerara errnea en un final, pero s quiero comenzar a transmitirla de esta forma que me parece ms adecuada.Creo que la diferencia del bloque con el resto de los objetos es la creacin de comportamiento ad-hoc, para un fin especfico, los uso una sola vez y no les pongo nombre. Ese efecto se asemeja a otros elementos del funcional, como ser las Expresiones lambda o la Aplicacin Parcial, que me permiten armar en el aire funciones con esas caractersticas (fjense que tambin pasa en funcional, que las expresiones lambda o la aplicacin parcial son tiles para combinarlas con las funciones de orden superior).Volviendo al tema principal, el chiste del orden superior es que yo paso algo ms complejo que un nmero, una lista o una estructura (functor, tupla, etc) por parmetro. Al pasar un predicado o funcin yo paso comportamiento por parmetro, el conocimiento de cmo resolver el problema ahora no se divide en datos y algoritmo, sino que la funcin de orden superior tiene parte del algoritmo y la otra parte viene por parmetro. (Ntense las comillas al usar las palabras algoritmo y comportamiento en los paradigmas declarativos.) Eso le da un poder muy piola a lo que construimos. En fin, cmo llevamos eso de nuevo a objetos? Yo creo que se aprovechan beneficios similares a los del orden superior en el momento en que los objetos que interactan (el receptor del mensaje y el parmetro) tienen dividido el comportamiento en esa forma, es decir, que el objeto receptor le pide al otro cosas que no sean solamente devolver un dato sino que tengan otra complejidad. Claro, cuando uso un bloque eso pasa siempre, y por eso es tentador establecer la relacin. Pero si abrimos un poco la cancha, creo que es fcil ver que ocurre casi siempre que tengamos delegacin y responsabilidades bien repartidas.Links Relacionados  Lambdas en Java 8  Introduction to higher-order functions  Higher-order function  Closures and Higher-Order Functions  Higher-order functions and variational calculus  Boost Lambda Library for C++"

} ,

{

"title"    : "Otros temas interesantes de programacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/otros-temas-interesantes-de-programacion.html",
"date"     : "",
"content"  : "  Mnada  Parsers Mondicos  Lenguajes Especficos de Dominio  Desarrollo de Interfaces Grficas en Haskell  Git, un versionador distribuido"

} ,

{

"title"    : "Pagina principal",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/pagina-principal.html",
"date"     : "",
"content"  : "a"

} ,

{

"title"    : "Palitos de queso",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/palitos-de-queso.html",
"date"     : "",
"content"  : "Ingredientes  100 grs de queso rallado  100 grs de pan rallado  100 grs de harina  100 grs de manteca  1/2 cucharadita de salPasos:  Mezclar todo en un bol hasta que quede una masa semi dura. Agregando agua FRIA si hace falta (muy muy poquito)  Estirarla a 0.5cm de grosor y cortar en palitos de 1cm de ancho por 5cm de largo  Arrolarlos con la palma de la mano y ponerlos sobre placa enmantecadas y enharinadas  Cocinarlos en horno templado hasta que tomen colorNOTA: Cuando se enfran se endurecen, as que al sacarlos del horno deben estar un poquito blandos"

} ,

{

"title"    : "Panqueques",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/panqueques.html",
"date"     : "",
"content"  : "Cantidad: 14 panquequesIngredientes:  1 taza de harina (120gr)  1 cucharadita de polvo de hornear  1/4 de cucharadita de sal  2 huevos  1 taza de leche  30 grs de manteca derretida  Esencia de vainillaPasos:  Tamizar juntos la harina, el polvo de hornear y la sal.  Aparta batir los huevos y se les agrega la leche y la manteca derretida  Se vierte esta mezcla sobre los ingredientes secos y se bate hasta que el batido quede liso  Se le puede agregar un poco de esencia de vainilla  Se calienta una sarten con un poquito de manteca y ponen 1 cucharn del batido para que cubra toda la sarten  Se cuece a fuego moderado hasta que tome color y luego se lo da vuelta para cocer el otro lado  Si es para comer dulces, se los puede espolvorear con azcar apenas se los saca de la sarten  Repetir hasta que se acabe el batido."

} ,

{

"title"    : "Paradigma de objetos   method lookup",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-de-objetos---method-lookup.html",
"date"     : "",
"content"  : "Tambin conocido como Dynamic dispatchEs el mecanismo por el cual se relaciona el envo de un mensaje con la ejecucin de un mtodo determinado.Con objetos individualesCuando definimos un objeto y le declaramos su propio comportamiento, este mecanismo es trivial. Si existe un mtodo que se llame igual que el mensaje definido y con la misma cantidad de parmetros, se ejecutar ese mtodo, de lo contrario tirar un error porque no entiende el mensaje (a menos que se trate de un mensaje bsico como la igualdad o identidad que cualquier objeto entiende).Con clases y herencia simpleQu pasa cuando a un objeto i instancia de la clase C se le enva un mensaje de nombre m?Tenemos (a efectos de entender el mecanismo porque esto lo hace internamente el ambiente) que mantener una referencia a la clase donde estamos buscando en un momento determinado.Al principio la clase actual es C y el objeto receptor del mensaje (self) es i.El algoritmo es el siguiente:1. se busca en la clase actual un mtodo con el nombre m1a. si se encuentra se ejecuta el mtodo encontrado; se ejecuta el mtodo en el objeto i y se termin el method lookup1b. si no se encuentra y la clase actual no es Object la clase actual pasa a ser la superclase de la clase actual y se vuelve a 1.1c. si no se encuentra y la clase actual es Object entonces el objeto i no entiende el mensaje mEl comportamiento por defecto cuando un objeto no entiende un mensaje es lanzar un error.Ejemplo 1Si le enviamos el mensaje asUppercase al objeto &#39;hola&#39; (o sea, al string &#39;hola&#39;) qu debera pasar?Asumamos (porque no es as) que &#39;hola&#39; es instancia de String, que String es subclase de Collection y que Collection es subclase de Object.Siguiendo el algoritmo de arriba a travs de los pasos indicados con -i es &#39;hola&#39;clase actual es Stringm es #asUppercase- se busca en String un mtodo con el nombre #asUppercase- se encuentra el mtodo #asUppercase en la clase String- se ejecuta el mtodo #asUppercase de la clase String sobre i el objeto receptor del mensaje (o sea hola)Conclusin: &#39;hola&#39; entiende el mensaje #asUppercaseEjemplo (heredando un mtodo)Basndonos en el ejemplo 1, si le enviamos el mensaje == al objeto &#39;hola&#39; (o sea, al string &#39;hola&#39;) qu debera pasar?i es &#39;hola&#39;clase actual es Stringm es #==- se busca en String un mtodo con el nombre #==- no se encuentra el mtodo #== en String y la clase actual no es Object entonces la clase actual pasa a ser Collection (la superclase de la clase actual) y se vuelve a 1.- se busca en Collection un mtodo con el nombre #==- no se encuentra el mtodo #== en Collection y la clase actual no es Object entonces la clase actual pasa a ser Object (la superclase de la clase actual) y se vuelve a 1.- se busca en Object un mtodo con el nombre #==- se encuentra el mtodo #== en la clase Object- se ejecuta el mtodo #== de la clase Object sobre i, el objeto receptor del mensaje (o sea hola)Conclusin: &#39;hola&#39; entiende el mensaje #==Ejemplo (no entiende el mensaje)Basndonos en el ejemplo 1, si le enviamos el mensaje factorial al objeto &#39;hola&#39; (o sea, al string &#39;hola&#39;) qu debera pasar?i es &#39;hola&#39;clase actual es Stringm es #factorial- se busca en String un mtodo con el nombre #factorial- no se encuentra el mtodo #factorial en String y la clase actual no es Object entonces la clase actual pasa a ser Collection (la superclase de la clase actual) y se vuelve a 1.- se busca en Collection un mtodo con el nombre #factorial- no se encuentra el mtodo #factorial en Collection y la clase actual no es Object entonces la clase actual pasa a ser Object (la superclase de la clase actual) y se vuelve a 1.- se busca en Object un mtodo con el nombre #factorial- no se encuentra y la clase actual es Object entonces el objeto i no entiende el mensaje mO dicho de otra forma, &#39;hola&#39; no entiende el mensaje #factorial"

} ,

{

"title"    : "Paradigma de objetos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-de-objetos.html",
"date"     : "",
"content"  : "Un objeto es un ente computacional que exhibe comportamiento (podemos comunicarnos con l mediante mensajes) y puede (o no) tener un estado interno (referencias a otros objetos).Un programa basado en este paradigma es un conjunto de objetos que interactan entre s en un ambiente mandndose mensajes para lograr un objetivo determinado.IntuicinIntuitivamente, nuestra realidad parece estar conformada por muchos objetos: automviles, mesas, frascos de mermelada, papeles, computadoras, cables. Esos objetos estn all, se pueden diferenciar entre ellos: una mesa y una silla son diferentes. Ms importante an, si tengo dos sillas, aunque hayan sido fabricadas en el mismo lugar, tengan la misma cantidad de patas y mismo tapizado, las puedo distinguir. Es decir, aunque dos objetos se vean muy parecidos, siguen siendo dos objetos diferentes! Los objetos se pueden diferenciar, porque tienen identidad propia.Y por qu nos interesan los objetos? Cuando programamos, queremos resolver problemas, entonces no nos van a interesar tanto los objetos por s mismos, sino que estos pueden resolver problemas. Cmo es esto de resolver problemas? Simple: las hojas de papel nos sirven para escribir en ellas, los cables para conducir energa, los automviles, para transportarnos. Es decir, no nos va a interesar la mesa porque tenga cuatro patas y una tabla de madera, sino porque esas cuatro patas y tabla nos permitirn resolver el problema de apoyar nuestro almuerzo. De los objetos, entonces, nos va a interesar que son capaces de hacer cosas: tienen comportamiento.Hay algo ms que es interesante en los objetos: a veces estos cambian con el tiempo. Por ejemplo, las mesas se deterioran despus de servir de sostn por mucho tiempo, el frasco de mermelada se vaca despus de sacarle mermelada varias veces, el automvil pierde nafta cuando se mueve, y gana nafta cuando se lo recarga. Los objetos pueden tener un estado, y el mismo puede cambiar.Entonces parece que la pregunta de qu es un objeto se responde fcil es una cosa, pero no cualquier cosa: tiene identidad, estado y comportamiento.Ahora nos queda realizar un ltimo salto: en realidad hay ms cosas, ms objetos en nuestro mundo, que slo automoviles, hojas o mesas. Hay por ejemplo, pases, culturas,trabajos, problemas, ideas, sentimientos. Y una idea se puede diferenciar de otra (identidad), un trabajo puede resolverlos el problema de tener dinero a fin de mes (comportamiento), y un pas puede cambiar (estado). Los objetos, entonces, pueden ser tambin cosas que no podemos tocar: cosas intangibles.El paradigma de objetos nos propone justamente resolver nuestros problemas usando, adivinen..objetos!. Y para eso, tendremos que zambullirnos en un mundo de objetos.Teora  Mensajes y mtodos  Referencias: Variables y Pseudovariables  Encapsulamiento  Polimorfismo  Modelando objetos - Responsabilidades y delegacin  Manejo de errores  Prototipado  Clases  Prototipado vs Clases  Herencia  Method lookup  Redefinicin  Composicin (OOP)  Herramientas de instanciacin vs. Mtodos de clase  Igualdad vs. Identidad  Inmutabilidad  Garbage collector  BloquesColecciones  Intro a colecciones  Sabores de colecciones  Mensajes de colecciones  DiccionariosCosas que pueden servir para pensar en cmo modelar un enunciado  Diferencia entre objetos y procedural - con un ejercicio de la gua 1  Nombres de clases  Ley de demeter  Cuestiones bsicas para resolver el parcial de objetos  Puntos de entradaUn poco ms sobre Smalltalk  Sintaxis de Smalltalk  Tipos de mensajes en Smalltalk  Variables locales en mtodos  Precedencia de Mensajes  Manejo de booleanos  min: y max:  Variables y mtodos de clase  Arrays literales en Smalltalk  Preguntas Frecuentes  Mtodos de clase para crear objetos inicializados  Cmo hacer para que de un objeto muestre lo que yo quiero  Tutorial de Squeak y Pharo  Cmo crear una subclase en Squeak  Testing  Pharo para programadores OzonososMiscelnea  Mquina Virtual  Diagrama de clases  Lenguajes  Wollok"

} ,

{

"title"    : "Paradigma de programacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-de-programacion.html",
"date"     : "",
"content"  : "Un paradigma de programacin es un marco conceptual, un conjunto de ideas que describe una forma de entender la construccin de programa, como tal define:  Las herramientas conceptuales que se pueden utilizar para construir un programa (objetos, relaciones, funciones, instrucciones).  Las formas vlidas de combinarlas.Los distintos lenguajes de programacin proveen implentaciones para las herramientas conceptuales descriptas por los paradigmas. Existen lenguajes que se concentran en las ideas de un nico paradigma as como hay otros que permiten la combinacin de ideas provenientes de distintos paradigmas.Dado que un paradigma es un conjunto de ideas, su influencia se ve principalmente en el momento de modelar una solucin a un problema dado. No es suficiente saber en qu lenguaje est construido un programa para saber qu marco conceptual se utiliz en el momento de construirlo. El paradigma tiene ms relacin con el proceso mental que se realiza para construir un programa que con el programa resultante.Qu es un programa?Para definir programa es necesario analizarlo desde dos diferentes perspectivas. Uno de esos puntos de vista es anlogo al del usuario del programa, interesado en la tarea que realizar el programa. Desde esa perspectiva un programa es aquello que permite que una computadora realice una tarea determinada.El otro punto de vista es el de aquel que tenga que construir o modificar ese programa (programador), a quien interesar tambin la forma en que est construido. Desde esta perspectiva no hay una nica definicin al concepto de programa ya que cada paradigma ofrece una respuesta distinta a esta pregunta.Paradigma EstructuradoSecuencia ordenada de instrucciones que manipulan un espacio de memoria.Paradigma de ObjetosConjunto de objetos que se conocen entre s a travs de referencias y se envan mensajes en un ambiente.Paradigma LgicoConjunto de predicados definidos a travs de clusulas (hechos y reglas) que describen propiedades y relaciones de un conjunto de individuos, sobre los cuales podemos realizar consultas.Paradigma FuncionalConjunto de funciones (relaciones que cumplen las propiedades de unicidad y existencia), que pueden ser evaluadas para obtener un resultado.Otras Ideas  Modelar la realidad, o mejor dicho que el programa se acerque a la realidad (vs. tener un diseo y luego un programa lejano a eso)"

} ,

{

"title"    : "Paradigma funcional",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-funcional.html",
"date"     : "",
"content"  : "IntroduccinEste paradigma se basa en un conjunto de funciones (relaciones que cumplen las propiedades de unicidad y existencia), que pueden ser evaluadas para obtener un resultado. El paradigma funcional est basado en conceptos que vienen de la matemtica, entonces algunas cosas (p.ej. notaciones en el lenguaje) estn sacadas de lo que aprendimos en Anlisis I / lgebra / Discreta.Conceptos generales  Concepto de funcin  Aplicacin  Pattern Matching en Haskell  Composicin  Aplicacin Parcial  Orden Superior  Currificacin  Inmutabilidad  Funciones por Partes  Lazy Evaluation  Recursividad en HaskellTipos  Tipos de Haskell  Typeclasses  Inferencia de tipos  Polimorfismo paramtrico y ad-hoc  Notacin point-free: Cuntos parmetros espera una funcin?  Data: Definiendo nuestros tipos en HaskellExtras simpticos  Definiciones locales (where)  Expresiones lambda  Listas por comprensinErrores comunes  Errores comunes al comenzar a trabajar con Haskell  Cundo usar parntesis  Problemas comunes con los tipos numricos de Haskell &amp;lt;- Entr ac si tens problemas con la divisin (/)  Unexpected ;?  possibly incorrect indentation or mismatched brackets  Hugs.Trex.insertField not in scope  cannot construct the infinite type  Tips para aprobar un parcial de funcionalPara aprender ms sobre el lenguaje Haskell  Learn You a Haskell for Great Good! (Ac en espaol)  Todo lo que ud deseaba saber de Haskell y ms (Por Stephen Diehl)  Wiki  Funciones que trae por defecto (Prelude)Problemas complejos y cosas locasAc hay algunas cosas interesantes que escapan al nivel de funcional que se espera que aprendan para Paradigmas, si te interesa profundizar en el tema es muy interesante!  Mnadas, Monadas, y Functores en Haskell: Functors, Applicatives, And Monads In Pictures"

} ,

{

"title"    : "Paradigma logico   casos de no inversibilidad",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---casos-de-no-inversibilidad.html",
"date"     : "",
"content"  : "IntroduccinLos casos de no inversibilidad, y algunos de no funcionamiento o respuestas incorrectas, estn relacionados con variables que no estn ligadas en cierto punto (recordando que el anlisis debe hacerse de izquierda a derecha) y deben estarlo, o (menos probable) al revs, variables que deben llegar a cierto punto sin ligar y estn ligadas.Veamos varios casos, que incluyen todos los casos de no-inversibilidad que vemos en la materia.Hechos con variablesPor lo general aquellos predicados definidos en base a hechos no suelen ser problemticos, porque lo normal es que incluyan informacin sobre los individuos a los cuales se refieren. Sin embargo, el siguiente es un hecho vlido que no es inversible para su segunda aridad:leGusta(pepe,_).Eso dice que a pepe le gusta cualquier cosa, sin acotar de ninguna forma qu podra ser aquello que le gusta. Para hacer el predicado inversible, deberamos acotar qu puede ser aquello que le gusta convirtindolo en una regla, por ejemplo:leGusta(pepe,Comida):-comida(Comida).NegacinNegacin: las variables que aparecen en la parte de la clusula deben llegar ligadas, a menos que sean variables afectadas por un para ningn, en este caso deben llegar libres. P.ej. esta definicin del predicado esPlantaComestibleesPlantaComestible(Planta):-not(esVenenosa(Planta)).no es inversible, porque Planta debe estar ligada antes de llegar al not. Por qu? Ver Paradigma Lgico - negacinPara hacer al predicado inversible, generamos el dominio de la variable PlantaesPlantaComestible(Planta):-esPlanta(Planta),not(esVenenosa(Planta)).Aritmtica**Aritmtica: ** todas las variables a la derecha del is deben llegar ligadas al is. P.ej. el predicado precioPorCantidad definido asprecioPorCantidad(Planta,Cantidad,PrecioTotal):-precioPlanta(Planta,Precio),PrecioTotalisCantidad*Precio.no es inversible para el 2do argumento, porque si no se indica un nmero para Cantidad en la consulta, al llegar a la cuenta hay una variable no ligada a la derecha del is.En este caso no hay forma trivial de arreglarlo para que el predicado sea totalmente inversible.En este casoimporteCompra(Persona,ImporteTotal):-ImporteTotalisPrecio*1.21,compra(Persona,Planta),       precioPlanta(Planta,Precio).ninguna consulta que involucre a esta clusula va a andar porque no hay forma de que la variable Precio est ligada al momento de hacer la cuenta. Arreglar este caso es fcil: ponemos el is al lado del puntoimporteCompra(Persona,ImporteTotal):-compra(Persona,Planta),       precioPlanta(Planta,Precio),       ImporteTotalisPrecio*1.21.ComparacinSi se compara por mayor, menor, mayor o igual, menor o igual, distinto, lo que comparemos debe estar ligado. P.ej. esta definicinplantaHeavy(Planta):-Nivel&amp;gt;5,nivelVeneno(Planta,Nivel).es incorrecta, porque Nivel no est ligado al momento de comparar. Esta formaplantaHeavy(Planta):-nivelVeneno(Planta,Nivel),Nivel&amp;gt;5.s es correcta.FindallMiremos esta definicin de plantasDerivadasDeplantasDerivadasDe(Planta,ListaPlantasFamiliares):-findall(P2,derivadaDe(Planta,P2),ListaPlantasFamiliares).y supongamos esta consulta?-plantasDerivadasDe(Pl,Plantas).Miremos fijos el findall, recordando que unifica el 3er argumento con la lista de la parte indicada en el 1er argumento de todas las respuestas a la consulta del 2do argumento.En este caso: va a ligar ListaPlantasFamiliares con la lista de los P2 para cada respuesta a la consulta derivaDe(Planta,P2).Como en la consulta no se liga Planta, entonces las respuestas a derivaDe(Planta,P2) van a ser todos los pares de plantas (planta,derivada), y por lo tanto los P2 van a ser todas las plantas derivadas de alguna planta.P.ej. si tenemosderivaDe(p1,p3).derivaDe(p2,p4).derivaDe(p2,p5).ListaPlantasFamiliares va a ser [p2,p4,p5]. Esto nos muestra que con esta definicin el predicado no es inversible para el primer argumento, porque las listas de derivadas de la misma planta son [p3] por un lado, y [p4,p5] por otro; [p2,p4,p5] no puede ser un 2do argumento correcto para este predicado.Para que que el predicado sea totalmente inversible debemos asegurar que la variable Planta entra ligada al findall.plantasDerivadasDe(Planta,ListaPlantasFamiliares):-esPlanta(Planta),findall(P2,derivaDe(Planta,P2),ListaPlantasFamiliares).Miremos ahora qu pasa si definimos el predicado asplantasDerivadasDe(Planta,ListaPlantasFamiliares):- esPlanta(Planta),derivaDe(Planta,P2),findall(P2,derivaDe(Planta,P2),ListaPlantasFamiliares).En este caso, al llegar al findall tanto Planta como P2 ya estn ligadas, entonces la consulta derivaDe(Planta,P2) puede tener a lo sumo una respuesta (positiva, la respuesta no no se cuenta), entonces ListaPlantasFamiliares va a tener a lo sumo un elemento. Vamos a obtener respuestas incorrectas, p.ej.?-plantasDerivadasDe(p2,Lista).Lista=[p4]porque la variable P2, que debe llegar sin ligar al findall, llega ligada.Un ejemplo futbolero    ganoContra(argentina, suiza).    ganoContra(argentina, belgica).    ganoContra(argentina, holanda).    ganoContra(belgica, eeuu).    ganoContra(holanda, mexico).    superEquipo( Equipo ) :- findall(P, ganoContra(Equipo, P), Partidos), length(Partidos, CantGanados), CantGanados &amp;gt; 2.Ahora fijate tirando en prolog la siguiente consulta:    superEquipo( X ).ForallEsta definicin del predicado esEspecieComestibleesEspecieComestible(Especie):-forall(especieDe(Planta,Especie),esPlantaComestible(Planta)).no es inversible, porque Especie debe llegar ligado al forall. Si no llega ligada, para que el forall se verifique deben ser comestibles todas las plantas que sean de alguna especie. Esto est explicado en detalle en el artculo sobre forall.Para que sea inversible debemos generar el dominio para la variable EspecieesEspecieComestible(Especie):-esEspecie(Especie),forall(especieDe(Planta,Especie),esPlantaComestible(Planta)).Functores y polimorfismoComo caso particular de los hechos con variables, algo muy comn es tener definiciones como:marca(arroz(Marca),Marca).marca(lacteo(Marca,_),Marca).El predicado marca/2 nos va a resultar muy til para cuando no nos interese qu tipo concreto de producto se est usando, slo que tenga una marca y nos la sepa decir. Lo importante es ser conscientes de que este predicado no es inversible, con lo cual sera incorrecto tratar de usarlo como generador de marcas por ejemplo. Si nos interesa que sea inversible tenemos que usar otro predicado que nos genere los productos, por ejemplo:marca(arroz(Marca),Marca):-precioUnitario(arroz(Marca),_).marca(lacteo(Marca,TipoLacteo),Marca):-precioUnitario(lacteo(Marca,TipoLacteo),_).En resumenResumimos los casos de inversibilidad con un ejemplo de cada unoHechos con variablesleGusta(pepe,_).%LoquelegustadeberaacotarsedealgunaformasisepretendenhacerconsultasexistencialessobrelasegundaaridadNegacinesPlantaComestible(Planta):-not(esVenenosa(Planta)).%PlantadebellegarligadaalnotAritmticaprecioPorCantidad(Planta,Cantidad,PrecioTotal):-precioPlanta(Planta,Precio),PrecioTotalisCantidad*Precio.%CantidaddebellegarligadaalisComparacinplantaHeavy(Planta):-Nivel&amp;gt;5,nivelVeneno(Planta,Nivel).%NiveldebellegarligadaalacomparacinfindallplantasDerivadasDe(Planta,ListaPlantasFamiliares):-findall(P2,derivadaDe(Planta,P2),ListaPlantasFamiliares).``%Plantadebellegarligadaalfindall`forallesEspecieComestible(Especie):-forall(especieDe(Planta,Especie),esPlantaComestible(Planta)).`%Especiedebellegarligadaalforall`Functores y Polimorfismomarca(arroz(Marca),Marca).marca(lacteo(Marca,_),Marca).%Si pretendemos usar marca/2 para hacer consultas existenciales,nopuedetener_nivariablesquenosegenereninternamenteenelencabezado."

} ,

{

"title"    : "Paradigma logico   como pienso la resolucion de un punto",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---como-pienso-la-resolucion-de-un-punto.html",
"date"     : "",
"content"  : "Ejemplotour(lokotour,[tramo(madrid,roma), tramo(roma,bonn), tramo(bruselas,burdeos)]).tour(eurobleh,[tramo(madrid,perpignan), tramo(perpignan,paris), tramo(paris,praga)]).pais(bsas,argentina).pais(mendoza,argentina).pais(lima,peru).pais(quito,ecuador).pais(caracas,venezuela).pais(toronto,canada).pais(montreal,canada).pais(madrid,espania).pais(toledo,espania).pais(roma,italia).pais(bonn,alemania).pais(bruselas,belgica).pais(burdeos,francia).pais(perpignan,francia).pais(paris,francia).pais(praga,repcheca).pais(sydney, australia).ciudadGrosa(bsas).ciudadGrosa(lima).ciudadGrosa(quito).ciudadGrosa(caracas).ciudadGrosa(montreal).ciudadGrosa(toledo).Qu no hagoPensar en recorrer, no hay que recorrer nada.Qu s hagoSi tengo que crear un predicado nuevo, pienso en la aridad, y qu representa cada argumento.P.ej. el predicado pasaPorPais relaciona un tour con un pas, entonces es de aridad 2.Pienso en qu condiciones se tienen que dar, y busco la forma (con las herramientas que tengo) de expresarlo en Prolog.Cuando termino, pongo el punto al final de la ltima clusula  y ya est, no-hay-nada-ms-que-hacer.P.ej. cundo es cierto que un tour T pasa por un pas P? Cuando la lista de ciudades de T incluye alguna del pas P.Hay muchas veces en que necesito un individuo que no es un argumento del predicado. En ese caso, pienso qu condiciones la relacionan con los individuos que ya tengo (argumentos + los que traje en condiciones anteriores en la misma clusula). Tpicamente, voy a designar estos nuevos individuos con variables, o con cosas ms complejas si me conviene aplicar pattern matching.Veamos algunos ejemplos:Tenemos que hacer el predicado paisInteresante/1, un pas es interesante si tiene al menos dos ciudades grosas.En este caso necesito dos ciudades del pas, las voy a llamar C1 y C2.Qu condiciones tienen que cumplir C1 y C2?  Ser del pas, predicado pais/2 que relaciona ciudad con pas (en ese orden!!). El pas lo tengo, es el argumento de paisInteresante  Ser grosas, predicado ciudadGrosa/1QuedapaisInteresante(P):-ciudad(C1,P),ciudad(C2,P),ciudadGrosa(C1),ciudadGrosa(C2).Resolvamos pasaPorPais/2  ac necesitamos  la lista de ciudades, para eso tenemos el predicado tour/2, la voy a llamar LCiud.  la ciudad, a la que voy a llamar C. Qu le tiene que pasar a C? Estar en LCiud (member/2) y ser del pas (pais/2)QuedapasaPorPais(Tour,Pais):-tour(Tour,LCiud),member(C,LCiud),pais(C,Pais)."

} ,

{

"title"    : "Paradigma logico   conjuncion y disyuncion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---conjuncion-y-disyuncion.html",
"date"     : "",
"content"  : "Las operaciones lgicas por excelencia son la conjuncin (Y, slo es cierta si ambas condiciones son ciertas) y la disyuncin (O, es cierta si alguna de las condiciones es cierta).Tenemos la siguiente base de conocimiento:madre(nora,luis).madre(nora,ana).madre(lidia,jose).madre(dora,juan).padre(juan,luis).padre(juan,ana).padre(juan,jose).padre(antonio,juan).Supongamos que tenemos que desarrollar en Prolog un predicado hermano/2 que relaciona a dos personas si tienen el mismo padre y la misma madre, y otro llamado hermanastro/2 que relaciona a dos personas si tienen al padre o a la madre en comn (para el ejemplo no se considerar que el O sea excluyente, por ende dos personas hermanas tambin sern hermanastras).La relacin de hermano, dada nuestra base de conocimientos, debera cumplirse para luis y ana, mientras que Jose es slo hermanastro de Luis y Ana. Juan en cambio es hijo nico, con lo cual no debera satisfacer ninguna de las relaciones.Codifiquemos los predicados hermano/2 y hermanastro/2:hermano(Persona,Hermano):-mismoPadre(Persona,Hermano),mismaMadre(Persona,Hermano).hermanastro(Persona,Hermanastro):-mismaMadre(Persona,Hermanastro).hermanastro(Persona,Hermanastro):-mismoPadre(Persona,Hermanastro).mismoPadre(Persona1,Persona2):-padre(Padre,Persona1),padre(Padre,Persona2).mismaMadre(Persona1,Persona2):-madre(Madre,Persona1),madre(Madre,Persona2).La conjuncin en Prolog se logra con la coma, mientras que la disyuncin la conseguimos mediante la definicin de varias clusulas para el mismo predicado. Podemos ver a partir del predicado hermanastro que la bsqueda de soluciones que realiza el motor de Prolog es exhaustiva, ya que si bien jose y luis no cumplen la condicin de tener la misma madre, el resultado a la consulta hermanastro(jose,luis) es verdadero, dado que contina la evaluacin con las otras alternativas para poder satisfacer la relacin.Error comn: Hacer el O antes de tiempoVamos a suponer que tenemos la siguiente lgica una pc es gamer si tiene un disco ssd, un procesador multincleo, y una placa de video shifors 6 o una reidion 8El siguiente cdigo est mal, porque repite lgica:esGamer(PC):-  tieneDiscoSSD(PC),  tieneMultiNucleo(PC),  placa(PC,shifors6).  esGamer(PC):-  tieneDiscoSSD(PC),  tieneMultiNucleo(PC),  placa(PC,reidion8).   % REPITE LGICA!La definicin de una pc gamer debe ser nica, es decir, tiene que tener una sola clusula. Hay una sola forma de que una pc sea gamer, no dos! Cmo? Nos falta una abstraccin! La abstraccin tienePlacaBuena. Implcitamente esa idea est, pero nos falta en nuestro cdigo. Veamos cmo agregando esa abstraccin evitamos la repeticin de lgica:  una pc es gamer si tiene un disco ssd, un procesador multincleo, y una buena placa de videoesGamer(PC):-  tieneDiscoSSD(PC),  tieneMultiNucleo(PC),  tienePlacaBuena(PC).  tienePlacaBuena(PC):-  placa(PC,shifors6).  tienePlacaBuena(PC):-  placa(PC,reidion8).% No repite lgica: la definicin de &quot;esGamer&quot; es nica, delega en otro predicado &quot;tienePlacaBuena&quot; los detalles."

} ,

{

"title"    : "Paradigma logico   detalles del swi prolog",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---detalles-del-swi-prolog.html",
"date"     : "",
"content"  : "Ojo con los espaciosHay un lugar en donde no puede haber ningn espacio, que es entre el nombre del predicado o functor y el parntesis que abre. O sea, ninguna de las siguientes clusulas compilabueno(X):-not(malo(X)).esTierno(P):-forall(leGusta(P,A),dulce(A)).leGusta(copion,C):-leGusta(pepe,C).leGusta(copion,C):-leGusta(pepe,C).tiene(pepe,libro(octaedro,cortazar)).hay que ponerbueno(X):-not(malo(X)).esTierno(P):-forall(leGusta(P,A),dulce(A)).leGusta(copion,C):-leGusta(pepe,C).tiene(pepe,libro(octaedro,cortazar)).los espacios en otros lados no molestan, p.ej.leGusta(copion,C):-leGusta(pepe,C).tiene(pepe,libro(octaedro,cortazar))."

} ,

{

"title"    : "Paradigma logico   el forall",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---el-forall.html",
"date"     : "",
"content"  : "Antes que nadaEl forall es un predicado, o sea, no conviene pensar qu hace, sino qu relaciona, y/o cundo se verifica.El predicado forall conviene pensarlo por lo segundo, o sea cundo se verifica.DefinicinEl forall recibe dos parmetros, los dos deben ser consultas. Las consultas se hacen sobre predicados, o sea que forall es un predicado de orden superior, porque puede manejar predicados dentro de sus parmetros.Hagmosnos la pregunta  cundo se verifica?Cuando a todos los que les pasa lo primero, les pasa lo segundo.Dicho un poco ms en tcnico, cuando todas las respuestas de la primer consulta son respuestas de la segunda.Entonces, en las situaciones donde decimos a todos los que blah les pasa bleh es probable que el forall nos venga bien.Un ejemplopartimos de estos hechos    dulce(chocolate).    dulce(caramelo).    dulce(durazno).    amargo(radicheta).    amargo(cebada).    leGusta(roque,chocolate).    leGusta(roque,radicheta).    leGusta(pepe,cebada).    % ... y muchos hechos ms que describen los gustos de un grupo de personas    colorDePelo(roque,colorado).    colorDePelo(pepe,castanio).    % ... etc. con los colores de pelo    vive(roque,buenosAires).    vive(pepe,mendoza).    vive(lucas,salliquelo).    % ... y donde vive cada persona de la que queremos hablar    ciudadGrande(buenosAires).    ciudadGrande(mendoza).    % ... y as todas las ciudades grandesy queremos definir esTierno/1, donde decimos que una persona es tierna si todas las cosas que le gustan son dulces.Estamos en un caso candidato a forall: a todas las cosas que le gustan les tiene que pasar ser dulces. En Prolog:esTierno(Persona):-forall(leGusta(Persona, Alimento),dulce(Alimento)). una Persona es tierna si  todas las cosas que le gustan son dulces, exactamente lo que dijimos en castellano.Ahora quiero definir el predicado alimentoCurioso/1, un alimento es curioso si solamente le gusta a gente de pelo colorado.Para darme cuenta que el forall me puede servir, lo pienso en trminos de a todos los que  les tiene que pasar . A veeer  a todas las personas que  les gusta el alimento  les tiene que pasar  ser coloradasQuedaalimentoCurioso(Alimento):-forall(leGusta(Persona, Alimento),esColorado(Persona)).Tener claro lo que se quiere decirEst bien si defino esTierno as?esTierno(Persona):-forall(dulce(Alimento),leGusta(Persona, Alimento)).Claramente no, porque estara pidiendo que le gusten todos los alimentos dulces.Si programar va a consistir en definir condiciones, es relevante entender la diferencia entre  todos los alimentos que le gustan son dulces, y  le gustan todos los alimentos dulces.El forall en accinSupongamos que hacemos esta consulta:?-esTierno(roque).La variable Persona de esTierno se liga con roque  entonces el forall se va a verificar (ver la definicin tcnica) cuando      todas las respuestas a la consulta    leGusta(roque,Alimento)        verifiquen la consulta    dulce(Alimento)  Para cada respuesta a la consulta leGusta(roque,Alimento), la variable Alimento se va a ligar, en el ejemplo hay dos respuestas, una con chocolate y otra con cebada.La consulta correspondiente ya viene con esa variable ligada, o sea que las consultas que se tienen que verificar para que se verifique el forall sonesDulce(chocolate).esDulce(cebada).Volvamos a la definicin: el forall se verifica si todas las respuestas a la primer consulta son respuestas de la segunda. Mirando el ejemplo de recin debera cerrar el esquema.Qu pasa si no hay soluciones para el primer parmetro de forall?Qu pasa si consultamos si lucas es tierno y en nuestra base de conocimientos no hay nada que le guste??-esTierno(lucas).Esta consulta va a ser cierta, porque si no le gusta nada, es cierto que todas las cosas que le gustan son dulces. Si nos interesa que slo diga verdadero para las personas que les gusta algo, debemos agregar otra condicin fuera del forall que lo asegure.Forall e inversibilidadVeamos qu pasa con las variables y la inversibilidad.Ser inversible el predicado esTierno/1? Hagamos la consulta con una variable en el argumento?-esTierno(X).En este caso la variable Persona llega sin ligar al forall. Entonces la primer consulta esleGusta(Persona, Alimento).Para cada una de las respuestas a esta consulta, se tiene que verificaresDulce(Alimento)donde Alimento es lo que lig la primer consulta.Cules son las respuestas a la primer consulta? Todos los pares (persona,alimento) relacionados por leGusta.Entonces, el forall slo se va a verificar si cualquier cosa que le guste a alguien, no importa a quin, es dulce.Claro, no es lo que queremos. Para lograr lo que queremos, tenemos que lograr que la variable Persona llegue ligada al forall mediante  generacin:esTierno(Persona):-persona(Persona),forall(leGusta(Persona, Alimento),esDulce(Alimento)).Una que no falla:fjense que siempre decimos a todos los blah que les pasa la consulta 1, les tiene que pasar la consulta 2.Bueno, para ese blah va a haber una variable, que es Alimento en el caso de esTierno (si todos los alimentos que le gustan ) y P para alimentoCurioso (si todas las personas a quienes les gusta ). Esa variable tiene que llegar al forall sin ligar. El resto de las variables por lo general deben llegar ligadas.Varias condicionesQu pasa si se tienen que cumplir varias condiciones: digamos que un alimento es peculiar si todas las personas a las que le gusta son colorados y porteos  nos queda  a todas las personas que  les gusta el alimento  les tiene que pasar  ser coloradas y ser porteasentonces la segunda consulta es un y entre dos condiciones.Si pongoesPeculiar(Alimento):-forall(leGusta(Persona, Alimento),colorDePelo(Persona, colorado),vive(Persona,buenosAires)).est mal, porque el forall lleva dos parmetros, no tres. Necesito agrupar colorDePelo() y vive(), para eso los encierro entre parntesis, quedaesPeculiar(Alimento):-forall(leGusta(Persona, Alimento),(colorDePelo(Persona, colorado),vive(Persona, buenosAires))).Pregunto: est bienesPeculiar(Alimento):-forall((leGusta(Persona, Alimento),colorDePelo(Persona, colorado)),vive(Persona, buenosAires)).? No, porque estara pidiendo que todos los colorados a los que les gusta el alimento vivan en Buenos Aires.Para pensarUna que les queda para pensar: ahora tengo que decir que un alimento es marketinable si todas las personas a las que les gusta viven en ciudades grandes. No me interesa que el predicado sea inversible.Tiro tres opciones: elijan la correcta y piensen por qu eligieron esa.esMarketinable(Alimento):-forall(leGusta(Persona, Alimento),vive(Persona, Ciudad),ciudadGrande(Ciudad)).  %opcin1esMarketinable(Alimento):-forall((leGusta(Persona, Alimento),vive(Persona, Ciudad)),ciudadGrande(Ciudad)).%opcin2esMarketinable(Alimento):-forall(leGusta(Persona, Alimento),(vive(Persona, Ciudad),ciudadGrande(Ciudad))).%opcin3Ms sobre forallLanse Paradigma Lgico - forall - no siempre con member"

} ,

{

"title"    : "Paradigma logico   existe vs para todo",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---existe-vs-para-todo.html",
"date"     : "",
"content"  : "En la lgica de primer orden se trabaja con variables cuantificadas, los cuantificadores indican si algo se cumple para alguno (cuantificador existencial) o para todos (cuantificador universal) los valores de un conjunto de individuos.Lo ms normal es trabajar con el cuantificador existencial, motivo por el cual en el lenguaje Prolog no hay un predicado que la denote, como s sucede para el cuantificador universal.Si queremos definir un predicado estaComplicado/1 que se cumpla para las personas que tienen algn hijo problemtico, podramos hacer:estaComplicado(Persona):-padre(Persona,Hijo),problematico(Hijo).Si luego queremos definir estaHarto/1 de modo que se cumpla para las personas qu slo tiene hijos problemticos, deberamos usar el predicado forall para cuantificar con Para Todo a los hijos de la persona en cuestin:estaHarto(Persona):-padre(Persona,_),%%Generamosalapersonaporquenoquieroqueseaunavariableacuantificar                       %% porelparatodo,sinounindividuoconcreto. Adems restringe el universo de respuestas                       %% a personas que tengan al menos un hijo.forall(padre(Persona,Hijo),problematico(Hijo)).Relacin entre Existe y Para TodoExiste una relacin entre el cuantificador universal y el existencial, la misma se establece mediante la negacin.Podramos haber hecho una solucin para estaHarto/1 sin usar forall basndonos en esta equivalencia lgica. Alguien est harto si ninguno de sus hijos no es problemtico.estaHarto(Persona):-padre(Persona,_),not((padre(Persona,Hijo),not(problematico(Hijo))))."

} ,

{

"title"    : "Paradigma logico   forall   no siempre con member",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---forall---no-siempre-con-member.html",
"date"     : "",
"content"  : "Partimos de la base que el forall corresponde a la idea a todos los que les pasa A, les pasa B.Por alguna razn, una proporcin importante de las personas que estn aprendiendo el paradigma lgico tienden a pensar que cada vez que quiero usar forall, tengo que tener la lista de los que les pasa A, entonces siempre que aparece forall como condicin en una regla, va a ser de esta formaforall(member(E,ListaDeLosQueLePasaA),...condicionesBsobreE...)Tal vez esto est relacionado con asimilar el forall con un for de (ponele) Pascal, que recorre la ListaDeLosQueLePasaA y verifica las condiciones del 2do argumento del forall para cada elemento de la lista.Esta forma de pensarlo no es correcta, veamos dos formas de ver la falla de razonamiento.      no conviene pensar en el forall de acuerdo a lo que hace, sino a cundo se verifica, o sea, si pongo forall como condicin de una regla, cuando se va a cumplir.        el forall se cumple cuando cada respuesta a su primer argumento (que es una consulta) es respuesta del segundo argumento (que es otra consulta). Entonces, si uso forall poniendo member como primer consulta, lo que estoy diciendo es que todos los elementos de la lista cumplen con la 2da consulta, tiene el mismo resultado de recorrer todos los elementos, pero la idea es otra. Entonces, puedo usar la idea con member, o con cualquier condicin que quiera.  Un caso particular en el que se nota este razonamiento inadecuado es cuando se usa un findall seguido de un member, de esta formafindall(X,...condicionesAsobreX...,ListaDeX),forall(member(E,ListaDeX),...condicionesBsobreE...)es ms directo, claro y correcto, usar el forall poniendo directamente a E le pasa A en lugar de E est en la lista de los que les pasa A, en Prolog:forall(...condicionesAsobreX...,...condicionesBsobreE...)Veamos un ejemplo: quiero decir que un tipo es feliz si todos sus amigos son buena onda, tenemos los predicados amigos/2 y esBuenaOnda/1. Si quiero definiresFeliz(Pers)hay una condicin para todos los A pasa B en donde calza justo un forall, A es ser amigo de Pers y B es ser buena onda.Si pienso que forall me sirve solamente para recorrer listas, entonces tengo que armar la lista de los amigos de Pers, y despus fijarme para cada elemento que sea buena onda. En Prolog:esFeliz(Pers):-findall(Amigo,amigos(Pers,Amigo),AmigosDePers),forall(member(Chabon,AmigosDePers),esBuenaOnda(Chabon)).si entiendo que el primer argumento de forall puede ser cualquier consulta, pongo lo que entiendo de la definicin, que es ser amigo de Pers. En PrologesFeliz(Pers):-forall(amigo(Pers,Amigo),esBuenaOnda(Amigo))."

} ,

{

"title"    : "Paradigma logico   functores",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---functores.html",
"date"     : "",
"content"  : "Los functores son individos que nos permiten agrupar otros individuos para formar una abstraccin ms compleja. Tienen un nombre y una aridad determinada, si alguno de estos elementos de un functor difiere con otro pasa a ser una abstraccin diferente.Ejemplovende(pepe, tornillo(5,parker)).vende(tony, canilla(redonda,hierro,azul)).Son valores, no predicadosLos functores son valores, individuos.OK, son individuos compuestos, pero siguen siendo individuos. No son predicados, no tienen un valor de verdad.Si bien existe una similitud sintctica entre ellos, la forma de uso es distinta, es por el contexto que Prolog decide si tratarlo como definicin de un hecho, como consulta de un predicado o efectivamente como un functor.No tiene sentido consultar por functores, p.ej. hacer esta consulta?-canilla(X,hierro,Y).sera lo mismo que preguntar?-1.Si hacemos la consulta?-canilla(X,hierro,Y).Y no existe un predicado canilla/3, Prolog va a lanzar un error al intentar ejecutarlo como tal y no encontrar una definicin.Si definimos lo siguiente en nuestra base de conocimientos:vende(pepe,canilla(Forma,Material,Color)).canilla(triangular,hierro,azul).canilla(triangular,porcelana,blanco).Y luego consultamos qu cosas vende pepe, la nica respuesta que puede proveernos es basura con forma de canilla:?-vende(pepe,CosaQueVende).CosaQueVende=canilla(_G9,_G10,_G11).En esas tres lneas de nuestra base de conocimientos tenemos predicado vende/2 que usa un functor canilla/3, y dos hechos para el predicado canilla/3. No hay ninguna relacin entre ellos porque Prolog interpreta a los argumentos de los predicados como individuos. No va a intentar evaluar el functor canilla/3, lo va a tomar como un patrn para unificar en la consulta por pattern matching.Pregunta frecuente: Cmo devolver functores?Antes que nada, el uso de la palabra devolver, marca que faltan entender cosas, porque la pregunta cmo devuelvo no tiene respuesta, no se puede devolver, no existe, es otro paradigma.Si lo comparamos con Pascal, es como si uno preguntara, cmo hago para que sea inversible mi procedimiento?, no tendra sentido, no?.No traten de devolver cosas, sino de establecer relaciones entre ellas.Una forma de arrancar es asumir que el parmetro me viene, entonces yo trato de describir cules son las condiciones que se tienen que cumplir.Una vez llegado a ese punto, si se necesita que sea inversible, analizamos cmo se van ligando las variables y si falta generar los valores posibles en algn caso.Por ejemplo, si pepe vende tornillos parker de todas las medidas disponibles, y sabemos que la medida es un nmero entre 1 y 5 podramos hacer:vende(pepe,tornillo(Medida,parker)):-between(1,5,Medida)."

} ,

{

"title"    : "Paradigma logico   generacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---generacion.html",
"date"     : "",
"content"  : "El concepto de generacin puede servir para acotar el conjunto de valores posibles para una variable, pero tambin para ligar la variable con un valor, ya que eso cambia la forma en la que se evalan las siguientes consultas.Esto ltimo tiene que ver con los problemas de inversibilidad, y los casos de uso se dividen en dos grandes grupos:a) Cuando la generacin posibilita la siguiente consulta, por ejemplo:edad(Persona, E), E &amp;gt; 18.Necesito que E tenga un valor para poder evaluar E&amp;gt;18, si no se rompe.Ese sera el caso fcil, si rompe es un claro indicador de que el cdigo no funciona para hacer esa clase de consultas, es fcil de identificar el problema.b) Cuando la semntica de la consulta es distinta a la que quiero, por ejemplo para la siguiente consulta, asumiendo que tenemos en nuestra base de conocimientos un predicado ocupa/3 que relaciona un jugador, un pas y la cantidad de ejrcitos que tiene en ese pas:not((ocupa(Jugador,Pais,CantEjercitos),CantEjercitos&amp;gt;3))      Si la variable Jugador llega ligada y Pais y CantEjercitos llegan libres, podra leerse como: Dado este Jugador, no ocupa ningn pas con ms de 3 ejrcitos. Si Pais tambin llega ligada, la consulta que estamos haciendo sera: No es cierto que este jugador ocupa este pas con ms de 3 ejrcitos.        En cambio, si Jugador y Pas estn libres, se debera leer como: No existe ningn jugador que ocupe algn pas con ms de 3 ejrcitos.  Entonces, no es que sea obligatorio generar, sino que el significado de la consulta es totalmente distinto, y dependiendo de lo que querramos hacer, hay que ligar previamente el jugador y/o el pas o no.Veamos un ejemplo con el mismo dominio usando findall/3. Si nuestra intencin es definir un predicado cantidadEjercitos/2 que relaciona un jugador con la cantidad total de ejrcitos que tiene en todo el mundo y lo hacemos de la siguiente forma:cantidadEjercitos(Jugador,Cant):-findall(N,ocupa(Jugador,_,N),ListCants),sumlist(ListCants,Cant).Este predicado va a funcionar correctamente (dada una base de conocimientos con muchos jugadores que ocupan varios pases) si la consulta realizada es individual respecto al jugador, pero no es totalmente inversible. Para que lo sea, tenemos que generar al jugador.cantidadEjercitos(Jugador,Cant):-jugador(Jugador),findall(N,ocupa(Jugador,_,N),ListCants),sumlist(ListCants,Cant).De esa forma podremos consultar:?-cantidadEjercitos(Jugador,Cantidad)."

} ,

{

"title"    : "Paradigma logico   individuos compuestos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---individuos-compuestos.html",
"date"     : "",
"content"  : "En contraposicin a los tomos y los nmeros, que son individuos simples, existen los individuos compuestos, estos son:  los functores  las listasPara acceder a los componentes de un individuo compuesto podemos usar Pattern Matching.En el caso de los functores, los componentes son los argumentos del functor. Si los quiero por separado, p.ej. si tenemos un functor de la forma canilla(Forma,Material,Color) y tenemos un predicado vende/2 que relaciona un local con una cosa que vende:vende(pepe,canilla(triangular,hierro,azul)).podemos armar este predicadohayMaterial(Local,Mat):-vende(Local,canilla(_,Mat,_)).en donde estamos abriendo el functor canilla/3 mediante pattern matching y as unificando la variable Mat con el material de la canilla que se vende en el local.En el caso de las listas hay dos patrones bsicos, una lista puede ser la lista vaca o con almenos un elemento. En caso de no ser la lista vaca los componentes son cabeza y cola, y la notacin es[Cabeza|Cola]como la cola tambin es una lista, si la lista con la que quiero matchear espero que tenga al menos dos elementos puedo hacer:[Elem1|[Elem2|Resto]]Probar p.ej. con esta consulta?-[Elem1|[Elem2|Resto]]=[a,e,i,o,u].Alternativamente se puede usar el patrn [Elem1, Elem2 | Resto] con el mismo objetivo, es un azcar sintctico para unificar dos variables con los primeros dos elementos de la lista.El caso tpico para usar Pattern Matching sobre listas es en la recursividad.Combinando constructores de individuos compuestosSe pueden combinar estas dos formas de armar individuos compuestos, p.ej. con esta lista de functores.recorrido(linea19,[estacionTren(once),avenida(rivadavia),calle(salguero),calle(guardiaVieja),facultad(utnMedrano),calle(forest),estacionTren(chacarita)]).si quiero saber por qu estaciones de tren pasa una lnea de colectivos, puedo definirlo aspasaPorEstacion(Linea,Estacion):-recorrido(Linea,Recorrido),member(estacionTren(Estacion),Recorrido).si consulto?-pasaPorEstacion(linea19,Est).voy a obtener como respuestasEst=once;Est=chacarita;No"

} ,

{

"title"    : "Paradigma logico   individuos simples",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---individuos-simples.html",
"date"     : "",
"content"  : "Los primeros individuos con los cuales estaremos trabajando son los denominados simples (en contraposicin a los individuos compuestos). Los que nos van a interesar para trabajar en general son los tomos y los nmeros.tomosLos tomos son valores que representan a una entidad indivisible. En el siguiente ejemplo podemos ver cmo se usan tomos para modelar la informacin:padre(homero,bart).padre(homero,lisa).padre(homero,maggie).padre(abe,homero).Los tomos que se usan en el ejemplo son homero, bart, lisa, maggie y abe. Siempre que aparezca el tomo homero en mi programa me voy a estar refiriendo a la misma persona. Por eso puedo definir hermano/2 como:hermano(H1,H2):-  padre(Padre,H1),  padre(Padre,H2),  H1&amp;#92;=H2.Si los dos individuos que queremos relacionar con el predicado hermano/2 tienen al mismo padre, la relacin se va a cumplir (usamos el &amp;#92;= para asegurarnos que una respuesta posible no sea H1=bart, H2=bart).Es importante notar que estos individuos no son strings?-length(&quot;homero&quot;,X).X=6?-length(homero,X).No&amp;lt;--porprincipio de universo cerradoNmerosLos nmeros pueden usarse para lo mismo que en cualquier otro paradigma. Los podemos comparar, saber si uno es mayor que otro y usarlos para resolver  operaciones aritmticas. Pero siendo que estamos en lgico y contamos con la idea de inversibilidad y mltiples respuestas tambin podemos hacer cosas como:?-between(3,7,X).X=3;X=4;X=5;X=6;X=7;NoAlgunas consideraciones que hay que tener con los operadores como el &amp;#92;=, el &amp;gt;, el + etc.. es que requieren que las variables utilizadas ya se encuentren ligadas. De lo contrario ocurrir un error en tiempo de ejecucin como este:?-3&amp;gt;A.ERROR:ArgumentsarenotsufficientlyinstantiatedDe la misma forma, el between que vimos recin slo es inversible para el tercer argumento, los dos primeros que definen el rango deben ser valores concretos. Esto tiene sentido ya que las posibles respuestas seran infinitas si no se define un mximo y un mnimo."

} ,

{

"title"    : "Paradigma logico   introduccion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---introduccion.html",
"date"     : "",
"content"  : "El paradigma lgico se basa en la definicin de reglas lgicas y es un paradigma declarativo as que si no lo leste todava te recomiendo leer antes sobre Declaratividad. En este artculo hablamos principalmente de la teora del paradigma lgico, pero para los ejemplos tomamos como base el lenguaje PrologIntroduccin: SilogismosCmo describir un problema usando la lgica? Qu tipo de problema podemos describir?Comencemos con un ejemplo simple, seguramente muchos de ustedes lo habrn escuchado alguna vez:Scrates es hombreTodos los hombres son mortalesLuego qu podemos deducir de esto? Claro adivinaste, que Scrates es mortal. De eso se trata la programacin lgica, vamos a describir nuestro conocimiento en formas de reglas y vamos a permitir que otra cosa (el motor) se ocupe de procesar ese conocimiento y sacar conclusiones al respecto.Y solito se da cuenta de las cosas? Ms o menos, en realidad no podemos pedirle al motor que solamente se ponga a deducir y que nos diga a qu conclusin llega, hay que hacerle preguntas ms concretas. Por ejemplo podemos preguntarle:  si socrates es mortal, y nos va a decir que s  qu mortales conoce, y nos va a decir que socrates es mortalEsos son los dos tipos de preguntas bsicas que el motor va a saber contestar, despus vamos a bajar en detalle sobre esto.Cmo lo bajamos a cdigo?Programemos este mismo ejemplo en Prolog, en realidad es bastante simple:hombre(socrates).mortal(X):-  hombre(X).Qu quiere decir esto?  hombre(socrates) afirma que Scrates es un hombre, o dicho de otra manera que socrates tiene la caracterstica hombre. Es una afirmacin que afecta nicamente a Scrates y la llamamos un hecho, ya que es una declaracin que no depende de nada para ser verdadera.  mortal(X):-hombre(X) es lo que llamamos una regla y se puede leer como: X es hombre  X es mortal. La regla es una implicacin, el antecedente es hombre(X) y el consecuente es mortal(X). Esto quiere decir que para todo X que tenga la caracterstica hombre se da que ese X tambin tiene la caracterstica mortal (o ms corto: todos los hombres son mortales).Fijate que socrates est en minscula, mientras que la X aparece en mayscula, por qu? Los trminos en minscula se refieren a cosas particulares y las palabras en mayscula son incgnitas (o variables).Eso se relaciona tambin con que la primera lnea sea un hecho (porque habla de un individuo particular) y la segunda sea una regla (porque habla de todos los hombres).Pero la principal diferencia entre el hecho y la regla es que la regla tiene un antecedente (que se debe cumplir para que se cumpla la regla) y el hecho no, el hecho es verdadero siempre. En programas ms complejos, a veces pasa que tenemos hechos que usan variables o reglas sobre individuos particulares.Los hechos me permiten definir por extensin el conjunto de individuos que tienen una caracterstica. Las reglas me permiten hacer esa misma definicin por comprensin.Un poco de teoraSi entendiste todo hasta ac, es momento de formalizar algunas cositas acerca del programa que hicimos. Antes que nada:  La base de conocimiento se compone de clusulas que definen predicados partiendo de los individuos de los que queremos hablar (para ms detalles sobre estos trminos, podemos pasar a ver algunas definiciones).  Un programa Prolog es una base de conocimiento.Para obtener resultados a partir de un programa, hacemos consultas individuales y existenciales.Universo CerradoQu pasa si ahora quiero preguntar si Aristteles es mortal??- mortal(aristoteles).Al ejecutar esa consulta, la secuencia de pasos del motor (simplificada) es la siguiente:  El motor buscar en la base de conocimientos las diferentes clusulas del predicado mortal/1, en particular las que matcheen con mortal(aristoteles).  Al hacer esto encontrar una nica regla: mortal(X):-hombre(X). Ergo, para probar que Aristteles es mortal, deber probar que es hombre.  Al intentar verificar si aristoteles es un hombre, es decir la consulta hombre(aristoteles).  Pero la nica definicin del predicado hombre es hombre(socrates), que no matchea con hombre(aristoteles).  La base de conocimientos no dice nada acerca de aristteles, por lo tanto no se puede verificar que Aristteles sea mortal.En este momento aparece un concepto que llamamos principio de universo cerrado, que dice que el motor asume como falso todo lo que no pueda probar como verdadero, es decir que si al preguntarle si aristoteles es mortal, me va a contestar que no!Muchos entornos (tanto dentro del paradigma lgico como en otros muchos lugares) trabajan con este principio. Aunque no es la nica forma de trabajar, es algo bastante frecuente dado que lo contrario es en general ms complicado de implementar y de utilizar.Cmo solucionar el problema?Agregando el hecho que indica que Aristteles es un hombre:hombre(aristoteles).Si volvemos a hacer la misma consulta ahora vamos a tener el resultado esperado."

} ,

{

"title"    : "Paradigma logico   inversibilidad",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---inversibilidad.html",
"date"     : "",
"content"  : "DefinicinLa inversibilidad es una de las caractersticas distintivas del paradigma lgico, que no aparece en los paradigmas funcional ni objetos. Que un predicado sea inversible significa que los argumentos del mismo pueden usarse tanto de entrada como de salida. Es decir, no necesits pasar el parmetro resuelto (un individuo concreto), sino que pods pasar una incgnita (variable sin unificar).Imaginate un predicado esNatural/1 que te dice si un nmero es natural:esNatural(1)YesesNatural(-2)NoCuando un predicado es inversible, tambin pods hacer otro tipo de consultas, poniendo una incgnita en el parmetro en lugar de un valor:esNatural(N)N=1;N=2;N=3;etc...Esta caracterstica es exclusiva del paradigma lgico, ya que est basado en el concepto de relacin matemtica (y no en el de funcin, donde siempre bamos de un dominio a una imagen).La inversibilidad no tiene que ver solamente con que d error si pasamos una incgnita donde no podamos hacerlo, muchas veces lo que pasa es que -sin dar error- se comporta incorrectamente o de forma distinta a la que uno esperara. En ese caso tambin decimos que no es inversible.EjemplosVeamos este programavive(ruben,lanus).vive(ana,lanus).vive(laura,boedo).vive(susi,bernal).sonVecinos(P1,P2):-  vive(P1,B),  vive(P2,B),  P1&amp;#92;=P2.esDelSur(P):-vive(P,lanus).esDelSur(P):-vive(P,bernal).Todos los predicados que aparecen son totalmente inversibles, porque puedo hacer consultas con cualquier combinacin de valores e incgnitas. Qu quiere decir esto? Mir todas las consultas que se pueden hacer?-vive(ruben,B).?-vive(P,lanus).?-vive(ruben,boedo).%respondequeno?-vive(P,B).y lo mismo para sonVecinos?-sonVecinos(ruben,X).?-sonVecinos(X,ruben).?-sonVecinos(ana,ruben).%respondeques?-sonVecinos(X,Y).para esDelSur/1 hay menos combinaciones, porque tiene un slo argumento?-esDelSur(susi).%quteparecequeresponde??-esDelSur(P).%idemObservar que cada predicado tiene una definicin sola, no tengo que pensar en distintas definiciones para cubrir las distintas combinaciones entre valores e incgnitas. Para sonVecinos/2, no tengo que armar una regla por si me consultan con dos valores, una distinta por si me consultan con dos incgnitas, etc..OJO - inversible no es lo mismo que simtricoSigamos con el programa anterior. Ya vimos que los tres predicados son inversibles.Ahora bien, son simtricos?Empecemos pensando qu quiere decir simtricos. Es como una relacin simtrica de las de teora de conjuntos: una relacin R es simtrica si siempre que pasa aRb, tambin pasa bRa.Entonces, el predicado vive/2, es simtrico? Veamos. Si consulto?-vive(ruben,lanus).responde que s, o sea, ruben / vive / lanus. En el esquema aRb, es  a: ruben  R: vive  b: lanusO sea que bRa sera?-vive(lanus,ruben).y la respuesta de esto claramente va a ser no.Entonces el predicado vive/2 no es simtrico. Pero ya vimos que s es inversible, porque  inversible quiere decir puedo hacer consultas con cualquier combinacin de valores e incgnitas.  y no quiere decir si invierto los argumentos da las mismas respuestas. Esto es simetra.En cambio, sonVecinos/2 es esperable que se verifique para el mismo par de individuos en cualquier orden. A su vez, por como est definido es inversible, pero no tiene nada que ver una cosa con la otra.Observar que la nocin de simetra slo se aplica a predicados de 2 argumentos (para esDelSur/1 cmo sera ser simtrico? No tiene sentido), mientras que la de inversibilidad se aplica a cualquier predicado.Resumen ejecutivo: ojo al piojo, inversibilidad es una cosa muy distinta a simetra, no confundirse. Si no queda claro, consulte con su docente amigo. Lo que nos va a interesar en la materia es el concepto de inversibilidad.Cmo hacs que un predicado sea inversible?En principio, todo predicado es inversible salvo que caiga en un caso de no-inversibilidad.Estos casos tienen que ver con las submetas de un predicado que requieren variables ligadas, en estas cosas es que hay que fijarse para saber qu hace falta generar.Por ejemplo: cuando una de las componentes de un predicado es un not/1 , necesits que el predicado que le mands tenga sus parmetros unificados. Cuando uss una evaluacin matemtica (ej: X is N &amp;#92;* 2), necesits que lo de la derecha (la N) est unificado.Cul sera el uso?Inherentemente es ms potente que una funcin, ya que te permite encontrar todos los valores para los cuales una relacin se cumple (y esto tiene que ver tambin con la idea de mltiples resultados).La ventaja inmediata es que te permite ms formas de usarlo, lo tpico: puedo preguntar si un alumno aprob, o todos los alumnos que aprobaron, etc.Luego podra aparecer otra ventaja y es que si todos mis predicados son inversibles, eso de verdad me permite usarlos sin pensar nada nada nada en la secuencia y me da ms lugar a slo declarar el conocimiento. Y eso le da una potencia ms grande a mi lenguaje/paradigma/entorno de programacin.(Igual no debe entenderse de lo ltimo que todos los predicados que hago deben ser inversibles. )"

} ,

{

"title"    : "Paradigma logico   listas",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---listas.html",
"date"     : "",
"content"  : "MotivacinSi nuestra base de conocimiento espadre(homero,bart).padre(homero,maggie).padre(homero,lisa).Vimos varias consultas posibles%Esciertoquehomeroespadredebart??-padre(homero,bart).Yes%Esciertoquehomeroespap??-padre(homero,_).Yes%Quienessonlospadresdebart??-padre(P,bart).P=homero%Quienessonloshijosdehomero??-padre(homero,H).H=bart;...%Quienessonpadreehijo??-padre(X,Y).X=homeroY=bart;etc.Pero a pesar de esta gran gama de consultas hay ciertas preguntas que se vuelven complicadas o imposibles. Vamos a tomar como ejemplo la siguiente pregunta: Cuntos hijos tiene homero?.En el estado actual de las cosas tenemos que hacer la consulta?-padre(homero,H).H=bart;H=lisa;H=maggie;NoContamos la cantidad de respuestas, en este caso los posibles valores de H y obtenemos la respuesta  3. Ahora bien, esto es impracticable cuando el nmero de respuestas es alto y adems no responde a nuestra pregunta de forma directa.Pensemos en predicados e individuos y definamos un predicado que relacione lo que nos interesa  una persona y su cantidad de hijos. Dicho predicado puede llamarse cantidadDeHijos/2.?-cantidadDeHijos(homero,C).C=3Perfecto, ya tenemos definido nuestro objetivo ahora definamos el predicado a travs de una regla (lo quiero hacer por comprensin porque quiero que me sirva para cualquier persona, no solo homero)cantidadDeHijos(P,Cantidad):-....Para resolver esto volvamos un poco para atrs. En el mundo del paradigma lgico qu es lo que da 3? La cantidad de respuestas de la consulta .Entonces lo que nos gustara hacer es tener en un solo lugar todas las respuestas a la consulta para despus contar todos los posibles valores de H pero todava no sabemos cmo hacer eso as que imaginemos que por el momento es magia.El conjunto como un individuoSin importar como obtenemos esas respuestas las queremos tener identificadas en un solo lugar, en un solo individuo  un individuo compuesto que representa un conjunto!En el caso de homero ese conjunto va a ser .A este tipo de individuo que representa conjuntos lo vamos a llamar lista y se encierra entre corchetes () donde cada elemento del conjunto se separa por coma ().En nuestra definicin del predicado vamos a definir una variable Hijos que va representar a dicho conjunto, pero a nosotros no nos interesa el conjunto de hijos sino la cantidad de elementos que tiene ese conjunto Una vez hecha la magia, lo que necesitamos es un predicado que relacione a un conjunto con su cantidad de elementos y eso ya viene con prolog. Ese predicado se llama .cantidadDeHijos(P,Cantidad):-acvalamagiaqueledavaloralavariableHijos,length(Hijos,Cantidad).Nos falta hacer la magia!Cmo obtener todas las respuestas juntas?Si tenemos una forma de obtener mltiples respuestas a una consulta (en este caso, todos los H que son respuesta de la consulta padre(P,H) cuando P es por ejemplo homero), y lo que queremos es que todas esas respuestas estn juntas en una lista, hay un predicado en Prolog que hace exactamente eso:findall(UnIndividuo,Consulta,Conjunto)Donde:      normalmente es una variable que se usa en la Consulta        es una lista con todos los individuos que se encontraron al consultar la Consulta  Entonces:findall es un predicado que relaciona a una consulta con el conjunto (lista) de sus respuestas.El otro parmetro me permite indicar qu es lo que me interesa para completar la lista. Volviendo a nuestro ejemplocantidadDeHijos(P,Cantidad):-findall(H,padre(P,H),Hijos),length(Hijos,Cantidad).Con esta definicin nuestro objetivo se cumple?-cantidadDeHijos(homero,C).C=3Observamos que la variable de la clusula que define cantidadDeHijos llega ligada al findall, por lo tanto la consulta que est adentro (el 2do parmetro) queda que efectivamente tiene 3 respuestas.Inversibilidad del predicado findallAhora bien, agregemos algunos hechos a la base de conocimientopadre(homero,bart).padre(homero,maggie).padre(homero,lisa).padre(abraham,homero).padre(abraham,herbert).Y pensemos en otra consulta?-cantidadDeHijos(P,C).C=5.No funciona como esperbamos, a qu se debe?Debemos mirar la consulta que se est realizando en el findall (el 2do parmetro): . Si pensamos cuntas respuestas tiene esa pregunta veremos que efectivamente son 5!%Quienessonpadreehijo??-padre(P,H).P=homero,H=bart;P=homero,H=maggie;P=homero,H=lisa;P=abraham,H=homero;P=abraham,H=herbert.En el findall/3 como primer parmetro dijimos que nos interesa solamente la variable H de cada respuesta, e Hijos ser un conjunto de esos H. Por lo tanto Hijos es la lista [bart,maggie,lisa,homero,herbert] que tiene 5 elementos (la respuesta a nuestra consulta).Un findall totalmente inversible: GeneracinEl problema est en la consulta de adentro del findall, no queremos preguntar Quienes son padre e hijo? sino Quienes son hijos de P? (risas) y para preguntar eso P debe llegar ligada al findall, para poder preguntar por los hijos de una persona en particular.Ahora tenemos que averiguar cmo ligar a P, y para eso hay que pensar cules seran los posibles P que nos interesan. Una respuesta sencilla es pensar que queremos que P sea una persona, entonces podramos agregar al antecedente la restriccin: .(Tambin se podra usar el predicado padre/2 en lugar de persona/1, analizamos la diferencia entre ambos en el prximo apartado.)cantidadDeHijos(P,Cantidad):-persona(P),%Generacion,asilavariablePllegaligadaalfindallfindall(H,padre(P,H),Hijos),length(Hijos,Cantidad).Lo que logramos al hacer que P llegue ligada al findall es que el predicado cantidadDeHijos/2 sea totalmente inversible. A esta tcnica la denominamos generacin.Dos formas distintas de generacinDijimos que en realidad hay dos formas de determinar cules son todos los P que me interesan:  Una forma es decir que P es una persona, entonces podramos poner:  Por el otro podemos pensar que P tiene que ser padre, entonces surge la opcin: . (Me interesa que sea padre y no me importa en principio cules son sus hijos.Qu pasara si usamos en lugar de como generador?cantidadDeHijos(P,Cantidad):-padre(P,_),%Generacion,asilavariablePllegaligadaalfindallfindall(H,padre(P,H),Hijos),length(Hijos,Cantidad).La diferencia la vamos a encontrar si hacemos la consulta:?-cantidadDeHijos(bart,C).Con la solucin propuesta en el apartado anterior nos dice que bart tiene cero hijos:?-cantidadDeHijos(bart,C).C=0Con la segunda posibilidad, bart no es una posible respuesta para (porque no es padre de nadie). Entonces lo que voy a obtener es:?-cantidadDeHijos(bart,C).NoEn este caso consideramos que es ms saludable un 0 que un No. Independientemente de eso, lo que debe quedar de todo esto es que las distintas formas de generar nos pueden dar diferentes resultados como respuesta y hay que elegir qu queremos.Una pregunta adicional que podra surgir es: qu pasa si no tenemos el predicado persona? Bueno, habr que agregarlo a la base de conocimientos, y para ello tenemos dos posibilidades:Por extensin:uno por uno enumerando cada persona (un hecho para cada persona:persona(bart).persona(lisa)....etc.Por comprensin:con una regla descubrir quines podemos considerar persona a partir de la informacin que ya tenemos. Una forma de hacer eso sera:persona(Papa):-padre(Papa,_).persona(Hijo):-padre(_,Hijo).Es decir, el que es padre de alguien es una persona, y el que es hijo tambin.Haciendo consultas ms heaviesEn el segundo parmetro del findall se pueden poner cualquier tipo de consulta, no es necesario que solo 1 predicado est involucrado.findall(X,(p(X),q(X),r(X),,s(X)), Xs)Hay que encerrarla entre parntesis para no cambiar la aridad de findall que es tres (3).EjemploSi queremos hacer un predicado que me diga cuantos hijos pibes tiene una persona podemos hacer estoLos X que me interesan son los que cumplen la consulta (padre(P,H),esPibe(H))cuantosPibes(Persona,Cant):-persona(Persona),findall(H,(padre(Persona,H),esPibe(H)),Pibes),length(Pibes,Cant).Otro ejemplo usando listasinterseccion(Xs,Ys,Zs):-findall(E,(member(E,Xs),member(E,Ys)),Zs).Usando individuos compuestos en el primer parmetro del findallEn ciertas situaciones nos interesa tener una lista de individuos que hasta el momento no existan en nuestro programa o que no estn presentes explcitamente en la consulta (o sea, en el 2do parmetro del findall).Ejemplo:Imagnense que tenemos un programa en donde se define el predicado puntaje/2 que relaciona a un equipo con la cantidad de puntos que tiene. Un requerimiento bastante usual en un programa de este estilo, es conocer la tabla de posiciones que se puede ver como un conjunto de individuos o sea una lista en donde cada individuo que la compone es un equipo con su cantidad de puntos.?-findall(????,puntaje(Equipo,Cant),Tabla).La pregunta a responder es qu ponemos en ????. Necesitamos definir un individuo que est compuesto por otros 2 individuos (Equipo y Cant). Para hacer esto nada mejor que un functor (un indivudo compuesto de tamao fijo), le inventamos un nombre por ejemplo ptos?-findall(ptos(Equipo,Cant),puntaje(Equipo,Cant),Tabla)Recuerden:  ptos es un functor no un predicado  puntaje es un predicado no un functor  Tabla es una lista de functores ptos que verifican la consulta que est como segundo parmetro del findallSacando los repetidos con distinct  Ver DistinctRecursividad Con Listas  Ver Recursividad en LogicoErrores comunesfindall y memberEl error ms comn para quienes no estn acostumbrados a pensar en trminos del paradigma es armar listas cuando no son necesarias para la resolucin del problema. Esto se pone en evidencia por el uso del findall seguido por un member sobre la lista resultante. El findall arma listas, el member las desarma son operaciones inversas!Por ejemplo, si quiero saber quines son los hijos de homero puedo consultar padre(homero,Hijo). Resolver esto como:?-findall(H,padre(homero,H),Hijos),member(Hijo,Hijos).es no estar entendiendo la forma de pensar.Si bien este primer ejemplo puede parecer obvio, hay casos en los cuales no es tan evidente, por ejemplo cuando se arma una lista de los que cumplen CONDICION con el predicado A y el predicado B consulta A y luego se obtienen los elementos con member.Siguiendo el ejemplo anterior de los hijos pibes, podemos mostrar el problema anterior de esta forma:hijosPibes(P,Pibes):-persona(P),findall(H,(padre(P,H),esPibe(H)),Pibes).esHijoPibe(Persona,Hijo):-hijosPibes(Persona,Pibes),member(Hijo,Pibes).En ese caso todo lo que necesitbamos era consultar por existencia quin cumple CONDICION, y si todava nos interesa hijosPibes/2 podramos hacer los siguientes cambios:hijosPibes(P,Pibes):-persona(P),findall(Hijo,esHijoPibe(P,Hijo),Pibes).esHijoPibe(Persona,Hijo):-padre(Persona,H),esPibe(H).En este caso fue simple porque B modelaba directamente CONDICION, pero bien podra pasar que nos est faltando una abstraccin para modelar CONDICION, que podemos solucionar definiendo otro predicado C y modificando los predicados A y B para que usen C.findall y lengthUno de los usos ms comunes de findall tiene como objetivo saber cuntos individuos cumplen una determinada condicion, como en el ejemplo visto anteriormente de cantidadDeHijos/3. Sin embargo hay casos en los cuales pensamos la solucin a un problema bsico en trmino de cantidad de respuestas, lo cual disminuye la declaratividad de la solucin. Veamos un par de ejemplos:esPadre(Persona):-persona(Persona),findall(Hijo,padre(Persona,Hijo),Hijos),length(Hijos,CantidadDeHijos),CantidadDeHijos&amp;gt;=1.noTieneHijos(Persona):-persona(Persona),findall(Hijo,padre(Persona,Hijo),Hijos),length(Hijos,0).Estos dos predicados podran definirse sin uso de listas, y no slo eso sino que la solucin de ambos es mucho ms sencilla. En ambos casos debera simplemente trabajar con la idea de existencia, ya sea afirmndola o negndola, o sea:esPadre(Persona):-padre(Persona,_).noTieneHijos(Persona):-persona(Persona),not(padre(Persona,_)).Caso existe ms de unUn problema comn es saber si hay ms de un individuo que cumple una condicin. Si alguien tiene ms de un hijo, por ejemplo. Eso lo podemos saber as:tieneMasDeUnHijo(Persona):-persona(Persona),findall(Hijo,padre(Persona,Hijo),Hijos),length(Hijos,CantidadDeHijos),CantidadDeHijos&amp;gt;1.Hay un problema nuevamente con la declaratividad, y con la manera de pensar lgicamente. Si le damos una vuelta de tuerca, podemos resolver este ejercicio sin necesidad de armar una lista y contar.Esto se logra pensando as: tengo ms de un hijo si existen dos hijos diferentes.tieneMasDeUnHijo(Persona):-padre(Persona,Hijo1),padre(Persona,Hijo2),Hijo1&amp;#92;=Hijo2.Es mucho ms directo! Y respeta mejor las ideas del paradigma.Caso existe slo unEste es para pensar:tieneSoloUnHijo(Persona):-persona(Persona),findall(Hijo,padre(Persona,Hijo),Hijos),length(Hijos,1).No podra hacerlo de otra forma?Alguien tiene un slo hijo si:  Existe al menos un hijo, y  No existe ms de un hijo(sale usando lo explicado arriba)findall y forallY otro caso tpico de mal uso de findall y member aparece al tratar de usar el forall."

} ,

{

"title"    : "Paradigma logico   multiples respuestas",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---multiples-respuestas.html",
"date"     : "",
"content"  : "Al hacer una consulta existencial se puede obtener ms de una respuesta. Esto se debe a que estamos trabajando con relaciones, no con funciones. Las funciones son un caso particular de relacin que se caracterizan por cumplir con unicidad (para cada valor de entrada hay una nica salida), mientras que las relaciones no tienen esa restriccin.P.ej. si Pedro tiene como primos a Luca, Alan y Guido; entonces la relacin ser primos relaciona a Pedro con tres personas distintas:primo(pedro,lucia).primo(pedro,alan).primo(pedro,guido).Entonces si consulto quin es un posible primo de Pedro, lo que debe pasar es que se obtengan tres respuestas independientes entre ellas: una respuesta por cada primo que tenga Pedro.?-primo(pedro,Primo).Primo=lucia;Primo=alan;Primo=guidoEn funcional no tendra sentido que para la funcin primo existan 3 respuestas para el valor Pedro, dado que no cumplira con la propiedad de unicidad de las funciones. La nica forma de responder que tanto Luca, Alan y Guido son primos de Pedro es mediante el uso de valores compuestos para representar al conjunto que incluye a todos ellos.Ahora, si quisiramos resolver un problema donde esperamos que cada individuo se relacione con un nico valor, eso debe asegurarse dentro de la lgica del predicado.Pongamos un ejemplo sencillo para analizar: supongamos que queremos definir un predicado que relacione a un valor consigo mismo, salvo que ese valor sea el 0, en cuyo caso se lo debe relacionar con el nmero 1. No alcanzara slo con explicitar mediante un hecho que el 0 se relaciona con el 1 y luego generalizar lo que pasa con los otros valores de esta forma de esta forma:p(0, 1).p(X, X).Ya que si consultamos:?- p(0, Valor).Valor = 1;Valor = 0Para que la nica respuesta posible sea 1, tenemos que asegurar que el caso general excluya al 0, lo cual puede lograrse de la siguiente forma:p(0, 1).p(X, X) := X &amp;#92;= 0."

} ,

{

"title"    : "Paradigma logico   negacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---negacion.html",
"date"     : "",
"content"  : "El predicado de orden superior ms simple, y a la vez muy utilizado, es el not/1, que representa una negacin. Si P es una proposicin, entonces not(P) es una proposicin que niega el valor de verdad asumido para P. As, la negacin de algo falso se toma por verdadera, y la negacin de algo con valor cierto, se toma como falso.EjemplosConsultas IndividualesSupongamos lo siguiente:esMalo(feinmann).esMalo(hadad).esMalo(echecopar).Y miremos los resultados de las siguientes consultas:?-esMalo(hadad).true?-not(esMalo(hadad)).false?-esMalo(bambi).false?-not(esMalo(bambi)).trueAhora, miremos sto:?-esMalo(34).falseClaro que no es malo! El 34 no lastimara una mosca! Porque ste paradigma se basa en el concepto de Universo Cerrado. (Si no est en la base, es falso). Entonces, la siguiente consulta da verdadero:?-not(esMalo(34)).trueConsultas Existenciales  VariablesRecordemos cul es el significado de la siguiente consulta:?-esMalo(_).As, con la variable annima, estoy preguntando si existe un malo. Bueno, eso es cierto:?-esMalo(_).trueAhora bien, veamos qu sucede si preguntamos si es cierto que no existe un malo?-not(esMalo(_)).falsePor ltimo, se podr usar una variable que no sea la variable annima dentro de una negacin?Para responder a eso vamos a tener que hablar sobre inversibilidad.InversibilidadAgreguemos lo siguiente al ejemplo:esPersona(feinmann).esPersona(hadad).esPersona(echecopar).esPersona(bambi).esPersona(fer).esPersona(lucas).esBueno(Persona):-  not(esMalo(Persona)).ProblemaVeamos el resultado de la siguiente consulta:?-esBueno(lucas).true.?-esBueno(fer).true.Y ahora tratemos de preguntar si existe algn bueno (claro que existen!):?-esBueno(X).false.Qu pas?? No debera ser capaz de decirnos quines son buenos?InterpretacinMi regla dice que se cumple esBueno(X), si se cumple not(esMalo(Persona)).Sabiendo que la variable annima es igual que cualquier otra variable, slo que la usamos cuando no nos interesa conocer qu individuo hace que se cumpla la consulta, stas dos consultas tienen el mismo valor de verdad, que para nuestra base de conocimientos sera verdadero ya que existe alguien que es malo:?-esMalo(_).?-esMalo(X).Entonces, la siguiente consulta (equivalente a esBueno(X)) dar falso:?-not(esMalo(X)).false.Porque estoy preguntando si es cierto que no existe alguien malo.Normalmente si usamos una variable no annima, Prolog tratar de darnos ejemplos que hacen verdadera esa consulta. Pero en el caso de la negacin, es imposible para el motor encontrar ejemplos de individuos que satisfagan la consulta, porque son infinitos! Por ejemplo, el 34 no es malo?-esBueno(34).true.SolucinEntonces Qu hacemos?Generamos.Generar es agregar una condicin que s sea inversible antes del not, para que las variables lleguen ligadas al mismo. De sta manera, transformamos la consulta dentro del not que poda llegar a ser una consulta existencial en una consulta individual, que funcionan como nosotros esperamos (Leer ms ariba).esBueno(Persona):-  esPersona(Persona),  not(esMalo(Persona)).Y as podemos consultar si existe un bueno, y tener tambin ejemplos de buenos.?-esBueno(X).X=bambi;X=fer;X=lucas.Para ms informacin sobre inversibilidad y generacin, visitar el artculo Paradigma Lgico - inversibilidadAdems, nuestro nuevo predicado esBueno se va a comportar distinto que antes ante esta consulta individual:?-esBueno(34).false.Si bien el nmero 34 nos gusta mucho, sera conceptualmente incorrecto aceptar que fuera bueno, ya que nuestro dominio trabaja con personas, y es sobre ellas que, en ste caso, queremos verificar la propiedad de ser buenas. Con el agregado que hicimos no slo resolvimos el problema de las consultas existenciales, sino que adems sirvi para acotar el dominio de aquellos que pueden ser buenos."

} ,

{

"title"    : "Paradigma logico   un poco de nomenclatura",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico---un-poco-de-nomenclatura.html",
"date"     : "",
"content"  : "Cuando describimos los elementos de un programa en lgico (ya sea para su definicin como su uso) vamos a usar los siguientes trminos:  Individuo          Individuo simple                  tomo          Nmero                    Individuo compuesto                  Lista          Functor                      Predicado          Propiedad      Relacin        Clusula          Hecho      Regla        Consulta          Individual      Existencial      A continuacin mostramos un programa sencillo (la base de conocimiento) como para tener de referencia e identificar cundo usamos cada uno de estos trminos.hombre(socrates).hombre(solon).hombre(pericles).hombre(arquimedes).mortal(X):-  hombre(X).ciudad(atenas).ciudad(siracusa).vive(socrates,atenas).vive(solon,atenas).vive(pericles,atenas).vive(arquimedes,siracusa).nacio(solon,-634).nacio(pericles,-495).nacio(arquimedes,-287).sonConciudadanos(P1,P2):-  vive(P1,C),  vive(P2,C).IndividuosLos individuos son aquellas cosas sobre las que versa el conocimiento que queremos expresar. En el ejemplo aparecen varios individuos: socrates, atenas, solon, arquimedes, siracusa, -634, -287. Individuo es cualquier entidad acerca de la cual nos interese estudiar sus caractersticas o sus relaciones con otros individuos. P.ej. si hiciramos un sistema para controlar correlatividades entre las materias de la facultad, tendramos un individuo para representar cada materia. Los individuos se dividen en  Individuos simples: los tomos (como solon, atenas, siracusa) y los nmeros son individuos simples. Ver Paradigma Lgico - individuos simples  Individuos compuestos: tienen otros individuos adentro, los componentes, y se pueden ver o bien como una unidad o bien acceder a cada componente mediante pattern matching. Ver Paradigma Lgico - individuos compuestos.PredicadosLos predicados son las cosas que queremos decir (o predicar, je) acerca de los invividuos. En este ejemplo los predicados que aparecen se llaman mortal, hombre, vive, nacio, sonConciudadanos.A la cantidad de parmetros que lleva cada predicado la llamamos su aridad. En el ejemplo, los predicados hombre, mortal y ciudad tienen aridad 1, mientras que vive y sonConciudadanos tienen aridad 2. A partir de su aridad podemos separar los predicados en:  Propiedades : Son los predicados de aridad 1, que expresan caractersticas de individuos. Por ejemplo, ser mortal es una propiedad.  Relaciones : Son los predicados de aridad mayor a 1, que expresan relaciones entre individuos. Por ejemplo, saber dnde vive alguien es una relacin entre una persona y una ciudad.Usualmente haremos referencia a un predicado en particular, no slo mediante su nombre sino tambin su aridad (por ejemplo hombre/1), ya que podran haber predicados con el mismo nombre pero distinta aridad y seran totalmente independientes entre ellos.Volviendo al ejemplo del sistema de correlatividades, seguramente tendra un predicado que relacione cada alumno con cada materia que curs, y otro que indique la correlatividad entre dos materias relacionando una materia con cada requisito.ClusulasCada una de las sentencias = unidades de informacin de una base de conocimiento. Las clusulas deben terminar con un punto . El ejemplo tiene 15 clusulas. Cada clusula participa en la definicin de un predicado, define ciertos casos para los que un predicado se verifica. En el ejemplo:  las clusulas 1 a 4 definen por extensin el predicado hombre/1.  la clusula 5 define el predicado mortal/1, indicando que cualquier individuo que sea hombre, es mortal.  las clusulas 6 y 7 definen por extensin el predicado ciudad/1  etc..Cada clusula puede ser un hecho o una regla.Un hecho hace una afirmacin incondicional (no depende de ninguna condicin para ser cierta), generalmente sobre un individuo particular.En el ejemplo todas las clusulas son hechos salvo las que definen los predicados mortal/1 y sonConciudadanos/2. Sintcticamente, los hechos son las clasulas que no incluyen el smbolo :- .Una regla define una implicacin, es decir que define que si se cumplen ciertas condiciones, entonces un predicado se verifica para ciertos individuos.La clusula mortal(X):-hombre(X). sirve para determinar de forma general (por comprensin, no por extensin) si un cierto X es mortal. Esta definicin indica que si se cumple la condicin hombre(X) entonces el predicado mortal/1 se cumple para ese mismo X. Una regla se compone de una cabeza (mortal(X)) y un cuerpo (en este caso es solamente hombre(X)), unidos por el smbolo :- que denominamos cuello. Si vemos una regla como una implicacin con antecedente y consecuente, est invertida respecto a lo que se vio al estudiar lgica: la cabeza es el consecuente, el cuerpo es el antecedente.El predicado sonConciudadanos/2 tambin se define con una regla, slo que un poco ms compleja porque depende de una conjuncin entre dos condiciones ms sencillas.ConsultasSon la forma de usar un programa en lgico, se hace una consulta, y se obtiene una o varias respuestas.Existen dos tipos de consulta:Individualesse hacen sobre individuos especficos. Por ejemplo:?-mortal(socrates).?-sonConciudadanos(socrates,solon).ExistencialesSe verifica si existe algn individuo que satisfaga la consulta. Adems, Prolog a veces nos sabe dar &amp;quot;ejemplos&amp;quot; de individuos que hacen verdadera la consulta. Por ejemplo:?-mortal(X).?-sonConciudadanos(X,Y).?-sonConciudadanos(solon,Y).En el segundo caso cada respuesta es un par de conciudadanos (o sea, de individuos relacionados por el predicado sonConciudadanos/2, mientras que en el tercero cada respuesta es un conciudadano de Soln.En este tipo de consultas aparecen variables o incgnitas. Por ese motivo este tipo de consultas tambin son llamadas consultas variables."

} ,

{

"title"    : "Paradigma logico",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigma-logico.html",
"date"     : "",
"content"  : "Este paradigma se basa en los conceptos de lgica matemtica, se basa predicados que caracterizan o relacionan a los individuos involucrados y la deduccin de las posibles respuestas a una determinada consulta.Es un paradigma declarativo. No hay asignaciones destructivas, se trabaja con el concepto de unificacin.Las bases del paradigma  Introduccin  Nomenclatura lgica  Conjuncin y Disyuncin  Negacin  Existe vs Para TodoModelando la informacin  Aritmtica en Prolog  Individuos simples  Individuos compuestos  Trabajo con valoresAlgunas Caractersticas Relevantes  Inversibilidad  Principio de Universo Cerrado  Generacin  Mltiples Respuestas  Unificacin y Pattern-Matching  Polimorfismo en el Paradigma Lgico  Recursividad en LogicoPredicados de Orden Superior  Orden Superior  not  forall  findall  distinct  Cmo hacer predicados de orden superiorErrores y preguntas frecuentes  Errores frecuentes al programar en lgico  Preguntas Frecuentes del Paradigma Lgico  Cmo encaro un problema en Lgico?Ms caractersticas  Paradigma Lgico - detalles del SWI Prolog  Aqu pueden ver otros Lenguajes del Paradigma lgico, adems del Prolog."

} ,

{

"title"    : "Paradigmas de programacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/paradigmas-de-programacion.html",
"date"     : "",
"content"  : "  Qu es un Paradigma de ProgramacinLos paradigmas  Paradigma Lgico  Paradigma Funcional  Paradigma de ObjetosConceptos Transversales  Abstraccin  Declaratividad  Expresividad  Orden Superior  Transparencia Referencial, Efecto de Lado y Asignacin Destructiva  Polimorfismo  Representacin de informacin  Estrategias de Evaluacin  Esquemas de Tipado  Mquina VirtualY algunas discusiones interesantes que surgieron alrededor de estas ideas:  Declaratividad vs. Expresividad  Diferencias entre polimorfismo, abstraccin y encapsulamientoMaterial de lectura extraConcepts, Techniques and Models of Computer Programming"

} ,

{

"title"    : "Parsers monadicos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/parsers-monadicos.html",
"date"     : "",
"content"  : "Este artculo est en construccin.Un uso muy simptico para el concepto de mnadas es la posibilidad de construir parsers a partir de ellas. Esto es posible en diferentes lenguajes, como Haskell y Scala. Este artculo intenta compendiar algo de informacin al respecto.Parsers Mondicos en ScalaAlgunos artculos interesantes:  Este es el ejemplo ms simple y consciso que encont: http://www.scala-lang.org/node/808  http://debasishg.blogspot.com/2008/04/external-dsls-made-easy-with-scala.html muestra cmo construir un dsl en scala, partiendo de algo de teora acerca de parser combinators."

} ,

{

"title"    : "Patrones de comunicacion entre componentes",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/patrones-de-comunicacion-entre-componentes.html",
"date"     : "",
"content"  : "AVISO @DeprecatedEste contenido est desactualizado, se reemplaza por el apunte que aparece en https://docs.google.com/document/d/1EVPwqFyq2TW5Z5_VUeWdh9yLesxPBbSBzke2jHNURuk/edit?usp=sharingMemoria compartida (shared memory)La memoria compartida es un espacio comn de datos en el que mltiples componentes (por ejemplo: procedimientos) pueden leer y escribir informacin. Implementaciones tpicas de memoria compartida son las variables globales o las bases de datos como herramienta de integracin entre componentes.EjemploA continuacin podemos ver un ejemplo de una pila programada en C utilizando esta forma de compartir informacin:#include&amp;lt;stdio.h&amp;gt;#defineSIZE50intcurrent,stack[SIZE];voidinit(){current=0;/*initializecurrent*/}voidpush(inti){current++;if(current==(SIZE)){printf(&quot;StackOverflow.&amp;#92;n&quot;);exit(1);}stack[current]=i;}intpop(void){if(current==0){printf(&quot;StackUnderflow.&amp;#92;n&quot;);exit(1);}current--;returnstack[current+1];}intmain(void){intvalue;init();push(1);push(2);printf(&quot;Firstvalueontopis%d&amp;#92;n&quot;,pop());printf(&quot;Secondvalueontopis%d&amp;#92;n&quot;,pop());printf(&quot;Thirdvalueontopis%d&amp;#92;n&quot;,pop());printf(&quot;end&amp;#92;n&quot;);return0;}ConsecuenciasAlgunas consecuencias de esta forma de compartir informacin son:  No hay un mecanismo sencillo para saber qu procedimientos incluyen referencias a las variables globales y  No es posible tener dos pilas simultneamente, en caso de intentarlo se mezclara la informacin de ambas.  La modificacin de cualquiera de las operaciones que acceden a la estructura de datos implica revisar su buen comportamiento en relacin con todas las dems (que, como se dijo antes, puede no ser posible saber exactamente cules son). Lo mismo ocurre si se desea modificar la estructura de los datos compartidos.En el caso general la memoria compartida representa un grado alto de acoplamiento ya que a priori no es posible saber qu componentes modifican o leen qu parte de los datos. En sistemas donde la informacin compartida est sostenida en un motor de bases de datos (por ejemplo RDBMS), estos pueden mitigar parcialmente este problema al implementar esquemas de seguridad que restrinjan en parte el acceso a los datos a slo la parte necesaria de cada componente.Por otro lado, existen tecnologas que permiten definir variables con alcance o scopes ms limitado que global, reduciendo de esta manera el acoplamiento nicamente a los componentes que tienen acceso al scope especfico. Un caso particular de scope son las variables de instancia de un objeto, como se muestra en el ejemplo siguiente.Ejemplo: JavapublicclassStack{publicstaticfinalSIZE=50;privateintcurrent;privateint[]stack=;publicStack(){current=0;stack=newint[50];}publicvoidpush(inti){current++;if(current==(SIZE)){System.out.println(&quot;StackOverflow.&amp;#92;n&quot;);System.exit(1);}stack[current]=i;}publicintpop(){if(current==0){System.out.println(&quot;StackUnderflow.&amp;#92;n&quot;);System.exit(1);}current--;returnstack[current+1];}publicstaticvoidmain(){Stacks=newStack();s.push(1);s.push(2);System.out.println(&quot;Firstvalueontopis%d&amp;#92;n&quot;,s.pop());System.out.println(&quot;Secondvalueontopis%d&amp;#92;n&quot;,s.pop());System.out.println(&quot;Thirdvalueontopis%d&amp;#92;n&quot;,s.pop());System.out.println(&quot;end&amp;#92;n&quot;);return0;}}Call &amp;amp; ReturnEn el mecanismo de call &amp;amp; return la comunicacin se da entre un componente invocante o llamador (caller) que invoca o referencia a otro componente invocado o llamado (callee). Si bien el flujo de informacin es bidireccional, es asimtrico:  El componente invocado puede recibir parmetros, que le permiten al invocante transferirle informacin mediante argumentos.  En el caso general el componente invocado puede producir un valor de retorno, mediante este mecanismo se logra la bidireccionalidad de la comunicacin. En algunas tecnologas pueden existir limitaciones que restringen el uso de valores de retorno, en ese caso la comunicacin ser unidireccional.Ejemplo puroEl ejemplo ms preciso de esta idea se encuentra en los lenguajes funcionales puros, es decir, sin la posibilidad de  efecto. La ausencia de efecto obliga a que toda la comunicacin sea por medio de los parmetros.typeStack=[Int]empty::Stackempty=[]push::Int-&amp;gt;Stack-&amp;gt;Stackpushis=i:spop::Stack-&amp;gt;(Int,Stack)pop[]=error&quot;StackUnderflow.&amp;#92;n&quot;pop(i:s)=(i,s)discard=snd.poppeek=fst.poptest1=peek$discard$push2$push1$emptyConsecuenciasSi bien la comunicacin puede ser bidireccional, el conocimiento (y por lo tanto el acoplamiento) es a priori unidireccional, es decir, el componente llamado no tiene ningn conocimiento de el origen del mensaje y an puede devolver informacin sin tener conocimiento del destino de la misma.La aclaracin a priori en el prrafo anterior se explica porque en lenguajes con efecto (es decir, la mayora de los lenguajes que usamos habitualmente en la industria) los parmetros podran ser modificados dentro del componente. Para estudiar el acoplamiento en estos contextos debemos determinar cunto debe saber el componente llamado acerca de sus parmetros, por ejemplo si puede o no modificarlos. Esto a su vez depende del tipo de pasaje de parmetros que utilicemos (por ejemplo, pasaje de parmetros por copia o pasaje de parmetros por referencia). En el caso de pasaje por parmetros por referencia, la modificacin del parmetro recibido puede ser un mecanismo adicional de comunicacin entre los componentes.TODO: Este ejemplo no inicializa correctamente la pila y tira error.Ejemplo con Call-By-Reference#include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt;#defineSIZE50typedefstructstack{intcurrent,stack[SIZE];}stack;stack*empty(){stack*s=(stack*)malloc(sizeof(stack));returns;}voidpush(stack*s,inti){s-&amp;gt;current++;if(s-&amp;gt;current==SIZE){printf(&quot;StackOverflow.&amp;#92;n&quot;);exit(1);}s-&amp;gt;stack[s-&amp;gt;current]=i;}intpop(stack*s){if(s-&amp;gt;current==0){printf(&quot;StackUnderflow.&amp;#92;n&quot;);exit(1);}returns-&amp;gt;stack[s-&amp;gt;current--];}intmain(void){stack*s=empty();push(s,1);push(s,2);printf(&quot;Firstvalueontopis%d&amp;#92;n&quot;,pop(s));printf(&quot;Secondvalueontopis%d&amp;#92;n&quot;,pop(s));printf(&quot;Thirdvalueontopis%d&amp;#92;n&quot;,pop(s));printf(&quot;end&amp;#92;n&quot;);return0;}ExcepcionesContinuationsclassMyCPSStack{defelements=[]staticempty(yield){yield(newMyCPSStack())}voidpush(element,yield){yield(newMyCPSStack(elements:[element]+elements))}voidpop(yield){if(elements.empty)thrownewException(&quot;StackUnderflow&quot;)yield([elements.head(),newMyCPSStack(elements:elements.tail())])}defdiscard(yield){pop({yield(it[1])})}//itsignifica&quot;el(nico)argumentoquerecibeestebloquedecdigo&quot;defpeek(yield){pop({yield(it[0])})}StringtoString(){returnelements.toString()}}MyCPSStack.empty({it.push(1,{it.push(2,{it.discard({it.peek({printit})})})})})http://en.wikipedia.org/wiki/Continuation-passing_style http://en.wikipedia.org/wiki/Callback_(computer_science)EventosMensajes asincrnicos"

} ,

{

"title"    : "Pattern matching  polimorfismo y diseno",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/pattern-matching--polimorfismo-y-diseno.html",
"date"     : "",
"content"  : "  Incorporar declaraciones de operaciones vs incorporar definiciones de operaciones  pattern matching no es tan solo un switch  jerarquias acotadas vs jerarquias abiertas  ejemplos en scala"

} ,

{

"title"    : "Pattern matching en haskell",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/pattern-matching-en-haskell.html",
"date"     : "",
"content"  : "Pattern Matching es el concepto asociado al chequeo estructural de un dato respecto de una estructura esperada. El uso de pattern matching tiene la ventaja de simplificar mucho la codificacin, ya que slo escribimos la forma de lo que esperamos y podemos desglosar los componentes de estructuras complejas.Una desventaja asociada a usar pattern matching en vez de funciones para acceder a los elementos de las tuplas es que nuestro cdigo se ver muy afectado ante un cambio en las estructuras manejadas. El simple hecho de agregar un elemento ms a la tupla que representa a nuestro elemento de dominio provocar un cambio en el tipo del mismo y el mismo se propagar en todos los lugares donde se haya utilizado esta estructura directamente.Ejemplos de matcheoCon nmeros y stringsSi queremos saber si el nombre de un da de la semana es fin de semana podemos hacer:esFinDeSemanadia=dia==&quot;Sbado&quot;||dia==&quot;Domingo&quot;Sin embargo esta otra definicin tambin es vlida:esFinDeSemana&#39;&quot;Sbado&quot;=TrueesFinDeSemana&#39;&quot;Domingo&quot;=TrueesFinDeSemana&#39;_=FalseLa ltima definicin es necesaria, ya que a diferencia del paradigma lgico, no contamos con el  principio de universo cerrado y si slo definimos esFinDeSemana para Sbado y Domingo y consultamos por otro da, Haskell nos mostrar un error porque el patrn no calza con ningn elemento del dominio esperado. Para que esta funcin funcione correctamente es importante que el encabezado con la  variable annima, que matchea con cualquier patrn, sea la ltima definicin de esFinDeSemana, de lo contrario no habr ningn elemento del dominio cuya imagen pueda ser True (por unicidad).Ac tenemos un ejemplito recursivo tpico para pattern matching con nmeros:factorial0=1factorialn=n*factorial(n-1)Para evitar loops infinitos, es importante poner el caso base primero para que matchee con el 0, ya que la variable n tambin matcheara con este valor.Con tuplasSi tengo los valoresv1=(2,5)v2=(3,5)v3=(8,5)El patrn (x,5) matchea con los tres valores.Tambin el patrn (x,y) matchea con los tres valores.Tambin el patrn (_,5) matchea con los tres valores.Tambin el patrn (_,_) matchea con los tres valores.Tambin el patrn unaTupla matchea con los tres valores.Con listasAhora, si tengo una listalista1=[(2,5),(5,3),(3,3)]lista2=[(2,5)]El patrn (x,5) no matchea con lista1 ni con lista2. Es una tupla, no una lista! Antes de tratar de matchear, Haskell nos va a tirar un error de tipos.El patrn (x:xs) matchea con lista1, siendo x = (2,5) y xs = [(5,3),(3,3)] y matchea con lista2, siendo x = (2,5) y xs = []El patrn [x] no matchea con lista1 porque tiene ms de un elemento, pero s matchea con lista2, siendo x = (2,5)El patrn (x:_) matchea con lista1, siendo x = (2,5) y matchea con lista2, siendo x = (2,5)El patrn (x:y:_) matchea con lista1, siendo x = (2,5) e y = (5,3), y no matchea con lista2 porque slo tiene un elementoEl patrn unaTupla matchea con lista1 siendo unaTupla = [(2,5),(5,3),(3,3)] y matchea con lista2 siendo unaTupla = [(2,5)]. Es slo un nombre de variable, con lo cual no restringe realmente el tipo del valor para que sea una tupla.Con data(En algunos cursos no se da data, para ms informacin ver ac: Data: Definiendo nuestros tipos en Haskell) Suponiendo que tensdataCoordenada=CoordIntInt(el tipo es Coordenada y el constructor es Coord)Donde se puede aplicar la misma idealista1=[Coord25,Coord53,Coord33]lista2=[Coord25]El patrn (Coord x 5) no matchea con lista1 ni con lista2. Es una Coordenada, no una lista! Antes de tratar de matchear, Haskell nos va a tirar un error de tipo.El patrn (Coord x y:restoCoords) matchea con lista1, siendo x = 2, y = 5 y restoCoords = [Coord 5 3,Coord 3 3] y matchea con lista2, siendo x = 2, y = 5 y restoCoords = []El patrn [x] no matchea con lista1 pero si matchea con lista2, siendo x = Coord 2 5El patrn (x:_) matchea con lista1 y matchea con lista2 siendo x = Coord 2 5El patrn (x:y:_) matchea con lista1 siendo x = Coord 2 5 y y = Coord 5 3 pero no matchea con lista2El patrn unaTupla matchea con lista1 y matchea con lista2 porque no es ms que una variable sin ninguna restriccin despus de todoPatrones con sinnimos (at Pattern)Usamos este patrn para definir un sinnimo, o sea necesito por un lado el patrn para tomar algunos de sus componentes y por otro todo junto para la hacer otra cosa, pongamos un par de ejemplos:ordenada[_]=Trueordenada(x1:x2:xs)=x1&amp;gt;x2&amp;amp;&amp;amp;ordenadax2:xsPuede mejorarse sutilmente con un sinnimo.ordenada[_]=Trueordenada(x1:xs@(x2:_))=x1&amp;gt;x2&amp;amp;&amp;amp;ordenadaxsOtro ejemplo, entre dos complejos representados con tuplas, obtener el que tiene mayor parte real:mayorParteReal(a@(a1,_))(b@(b1,_)) |a1&amp;gt;b1=a`|otherwise=bY otro con listas por comprensin:promedioDeAprobadosalumnos=promedio[promedionotas|alumno@(_,notas)&amp;lt;-alumnos,aproboalumno]Sobre la Variable AnnimaLa variable annima _ (guin bajo) funciona, en trminos de matcheo, como una variable comn:esCero0=TrueesCerox=FalseEs lo mismo que decir:esCero0=TrueesCero_=FalseDe hecho, esta ltima opcin es mejor, porque ayuda a la expresividad: si la variable no se usa en la devolucin (a la derecha del igual,  a la derecha de la guarda) entonces mejor ni ponerle nombre. Por ejemplo:anioActual=2014edad(nombre,anioNac,cantPerros)=anioActual-anioNacEn ese caso la funcin edad recibe una tupla pero a la derecha, en la definicin de la funcin, no hace faltan el nombre y el cantPerros. Entonces, usamos variables annimas:edad(_,anioNac,_)=anioActual-anioNacError comn con Variables AnnimasMuchas veces pensamos que no necesitamos una variable, cuando en realidad s la usamos a la derecha del igual. Por ejemplo, si queremos tomar esa definicin de persona como una tupla de tres, y agregarle perros a la persona, debemos devolver a una persona, pero cambiando slo la cantidad de perros.Esto es errneo:agregarPerroscant(_,_,cantPerros)=(_,_,cantPerros+cant)Son variables annimas! Si quiero usarlas a la derecha del igual ( sea, si quiero que sean parte de lo que devuelvo) entonces tengo que usar variables comunes.Esto est bien:agregarPerroscant(nombre,anioNac,cantPerros)=(nombre,anioNac,cantPerros+1)"

} ,

{

"title"    : "Pepita",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/pepita.html",
"date"     : "",
"content"  : "PepitaEn muchos ejemplos en esta Wiki surge la figura de Pepita, la golondrina. Pero quin es Pepita, de dnde viene y para qu est ac?Caractersticas BsicasPepita es una golondrina, que tiene un cierto nivel (medido en Joules) variable de energa, y sabe hacer al menos dos cosas: volar y comer, aunque a veces y segn el ejercicio se le agregan comportamientos extra: volar hacia ciertos lugares, llevar paquetes, etc.VolarCuando vuela, consume una cierta cantidad arbitraria de energa. En ocasiones este mensaje est parametrizado segn la cantidad de kilmetros que vuela; en ese caso la prdida de energia es una funcin lineal de esta distancia. Por ejemplo: pepita consume un joule para cada kilmetro que vuela, ms 10 joules de costo fijo en cada vueloComerPepita come alpiste, y cuando lo hace, su energa se incrementa linealmente en funcin de la cantidad de gramos de alpiste consumidos. Por ejemplo: cuando come, adquiere 4 joules por cada gramo que comeHistoriaPepita fue creada por Carlos Lombardi hacia 2004, y termin de cobrar forma con los aportes de Germn Leiva y Nico Passerini.Links Externos  Ms ejercicios: https://docs.google.com/document/d/1DQNuJwO3m6o_0-31tld94eJKJSQQ2TsjqBBY_rOVho4/edit  Si aprendiste objetos con Pepita: https://www.facebook.com/pepitaesunaformadevida?fref=ts"

} ,

{

"title"    : "Pharo para programadores ozonosos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/pharo-para-programadores-ozonosos.html",
"date"     : "",
"content"  : "La migracin desde trabajar con Ozono a pasar a la versin full de Pharo puede ser complicado en ciertos sentidos pero ms o menos es lo mismo pero tenemos que tener en cuenta las diferencias.Clases vs. ObjetosLa primer diferencia que tenemos en este nuevo ambiente es que Pharo esta centrado en las clases y no en los objetos.Como ya vimos en las clases tericas, los objetos ya no los vamos a crear uno por uno sino que vamos a crear los objetos a partir de clases.Por lo tanto, la forma que tiene Pharo (y muchos otros lenguajes orientados a objetos) es organizarse alrededor clases.System Browser, el centro de nuestro desarrolloPara comenzar vamos a necesitar una imagen de Pharo, cualquier imagen nos va a servir; pueden seguir usando la que tiene instalada Ozono :D.Nuestro principal amigo en el desarrollo con Pharo va a ser el System Browser. Este lo encontramos dentro del men principal de Pharo.Esto nos va a abrir la siguiente ventana (es bastante compleja para decirle ventanita).Secciones del System BrowserEsta ventana se divide en distintas secciones, esta ventana es central, presenta mucha mucha mucha informacin por eso vamos a analizarla por secciones.Estas Secciones son:  Categorias de clases: en esta seccin aparece una forma de categorizar las clases. Las categoras de las clases en Pharose llaman Packages, estos paquetes de clases pueden contener una o ms subcategoras dentro.  Clases: una vez que selecciono un paquete se me van a mostrar las clases que estn definidas en ese paquete. Porque algunasaparecen con signo de admiracin (!), porque no tienen escrita la documentacin que explica que hace la clase.  Categoras de Mtodos: cuando selecciono una clase se me van a mostrar los mtodos que tiene definida esa clase. Estosmtodos pueden estar clasificados en distintas categoras, esto es muy til como forma de documentacin y suma mucho valor cuando comienza a crecer mi programa.  Metodos: al ir navegando las categoras de los mtodos van a ir mostrndome la lista de mtodos de esa clase en la categoraseleccionada.  rea de Edicin de Cdigo: En esta rea de la ventana es donde se realiza la edicin del cdigo. Si elegimos un mtodo vamos aver el cdigo de ese mtodo, pero si elegimos una clase nos muestra un cdigo raro. No entremos en pnico, ese cdigo es la definicin de la clase, ya vamos a entrar en el detalle de como hacerlo.Por ahora debemos entender las distintas secciones del System Browser pronto vamos a ver para que se usa cada cosa con un ejemplo.WorkspacesBueno, bueno, todo muy bonito pero a mi me gustaba enviar mensajes a mis objetos. Esto lo perdimos, esto es una mierda. No, no perdimos nada!!!La forma de enviar mensajes y probar nuestro programa van a ser nuestros bonitos workspace (despus vamos a hablar de tests, pero eso es otra versin mucho ms cheta aunque menos interactiva).Para crear un workspace lo hacemos desde el men principal de Pharo, es el mismo que usamos inicialmente.Adems podemos tener muchos workspace abiertos.Los workspace de Pharo se usan de la misma manera que los de Ozono que ya usamos previamente. Pero con una variacin interesante, podemos definir variables dentro del workspace. Estas variables son locales al workspace. Para definirlas debemos usarlas directamente, asignandole un valor. Cuando evaluemos esa lnea va a crearse la variable.Atencin, los workspace no se van a guardar solitos como en Ozono, tenemos que guardarlos a mano. Normalmmente no nos vamos a preocupar por esto ya que el cdigo que pongamos en el workspace es para pruebas rpidas. Si queremos guardar algo que vamos a probar varias veces nos sirve la idea de Tests, ya la vamos a ver; pero por ahora con el workspace nos sirve.Los workspace se guardan como archivos de texto con extensin .ws, para poder guardar y cargar estos archivos tenemos que usar la flechita que esta a la derecha y arriba del workspace.Un ejemplo Paso a PasoPara poder mostrar como se usa Pharo, vamos a implementar el siguiente ejemplo.Vamos a tener que construir un sistema para administrar camiones en una empresa de logstica. De cada camin vamos a saber su capacidad en kilos y su carga actual, y adems podemos saber si el camin esta lleno o no.Al analizar y plantear una solucin al problema, identificamos que todos los objetos camiones tienen el mismo comportamiento; por lo que extrajimos la siguiente clase:Tenemos que recordar que la solucin se da con los objetos que representan los camiones, las clases sirven para crear muchos camiones iguales, o sea se comportan todos juntos.Recordemos un poquito la forma de comunicacin con los diagramas de clase. Este rectngulo que representa la clase tiene 3 secciones. En la superior va el nombre de la clase. En la del medio los distintos atributos que tienen los objetos creados con esta clase. Y en la inferior los mensajes que entienden los objetos creados con la clase.Perfecto ya sabemos que es lo que tenemos que hacer, ahora vamos a implementarlo en Pharo!Creacin de PaquetesPara comenzar tenemos que crear un paquete nuevo dentro de Pharo. Todas las clases de Pharo estan definidas dentro de un paquete, es muy recomendable que creemos un paquete para cada uno de los ejercicios o problemas o sistemas que creemos.Para crear un paquete tenemos que hacer click derecho sobre el sector de paquetes del System Browser y elegir la opcin Add Package. Esta opcin nos va a preguntar el nombre del nuevo Paquete.Podemos ponerle el nombre que queramos, pero existe una convencin que se usa en todos lados y que Pharo va a usar para presentarnos la informacin. Esta convencin es separar las palabras con guin del medio.En este caso vamos a crear el paquete Logistica.Una aclaracin importante, es que aunque es probable que Pharo se banque nombres con acentos o  o cualquier caracter UTF-8, a los programadores nos gusta obviar los acentos y las ; porque siempre siempre siempre van a traer problemas.Cuando creamos el paquete nos debera quedar algo as:Creacin de ClasesYa tenemos nuestro paquete creado, por ahora esta vaci y triste y solo; por lo que vamos a comenzar creando la clase Camin.Para crear una clase tenemos que hacer las siguientes operaciones:  Hacer click sobre el paquete donde va a vivir nuestra nueva clase.  Ingresar la definicin de la clase en el rea de Edicin de Cdigo, ahora vamos a hablar de que hay que escribir ah.  Aceptar la definicin, ya sea haciendo Ctrl+S o haciendo botn derecho y darle la opcin Accept.Definicin de una ClaseLas clases en cualquier ambiente de Smalltalk se definen a partir de un envi de mensaje. Nadie en la vida se acuerda este mensaje que hay que mandar a la clase Object, pero al hacer click sobre un paquete la herramienta ya nos propone un template:Objectsubclass:#NameOfSubclassinstanceVariableNames:&#39;&#39;classVariableNames:&#39;&#39;category:&#39;Logistica&#39;La definicin de nuestra clase Camion es la siguiente:Objectsubclass:#LgCamioninstanceVariableNames:&#39;capacidadcarga&#39;classVariableNames:&#39;&#39;category:&#39;Logistica&#39;Si se fijan no es tan tan loca.Las cosas que voy a modificar son:  El nombre de la clase, es eso que esta despus del numeral  Las variables de instancia, ac agrego dentro del string cada uno de los nombres de las variables de instancia separados por un espacio.En este caso tengo dos variables de instancia, capacidad y carga.  Nombre de la categora donde esta clase, ac ya me pone la que corresponde al paquete donde estoy parado, pero siempre lo puedo cambiar.Un minuto cerebrito, ac dijimos que ibamos a crear la clase Camion y vos le pusiste LgCamion; me estas cargando o todas las clases comienzan con Lg???Ninguna de las dos cosas, es un prefijo que identifica a nuestro paquete; como cree un paquete llamado Logistica defin que el prefijo que identifique a las clases dentro de este con el prefijo Lg.Esto lo tenemos que hacer porque Pharo no tiene espacios de nombres independientes, o sea no puedo tener dos clases con el mismo nombre, si quisiera crear una clase con el mismo nombre de otra que existe, voy a pisar la original. Por eso vamos a generar nombres nicos teniendo un prefijo para el paquete y el nombre de la clase.Si estamos muy muy muy seguros que no existe otra clase que se llame Camion, podra ponerle ese nombre. Pero yo debo contarle el estandard.Despus de crear la clase nos debera quedar algo as:Atencin, no nos preocupemos por ese signo de admiracin rojo. Ya lo dijimos, pero lo recuerdo, es un indicativo que la clase no esta documentada. Nada importante, por ahora, es algo que nos debera importar.Definicin de MtodosYa definimos nuestra clase ahora debemos agregarle mtodos.Para poder agregar un mtodo a una clase, tenemos que tener seleccionada la clase donde lo vamos a definir y hacer click sobre la categora del mtodo que vamos a generar; si no tenemos la categora, la podemos crear o hacer click en no messages que es la que tengo cuando esta vaca o en  all  si ya tiene alguna.Cuando hacemos esto la seccin de edicin de cdigo nos va a ofrecer el template, esto no es solo necesario para que nos muestre el template, sino que lo tengo que hacer para que Pharo sepa donde voy a meter el mtodo.Entonces vamos a escribir el cdigo de nuestro primer mtodo, lo que vamos a hacer es un mensaje para que el camin nos devuelva su capacidad:capacidad^capacidadPara guardar el mtodo creado, tenemos que hacer CTRL+s o botn derecho y elegir la opcin Accept.Cuando hacemos esto, nos queda el siguiente resultado.Probando nuestros ObjetosYa tenemos creada nuestra clase, ahora probemos los objetos que creamos. Para poder crear objetos y mandarles mensajes necesitamos usar un workspace.En un nuevo workspace vamos a escribir el siguiente cdigo.unCamion:=LgCamionnew.unCamioncapacidad.Podemos ir ejecutando lnea a lnea. La primera nos conviene ejecutarla con un Do-It (o haciendo Ctrl+d), ya que es una lnea que tiene efecto de lado. Esta lnea crea un nuevo objeto a partir de la clase LgCamion y lo asigna a la variable local unCamion.La 2da lnea la vamos a ejecutar con un Print-It (o haciendo Ctrl+p), ya que es una expresin que va a devolver la capacidad del camin.Dando como resultado lo siguiente:Pero porque cuando evaluamos la 2da expresin nos devuelve nil? Bueno, porque todas los atributos de un objeto arrancan en nil.Por eso debemos agregarle el mtodo para poder establecer los valores de los objetos. Vamos a agregar los siguientes mtodos a la clase LgCamion:capacidad:unValor.capacidad:=unValor.carga^carga.carga:unValorcarga:=unValor.Adems vamos a definir el mtodo para responder al mensaje estasLleno.estasLleno.^capacidad=carga.Entonces una vez que tenemos este mensaje podemos hacer una prueba ms interesante con el siguiente workspace.unCamion:=LgCamionnew.unCamioncapacidad:1000.unCamioncarga:1000.unCamionestasLleno.Este workspace ya nos permite probar una variante, que podemos ir modificando para probar nuestros objetos. Una alternativa interesante para esto, es poder crear tests unitarios.Como guardar mis programasEn Pharo, los programas se guardan dentro de la imagen, o sea tengo que ir guardando la imagen con el cdigo y los objetos de mis programas.Exportar a un .stAdems puedo exportar los paquetes como un archivo .st. Para realizar esto podemos hacerlo desde el System Browser y con el botn derecho sobre un paquete y eligen la opcin File Out.Al hacer esto se genera un archivo con el nombre del paquete y la extensin .st que incluye todo el cdigo fuente de las clases del paquete.Importar un .stPara poder importar un archivo .st lo ms fcil es arrastrar el archivo sobre una imagen de Pharo que se encuentre corriendo y al soltarlo elegir la opcin FileIn Entire File y listo ya lo va a cargar en la imagen."

} ,

{

"title"    : "Script mapeo manual Objetos / Relacional",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/phm-script-mapeo-manual-or.html",
"date"     : "",
"content"  : "  Presentacin del ejercicio de los partidos de ftbol          modelo de objetos      traslacin al modelo relacional        Creamos las tablas (DDL: Data Definition Language)  Insertamos valores desde el modelo relacional (mediante scripts de manipulacin de datos o DML)          O -&amp;gt; R o R -&amp;gt; O?      Crear Juego de datos en alguna de las dos tecnologas        Intro a JDBC. Driver o controlador como el componente que permite a nuestra aplicacin (en este caso JDK) interactuar con un motor de base de datos.          Conexin                  Externalizacin a un archivo / Encriptacin          Pool de conexiones                    Statement                  Statement de consulta que devuelve Resultsets          Statement de insercin, eliminacin o actualizacin que slo implica ejecucin                    Prepared Statement        Mapeo manual          Disear objetos que modelen slo la estructura (ej: EJB 2.x) vs. usar los objetos de dominio                  No hay razn para mantener una doble jerarqua de objetos sin comportamiento                    Hidratacin del grafo de objetos, se segmenta por caso de uso                  cuando quiero saber quin gan, no necesito saber los que jugaron, slo el resultado          cuando quiero saber si un jugador estuvo en un partido, tengo que bajar el grafo de objetos de Equipo, Resultado, Formacin hasta los jugadores relacionados con la formacin                    Ventajas                  mayor control sobre el algoritmo          podemos armar queries especficos (manipular SQL puro)                    Contras                  hay que encargarse de todo: es tedioso y repetitivo          dificulta la reutilizacin de ideas                    Tests unitarios                  el juego de datos se instancia por afuera                          esto implica una dependencia que sale del ambiente de objetos              si alguien se olvida de correr el script en la base de datos, no funcionan los tests              si alguien cambia el juego de datos, no funcionan los tests              mientras nadie modifique la base, los tests funcionan              claro, no hay efecto colateral: los tests slo son de lectura.                                Ms adelante veremos tcnicas para que los tests puedan seguir manteniendo unitariedad (e - independencia entre s).                      Resumen"

} ,

{

"title"    : "Script temario MongoDB",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/phm-script-mongodb.html",
"date"     : "",
"content"  : "Tutorial  Tutorial de TutorialspointConceptos a aprenderSin duda la documentacin oficial de MongoDB es el mejor sitio para aprender  Modelado de datos: un documento          Constraints: cmo validar      Caractersticas del diseo de datos de un documento      Ejemplo de One-To-Many con documentos embebidos      Ejemplo de One-To-Many normalizando los documentos        Operaciones bsicas sobre un documento  Queries de seleccin de datos          Optimizacin de Queries      Queries en ambientes distribuidos      Definicin de ndices      Text search        Aggregation  Queries de actualizacin de datos          Actualizacin en ambientes distribuidos      Performance en los queries de actualizacin        Tcnica de MapReduce"

} ,

{

"title"    : "Programacion con herramientas modernas",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/phm-temario.html",
"date"     : "",
"content"  : "Software  Entorno Xtend (en Eclipse)  JDK vs. JRE  Maven  Cmo trabajar con TravisPginas  Script Mapeo manual Objetos / Relacional  Script MongoDBLinks  Sitio oficial de la materia"

} ,

{

"title"    : "Polimorfismo en el paradigma de objetos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/polimorfismo-en-el-paradigma-de-objetos.html",
"date"     : "",
"content"  : "El polimorfismo en el paradigma de objetos se define como la capacidad que tiene un objeto de poder tratar indistintamente a otros que sean potencialmente distintos. Cuando hablamos de que un objeto trate a otros, estamos hablando de que interacten a travs de mensajes.Lo que nos va a interesar al programar es ver a un objeto desde un punto de vista externo (cuando mandamos mensajes) y desde un punto de vista interno (cuando implementamos el comportamiento que queremos). Al punto de vista externo, que slo incluye el comportamiento que exhibe (los mensajes que entiende) le vamos a decir interfaz.Y Como puede un objeto tratar indistintamente (o a partir de ahora, polimorficamente) a otros?Mandandole los mismos mensajes!Entonces, podemos decir que un objeto trata polimrficamente a otros cuando les enva a ambos exactamente los mismos mensajes, sin importarle cual es cual y ellos pueden responder ya que tienen una interfaz comn.Cuntos objetos son necesarios como mnimo para que exista el polimorfismo?Tres: El objeto que usa y los (como mnimo) 2 que son usados.Cules son las condicines necesarias para que dos objetos sean polimrficos? - que un tercero quiera usarlos indistintamente - que entiendan los mensajes que ese tercero quiere enviarlesCabe resaltar que para que dos objetos sean polimrficos en un contexto determinado (es decir, ante el tercero, en un momento particular), es condicin necesaria que entiendan los mismos mensajes. Sin embargo, para que puedan ser usados indistintamente, adems de ello, deben comportarse ante tal envo de mensaje, de una forma similar desde el punto de vista del dominio, produciendo efectos similares, devolviendo objetos tambin polimrficos entre s, etc."

} ,

{

"title"    : "Polimorfismo en el paradigma logico",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/polimorfismo-en-el-paradigma-logico.html",
"date"     : "",
"content"  : "El polimorfismo permite obtener soluciones ms genricas, que sean vlidas para diferentes tipos de datos contemplando las particularidades de cada uno de ellos. En general podemos decir que dos cosas son polimrficas cuando desde algn punto de vista comparten un tipo, o sea que pueden ser tratados indistintamente por quienes no les interesen los detalles en los cuales difieren.Si bien todos los predicados pueden recibir cualquier tipo de argumento, muchas veces el uso que se hace de ellos en el interior de las clusulas que lo definen, delimita un rango de tipos de valores que tiene sentido recibir. En lgico no sucede un error si se recibe un dato de tipo diferente a los esperados, sino que directamente la consulta falla por no poder unificar el valor recibido con lo esperado, descartndolo como posible respuesta a la misma.Ejemplo de Polimorfismo usando functoresSi tenemos el siguiente requerimiento: se tiene 3 tipos de vehiculos autos, camiones y bicicletas. Un auto es viejo si su patente es menor a F, un camion es viejo si tiene ms de 60000km o ms de 10 aos, una bicicleta es vieja si la fecha de fabricacion es de ao anterior al 2006Supongamos que nuestra base de conocimiento tiene los siguientes hechos:hoy(fecha(22,12,2008)).vehiculo(auto(&quot;A2000&quot;)).vehiculo(auto(&quot;H2342&quot;)).vehiculo(camion(12000,2005)).vehiculo(camion(70000,2003)).vehiculo(camion(30000,1997)).vehiculo(bici(fecha(30,10,2005))).vehiculo(bici(fecha(20,12,2008))).Si quiero hacer una consulta que me diga si todos los vehculos de la base de conocimientos son viejos, cmo hago para manejar el tema de que los datos tienen formas distintas y la lgica asociada a las distintas formas vara?La alternativa infeliz no polimrfica sera hacer algo as:autoViejo(Patente):-Patente&amp;gt;&quot;F&quot;.camionViejo(Kilometraje,_):-Kilometraje&amp;gt;60000.camionViejo(_,Anio):-hoy(fecha(_,_,AnioActual)),                     AnioActual-Anio&amp;gt;10.biciVieja(fecha(_,_,Anio)):-Anio&amp;lt;2006.?-forall(vehiculo(auto(Patente)),autoViejo(Patente)),forall(vehiculo(camion(Kms,Anio)),camionViejo(Kms,Anio)),forall(vehiculo(bici(Fecha)),biciVieja(Fecha)).Para que esto se cumpla todos los vehculos deben cumplir la correspondiente validacin del forall con lo cual estara funcionando como necesitamos, pero la solucin elegida es bastante molesta y repetitiva. Sin contar que si queremos incorporar las motos a nuestra base de conocimientos, la consulta sera an ms larga.La idea del polimorfismo nos viene brbaro en este caso, y lo nico que necesitamos es que exista un predicado esViejo/1 ande con autos, camiones y bicicletas y por ende pueda ser usado de forma genrica por otro predicado o consulta sin tener que pensar en el tipo de vehculo.Ahora, para resolver el requerimiento de forma polimrfica tenemos que hacer el predicado esViejo/1 que se verifique si se cumplen las condiciones explicadas anteriormente. Para ello usaremos varias clusulas que, por medio de pattern matching, se apliquen a cada tipo de vehculo particular.esViejo(auto(Patente)):-Patente&amp;gt;&quot;F&quot;.esViejo(camion(Kilometraje,_)):-Kilometraje&amp;gt;60000.esViejo(camion(_,Anio)):-hoy(fecha(_,_,AnioActual)),                         AnioActual-Anio&amp;gt;10.esViejo(bici(fecha(_,_,Anio))):-Anio&amp;lt;2006.Con esto podemos realizar la consulta que queramos de esta forma:?-forall(vehiculo(Vehiculo),esViejo(Vehiculo)).Podemos decir entonces que el predicado polimrfico es esViejo/1, porque funciona con distintos tipos de vehiculos, y quien lo aprovecha es la consulta del forall que no necesita hacer distinciones sobre los tipos de vehculos, unificando toda la estructura con la variable Vehiculo.Es importante notar que modelar los vehculos con functores nos permite tener individuos ms complejos a que si tuviramos directamente los datos en el predicado:vehiculo(auto,&quot;A2000&quot;).Y adems nos permite usar el mismo predicado (vehiculo/1 en este caso) para todos los tipos de vehculos, lo cual se aprovecha principalmente con el camin que tiene ao y kilometraje:vehiculo(auto,&quot;A2000&quot;).            % vehiculo/2vehiculo(camion, 12000, 2005).     % vehiculo/3Al tener distinta cantidad de valores afecta directamente a la aridad. Eso nos llevara a trabajar con ms de un predicado para la misma relacin, que era el problema original. (Por ms que se llamen igual, si la cantidad de parmetros es distinta, es otro predicado, ya que no hay forma de consultarlos a la vez).Errores comunesRepito lgica por hacer mal uso de polimorfismoSupongamos que tenemos la siguiente base de conocimiento:juguete(ingenio(cuboRubik,10)).juguete(ingenio(encajar,2)).juguete(munieco(50)).juguete(peluche(300)).juguete(peluche(150)).Suponiendo que quiero saber si un juguete es caro, lo que sucede cuando su precio supera los 100 pesos.Se sabe que el precio de los juguetes de ingenio es de $20 por cada punto de dificultad, el precio del mueco es el indicado, y el precio de los peluches es la mitad de su tamao en mm.Una forma de resolverlo sera:esCaro(ingenio(_,Dificultad)):-     100 &amp;lt; Dificultad * 20.esCaro(munieco(Precio)):-      Precio &amp;gt; 100.esCaro(peluche(Tamanio)):-     Tamanio / 2 &amp;gt; 100.El problema es que repito la lgica de cundo un juguete es caro en las tres clusulas, porque me falta abstraer la lgica del precio.Si tengo la lgica del precio delegada en otro predicado, luego no necesito repetir la lgica de esCaro en cada clusula:esCaro(Juguete):-     precio(Juguete,Precio),     Precio &amp;gt; 100.     precio(ingenio(_,Dificultad), Precio):-     Precio is Dificultad * 20.precio(munieco(Precio),Precio).precio(peluche(Tamanio),Precio):-     Precio is Tamanio / 2.Intento poner una variable en el nombre del functorSupongamos que tenemos un predicado que relaciona una patente con un vehculo, como la siguiente base de conocimiento:vehiculo(opp564, camion(mercedes,2014)).vehiculo(agt445, auto(504,1995)).vehiculo(mmr444, camion(scania,2010)).Y quisiramos saber las patentes de los autos anteriores al 2000. Lo siguiente es incorrecto:patenteDeAutoInteresante(Patente):-   vehiculo(Patente, Tipo(_,Anio)),   Anio &amp;lt; 2000.Por qu es incorrecto? Primero, Prolog no me deja usar el nombre del functor como un dato, que yo pueda poner en una variable  operar. Adems, lo siguiente no sera posible:vehiculo(ppt666, moto(2010)). % No respeta la aridadvehiculo(ert434, lancha(2017,yamaha)). % El orden es otrovehiculo(dfg345, karting(rojo)). % Y puede ser que no incluya la informacin del ao y haya que hacer otra cosa!Por lo tanto, lo que deberamos hacer es obtener el dato de ao de alguna otra maneraRelaciones que repiten lgica una forma podra ser relacionando el ao con la patente:patenteDeAutoInteresante(Patente):-   anioPatente(Patente, Anio),   Anio &amp;lt; 2000.El problema est en que estamos obligados a relacionar la patente con el vehculo para saber el ao, repetida en cada clusula de anioPatente/2:anioPatente(Patente, Anio):-   vehiculo(Patente, moto(Anio)).anioPatente(Patente, Anio):-   vehiculo(Patente, camion(_, Anio)).   anioPatente(Patente, Anio):-   vehiculo(Patente, lancha(Anio, _)).El problema est en que estamos relacionando la patente con un ao, cuando eso depende del vehculo.Una posible solucinLa siguiente solucin arregla todos los problemas mencionados arriba:patenteDeAutoInteresante(Patente):-   vehiculo(Patente,Vehiculo),   anioVehiculo(Vehiculo,Anio),   Anio &amp;lt; 2000.   anioVehiculo(camion(_,Anio),Anio).anioVehiculo(auto(_,Anio),Anio).anioVehiculo(moto(Anio),Anio).anioVehiculo(lancha(Anio,_),Anio).anioVehiculo(karting(Color),Anio):- colorDelAnio(Color,Anio).colorDelAnio(rojo,2010).colorDelAnio(verde,1990).colorDelAnio(azul,2015).De esta forma se evita repetir lgica creando relaciones acordes a los datos de los individuos, aprovechando el polimorfismo en patenteDeAutoInteresante/1 al unificar toda la estructura con Vehiculo (sin iportar su forma) y recin haciendo pattern matching cuando es necesario, en anioVehiculo/2.As puedo meter los functores con la forma que yo quiera , y an as mi predicado patenteDeAutoInteresante/1 no cambia. Esa es la gran ventaja del polimorfismo. Lo nico que tengo que hacer es definir el predicado anioVehiculo/2 para ese nuevo tipo de functor, y ya todo anda ;)"

} ,

{

"title"    : "Polimorfismo parametrico y ad hoc",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/polimorfismo-parametrico-y-ad-hoc.html",
"date"     : "",
"content"  : "Primero que nada, cuando hablamos de polimorfismo nos referimos a la capacidad de una funcin de recibir por parmetro valores de distinto tipo. No es taaan importante esta clasificacin en s, pero lo explicamos para despejar dudas.Cuando hablamos de polimorfismo paramtrico tenemos una sola definicin de la funcin, en cambio cuando tenemos polimorfismo ad-hoc tenemos muchas definiciones para la misma funcin de modo que se puedan soportar distintos tipos. Lo que normalmente hacemos (al menos en paradigmas) es definir funciones que son polimrficas paramtricamente, sin embargo s usamos mucho funciones con polimorfismo ad-hoc.Tpicas funciones con polimorfismo paramtrico son las que operan sobre listas: filter, map, all, any, length, foldl, etc. No necesariamente pueden recibir cualquier valor, depende de lo que hagas. Por ejemplo el tipo de length es[a]-&amp;gt;Int,con lo cual puede recibir una lista de cualquier cosa, pero el de sum esNuma=&amp;gt;[a]-&amp;gt;aentonces slo puede recibir una lista numrica (igual es polimrfica, porque hay muchos tipos de nmeros, ver  Typeclass Num).La suma tambin es una operacin polimrfica y su tipo es:Numa=&amp;gt;a-&amp;gt;a-&amp;gt;aSi te fijas bien no hay forma de diferenciarlos por el tipo, lo que cambia es que la suma est definida de forma diferente para cada tipo numrico (si se animan pueden buscarlo en el Prelude de Haskell), mientras que el sum tiene una nica definicin.Se puede ver que en ambos ejemplos de polimorfismo paramtrico una sola definicin de la funcin sirve para todos los casos polimrficos, eso se da porque: - En el caso de length porque no hace nada especfico con los elementos de la lista, entonces pueden ser cualquier cosa. - En el caso de sum porque se basa en la suma (+) que a su vez es una operacin polimrfica.Y esto ltimo tambin me parece interesante, una funcin paramtricamente polimrfica muchas veces se basa en otra que usa polimorfismo ad-hoc (no es la nica forma pero es algo frecuente). por qu es interesante esto?Bueno primero hay que ver, quin saca ventaja del polimorfismo? Y si lo penss, las funciones que usan polimorfismo ad-hoc no sacan gran ventaja del polimorfismo, si yo tengo que definir la suma para cada tipo numrico es lo mismo que hubiera hecho sin polimorfismo.El chiste es justamente que luego alguien basndose en eso puede hacer funciones que sirvan para todos los nmeros, porque la suma sirve para todos los nmeros. La suma (+) labura para el sum.Eso es equivalente a lo que pasa en objetos cuando decimos que dos objetos son polimrficos para un tercero, quin saca ventaja? El tercero! - Que las golondrinas y los picaflores sean polimrficos a la hora de volar o comer no les da ventajas a las aves (ni a volar o comer), si no a los terceros que pueden hacerlos volar y comer indistintamente. - Que la suma funcione polimrficamente para reales y enteros no beneficia a la suma, sino a otras funciones que pueden sumarlos indistintamente.En fin volviendo a lo que deca al principio, insisto en que lo importante no es qu tipo de polimorfismo usa una funcin o cul es la definicin de polimorfismo ad-hoc sino, para qu sirve, qu ventajas le da a mi programa, cmo se puede aprovechar el potencial del polimorfismo para hacer cdigo ms claro/extensible/robusto/ponga aqu su cualidad preferida."

} ,

{

"title"    : "Polimorfismo",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/polimorfismo.html",
"date"     : "",
"content"  : "  Polimorfismo paramtrico y ad-hoc  Polimorfismo en el Paradigma Lgico  Polimorfismo en el Paradigma de Objetos"

} ,

{

"title"    : "Portal del investigador",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/portal-del-investigador.html",
"date"     : "",
"content"  : "  Escribiendo un paper  Lectura de un paper  Academic Phrase Bank Website compendio de frases comunes para escritura de ndole acadmica."

} ,

{

"title"    : "Possibly incorrect indentation or mismatched brackets",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/possibly-incorrect-indentation-or-mismatched-brackets.html",
"date"     : "",
"content"  : "El problemaUn error muy comn en Haskell, tanto para los que recin arrancan como para los ms experimentados, es pifiarla con los enters, espacios o tabs. Por qu? Haskell no usa llaves {} ni bloques do-end para delimitar secciones del cdigo, sino que se basa en el uso de caracteres blancos (withespaces) para darse cuenta, por ejemplo, cuando termina una ecuacin de una funcin.Entonces, si ponemos tabs, espacios, enters de menos o de ms, obtendremos un slo error:parseerror:possiblyincorrectindentationormismatchedbracketsLo que significa: che, revis tus withespaces; mientras tanto no voy a intentar interpretar a tu cdigoLa solucinLa solucin al problema depende de dnde hayas pifiado. Veamos algunos casos comunes:Dejar espacios o tabs antes de la cabecera de la funcinLa cabecera de la funcin debe arrancar justo contra el margen.Mal:fx=x+1Bien:fx=1Poner enters de ms entre dos ecuaciones de la misma funcinLas ecuaciones de una funcin deben estar siempre juntas, sin enters de ms entre ellasMal:f0=0fx=x+1Bien:f0=0fx=x+1Poner enters de ms en una expresin largaA veces puede pasar que por un tema de legibilidad queremos partir escribir una sola expresion larga a lo largo de varias lineas (aunque en general, el problema ah es que la expresin es larga por falta de delegacin). El tema es que tenemos que ser muy claros en indicarle a Haskell que la expresin no termin.Dos reglas:  Si hacemos eso, en general vamos a tener que poner la expresin entre parntesis  Y todo caso, debemos respetar la identacinMal:fx=maxx1Mal:fx=(maxx1)Mal:fx=(maxx1)Bien (multiples lneas)fx=(maxx1)Bien (una sola lnea)fx=maxx1"

} ,

{

"title"    : "Precedencia de los operadores mas comunes en haskell",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/precedencia-de-los-operadores-mas-comunes-en-haskell.html",
"date"     : "",
"content"  : "Definicin en el PreludeLa siguiente tabla muestra la precedencia de los operadores que ms utilizamos en Haskell. A mayor nmero mayor precedencia. Por ejemplo, el operador + tiene mayor precedencia que &amp;lt;, por lo tanto si escribimos:3&amp;lt;4+5se entiende como:3&amp;lt;(4+5)La tabla (simplificada) es la siguiente:-- Primero vienen las funciones prefijas (como even, map, etc.) y luego los chirimbolos:infixr9.infixl9!!infixr8^,^^,**infixl7*,/,`quot`,`rem`,`div`,`mod`,:,%infixl6+,-infixr5:infixr5++infix4==,/=,&amp;lt;,&amp;lt;=,&amp;gt;=,&amp;gt;,`elem`,`notElem`infixr3&amp;amp;&amp;amp;infixr2||infixr0 $Eso significa que el signo pesos (la funcin $) tiene muy poca precedencia, va a ser la ltima en considerarse. Y por el contrario las funciones prefijas (como el even o el abs) van a tener mucha precedencia. Entonces esta cuenta:abs 3 - 5 -- Se lee como &quot;le resto 5 al valor absoluto de 3&quot;Debe leerse como le resto 5 al valor absoluto de 3, porque eso es lo que significa en Haskell, porque la aplicacin prefija de abs tiene ms precedencia que el -. El resultado de esa cuenta es (-2) (negativo).Lo mismo sucede ac:4 &amp;gt; 2 * 3 -- Se lee como &quot;quiero saber si el 4 es mayor a la multiplicacin entre 2 y 3&quot;Se lee as porque el &amp;gt; tiene menos precedencia que el *, entonces el * se hace primeroPor ltimo, para romper la precedencia se usan parntesis. Si yo quiero decir el valor absoluto de la resta entre 3 y 5 lo que debo hacer es:abs (3 - 5) -- Se lee como &quot;el valor absoluto de la resta entre 3 y 5&quot;Uso del signo pesos ($) para evitar parntesisVer Uso del signo pesos en Haskell para ver cmo se aprovecha que el $ tenga tan poca precedencia.Bonus: AsociatividadLas palabras clave infixl e infixr permiten indicar la asociatividad del operador. Los operadores definidos con infixl asocian a izquierda, mientras que los infixr asocian a derecha. Por lo tanto, la expresin:3+4+5Se evala como:(3+4)+5Ya que el operador asocia a izquierda. En cambio la expresin:2:3:4:[]Se debe leer como:2:(3:(4:[]))Ya que el operador asocia a derecha, al igual que la composicin (.), por ejemplo:snd.head.filterevenDebe leerse como:snd.(head.filtereven)Tambin puede notarse que todos los operadores tienen menor precedencia que la aplicacin funcional, es decir que al ejemplo anterior podramos definirlo completamente si agregamos los parntesis alrededor de .:snd.(head.(filtereven))Los operadores definidos como infix no son asociativos, por ejemplo el operador de igualdad ==. Por lo tanto la expresin:a==b==cNo se entiende como (a == b) == c ni como a == (b == c); la expresin sin parntesis es incorrecta."

} ,

{

"title"    : "Precedencia de mensajes",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/precedencia-de-mensajes.html",
"date"     : "",
"content"  : "Muchas veces nos encontramos en la situacin de querer mandar varios mensajes en una misma sentencia, donde hay varios objetos involucrados. Qu mensaje se evala primero? Cul ser el objeto que finalmente sea pasado como parmetro?sto se ve con varios ejemplos:2+3squared.Cmo lo interpreto? (2+3) al cuadrado? 2 + (3 al cuadrado)?Otro ejemplo:3+2*4Cmo lo interpreto? (3+2) * 4? 3 + (2*4)?PrecedenciaBueno, antes de saber cmo evaluarlo, hay que recordar que existen 3 tipos de mensajes en Smalltalk:  Unarios: pepita energa  Binarios: 3 + 2  De Palabra Clave: pepita come: 20.As, de arriba para abajo, es la precedencia de los mensajes. Ms arriba en la lista est el mensaje, ms fuerza tiene para atraer al objeto que tiene al lado.Y qu sucede si hay dos mensajes con igual precedencia?  Se evala de izquierda a derecha.El ejemplo finalLa siguiente evaluacin:2raisedTo:5-2*4sqrt.Devuelve 64  se evala 4 sqrt (da 2),  luego 5 - 2 (da 3),  luego 3 * 2 (da 6)  luego 2 raisedTo: 6S, no hay precedencia de operadores como estamos acostumbrados, con lo cual el - tiene la misma precedencia que el * ya que ambos son binarios.Y si yo quiero que primero se haga la multiplicacin?Uso parntesis, como en cualquier otro lenguaje:2raisedTo:5-(2*4sqrt).As se restara el resultado de multiplicar 2 por la raz de 4 al 5, con lo cual estaramos elevando 2 a la 1."

} ,

{

"title"    : "Preguntas frecuentes del paradigma logico",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/preguntas-frecuentes-del-paradigma-logico.html",
"date"     : "",
"content"  : "Agregar elementos a una listaPreguntaRespuestaAcordate de que el paradigma lgico no tiene efectos colaterales, por lo tanto agregar un elemento a una lista no es algo que se pueda hacerS puedo relacionar una lista con otra que tenga un elemento ms:X=[Head|Tail]Va a unificar Head con la cabeza de X y Tail con la cola. Por lo tanto X tendr un elemento ms que Tail (que sera Head). Eso se puede usar tanto para conseguir una lista X con un elemento ms que Tail como para obtener un Tail con un elemento X.Lo que nunca podras hacer es:X=[Head|X](Ntese que en los ejemplos se utiliza el igual de una forma que en un predicado probablemente no sera necesario. Casi casi casi siempre el igual est de ms.)"

} ,

{

"title"    : "Preguntas frecuentes",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/preguntas-frecuentes.html",
"date"     : "",
"content"  : "Problemas con el entornoEstoy tratando de pasar algunas clases del tp de objetos y no puedo crear clases.#* Fijate que el nombre de la clase este en maysculas.Interpretacin de erroresEvalu mi cdigo, me tir un error y no s lo que significa#* Dont panic#* Le el ttulo de la ventana de error#* Si con eso no alcanza para entender, lee la cadena de mensajes que se fueron enviando (stacktrace). Cada lnea del stacktrace dice:#**la clase del objeto receptor, si el receptor era una clase dice adems class, por ejemplo Golondrina class#**entre parntesis la clase en donde est definido el mtodo que se ejecut#**el mensaje enviado a ese objeto#*Si todava no sabs qu fue, apret Debug que te aporta mucha ms informacin para entender qu pasMensajes ms comunes:MessageNotUnderstoodProblema: Se mand un mensaje que el receptor no entiende.Posibles soluciones:  Revisar que el objeto receptor fuera correcto (si es nil probablemente haya algo sin inicializar)  Revisar que no haya error de tipeo (el mensaje coincide con el nombre del mtodo definido)  Revisar que el mtodo est definido en el lugar correcto (del lado de las instancias si es un mtodo de instancia y del lado de la clase si el receptor es una clase)Un caso particular con el que se pueden encontrar es que un objeto de una clase de ustedes no entienda el mensaje #adaptToNumber:andSend:, lo cual puede surgir si como parmetro de una operacin matemtica no era un nmero (por ejemplo 3 + pepita).NonBooleanReceiver: proceed for truthProblema: Se le mand a un objeto que no es booleano un mensaje de booleanos como ifTrue:ifFalse:Solucin: Mirar el stacktrace, en algn momento va a aparecer: ClaseDelObjetoReceptor(Object)&amp;gt;&amp;gt;mustBeBoolean ms abajo en el stacktrace debera aparecer un mensaje que definieron ustedes o DoIt si se envi desde el workspace. Darle doble click a ese mensaje para abrir el debugger y ver qu pas.***Error: This block accepts  arguments, but was called with  arguments***Problema: se evalu un bloque con una cantidad de argumentos distinta de la esperada.Solucin: Buscar en el stacktrace el mtodo que definieron (o DoIt si fue directo desde el workspace) que evalu el bloque con una cantidad incorrecta de parmetros."

} ,

{

"title"    : "Preparacion de un entorno de desarrollo groovy",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/preparacion-de-un-entorno-de-desarrollo-groovy.html",
"date"     : "",
"content"  : "Download e instalacin base  Vas a la pgina https://github.com/groovy/groovy-eclipse y buscs el link de update que se adapte a la versin de tu Eclipse  En Help &amp;gt; Install New Software geners un nuevo update site en base al link del punto anterior  Componentes a instalar:          Extra Groovy Compilers, eleg la versin ms reciente      Groovy-Eclipse      m2e Configurator for Groovy-Eclipse        Y luego lo instals (va a tardar un ratito)Ojo, no te confes en usar el Eclipse Marketplace porque trae versiones anteriores del plugin.Luego hay que instalar el plugin de Maven, ahora s desde el Eclipse Marketplace.  Help &amp;gt; Eclipse Marketplace, buscs Maven, seleccions Maven Integration for Eclipse, Install, ConfirmUtilizar Groovy en otro IDE  Segu este link: http://groovy-lang.org/ides.htmlDocumentacin  http://groovy-lang.org/documentation.htmlLinks de inters  Pgina principal de Groovy  Groovy vs Scala"

} ,

{

"title"    : "Preparacion de un entorno de desarrollo java 8",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/preparacion-de-un-entorno-de-desarrollo-java-8.html",
"date"     : "",
"content"  : "  REDIRECT Preparacin de un entorno de desarrollo Java"

} ,

{

"title"    : "Preparacion de un entorno de desarrollo java",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/preparacion-de-un-entorno-de-desarrollo-java.html",
"date"     : "",
"content"  : "IntroduccinPara realizar aplicaciones de complejidad mediana-grande en Java, es recomendable contar con un entorno de trabajo que contemple al menos:  Una herramienta de versionado de fuentes  Una herramienta de manejo de dependencias  Un mecanismo para automatizar los procesos administrativos del desarrollo (test, release, deploy, etc)  Un entorno de programacin que permita:          Ayudas a la deteccin temprana de errores, autocomplecin, herramientas para navegar y buscar gilmente dentro del cdigo, etc.      Soporte para la realizacin de refactors automatizados      Integracin con la mayor cantidad posible de las dems herramientas que utilizamos.      En este artculo se propone una configuracin de entorno de trabajo que intenta cumplir con los anteriores objetivos. Las herramientas seleccionadas para eso son:  Java Development Kit  Eclipse como entorno integrado de desarrollo  Git como repositorio de fuentes y herramienta de versionado  Maven como herramienta para manejar dependencias y automatizar diversos procesos administrativos.Adicionalmente se instalarn extensiones al entorno de desarrollo eclipse para integrarlo con git y maven.JDK (Java Development Kit)Contiene un compilador y una mquina virtual (el runtime) que traduce a cdigo de mquina el cdigo intermedio que genera el compilador (.java  COMPILADOR (javac.exe)  .class  VM (java.exe)  ejecutable final).Al tiempo de escribir este artculo la ltima versin estable es 1.8. Para el propsito aqu descripto es recomendable instalar la Standard Edition.Download e instalacin baseA continuacin se detallan los pasos bsicos de instalacin segn el sistema operativo que se est utilizando. Luego de realizar este paso inicial se deber pasar a la configuracin del entorno.Este es el link de downloads.Desde ah buscan el Latest Release y se descargan el JDK del sistema operativo que est instalado en sus mquinas.Para ms detalles adicionales a los que se encuentran en esta pgina, se puede consultar el manual de instalacin de sun.UbuntuPara instalarlo en Ubuntu se puede hacer:$ sudo apt-get install openjdk-8-jdkPara definir la versin por defecto, pods correr$ sudo update-alternatives --config javay definir la versin con la que vas a usar.Otros sistemas operativosPara otros sistemas operativos desde este link segus la explicacin paso por paso que se encuentra aqu.Documentacin  Java Tutorials  Javadoc reference guide  Writing comment tipsEclipseLa instalacin del eclipse es muy sencilla: hay que bajar el que corresponda a su sistema operativo desde http://www.eclipse.org/downloads/ y descomprimirlo en su disco rgido. Posiblemente deseen crear un acceso directo para apuntar al ejecutable.A los efectos de los objetivos planteados en este artculo, se recomienda elegir la versin denominada Eclipse IDE for Java EE Developers.Esa versin pesa bastante. Si no van a utilizar las herramientas de programacin web es posible utilizar la versin ms liviana Eclipse IDE for Java Developers.Configuraciones adicionales  Te recomendamos chequear estas configuraciones de EclipseDocumentacin  Pgina principal de EclipseMavenPara instalar Maven te recomendamos seguir las instrucciones de esta pginaCreacin de un proyecto bsicoUna vez instaladas todas las herramientas, se puede crear un proyecto en esta plataforma siguiendo este tutorial (ojo, este es un tutorial bsico, si necesitan usar otras tecnologas de presentacin busquen los tutoriales en las pginas de las tecnologas correspondientes).Mavenizar un proyecto existenteSi ya arrancaste tu proyecto y decidiste ms tarde que necesitabas usar Maven, pods mavenizarlo de alguna de las siguientes maneras.Usando M2Eclipse  Click derecho en el Proyecto  Configure -&amp;gt; Convert to Maven Project  Ingresar el groupId deseado. Preferentemente que sea el package name que se hayan definido antes, ej: org.uqbar.arena.exampes  FinishIndependientemente de si su proyecto respeta la estructura estndar de un proyecto Maven, lo van a tener configurado y funcionando. De hecho, si crean los directorios y mueven el paquete a src/main/java, Maven automgicamente lo va a detectar..srcmainjavaorguqbararenaexamplesMain.javaresourcespom.xml  Probamos hacer una compilacin e instalacin local.Links tiles  Amigandonos con el entorno de desarrollo"

} ,

{

"title"    : "Preparacion de un entorno de desarrollo scala",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/preparacion-de-un-entorno-de-desarrollo-scala.html",
"date"     : "",
"content"  : "Download e instalacin baseHay varios IDEs para desarrollar con Scala, incluso podemos desarrollar sin un IDE (solamente necesitamos el compilador). De todos modos ac vamos a explicar cmo se puede armar un ambiente de desarrollo usando Eclipse y Maven (para manejo de dependencias).  La opcin ms recomendada es trabajar con IntelliJCreacin de un proyecto Maven con ScalaLa configuracin de un proyecto Scala para poder utilizar Maven es relativamente compleja y tiene varias sutilezas, principalmente para poder integrar ambas herramientas dentro del Eclipse. Por eso, recomendamos la utilizacin de este parent project que creamos con este objetivo especfico:&amp;lt;parent&amp;gt;&amp;lt;groupId&amp;gt;org.uqbar-project&amp;lt;/groupId&amp;gt;       &amp;lt;artifactId&amp;gt;uqbar-scala-parent&amp;lt;/artifactId&amp;gt;       &amp;lt;version&amp;gt;1.3&amp;lt;/version&amp;gt;   &amp;lt;/parent&amp;gt;Para poder utilizar ese parent project necesario realizar previamente realizar las tareas indicadas en Configuracin de Maven para poder utilizar las herramientas de UqbarEste parent project realiza varias configuraciones:  Agrega las dependencias con Scala y ScalaTest  Define src/main/scala como directorio default donde estn los fuentes (y src/test/scala donde estn los tests).  Le indica al maven que utilice el compilador de Scala.  Configura la integracin con el Eclipse.Documentacin  Documentacin oficial  Manuales de referencia  Scala by Example escrito por Martin Odersky, el creador de Scala.  Effective ScalaLinks de inters  Pgina principal de Scala  Un tutorial de Scala de Javi Fernndes, miembro de Uqbar"

} ,

{

"title"    : "Problemas comunes con los tipos numericos de haskell",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/problemas-comunes-con-los-tipos-numericos-de-haskell.html",
"date"     : "",
"content"  : "Para salir del pasoAl programar en Haskell suele pasar que muy frecuentemente tenemos problemas con los tipos numricos, en particular suele ocurrir al intentar hacer divisiones. Por ejemplo en el siguiente programa, la funcin promediopromedioxs=sumxs/lengthxsProduce el siguiente error:     Could not deduce (Fractional Int) arising from a use of /      from the context: Foldable t        bound by the inferred type of                   promedio :: Foldable t =&amp;gt; t Int -&amp;gt; Int        at main.hs:1:1-32     In the expression: sum xs / length xs      In an equation for promedio: promedio xs = sum xs / length xsEl problema surge porque el Haskell tiene diferentes tipos de valores numricos (enteros, reales, etc): un sistema de tipos muy estricto que hace que no sea sencillo mezclar los distintos tipos de valores en una misma operacin.La versin corta es que length xs es un entero y la operacin / no est definida para los nmeros enteros.Solucin en GHCiEs necesario convertir el resultado de length xs al tipo de datos adecuado, utilizando la funcin fromIntegral:divisionxs=sumxs/fromIntegral(lengthxs)Esto funciona siempre que yo quiera hacer una divisin no-entera y uno de los parmetros (o ambos) es un entero. Para hacer divisiones enteras tenemos las funciones div y mod.Solucin si utilizs pdepreludat con stackEs necesario convertir el resultado de length xs al tipo de datos adecuado, utilizando la funcin toFloat:divisionxs=sumxs/fromIntegral(lengthxs)La historia completaLa divisin no est definida para los enteros?Para comprender la totalidad del problema, es necesario comprender el tipo de la funcin (/):Main&amp;gt;:t(/)(/)::Fractionala=&amp;gt;a-&amp;gt;a-&amp;gt;aSe puede ver que (/) es una funcin polimrfica, es decir que puede ser utilizada con diferentes tipos de datos. Sin embargo no puede ser utilizada con cualquier tipo de dato; la restriccin es que el tipo tiene que ser instancia de la clase Fractional. En particular, los tipos enteros de Haskell (Int e Integer) no son instancias de Fractional, por lo tanto siempre que se tenga un valor de alguno de esos tipos deber ser convertido utilizando la funcin fromIntegral.Con esa idea en mente, analizamos los tipos de las funciones del ejemplo de la seccin anterior:Main&amp;gt;:tsumsum::Numa=&amp;gt;[a]-&amp;gt;aMain&amp;gt;:tlengthlength::[b]-&amp;gt;IntY podemos concluir que sum no tendr problemas, porque funciona para cualquier tipo numrico (por definicin todas las instancias de Fractional son instancias de Num.En cambio la funcin length no es polimrfica en cuanto a su valor de retorno; aunque puede recibir cualquier tipo de lista, siempre devuelve un Int. Entonces el resultado de length no puede ser parmetro de (/).Algunos casos ms complicadosSupongamos que no utilizamos la funcin sum, y en cambio queremos definir la nuestra propia, de la siguiente manera:suma=foldr(+)0O bien (para no definir una que ya existe), podemos definirprod=foldr(*)1Funcionan las siguientes definiciones?div2xs=sumaxs/fromIntegral(lengthxs)flocaxs=prodxs/fromIntegral(lengthxs)Si intentamos hacer eso, obtendremos el siguiente error:ERROR`[`file:.&amp;#92;pruebas.hs:15`](file:.&amp;#92;pruebas.hs:15)`-InstanceofFractionalIntegerrequiredfordefinitionofdiv2Para entender por qu se produce esto, debemos analizar nuevamente los tipos de suma y prod:Hugs&amp;gt;:tsumasuma::[Integer]-&amp;gt;IntegerMain&amp;gt;:tprodprod::[Integer]-&amp;gt;IntegerY como se puede ver devuelven valores de tipo Integer que, como dijimos antes, no es instancia de Fractional y por lo tanto no funciona.La idea de la seccin anterior tambin puede servir en este caso (aunque no es la nica forma):div2xs=fromIntegral(sumaxs)/fromIntegral(lengthxs)flocaxs=fromIntegral(prodxs)/fromIntegral(lengthxs)Aprovechando mejor el polimorfismoEn realidad hay una forma mejor de solucionar el problema planteado en la seccin. La desventaja de la solucin descripta consiste en que, al resolverlo de esa manera, la funcin suma slo funciona para valores de tipo Integer; lo que puede resultar muy restrictivo en un futuro.Por qu sucede esto? Como sabemos, Haskell trabaja con inferencia de tipos, por lo tanto, cuando nosotros no indicamos en nuestro programa de qu tipo son los valores que espera y devuelve una funcin, el sistema intentar descubrir ese tipo por nosotros. Normalmente este mecanismo de inferencia es suficiente y resulta de gran utilidad, ya que nos permite tener un lenguaje fuertemente tipado que nos ayuda a encontrar muchos errores en nuestro cdigo en una fase previa a la ejecucin del programa, al mismo tiempo que nos evita de la burocracia y el engorro de tener que indicar el tipo de cada funcin explcitamente.Sin embargo en este caso el tipo inferido por el sistema de tipos de Haskell es subptimo. El tipo inferido es [Integer] -&amp;gt; Integer, es decir, que slo funciona para listas de tipo Integer.Sin embargo, si miramos la definicin de suma, podemos ver que se basa en las funciones foldr y (+), cuyos tipos son:Main&amp;gt;:tfoldrfoldr::(a-&amp;gt;b-&amp;gt;b)-&amp;gt;b-&amp;gt;[a]-&amp;gt;bMain&amp;gt;:t(+)(+)::Numa=&amp;gt;a-&amp;gt;a-&amp;gt;aEs decir que no hay ningn motivo para restringir el tipo a [Integer] -&amp;gt; Integer, dado que foldr funciona para cualquier tipo de lista y (+) funciona para todos los tipos de la familia Num (es decir, todos los tipos numricos predefinidos del Haskell). De hecho, si consultamos el tipo de la expresin foldr (+) 0, obtenemos:Main&amp;gt;:tfoldr(+)0foldr(+)0::Numa=&amp;gt;[a]-&amp;gt;aque es el tipo que buscamos.Lamentablemente, cuando intenta inferir un tipo automticamente para la funcin suma, Haskell le asigna un tipo monomrfico, defaulteando en el tipo Integer. La forma de evitar esta restriccin es haciendo explcita nuestra intencin de que la funcin suma sea polmrfica, esto se logra asociando a la funcin una indicacin del tipo esperado.El tipo esperado no es otro que el de la expresin foldr (+) 0, es decir, Num a =&amp;gt; [a] -&amp;gt; a. La definicin de la funcin quedara as:suma::Numa=&amp;gt;[a]-&amp;gt;asuma=foldr(+)0Al hacer ese cambio la siguiente definicin pasa a estar correctamente tipada:-- con GHCidiv2xs=sumaxs/fromIntegral(lengthxs) -- con pdepreludat y stack ghcidiv2xs=sumaxs/toFloat(lengthxs) "

} ,

{

"title"    : "Prototipado vs clases",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/prototipado-vs-clases.html",
"date"     : "",
"content"  : "En el paradigma orientado a objetos, cuando se suscita el problema de que existan diferentes objetos con igual comportamiento pero diferente identidad y estado interno, podemos abordarlo de diferentes formas. Dos esquemas muy usados son el de clases y el que se basa en prototipos. Cada lenguaje (o herramienta) suele implementar una sla de stas opciones, aunque existen variaciones. Los lenguajes ms tradicionales (como Java, Smalltalk, y C#) usan el esquema de clases y herencia, y en otros lugares (como Javascript,  en el Object Browser para Smalltalk), se usa el esquema de prototipado.Ms all de cul de estos esquemas usemos, la base es la misma: objetos que se mandan mensajes en un ambiente aprovechando las ideas de encapsulamiento, delegacin y polimorfismo.La idea de este artculo es ver cmo se puede trabajar en cada esquema para solucionar los mismos problemas.Compartir comportamiento entre varios objetosQu pasa si pepita no es la nica golondrina que nos interesa tener en nuestro programa?. Tambin estn josefa y pepona que comen y vuelan como pepita y tambin deben tener una energa que podamos monitorear. Estara bueno que josefa y pepona puedan tener el mismo comportamiento que pepita sin tener que definir lo mismo 3 veces. Aqu es donde entran los conceptos de clase y de prototipo, dependiendo de las herramientas que tengamos disponibles.Cuando existe la idea de clase en nuestra implementacin del paradigma, el comportamiento se define una sola vez en la clase y tanto pepita como josefa y pepona pasan a ser instancias de esta clase. No podemos slo tener a pepita con su propio cdigo porque todos los objetos son instancias de una clase que las define. Cuando cualquiera de las golondrinas reciba el mensaje vola:, lo van a entender y buscarn el mtodo que lo define en la clase Golondrina.Si no tenemos la idea de clase, el mecanismo que necesitamos para que josefa y pepona compartan el cdigo con pepita es la colonacin. Clonando a pepita podemos crear un nuevo objeto (josefa) que entiende los mismos mensajes y tiene sus mismas variables, y adems conoce a pepita como su prototipo.Si queremos cambiar el comportamiento general de las golondrinas alcanza con realizar estos cambios sobre la clase Golondrina o sobre el prototipo pepita. Al decir que un objeto es clon de otro estamos estableciendo una relacin tan fuerte entre ellos como al decir que un objeto es instancia de una clase al trabajar en el otro esquema.Diferenciar el comportamiento de algunos objetosSupongamos que pepona es otro clon de pepita. Queremos que pepona (que es una golondrina perezosa) entienda el mensaje descansar, que hace subir su energa en 50 joules. Sin embargo pepita y josefa que son golondrinas normales deberan seguir teniendo el mismo comportamiento (no entenderan descansar).En el esquema de prototipado podemos simplemente modificar a pepona como lo haramos con cualquier otro objeto, sin importar si fue clonado a partir de pepita o no.#pepona&amp;gt;&amp;gt;descansarenergia:=energia+50Cuando mandemos el mensaje pepona descansar lo va a entender (ya que tiene un mtodo propio para este mensaje), va a ejecutar su mtodo descansar y su energa se incrementar. Si mandramos pepita descansar tendramos un error porque pepita no entendera ese mensaje.Qu pasara si estuviramos trabajando con el esquema de clases? Siempre que aparece comportamiento nuevo, necesitamos crear otra clase que lo incluya, con lo cual necesitaramos crear una clase GolondrinaPerezosa que herede de Golondrina y definir all el mtodo #descansar. De esta forma, pepona ya no debera ser una instancia de Golondrina sino de GolondrinaPerezosa.pepona:=GolondrinaPerezosanew.peponadescansar.&quot;estovaafuncionar&quot;pepita:=Golondrinanew.pepitadescansar.&quot;pepitanovaaentenderelmensajedescansar&quot;Si lo que queremos es agregar algn atributo nuevo para pepona, estaramos en la misma situacin, habra que agregarlo en el objeto #pepona o en la clase GolondrinaPerezosa respectivamente.Redefinir comportamientoSiguiendo con pepona, la golondrina perezosa, sabemos que cuando vuela gasta ms energa para despegar (15 en vez de 10). Una primer solucin podra ser redefinir el mtodo vola:#pepona/#GolondrinaPerezosa&amp;gt;&amp;gt;vola:unosKilometrosenergia:=energia-(unosKilometros*5+15)Cuando le mandemos el mensaje pepona vola: 10, buscar una definicin propia (o en su clase) para vola: y al encontrarla ejecutar ese mtodo. Haber agregado este mtodo no cambia el comportamiento de pepita y josefa, que es lo que queramos.Sin embargo podramos dar un paso ms para evitar la repeticin de cdigo, siendo que lo nico que cambia es el valor de la energa para despegar. Una solucin mejor sera:#pepita/#Golondrina&amp;gt;&amp;gt;vola:unosKilometrosenergia:=energia-(unosKilometros*5+selfenergiaParaDespegar)&amp;gt;&amp;gt;energiaParaDespegar^10#pepona/#GolondrinaPerezosa&amp;gt;&amp;gt;energiaParaDespegar^15Ahora, cuando le mandemos el mensaje pepona vola: 10, buscar una definicin propia (o en su clase) para vola:, no la va a encontrar, con lo cual seguir buscando en su prototipo (o la superclase de su clase) donde s existe. Al ejecutar esa definicin, se enviar a s misma el mensaje #energiaParaDespegar; empieza a buscar un mtodo con ese nombre en s misma (o en su clase GolondrinaPerezosa), lo encuentra y retorna 15, valor que se usar para completar la ejecucin de vola:Si le mandamos el mensaje pepita vola: 10, encontrar y ejecutar la definicin en s misma (o en su clase Golondrina) al igual que para el mensaje #energiaParaDespegar que retornar el valor 10.Conclusin / Corolarios  Al solucionar el problema utilizando abstracciones ya existentes, prototipado es conceptualmente ms sencillo  Entonces, el mecanismo de clases agrega una abstraccin, ya no tengo slo objetos comunes.  Adems, prototipado me resuelve el problema de redefinicin sin ms conceptos, en cambio en clases yo tengo que agregar la idea de herencia entre las clases para lograr algo parecido.  Por otro lado, la separacin objeto - clase viene asociada con un mecanismo para conocer a las clases globalmente, mientras que si uso prototipado tengo que preocuparme por guardar el prototipo de mis objetos en algn lado  Si bien en prototipado se puede usar a prototype para delegar, esto no es lo mismo que usar super al usar herencia, ya que prototype referencia a otro objeto (con su propio estado) mientras que super referencia al mismo objeto que recibi el mensaje inicial  En prototipado, el contenedor de comportamiento es dinmico, es un objeto ms de mi sistema. Al usar clases, en muchos lenguajes la separacin clase - objeto es tal que pertenecen a dos mundos diferentes, el esttico y el dinmico."

} ,

{

"title"    : "Prototipado",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/prototipado.html",
"date"     : "",
"content"  : "Un prototipo segn la RAE es un Ejemplar original o primer molde en que se fabrica una figura u otra cosa. Este trmino se utiliza en la programacin orientada a objetos para aquellos objetos que sirven como base para obtener otros objetos como l, la forma de obtener nuevos objetos a partir del prototipo se denomina clonacin.Qu problema es el que resuelve la clonacin, entonces?Si ya existe un objeto con un determinado comportamiento y estado interno y lo clonamos, obtendremos otro objeto con el mismo comportamiento (entiende los mismos mensajes y se definen de la misma forma) y estado interno (comparte la forma, pero cada objeto tiene sus propias referencias, ya que queremos que el estado de cada objeto sea independiente) que el original.Qu significa sto? Que si queremos que todas las golondrinas del universo coman y vuelen de la misma forma (pero que cada una tenga su propia energa), entonces podemos hacer que todas sean clones de pepita, nuestra golondrina original, la que usaremos como prototipo.La principal diferencia entre clonar un objeto y crear otro copiando el cdigo que ya tenamos es que el cdigo no est duplicado. Al decir que un objeto es clon de otro estamos estableciendo una relacin fuerte entre ellos; si se agrega, quita o modifica algn mtodo en el prototipo, todos sus clones se vern afectados por este cambio, lo cual lgicamente no sucede si duplicamos cdigo, tendramos que hacer los cambios en cada lugar que est repetido pudiendo olvidar hacer alguno o cometer errores fcilmente. Lo mismo suceder si le agregamos o quitamos alguna referencia al prototipo, el mismo cambio se har sobre sus clones. Donde apunte la referencia en cada clon ser probablemente diferente.Volviendo sobre el ejemplo de pepita la golondrina, supongamos que queremos clonarla para crear otra golondrina, josefa.Si tenamos el siguiente cdigo en el objeto pepita:#pepita&amp;gt;&amp;gt;vola:unosKilometros&quot;Gasta5joulesporkilmetroms10dedespegue&quot;energia:=energia-(unosKilometros*5+10)Y le mandamos a josefajosefavola:10.El objeto josefa buscar la implementacin de vola: en s mismo inicialmente, y al no tener una definicin propia, la seguir buscando en su prototipo que es pepita. All encuentra una definicin y la ejecuta. La energa que va a disminuir es la de josefa, el estado interno de pepita se va a mantener intacto.Tambin podramos tener una definicin de vola: usando mensajes a self en vez de accediendo directamente a la variable energa:#pepita&amp;gt;&amp;gt;vola:unosKilometrosselfenergia:selfenergia-(unosKilometros*5+10)Como self siempre es el objeto receptor del mensaje, si vola: se lo mandamos a josefa, self estar referenciando a josefa, no a pepita.Lgicamente, si le mandamos vola: a pepita, va a entender el mensaje, a ejecutar su propia definicin de vola: y modificar su propia energia sin afectar a ninguno de sus clones.Una vez que tenemos el objeto clonado podemos trabajar con l modificando su comportamiento y su estado interno, con lo cual podremos mantener las similitudes con su prototipo en aquellos puntos en los cuales nos interese e introducir diferencias en otros. Si el prototipo define un mtodo para el mensaje #msj1 y el clon cambia su implementacin, el prototipo no se ver afectado por este cambio y el clon usar su propia implementacin cuando reciba #msj1 en vez de usar la del prototipo.A modo resumen podemos decir que el method lookup al usar prototipado se resuelve de la siguiente forma:Tenemos el objeto o1 cuyo prototipo es o2, y o1 recibe el mensaje #m  o1 tiene un mtodo cuyo nombre es #m, se ejecuta ese mtodo.  o1 no tiene un mtodo cuyo nombre es #m, entonces busca una definicin en su prototipo          o2 tiene un mtodo cuyo nombre es #m, se ejecuta ese mtodo (el receptor sigue siendo o1)      o2 no tiene un mtodo cuyo nombre es #m, con lo cual habr un error porque o1 no entiende el mensaje #m      Si o2 a su vez tuviera otro prototipo, el method lookup continuara hasta que se llegue a un objeto que no es clon de ningn otro.Para descargar la herramienta que soporta prototipado en Pharo Smalltalk y tutoriales de uso: Object Browser (LOOP)Ejemplo completoNota: El ejemplo de Pepita es obra de Carlos Lombardi. Cualquier reproduccin del mismo deber ser autorizada por el autor."

} ,

{

"title"    : "Pseudovariable",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/pseudovariable.html",
"date"     : "",
"content"  : "Una pseudovariable es un variable manejada por el ambiente, dicha variable no puede ser asignada a otro valor.En Smalltalk las 2 pseudovariables ms usadas son self y superEn Wollok contamos solo con self (en realidad existe super, pero no como pseudovariable, si no como una palabra reservada, con un  significado especial)."

} ,

{

"title"    : "Publicar un proyecto en svn",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/publicar-un-proyecto-en-svn.html",
"date"     : "",
"content"  : "Antes de publicar un proyecto es (obviamente) necesario tener un usuario y un repositorio svn, una forma de hacer eso es Crear un proyecto en xp-devDesde el Eclipse:Botn derecho sobre el proyecto -&amp;gt; Team -&amp;gt; Share Project y ah poner la url del repositorio donde esta el proyeto seguido de . Por ejemplo:http://svn2.xp-dev.com/svn/nombre_del_repositorio/nombre_del_proyecto/trunkEsto va a crear la carpeta del proyecto y/o trunk si no existen.Este paso nos lleva a la perspectiva Synchronize del eclipse donde tenemos que comitear para guardar en el trunk nuestros sources del proyecto. En este momento, antes de comitear tenemos que indicarle al svn los archivos y carpetas que no queremos versionar, para esto, le damos botn derecho -&amp;gt; Add to .Lo que tenemos que agregar al  en un proyecto simple es:  la carpeta que guarda informacin del eclipse  la carpeta que es donde estan los compilados  el y el**Recordemos que siempre ponemos en el  todo aquello que se genera automticamente, en este caso, todos estos archivos los genera el maven.**Entonces ahora que ya le dijimos al svn que es lo que no queremos versionar, estamos en condiciones de comitear. Botn derecho sobre el proyecto -&amp;gt; Commit.Despus hay que crear las carpetas branches y tags en el repositorio.Desde la consola:"

} ,

{

"title"    : "Python",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/python.html",
"date"     : "",
"content"  : "Sobre el lenguaje:  Python Programming Language Official Site  Python (Wikipedia)Herramientas basadas en Python:  Django  Pylons/Pyramid  Tornado  Twisted (usado por ejemplo, por Dropbox)  Sage  GIMP  Paint Shop Pro  LightWave 3D  Raspberry Pi"

} ,

{

"title"    : "que entendemos por programacion orientada a objetos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/que-entendemos-por-programacion-orientada-a-objetos-.html",
"date"     : "",
"content"  : "Hay muchas visiones sobre lo que significa orientado a objetos, que llevan a mltiples discusiones. En esta pgina hay una definicin posible http://wcook.blogspot.com.ar/2012/07/proposal-for-simplified-modern.html"

} ,

{

"title"    : "Instalacion de ReactJS",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/react-instalacion.html",
"date"     : "",
"content"  : "Pasos previosSi ya estuviste trabajando con Angular estos pasos no son necesarios, pero conviene verificar que ya estn instalados.  Si ests en entorno Windows te recomendamos instalarte Git Bash  Seguimos con NodeJS, preferentemente la ltima versin (tiene que ser 20.x).  Luego NPM (Node Package Manager), con el que vamos a hacer los builds de nuestras aplicaciones.  El editor de texto que vamos a soportar en la cursada es Visual Studio Code (hay una versin portable si ests en una mquina sin privilegios de administrador).Especficos de ReactPlugins Visual Studio CodeDentro de Visual Studio Code, te recomendamos que crees un perfil vaco y lo asocies a tus nuevos proyectos React (pods ver cmo se trabaja con perfiles en VSCode en este video, la recomendacin es partir con un profile totalmente vaco. Tambin te dejamos este tutorial muy piola - en ingls y la documentacin oficial). Las extensiones que recomendamos para trabajar son:  ESLint - Microsoft: integra las reglas definidas en el linter con el IDE  Prettier - ESLint - Rebecca Vest: formatea el cdigo segn la configuracin de Prettier  npm intellisense - de Christian Kohler: te permite autocompletar dependencias buscndolas en npm  VSCode React Refactor: agrega refactors de los componentes de React  Vitest - Vitest: para ejecutar los tests de frontend desde el VSC  y por supuesto Git Lens - Git supercharged para manejarte con gitOpcionalmente pods instalarte  Import Cost - Wix: te dice cunto pesan (en KB) los imports de cada archivo que hacs en tus componentesCrear un proyecto React de ceroPara crear un proyecto React desde la consola Git Bash o bien desde una terminal Linux escribimos:npm create vite@latest nombre-del-proyectoY luego   Select a framework:  React: seleccionar React como framework de UI   Select a variant:  Typescript + SWC: elegir la variante Typescript con SWC (herramienta de reemplazo de Babel)Tambin pods usar el template directo React + Typescript + SWC (eso evita que tengas que seleccionar el tipo de proyecto):npm create vite@latest nombre-de-proyecto -- --template react-swc-tsPor defecto la aplicacin cliente levantar en el puerto 5173. Como suele quedarse levantada aun cuando canceles la lnea de comando y el navegador, te dejamos este link que te dice cmo bajar el proceso del sistema operativo para correr otro ejemplo.Configuraciones adicionales para Algoritmos IIIUna vez creado el proyecto, te recomendamos que agregues estas configuraciones.Versin de TypescriptLamentablemente, versiones de Typescript 5.4  posterior tienen problemas con la extensin JS/TS de VSCode as que nuestra recomendacin es que fijes la versin de Typescript en 5.3, cambiando la versin en el archivo package.json a  &quot;typescript&quot;: &quot;~5.3.1&quot;,  Este paso hay que hacerlo antes de ejecutar npm install o de lo contrario te conviene borrar la carpeta node_modules y el archivo package-lock.json y volver a ejecutar el comandoAgregar dependenciasAgregamos estas dependencias de Prettier y Vitest (el framework de testing)npm i @testing-library/react @testing-library/jest-dom @testing-library/user-event @vitest/coverage-v8 @vitejs/plugin-react-swc jsdom prettier vitest -DArchivo .nvmrcTener un archivo .nvmrc es conveniente si todo el equipo trabaja con NVM (el versionador de Node). El contenido especifica qu versin de Node vamos a utilizar:20.4.0Para la cursada 2024 vamos a trabajar con Node 20, que ser la versin activa al menos hasta mediados de Octubre. Para el 2025 migraremos a la versin 22.Archivos tilesEn la carpeta raz cre los siguientes archivos  .markdownlint.json (configuracin del Linter para archivos con extensin .md), con el siguiente contenido{  &quot;MD013&quot;: false,  &quot;MD024&quot;: false,  &quot;MD025&quot;: false}  .prettierrc (configuracin de Prettier para eliminar puntos y coma, definir tab de 2 espacios, utilizar single quote, etc.) Es importante que tod@s tengan esta configuracin para que no haya un montn de conflictos en git a la hora de pushear.{  &quot;trailingComma&quot;: &quot;all&quot;,  &quot;tabWidth&quot;: 2,  &quot;semi&quot;: false,  &quot;singleQuote&quot;: true}Linter para javascriptEl archivo .eslintrc.cjs debe tener la siguiente configuracin:module.exports = {  root: true,  env: { browser: true, es2020: true },  extends: [    &#39;eslint:recommended&#39;,    &#39;plugin:@typescript-eslint/recommended&#39;,    &#39;plugin:react-hooks/recommended&#39;,  ],  ignorePatterns: [&#39;dist&#39;, &#39;.eslintrc.cjs&#39;],  parser: &#39;@typescript-eslint/parser&#39;,  plugins: [&#39;react-refresh&#39;],  rules: {    &#39;react-refresh/only-export-components&#39;: [      &#39;warn&#39;,      { allowConstantExport: true },    ],  },}Configuracin del proyectoAl archivo package.json le modificamos el script lint y le agregamos test y coverage (borrale los comentarios porque no estn permitidos en json):  &quot;scripts&quot;: {    &quot;lint&quot;: &quot;eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0 --fix&quot;, // agregarle --fix    ...    // agregar    &quot;test&quot;: &quot;vitest&quot;,    &quot;coverage&quot;: &quot;vitest run --coverage&quot;  },.gitignoreAl archivo .gitignore se le pueden incorporar estas lneas:# VSC - Git Lens.historyArchivo de configuracin para Visual Studio CodeTe recomendamos que dentro del proyecto crees una carpeta .vscode y dentro un archivo settings.json que tenga este contenido:{    &quot;editor.codeActionsOnSave&quot;: { &quot;source.fixAll.eslint&quot;: true },    &quot;editor.formatOnSave&quot;: true,     &quot;files.autoSave&quot;: &quot;onFocusChange&quot; }Configuracin para el testeo unitario de frontendEl archivo vite.config.ts contiene la configuracin que necesitamos para ejecutar los tests, es importante tener un reporter que sea vlido para la herramienta de cobertura que utilices (puede ser json-summary o lcov):/// &amp;lt;reference types=&quot;vitest&quot; /&amp;gt;/// &amp;lt;reference types=&quot;vite/client&quot; /&amp;gt;import { defineConfig } from &#39;vite&#39;import react from &#39;@vitejs/plugin-react-swc&#39;// https://vitejs.dev/config/export default defineConfig({  plugins: [react()],  resolve: {    alias: {      src: &#39;/src&#39;,      components: &#39;/src/components&#39;,    },  },  test: {    globals: true,    environment: &#39;jsdom&#39;,    coverage: {      reporter: [&#39;lcov&#39;, &#39;json&#39;, &#39;html&#39;, &#39;json-summary&#39;],    },  }})Por otra parte, los imports conviene hacerlos en forma absoluta, desde src para las definiciones de dominio, services, etc. y src/components para los componentes de React.Ejemplo de un archivo para Github ActionsTe dejamos este archivo de ejemplo que tens que guardar en .github/workflows/build.yml. No hay que hacer ningn cambio.Cmo configurar los badges en tu README      Para agregar el badge del build de Github Actions, segu estas instrucciones        Para agregar el badge del porcentaje de cobertura, tens que agregar la imagen que genera el mismo build de Github Actions (tal cual est escrito):  ![coverage](./badges/coverage/coverage.svg)Links relacionados  Temario Algoritmos III"

} ,

{

"title"    : "Recursividad en haskell",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/recursividad-en-haskell.html",
"date"     : "",
"content"  : "Una funcin recursiva es aquella que en su definicin se invoca a s misma. La misma por lo general cuenta con una definicin recursiva y al menos un caso base que corta la recursividad.Recursividad sin listas            Un ejemplo clsico de recursividad es [http://es.wikipedia.org/wiki/Sucesi%C3%B3n_de_Fibonacci      Fibonacci].      fibonacci0=0fibonacci1=1fibonaccin=fibonacci(n-1)+fibonacci(n-2)Esta funcin tiene dos casos base para el 0 y el 1 (ya que la definicin recursiva requiere el resultado para los dos nmeros anteriores, no alcanza con un solo caso base) y para todos los otros nmeros una definicin recursiva genrica.Es necesario definir primero los casos base, ya que la variable n es un patrn demasiado genrico, tanto el 0 como el 1 matchean con la variable n, por ende deben definirse antes los casos para el 0 y para el 1 para que sean encontrados primero por el motor de Haskell.Para pensar: qu pasa si la consulta realizada esfibonacci(-1)Dado que la tercer definicin admite nmeros negativos va a entrar en un loop infinito. Como no es correcto usar fibonacci con nmeros negativos, podramos mejorar nuestra definicin restringiendo el dominio de la funcin usando guardas de esta forma:fibonacci0=0fibonacci1=1fibonaccin|n&amp;gt;=2=fibonacci(n-1)+fibonacci(n-2)Ahora el resultado de aplicar fibonacci con un nmero negativo sera un error ya que no hay ninguna definicin vlida para el valor indicado :)Recursividad con listasSiendo las listas estructuras recursivas (compuestas por una cabeza y una cola que a su vez es una lista) la forma ms natural para trabajar con ellas es recursivamente. La lista [1,2,3] puede tambin escribirse como 1:2:3:[] (donde el : es la funcin usada para armar listas y puede ser usada convenientemente para pattern matching)Un ejemplo fcil es el length.length[]=0length(x:xs)=1+lengthxsVeamos ahora la funcin reverse.reverse [] = []reverse (x:xs) = reverse xs ++ [x]Usamos el patrn de lista vaca [] para el caso base, ya que la segunda definicin indefectiblemente nos llevar a ella, y el patrn de cabeza y cola para poder avanzar de a un paso por la estructura y poder procesarla fcilmente. En estos casos en particular no importa el orden de las definiciones, ya que la lista con al menos un elemento no matchea con la lista vaca y viceversa.Loops infinitosAnalicemos la siguiente funcin:muchosDen=n:(muchosDen)Si consultamos en el intrprete&amp;gt;muchosDe5Esta funcin no podra terminar nunca, ya que no hay ningn punto en el que se corte la recursividad. Sin embargo, lo que s podramos hacer con esta funcin es usarla en un contexto que acote la ejecucin gracias a la evaluacin perezosa. Veamos el siguiente ejemplo:&amp;gt;(sum.take10.muchosDe)550"

} ,

{

"title"    : "Recursividad en logico",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/recursividad-en-logico.html",
"date"     : "",
"content"  : "Un predicado recursivo es aquel que en alguna de sus clusulas se invoca a s mismo. Los predicados recursivos para poder funcionar correctamente necesitan contar con algn caso base que corte la recursividad.Recursividad Sin ListasUn primer ejemplo es el predicado ancestro/2 que relaciona a una persona con otra si la primera cumple con ser su padre o ser ancestro de su padre. Teniendo un predicado padre(Padre, Hijo) podemos hacer:ancestro(Ancestro, Descendiente):-  padre(Ancestro, Descendiente).  ancestro(Ancestro, Descendiente):-  padre(Padre, Descendiente),  ancestro(Ancestro, Padre).Ac se ve que ancestro/2 tiene dos clusulas: una que se invoca al mismo predicado ancestro/2 y otra que no. No importa cul de las dos definamos primero, porque Prolog va a intentar ambas de todos modos. Lo que s es importante de la clusula recursiva es que demos un pasito que nos acerque al caso base antes de hacer la consulta recursiva, en este caso es preguntar quin es ancestro del padre de la persona que nos interesaba en primer lugar.Algo que puede parecer complejo es analizar la inversibilidad de este predicado. Teniendo en cuenta que el predicado padre/2 es inversible, el caso base es inversible, pero qu pasa con el caso recursivo? Las variable Descendiente se va a ligar gracias a padre/2, y la variable Ancestro aparece por primera vez al consultar el mismo predicado que estamos definiendo Bueno, gracias a que el caso base es inversible, podemos confiar que eventualmente se va a ligar, por ende ancestro/2 se hace inversible a s mismo.Una cosa interesante para pensar en este ejemplo es que el predicado ancestro/2 define una relacin que cumple con la propiedad transitiva. Recordando un poco la teora detrs de esto: Una relacin R es transitiva si: a R b y b R c =&amp;gt; se cumple a R c.Otro ejemplo tpico de predicado recursivo es factorial/2, que relaciona a un nmero con su factorial sabiendo que para el 0 es 1 y para los otros nmeros es el factorial del nmero anterior multiplicado por s mismo. Una primer aproximacin en base a esto podra ser:factorial(0,1).factorial(N,F):-  AnteriorisN-1, factorial(Anterior,F2),  FisF2*N.Esta definicin parece que resuelve el problema, pero no hay que olvidarse que en el paradigma lgico la bsqueda de soluciones es exhaustiva. Si consultamos por el factorial de 1, la primer respuesta ser 1 ya que el factorial de 0 es 1, y 1 * 1 da 1. Pero siendo que 0 tambin matchea con la variable N entrar en un loop infinito al segundo intento. Por ese motivo, una definicin correcta sera:factorial(0,1).factorial(N,F):-N&amp;gt;0,AnteriorisN-1,factorial(Anterior,F2),FisF2*N.De esa forma, ambos casos son excluyentes entre s y el 0 slo puede tener como respuesta al 1.Y la inversibilidad? Algo que salta a la vista es que para consultar el factorial del anterior necesitamos calcular el anterior, y tambin necesitamos validar que N &amp;gt; 0, y eso impone restricciones porque los predicados (&amp;gt;)/2 e is/2 necesitan que N est ligada con un valor concreto. O sea que esta consulta no va a funcionar: factorial(N, 6).Analicemos la inversibilidad para la segunda aridad. Esta otra consulta: factorial(3, Factorial). funcionara?La variable F aparece recin al final, a la izquierda del is, con lo cual no habra problema por ese lado.De hecho, si no fuera inversible para la segunda aridad la consulta recursiva no se podra resolver tampoco, porque se est usando una variable F2 que no tiene chances de estar ligada previamente como para que sea una consulta individual. Al igual que para el primer ejemplo, esa consulta recursiva funciona gracias a que tiende al caso base que es inversible.Recursividad Con ListasLas listas son indiviuos compuestos cuya naturaleza es recursiva, por ese motivo la recursividad es una forma comn para trabajar con ellas. La clave para hacer un ejercicio, si ste se resuelve con recursividad, es poder pensar recursivamente. sto significa que cuando digan, por ejemplo una sumatoria se define como.. ah, en la definicin, tienen que usar el concepto de sumatoria de nuevo, para definirla. Cmo? Y, separando el problema, por ejemplo, en cabeza y cola. Y ese es el chiste, juntando esas dos cosas y pensando un poquito, pueden hacer recursividad sobre listas.SumatoriaLa cola de una sumatoria qu tiene que ver con la sumatoria de la lista entera? Y, la sumatoria de la cola es casi todo el problema resuelto, slo le falta agregar un detallito que implica trabajar con el elemento que tenemos disponible:sumatoria([Cabeza|Cola],S):-sumatoria(Cola,SCola),%Estoyaescasitodoelproblemaresuelto!Solofaltasumarlacabeza:SisSCola+Cabeza.Y por supuesto que necesitamos un caso base. El caso base se piensa generalmente por exclusin. Qu caso no consider arriba? La lista vaca. (En ste caso)sumatoria([],0).UltimoA ver, el ltimo de una lista Es el mismo ltimo de la cola!:ultimo([Cabeza|Cola],Ultimo):-ultimo(Cola,Ultimo).Caso base, una lista con un elemento (la lista vaca no tiene ltimo, sera esperable que una consulta para la lista vaca de falso):ultimo([E],E).Completito:ultimo([_|Cola],Ultimo):-ultimo(Cola,Ultimo).ultimo([E],E).Todos menos el ltimoAhora, el principio de la lista (todos menos el ltimo). ste es loquito, porque podemos partir ambas listas, as:principio([Cabeza|Cola],[Cabeza|PrincipioDeLaCola]):-Y claro, porque la cabeza es la misma en la lista original que en su principio. Pero hay que relacionar Cola y PrincipioDeLaCola..principio([Cabeza|Cola],[Cabeza|PrincipioDeLaCola]):-principio(Cola,PrincipioDeLaCola).principio([E],[]).ReverseEntonces, pensemos otro problema: dar vuelta una lista. Es un poco ms interesante: Necesitamos poner el ltimo adelante, y la cola de la lista dada vuelta es el principio de la lista al revs:reverse(ListaOriginal,[Ultimo|PrincipioAlReves]):-Uf, pero hay que ver de dnde sale eso! Y, la llamada recursiva la conocemos:reverse(PrincipioDeLaLista,PrincipioAlReves),Y listo, ahora hay que poner antes y despus de esa condicin cosas para que ligue las variables correspondientes; Ligamos PrincipioDeLaLista, antes de la llamada recursiva:reverse(ListaOriginal,[Ultimo|PrincipioAlReves]):-principio(ListaOriginal,PrincipioDeLaLista),reverse(PrincipioDeLaLista,PrincipioAlReves), ...Y ahora nos falta saber de dnde sacamos el ltimo:reverse(ListaOriginal,[Ultimo|PrincipioAlReves]):-principio(ListaOriginal,PrincipioDeLaLista),reverse(PrincipioDeLaLista,PrincipioAlReves),ultimo(ListaOriginal,Ultimo).Les dejo el caso base a ustedes.Ejercicio: SubconjuntoCmo se hace el subconjunto de una lista? (sin permutaciones)As tiene que funcionar:`?-subconjunto([1,2,3],Sub).`Sub=[];Sub=[2];Sub=[2,3];Sub=[3];Sub=[1];Sub=[1,2];Sub=[1,2,3];Sub=[1,3];false.Pista: El subconjunto puede pensarse con dos casos recursivos ms el caso base."

} ,

{

"title"    : "Redefinicion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/redefinicion.html",
"date"     : "",
"content"  : "La redefinicin se produce cuando una clase vuelve a definir, o sea redefine, alguno de los mtodos heredados de su superclase. El nuevo mtodo sustituye al heredado para todos los objetos de la clase que lo ha redefinido, de manera que sus objetos tienen un comportamiento modificado respecto de los objetos de la superclase.As, la redefinicin permite que al definir una nueva clase sus objetos no slo extiendan o amplen el funcionamiento de los objetos de la superclase, sino tambin los modifiquen, ajustndolo a los requerimientos y necesidades especficas para los cuales se cre la subclase.La redifinicin se puede usar para definir la misma operacin que antes pero con alguna variante (ac mayormente se usa super) o para definir la misma operacin sin cdigo en comn con el heredado (es una redefinicin sin super, se puede ver un ejemplo en Prototipado vs Clases#Redefinir comportamiento)."

} ,

{

"title"    : "Refactoring",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/refactoring.html",
"date"     : "",
"content"  : "This article is a stub!Links  Artculo de Kent Beck que habla sobre [Ideas para ordenar nuestros refactorings](dont-cross-the-beams})  Artculo de Javier Fernandes con un ejemplo prctico de refactoring  Un artculo de Ward Cunningham The Debt Metaphor. Creo que Cunningham es una de las personas que mejor entiende lo que significa programar.  La tesis de William Opdyke"

} ,

{

"title"    : "Reflection",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/reflection.html",
"date"     : "",
"content"  : "Es un caso particular de metaprogramacin, donde metaprogramamos en el mismo lenguaje en que estn escritos (o vamos a escribir) los programas. Es decir, todo desde el mismo lenguaje.Nota de color: Inicialmente el lenguaje pionero en cuanto a reflection fue LISP.El ejemplo ms visible de esto es el caso de smalltalk, donde no existe una diferenciacin entre IDE y nuestro programa. Ambos estan hechos en smalltalk, y de hecho viven en un mismo ambiente. Ambos estan construidos con objetos y pueden interactuar entre s.De hecho, muchos componentes del IDE Pharo son elementos de metaprogramacin, y utilizan reflection para inspeccionar nuestras clases y objetos.Tipos de reflectionPara esto, generalmente, es necesario contar con facilidades o herramientas especficas, digamos soporte del lenguaje. Entonces reflection, adems, abarca los siguientes items que vamos a mencionar en esta lista:  Introspection: se refiere a la capacidad de un sistema, de analizarse a s mismo. Algo as como la introspeccin humana, pero en trminos de programa. Para eso, el lenguaje debe proveer ciertas herramientas, que le permitan al mismo programa, ver o reflejar cada uno de sus componentes.  Self-Modification: es la capacidad de un programa de modificarse a s mismo. Nuevamente esto requiere cierto soporte del lenguaje. Y las limitaciones van a depender de este soporte.  Intercession: es la capacidad de modificar la semntica del modelo que estamos manipulando, desde el mismo lenguaje.Un MOP (MetaObject Protocol) es un framework de objetos que describe o modela un sistema de objetos. MOP sera el trmino correcto para lo que en java llamamos API de reflection. En realidad el API de reflection de java es un caso de MOP.Dependiendo de la implementacin y del lenguaje, el MOP puede soportar o no los tipos de reflection que enumeramos arriba: introspection, self-modification &amp;amp; intercession.IntrospectionSe refiere a poder obtener informacin acerca de los elementos de nuestro programa: clases, fields, mtodos, funciones, predicados (en otros paradigmas).La capacidad de introspection es la ms comn en los MOPs. Digamos que es la ms simple de implementar, comparndolas con los otros tipos de reflection.Veamos algunas herramientas que nos dan los lenguajes Java y Smalltalk (Pharo):Informacin esttica:Paraobtenerlaclasedeunobjeto:enJava:getClassenPharo:classEnlaclaseclassestnlosmtodos:enJava:getMethods,getDeclaredMethods,getFields,getConstructors,getMethod,getSuperclassenPharo:instVariables,methodDictionary,superclassInformacin dinmica:Obtenerelvalordeunfield:enJava:unField.get(unObjeto)enPharo:unObjetoinstVarNamed:fieldNameSetearelvalordeunfield:enJava:unField.set(unObjeto,unValor)enPharo:unObjetoinstVarNamed:fieldNameput:unValorInvocarunmtodo:enJava:unMethod.invoke(unObjeto,parametro1,parametro2,...)enPharo:unObjetoperform:#selectorwithArguments:listaDeParametrosCrearunainstancia:enJava:unConstructor.invoke(parametro1,parametro2,...)ounaClase.newInstance()enPharo:unaClasenewSelf-modificationSupongamos que queremos hacer el refactor extract superclass, para esto vamos a usar self-modification en Pharo, donde modificar el metamodelo usando el mismo lenguaje es algo cotidiano por ejemplo, para crear una clase usamos el template que nos provee el System Browser:Objectsubclass:#NameOfSubclassinstanceVariableNames:&#39;&#39;classVariableNames:&#39;&#39;poolDictionaries:&#39;&#39;category:&#39;&#39;.que no es ms que un mensaje que se le manda a la clase Object.Lo que hacemos es, dada una clase, crear una super clase a partir de ella, dicindole el nombre de le nueva clase, las variables de instancia que quiero que tenga, los mtodos que quiero que tenga. As es como nos gustara poder usarlo:SimpleExtractSuperclassRefactoringextractSuperclass:#GuerrerowithInstanceVariables:SoldadoinstVarNamesandMethods:(Soldadoselectorsdifference:#(pasofuerza))fromClass:Soldado.El resultado de esta prueba debera ser crear una clase Guerrero, a partir de otra clase Soldado ya existente. Guerrero va a ser superclase de Soldado y va a tener todas las variables de instancia que tiene Soldado (le podramos especificar cules variables de instancia queremos ponerle, pero por simplicidad, le pasamos todas). Tambin vamos a mover todos los mtodos de Soldado, excepto paso y fuerza.Por supuesto, nuestro refactor debe ser independiente del dominio de los guerreros. Nuestro metaprograma sera bsicamente (obviando accessors):#SimpleExtractSuperclassRefactoringclass&amp;gt;&amp;gt;extractSuperclass:newSuperClassNamewithInstanceVariables:instanceVariableNamesandMethods:selectorsToMovefromClass:aClassselfnewtarget:aClass;superClassName:newSuperClassName;instanceVariableNames:instanceVariableNames;selectors:selectorsToMove;execute.#SimpleExtractSuperclassRefactoring&amp;gt;&amp;gt;executeselfcreateSuperClass.selfmoveInstanceVariables.selfmoveMethods.&amp;gt;&amp;gt;createSuperClassselftargetSuperClass:(selftargetsuperclasssubclass:selfsuperClassNameinstanceVariableNames:&#39;&#39;classVariableNames:&#39;&#39;poolDictionaries:&#39;&#39;category:selftargetcategory).selftargetSuperClasssubclass:selftargetnameinstanceVariableNames:selftargetinstanceVariablesStringclassVariableNames:selftargetclassVariablesStringpoolDictionaries:&#39;&#39;&quot;Ahoranonosimporta,perohabraquecopiarlotambinparaquenosepierda&quot;category:selftargetcategory.&amp;gt;&amp;gt;moveInstanceVariablesselfinstanceVariableNamesdo:[:instVarName|selftargetremoveInstVarNamed:instVarName.selftargetSuperClassaddInstVarNamed:instVarName.]&amp;gt;&amp;gt;moveMethodsselfselectorsdo:[:selector|selftargetSuperClasscompile:(selftarget&amp;gt;&amp;gt;selector)getSource.selftargetremoveSelector:selector.]Algunos mtodos de self-modification que usamos:  Agregar un mtodo: unaClase compile: cdigo del mtodo  Borrar un mtodo: unaClase removeSelector: #selector  Agregar una variable de instancia: unaClase addInstVarNamed: nombre de la variable  y para borrarla: unaClase removeInstVarNamed: nombre de la variable"

} ,

{

"title"    : "Relleno caprese",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/relleno-caprese.html",
"date"     : "",
"content"  : "Cantidad: 1 docena y mediaIngredientes:  150 gramos de Jamon  235 gramos de Muzzarella (el paquete de La Serenisima)  Medio paquete de Albahaca  Un tomate bien grande.  Slo un poquito de sal al tomate + albahaca"

} ,

{

"title"    : "Relleno dale",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/relleno-dale.html",
"date"     : "",
"content"  : "Cantidad: 1 docena y mediaIngredientes:  125 gramos de jamon  235 gramos de queso, 80% fontina y un toque de Muzzarella  3 cebollas chicas  1 cebolla de verdeo.  1 morrn (medio verde y medio rojo)  un puado de aceitunas, ponele 8 a 10.  2 huevos duros  Condimentos, un caldito de verdura, aceite, sal, pimienta y condimento para pizza, todo en el preparado de cebolla + morrn."

} ,

{

"title"    : "Relleno de carne",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/relleno-de-carne.html",
"date"     : "",
"content"  : "Cantidad: 2 docenas y mediaIngredientes:  1kg de carne  1kg de cebollas  4 huevos duro  2 cebolla de verdeo  1 morrn rojo  1 morrn verde  Un poquito de salsa de tomate  CominoExtras:  Aceitunas, 10  Medio Chorizo"

} ,

{

"title"    : "Representacion de informacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/representacion-de-informacion.html",
"date"     : "",
"content"  : "  Cul_es_la_diferencia_entre_una_tupla_y_una_lista?"

} ,

{

"title"    : "Resolver problemas de dependencias maven dentro de eclipse",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/resolver-problemas-de-dependencias-maven-dentro-de-eclipse.html",
"date"     : "",
"content"  : "Cuando el plugin de maven dentro de eclipse no puede resolver una dependencia puede ser por varios motivos, aqu tratamos de armar una lista de cosas para revisar.Est mal el settings.xmlNormalmente si estuviera mal el settings entonces debera quejarse por no encontrar el parent project y no esos, pero si no le pusiste parent a tu pom entonces podra mostrar ese error. Por otro lado si tens algn otro ejemplo de la ctedra que te anda, eso querra decir que el settings est bien.Dentro del eclipse se configura donde est el settings.xml en Windows / Preferences -&amp;gt; Maven / User Settings. En principio ese debera ser el settings.xml que hay que modificar para agregarle el repo maven de uqbar.Est mal el pom.xmlSi tens mal las versiones no te va a andar. Asegurate de copiar exactamente lo que dice algn pom de ejemplo.Est mal nuestro server creo que no es el caso, pero nunca hay que descartar esa opcin.Est mal la conexin a Internet.Asegurate de tener Internet y que el maven/eclipse tengan acceso a ella, revisar firewalls, proxies etc.Est mal tu repo localEsto es ms probable de lo que podra pensarse, si todo lo anterior falla lo ms lgico es que sea esto. Suele pasar cuando uno usa maven desde una conexin mala (como la de frba), intenta bajar un jar, no lo logra y se mambea: queda registrado como que no se pudo bajar y no vuelve a intentar.Para resolver esto hay que ir al repo local y borrar la info de cache una forma fcil es borrar todo el directorio uqbar, pero si miran a dentro pueden ser ms sutiles.Est mal el eclipseEl eclipse tambin tiene sus cachs y no es raro que se mambeen ac no hay soluciones elegantes, darle clean al proyecto, clean al maven, restartearl el eclipse y todas esas cosas desagradables.En algn caso yo lo resolv haciendo un touch del archivo .classpathBorrar parte del repo local tambin obliga al eclipse a refrescar sus cachs.Mi proyecto no es de tipo maven / No tengo el men maven en mi proyectoVisualmente se puede ver si un proyecto es de tipo maven en el cono del proyecto. Este debera tener una m en el mismo.Para convertirlo a proyecto maven hay que apretar click derecho sobre el proyecto y luego Configure / Convert to Maven Project"

} ,

{

"title"    : "Responsiveness",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/responsiveness.html",
"date"     : "",
"content"  : "Aplicaciones responsiveHacer que una aplicacin sea responsive implica optimizar el contenido y la interaccin de la interfaz de usuario en base al tamao y resolucin de la pantalla.Esto se relaciona con el concepto de usabilidad: el contenido debe adaptarse para pantallas ms chicas (celulares, en modo vertical o apaisado), medianas (tablets) o grandes (monitores de 25), a veces implica reordenar los controles, a veces sacar los elementos que pueden llegar a molestar la experiencia de usuario.Algunos frameworks de presentacin web que trabajan sobre esta idea son:  Tailwind  Bulma  Chakra  Bootstrap  Material Design  Foundationentre otros.Manualmente, el css permite especificar estilos condicionales mediante el uso de media queries. Pods ver un ejemplo que discrimina css para desktops, tablets, telfonos grandes y pequeos.Links relacionados  Temario Algoritmos III"

} ,

{

"title"    : "Resumen de wicket  pros y contras",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/resumen-de-wicket--pros-y-contras.html",
"date"     : "",
"content"  : "Resumen general            Tema      Cmo lo resuelve Wicket                  Widgets      Si bien dependen de lo que HTML ofrece, del lado del servidor se puede trabajar con componentes visuales que rendericen tablas paginadas, combos anidados, etc.              Layout      Al igual que en Web, el layout no est reificado en objetos del lado del servidor sino que se define en el html (y opcionalmente en el css).              Binding      Se mapea cada componente con su modelo correspondiente (esttico o dinmico). El CompoundPropertyModel trabaja por convencin y permite bajar la cantidad de lneas de configuracin.              Manejo de estado      La pgina tiene estado como cualquier objeto que pertenece al ambiente Java.              Navegacin      Se pueden generar nuevas instancias de una pgina o recibir una pgina como parmetro. Al abrir nuevas sesiones desde el browser se generan nuevas instancias de pgina automticamente. La navegacin es a nivel aplicacin y no a nivel hipervnculo de documento.              Pasaje de informacin entre pginas      Puedo definir constructores para las pginas, pasando como parmetro toda la informacin que necesite (incluyendo la pgina padre).              Manejo de eventos      Los botones deben definirse como submit y no como button para que pueda funcionar el binding de atributos, por las restricciones de la tecnologa web: slo con submit los parmetros viajan al servidor. Los buttons como los links definen sus listeners, el mapeo es sencillo: no hay que escribir tres servlets distintos para comprar, reservar o dar de baja la reserva, ni escribir un servlet que en el doGet/doPost tenga un switch gigante.      Highligths  Stateful Model          manejo automtico de estado en sesin      no requiere conocer scopes: session, request, etc.        Modelo de componentes al estilo SWT          soporta extensiones trabajando con tcnicas OO conocidas        Transparencia en la comunicacin con el server          Al igual que en cliente pesado, los mtodos onClick() son invocados automticamente por el framework        Html markup muy poco intrusivo          Slo hay que anotar el tag con el id del componente. Ej: Aceptar      Al trabajar con un html de prueba, eso permite la separacin de tareas entre el diseador y el programador (el diseador no sufre si hay problemas de performance o cambio en los datos porque el html contiene un prototipo de ejemplo en s mismo)      Problemas  Sigue atado al concepto de formulario          Si bien el form es un objeto con las ventajas que eso trae,      el desarrollador tiene que pensar en el submiteo del form.        Muy fuerte vnculo entre markup y modelo componentes java.          Hace rgida y burocrtica la vista.        Modelo de componentes orientado a la jerarqua          Hay que subclasear TODO! (botones, links, etc.)      Trabaja poco con composicin      Una vez que el programador se hizo amigo de la tecnologa, se imponen refactors para evitar escribir muchas lneas de cdigo (que tiende a ser repetitivo, podra mejorarse la interfaz de creacin de controles del lado del servidor)        El uso de Models (la M del MVC) es algo oscuro          no muy intuitivo      no fomenta su uso por estas mismas complicaciones.        No parece ser posible autogenerar la vista (html) automticamente (al menos en forma fcil). Por ejemplo para una aplicacin/producto grande, donde se necesite desarrollar muchas pantallas de carga.Links relacionados  Temario Algoritmos III"

} ,

{

"title"    : "Resumen de lenguajes basados en prototipos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/resumen-lenguajes-prototipados.html",
"date"     : "",
"content"  : "  Advertencia: esto puede ser un poco fumado.Hemos trabajado hasta aqu la nocin de objeto como la primera forma de definir conceptos, agrupar comportamiento y encapsular estado.Al objeto le puedo enviar un mensaje y el method lookup se resuelve porque el objeto receptor es el que responde al mensaje.Esta forma de definir cdigo en base a un objeto no es exclusiva de Wollok:SelfLa primera idea de tener la nocin de objeto fue Self en 1986, que naci en Xerox Parc Place como hermano menor de Smalltalk (comparten una sintaxis muy similar).Cada objeto define  slots o referencias  mtodosFue tambin el primero que introdujo la idea de manipulacin enteramente visual de objetos:Te dejamos dos videos que muestran  cmo funciona la delegacin y  cmo crear una cuenta bancariaJavascriptUn tiempo ms tarde naci Javascript (el 01/01/1997), que populariz el trmino prototype-based para los lenguajes que trabajan exclusivamente con objetos (al menos hasta la versin ES6 que incorpor las clases como syntatic sugar). Vamos a hacer el ejemplo de pepita en javascript, que pueden probar en la consola de cualquier navegador (presionando F12)// pepita es un objeto...var pepita = {  energia: 0,   // que tiene energia  volar: function(kilometros) {  // que sabe volar n kilmetros (function es equivalente al method de Wollok)    this.energia = this.energia - (8 * kilometros)   // y eso le resta energia (this es equivalente al self de Wollok)  },  comer: function(gramos) {      // que sabe comer g gramos    this.energia = this.energia + (4 * gramos)      },  cantar: function() {    // que sabe cantar    console.log(&quot;pri pri pri&quot;)  }}Lo probamos en la consola del navegador// copiamos la definicin anterior de pepitapepitapepita.energia   // puedo acceder a informacin de pepitapepita.comer(50)pepitapepita.volar(10)pepita.energia = 170  // incluso puedo asignar informacin de pepita sin mandar mensajespepita.descansar = function() { this.energia = 1000 }  // groso! Puedo definir comportamiento nuevo// incluso puedo crear referencias nuevaspepita.durmioSiesta = false// pisamos la definicinpepita.descansar = function() {  this.durmioSiesta = true  this.energia = 1000}// y vemos qu pasapepita.durmioSiestapepita.descansar()pepita.durmioSiestaSimilitudes con Wollok:  no estoy obligado a definir los tipos. Yo puedo enviar cualquier mensaje que un objeto entienda (as funciona el method lookup bsico).  puedo definir objetos annimos y referenciarlos mediante variables  el objeto agrupa comportamiento y estado (el conjunto de variables)Algunas diferencias respecto a Wollok  javascript permite el acceso directo a las referencias de un objeto. Wollok nos obliga a hacerlo mediante accessors, para javacript tanto las variables como los mtodos son cajoneras donde la nica diferencia es que en las segundas guardamos expresiones lambda.  javascript es dinmico: puedo agregar o modificar referencias y comportamiento sin que haya un reinicio. En esto reside su gran poder.En Wollok es necesario cambiar la referencia a un nuevo objeto para poder lograr que un mensaje pueda ser entendido:&amp;gt;&amp;gt;&amp;gt; var pepita = object { }an Object[]&amp;gt;&amp;gt;&amp;gt; pepita.jugar()wollok.lang.MessageNotUnderstoodException: anonymousObject does not understand message jugar()&amp;gt;&amp;gt;&amp;gt; pepita = object { method jugar() { } }an Object[]&amp;gt;&amp;gt;&amp;gt; pepita.jugar()&amp;gt;&amp;gt;&amp;gt;Si quieren chusmear ms pueden profundizar sobre  Diseo en Javascript 5  Diseo en ES6IokeIoke (06/11/2008) fue un proyecto basado en la VM de Java que propona trabajar con prototipos, intercalando lenguajes como Io, Ruby y Lisp. Vemos la misma implementacin de pepita en Ioke:pepita = Origin mimic do(  energia = 0.0  comer = method(gramos, self energia += 4 * gramos)  volar = method(kilometros, self energia -= (kilometros + 10))  show = method(&quot;Pepita energia: $#{energia}&quot; println))pepita show&quot;Pepita come 10 gramos&quot; printlnpepita comer(10)&quot;Pepita vuela 3 kilometros&quot; printlnpepita volar(3)pepita showEl archivo pepita.ik tiene la definicin de pepita y luego el script que prueba cmo come y vuela.Lo evaluamos en la consolafernando@fernando-laptop ~/apps/ioke/bin $ ./ioke pepita  .ikPepita energia: $0.0Pepita come 10 gramosPepita vuela 3 kilometrosPepita energia: $27.0OzonoOzono (anteriormente llamado LOOP: Learning Object-Oriented Programming) fue una herramienta desarrollada por algunos docentes de esta facultad que permita el trabajo con objetos antes de utilizar otras herramientas de Smalltalk.Otras apariciones de objectEn Scala aparece la nocin de objeto pero asociada al Singleton."

} ,

{

"title"    : "Robustez de los lenguajes",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/robustez-de-los-lenguajes.html",
"date"     : "",
"content"  : "Se dijo:  NoimplementaraelsoftwaredeunacentralatmicaenRubyY eso dispar una discusin acerca de qu hace que un lenguaje de programacin, una prctica, o una herramienta sea segura para un software que no puede fallar, que debera tener la menor cantidad de errores posibles y ser tolerante a ellos en caso que ocurran.Se lleg a los siguientes vnculos de la United States Nuclear Regulatory Commission (NRC):  http://www.nrc.gov/ (United States Nuclear Regulatory Commission - tiene un buscador y aparecen cosas relevantes)  https://goo.gl/MibXBU (2006)  http://www.sigada.org/conf/sigada2005/SIGAda2005-CDROM/SIGAda2005-Proceedings/Moore-Avoid-PL-Vulnerabilities.ppt  http://web.archive.org/web/20150717074239/http://grouper.ieee.org/groups/plv/ que tiene una lista ridcula de vulnerabilidades en los lenguajes de programacin  https://www.nrc.gov/docs/ML0421/ML042150288.pdf (2004 - ac se menciona a Haskell pero para validar la calidad de otro software)  https://www.nrc.gov/docs/ML0634/ML063470583.pdf (1996 - ac se menciona ms que nada a lenguajes como ADA/C/C++/Ladder!)"

} ,

{

"title"    : "Ruby",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ruby.html",
"date"     : "",
"content"  : "No es este Ruby, pero les dejamos otros links interesantes:Sobre el lenguaje:  Official site  Ruby (wikipedia)  Operador Ampersand (a veces confuso)Herramientas basadas en Ruby:  JRuby  MagLev  RailsLa comunidad:  The Ruby Programming Language  Ruby Central"

} ,

{

"title"    : "Sabores de colecciones",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/sabores-de-colecciones.html",
"date"     : "",
"content"  : "Sabores de colecciones en WollokEn Wollok disponemos de dos sabores bsicos de colecciones: las listas y los sets (conjunto matemtico). Se diferencian principalmente por las siguientes caractersticas:  Las listas tienen orden, los sets no, por eso slo es posible obtener un determinado elemento en base a su pocisin slo si es una lista con el mensaje get(posicionBaseCero)  Los sets no admiten repetidos, las listas s, por eso si se agrega un elemento repetido a un set no se agregar una nueva referencia al mismo, mientras que en las listas se incluir una nueva referencia (en otra posicin) al mismo objeto.Literal de listas: [1,2,3] Literal de sets: #{1,2,3}Para ejemplos de uso ver Intro a coleccionesSabores de colecciones en SmalltalkSmalltalk tiene una clase llamada Collection que me permite representar colecciones, pero Collection es la abstraccin superior de la jerarqua de colecciones. Al momento de instanciar una coleccin, tengo que decidirme por un sabor. A continuacin intentaremos mostrar los sabores de colecciones, tratando de ordenarlos en base a sus respectivos grados de especializacin.Set y BagEl primer sabor que visitaremos es el Bag. Esta coleccin es de las denominadas sin orden y como su nombre lo indica, es la representacin de una bolsa. Una bolsa de objetos. Por ejemplo, al principio, hablamos de un carrito de compras. El Bag la coleccin ms adecuada para esta representacin. Imagnense que puedo poner tres latas de tomates, dos botellas de agua y siete peras.El segundo sabor que veremos es el Set. El Set, como su nombre lo indica, est concebido para la representacin de conjuntos.Una propiedad, fundamental dira, sobre conjuntos es que los elementos que pertenecen al conjunto son nicos en l. En resumidas palabras, en los conjuntos (Sets) no voy a tener dos veces el mismo elemento. O sea el Set no admite repetidos. Salvo por esta propiedad, el comportamiento es el mismo que el del Bag.Imagnense que tengo una lata de tomates y miCarrito es una coleccin. Lo voy a representar as:unaLata:=LataDeTomatesnew.unaLataconTomates:perita.unaLatadeLaMarca:LaMarcaqueaudslesgusteunaLataconPrecio:1.00Bien, tengo mi objeto unaLata y quiero agregar a mi carrito de compras 3 latas de tomates. Entonces hago:miCarritoadd:unaLata.miCarritoadd:unaLata.miCarritoadd:unaLata.Qu pasar cuando evale la siguiente lnea?miCarritosize.Yo agregu 3 veces al carrito una lata de tomates, con lo cual podra esperar que me responda 3. Pero, como vimos, si represento a mi carrito de compras con un Bag, (o sea que hice miCarrito:= Bag new.) entonces s voy a tener 3 referencias a unaLata en miCarrito.Si representara mi carrito de compras con un Set (o sea que hice miCarrito:=Set new.) entonces hubiese tenido un solo objeto dentro de mi coleccin. Simplemente, cuando hago el segundo miCarrito add: unaLata el Set identifica que ya tiene ese objeto en la coleccin y no lo vuelve a agregar.Colecciones ordenadasEntonces ya vimos el Set y Bag, que son colecciones sin orden. Ahora introduciremos algunas colecciones con orden.Qu quiere decir ordenadas? Que hay un elemento 1, un elemento 2, etc., al contrario de un Set o un Bag, en donde los elementos estn todos tirados. O sea, puedo acceder a los elementos de cualquier coleccin ordenada (veremos que hay varias variantes) parecido a como se accede a un Array en C o Pascal. Para eso le envo a la coleccin el mensaje at: , si quiero el cuarto elemento de miCol que es una coleccin ordenada, lo puedo pedir as:miColat:4y tengo los mensajes first y last que devuelven el primero y el ltimo.Eeeehhh pero  si tengo un Set o un Bag,  cmo accedo a los elementos de un Bag o un Set? Eso  viene ms adelante. Veamos ahora las variantes de colecciones ordenadas.La primera que les presentaremos es la OrderedCollection. Esta coleccin ordena sus elementos, y el criterio es el orden en cual fueron agregados a la coleccin. Entonces si creo mi coleccin asmiCol:=OrderedCollectionnew.miColadd:&#39;hola&#39;.miColadd:&#39;queridos&#39;.miColadd:&#39;amigos&#39;.miColadd:&#39;escandinavos&#39;.despus puedo pedirle varias cosasmiColfirst&amp;lt;-elprimero-&#39;hola&#39;miCollast&amp;lt;-elltimo-&#39;escandinavos&#39;miColat:3&amp;lt;-eltercero-&#39;amigos&#39;miColat:4&amp;lt;-elcuarto-&#39;escandinavos&#39;miColsize&amp;lt;-cantidaddeelementos-4y despus puedo seguir agregndole elementos, ante lo cual la coleccin se estiramiColadd:&#39;agrego&#39;.miColadd:&#39;cosas&#39;.miColsize&amp;lt;-cantidaddeelementosahora-6miCollast&amp;lt;-elltimoahora-&#39;cosas&#39;Luego, as como la OrderedCollection, tambin tenemos la llamada SortedCollection, que la diferencia con la primera radica en que el criterio de ordenamiento puede ser definido. Si no definimos el criterio, SortedCollection ordena los elementos por su orden natural (significa que los ordenar de menor a mayor). Dicho de otra forma, no ordena por orden de llegada, sino por comparacin entre los elementos.Si queremos ordenar los elementos de la coleccin con un criterio en particular, necesitamos pasrselo a la coleccin. La forma de hacerlo, es pasarle lo que denominamos sortBlock, que es un objeto Block (bloque).Con respecto a las colecciones que tienen orden, por ltimo veremos al viejo amigo Array. Aqu en Smalltalk tambin existe, y una de sus caractersticas es que es de tamao fijo. Para instanciar un Array, hago Array new: 6, donde 6 es la cantidad de elementos que contendr, alternativamete si conocemos los elementos de antemano pueden crearse de  forma literal (que es uno de los pocos motivo razonable para querer usar un Array en vez de otro tipo de coleccin como OrderedCollection).Los Arrays no implementan el mensaje add:, justamente porque no puedo modificar su tamao. La forma de agregarles elementos es a travs del mensaje at:put:, como por ejemplo:miVector:=Arraynew:2.miVectorat:1put:unaLata.Todas las colecciones entienden una serie de mensajes que permiten obtener distintos sabores de colecciones con los mismos elementos. Estos mensajes son de la forma as{ColeccionQueQuiero}. Vamos a un par de ejemplos para ver cmo funciona.Si tuviese una coleccin de la clase Bag, y quiero sacarle los repetidos, s que el Set no tiene repetidos, entonces tomo mi coleccin como un Set. Entonces:sinRepetidos:=miCarritoasSet.Si tuviese un array, y lo quiero convertir en una coleccin de tamao variable, podra hacer:coleccionVariable:=miVectorasOrderedCollection.Si quisiera ordenar mi carrito de compras del producto ms caro al ms barato, hara algo como:ordenadosPorPrecio:=miCarritoasSortedCollection:[:unProd:otroProd|unProdprecio&amp;gt;otroProdprecio].El mensaje asSortedCollection: recibe un parmetro que, obviamente, es un sortBlock. El sortBlock es un bloque que necesita 2 parmetros. El cdigo del bloque es un cdigo que debe devolver true o false. Para ordenar los objetos dentro de la coleccin, se evala el cdigo y si el objeto retornado es true, el primer parmetro va antes que el segundo. Si retorna false, el segundo parmetro se ubica antes que el primero.Tambin est el mensaje asSortedCollection (o sea sin el dos-puntos, o sea que no requiere parmetro) que, como dijimos antes, ordenar los elementos por el orden natural.Cul es el orden natural? Dijimos que si a una SortedCollection no le decimos cmo queremos que ordene los elementos, los ordena por el orden natural. Pero  qu puede ser este orden natural?Si estoy en el paradigma de objetos  seguro va a tener que ver con objetos y mensajes. El orden natural es el que dicta el mensaje &amp;lt;, que es binario. O sea, en una SortedCollection con orden natural el criterio es poner a elem1 antes que elem2 si el resultado de evaluar elem1 &amp;lt; elem2 es true.Claro, eso quiere decir que solamente voy a poder tener, en una SortedCollection con orden natural, objetos que entiendan el mensaje &amp;lt;. Los nmeros, los String, las fechas, todos esos entienden &amp;lt;. Pero p.ej. si quiero poner latas en una SortedCollection, no puede ser por orden natural, tengo que especificar el orden con el bloque con dos parmetros como vimos hace un ratito.Jerarqua de Colecciones (En Pharo)Aqu se provee una imagen con una jerarqua simplificada de las colecciones existentes en Pharo. Presten especial atencin a las clases explicadas en este artculo, las dems se proveen por motivos de completitud.DiccionariosPor ltimo, queremos mostrarles un sabor de coleccin que es especial. Se llama Dictionary y, como su nombre lo indica, intenta representar un diccionario. Este tipo de representacin implica tener una asociacin entre una clave y un valor.Poniendo como ejemplo, el propio diccionario. El diccionario es una asociacin entre una clave, que son cada letra del abecedario y un apartado de pginas que tienen palabras. El diccionario lleva todo una explicacin aparte, pueden profundizar ms al respecto leyendo sobre Diccionarios."

} ,

{

"title"    : "Salsa jack daniel s",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/salsa-jack-daniel-s.html",
"date"     : "",
"content"  : "Ingredientes  1 tea spoon cebolla en polvo  1 table spoon salsa tabasco  1/4 cup jack daniels  2 table spoon vinagre de vino  2 cup azucar rubia  1/4 cup agua  2 calditos de carne  2 table spoons worcestershirePasos:  Mezclar todo en una cacerola y hasta que hierva (ojo porque sube)  Dejar sobre el fuejo 10 minutos ms, a fuego bajo.  Dejar que se enfre unos minutos antes de servir.NOTA: Las medidas estn en unidades americanas:  1 tea spoon = 4.92 mililitros  1 table spoon = 14.79 mililitros  1 cup = 236.58 mililitrosNOTA2: Es importante que no se pase de fuego o se va a hacer una pasta, tipo caramelo. Para evitar eso, conviene tirar cada tanto unas gotitas sobre el mrmol, hasta ver que al enfriarse se espesa, sin endurecerse. En caso de pasarse se puede cortar con un chorro de agua fra y volver a dejar que hierva."

} ,

{

"title"    : "Scala",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/scala.html",
"date"     : "",
"content"  : "Sobre el lenguaje:  The Scala Programming Language  Scala (wikipedia)Herramientas basadas en Scala:  Play Framework  Akka  Scalatra  Lift  Scala-Test  Specs2  Scala Mock  SBT (Simple Build Tool)  Cake Pattern y Self Type Annotations  Twitter, Foursquare, Linkedin"

} ,

{

} ,

{

"title"    : "Self   pseudovariable",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/self---pseudovariable.html",
"date"     : "",
"content"  : "**self** es una pseudovariable que **siempre** referencia al objeto receptor del mensaje que hizo que se evale el mtodo que estamos analizando en un momento dado. Ten en cuenta que no es posible asignar self, esta referencia es manejada por la mquina virtual, no por el programador.Sirve para que el objeto receptor pueda mandarse un mensaje a s mismo dentro de la implementacin del mtodo que se est ejecutando o para que, al mandar un mensaje a otro objeto que necesite colaborar con l, pueda pasarse a s mismo por parmetro.Ejemplo en Wollok:Si tenemos este envo de mensaje:`pepita.vola(10)`y pepita est definida de la siguiente forma:```object pepita {  var energia = 100    method energia(){    return energia  }    method energia(nuevaEnergia){    energia = nuevaEnergia  }    methodvola(unosKms){  self.energia(self.energia()-unosKms)  }}```Cuando se le mande el mensaje para volar 10 kilmetros a pepita, se va a ejecutar el mtodo que enva los mensajes para obtener y modificar la energa a self, o sea que pepita va a ser quien reciba ambos mensajes.Como se mencion antes, en cualquier mtodo es perfctamente vlido parametrizarse a uno mismo, por ejemplo:```object pepita {methodteEntrena(unEntrenador){self.come(50)unEntrenador.entrenaA(self)}}```Los mismos ejemplos anteriores, pero en Smalltalk:Envo de mensaje inicial:`pepitavola:10.`Mtodo que se ejecutara:```&gt;&gt; vola:unosKmsselfenergia:selfenergia-unosKms```Parametrizacin de self:```&gt;&gt; teEntrena:unEntrenadorselfcome:50.unEntrenadorentrenaA:self.```"

} ,

{

"title"    : "Self",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/self.html",
"date"     : "",
"content"  : "[self - pseudovariable](self---pseudovariable.html)Self - Lenguaje de programacin:-   [Self (Wikipedia)](http://en.wikipedia.org/wiki/Self_(programming_language))-   [Self - Sitio oficial](http://www.selflanguage.org/)"

} ,

{

"title"    : "Sintaxis de smalltalk",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/sintaxis-de-smalltalk.html",
"date"     : "",
"content"  : "La sintaxis de Smalltalk es bastante particular, pero sigue unas pocas reglas generales fciles de aprender:La regla principal es que lo primero de la sentencia es un objeto seguido por el mensaje que le queremos mandar, el cual podra o no recibir parmetros. Por ejemplo:`pepitaenergia`El objeto receptor ser aquel referenciado por la variable llamada pepita, al cual se le est mandando el mensaje energia que no recibe parmetros.`4+5`El objeto receptor es el nmero 4 y recibe el mensaje + con el parmetro 5.`pepitavola:10`El objeto receptor ser aquel referenciado por la variable llamada pepita, al cual se le est mandando el mensaje vola: con el parmetro 10. Ms sobre este tema en [Tipos de mensajes en Smalltalk](tipos-de-mensajes-en-smalltalk.html).Pero qu pasa con los elementos del lenguaje que no son envos de mensajes?Las sentencias se separan con un punto (es separador, no terminador, por eso no siempre hace falta escribirlo)`pepitavola:20.``pepitaenergia`Este cdigo primero hace que pepita vuele 20 y luego consulta su energia. En cambio esto...`pepitavola:20``pepitaenergia`... va a tratar de mandarle el mensaje pepita al nmero 20 (lo cual claramente no es lo que queramos) y como no va a entender ese mensaje, va a tirar un error.Para asignar una variable se usa := que **no es un mensaje a un objeto**, en el mtodo vola: de pepita (que tiene un atributo energia) podramos tener lo siguiente:`vola:metrosAVolar``energia:=energia-40-metrosAVolar`Lo que va a suceder es que la referencia llamada energia va a modificarse, de modo que su nuevo valor ser el resultado de la expresin energia - 40 - metrosAVolar. Slo se puede tener una referencia a la izquierda del :=, es lo nico que puede ser asignado.Para retornar el valor de una expresin en un mtodo se usa el circunflejo ^, podramos definirle el siguiente mtodo a pepita para retornar un booleano que diga si pepita tiene hambre`tenesHambre``^energia&lt;20`El retorno corta la ejecucin del mtodo, motivo por el cual no tiene sentido tener otra sentencia luego de ^ energia &amp;lt; 20, ya que nunca se va a evaluar.En caso de que querramos definir variables locales para un mtodo, se usan pipes | como se explica en [Variables locales en mtodos](variables-locales-en-metodos.html)Y los parntesis se usan para delimitar partes de una expresin, por ejemplo para indicar dnde comienza y dnde termina un envo de mensajes para pasar por parmetro a otro mensaje el resultado de dicha evaluacin. Sabiendo bien cmo trabaja la [precedencia](precedencia-de-mensajes.html) es posible ahorrarse muchos parntesis innecesarios haciendo que sea ms fcil de leer.Importante! No confundir parntesis ( ) con corchetes &amp;#92;[ &amp;#92;]. Los corchetes se usan para construir [bloques](bloques.html)."

} ,

{

"title"    : "Smalltalk",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/smalltalk.html",
"date"     : "",
"content"  : "Algunos links tiles para los que quieran conocer un poco ms sobre uno de los lenguajes ms viejitos:- [Smalltalk (Wikipedia)](http://en.wikipedia.org/wiki/Smalltalk)- [Smalltalk.org (one Smalltalk- related page to rule them all)](http://www.smalltalk.org/)Sobre (algunos de) los distintos sabores de Smalltalk:- [Pharo Project](http://www.pharo-project.org/home)- [Squeak](http://www.squeak.org/)- [GNU Smalltalk](http://smalltalk.gnu.org/)- [(Instantiations) VisualAge Smalltalk](http://www.instantiations.com/products/vasmalltalk/index.html)- [Strongtalk](http://en.wikipedia.org/wiki/Strongtalk)- [Cincom (ObjectStudio/ VisualWorks)](http://www.cincomsmalltalk.com/main/products/objectstudio/)Herramientas basadas en Smalltalk:- [Amber Smalltalk (JavaScript integration)](http://amber-lang.net/)- [Athens (a graphic library running on Pharo)](https://github.com/matthias-springer/amber-athens)- [NativeBoost](http://www.esug.org/wiki/pier/Conferences/2011/Schedule-And-Talks/Native-boost)- [tODE (the Object (centered) Development Environment)](http://code.google.com/p/tode/)- [Seaside](http://www.seaside.st/)Y la comunidad de Smalltalk:- [ESUG (European Smalltalk User Group)](http://www.esug.org/wiki/)- [FAST (Fundacin Argentina de Smalltalk](http://www.fast.org.ar/)"

} ,

{

"title"    : "Sobre el uso del igual en prolog",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/sobre-el-uso-del-igual-----en-prolog.html",
"date"     : "",
"content"  : "### Descripcin del problemaVamos a estudiar ste caso:-  &quot;Dos personas son hermanastros cuando tienen igual padre y diferente madre&quot;### El is slo se usa para cuentas, las cuentas slo se hacen con issta solucin funciona, pero es **conceptualmente errnea**:```Prologhermanastros(Hermano1,Hermano2):-padre(Hermano1,Padre1),padre(Hermano2,Padre2),madre(Hermano1,Madre1),madre(Hermano2,Madre2),Padre1 is Padre2,  %%% Ac est el errorMadre1&amp;#92;=Madre2.```**Si el is slo sirve para cuentas,**-   No es conceptualmente correcto hacer ` is Variable.`-   No es conceptualmente correcto hacer ` is 4.`Si bien funciona, debemos usar las herramientas para lo que corresponde. Cuando una persona lee un is, espera cuentas. Debemos usar las abstracciones que comuniquen correctamente nuestras ideas.**Si las cuentas slo se hacen con is,**-  Esto ni siquiera funciona: `Variable = 5 * 3.`.-  Esto ni siquiera funciona: `factorial(N+1,Fac).` (Hay una cuenta, y falta un is!)La razn por la que `Variable = 5 * 3.` no funciona es que el `=` es &quot;tonto&quot;, se fija que a izquierda y a derecha haya _exactamente lo mismo_. Ver [aritmtica en prolog](aritmetica-en-prolog.html).La razn por la que `factorial(N+1,Fac).` no funciona es que la unificacin que realiza prolog de valor con variable es igual de &quot;tonta&quot; que el `=`. Salvo que yo ponga un `is`, no se va a resolver ninguna cuenta.**Entonces:**-   **S** vale `Resultado is Variable + 1.` (Siempre que `Variable` venga unificada).Ms abajo la solucin certera. ### Variable = OtraVariablesta solucin funciona, pero es **conceptualmente errnea**:```Prologhermanastros(Hermano1,Hermano2):-padre(Hermano1,Padre1),padre(Hermano2,Padre2),madre(Hermano1,Madre1),madre(Hermano2,Madre2),Padre1 = Padre2,  %%% Ac est el errorMadre1&amp;#92;=Madre2.```**Por qu est mal?** Porque tiene cierta imperatividad, en donde nosotros estamos forzando a mano que los padres sean iguales, y que las madres sean diferentes.La idea de *verificacin* que nos ofrece Lgico nos permite representar una igualdad de manera mucho ms sencilla, ms directa. Sabiendo que Prolog *considera cierta una consulta si sus variables matchean, y falsas si no*, podemos hacer las cosas ms declarativas:Si el padre *es el mismo*, entonces, *que sea la misma variable*. ste cdigo funciona, y es **conceptualmente correcto**:```Prologhermanastros(Hermano1,Hermano2):-padre(Hermano1,Padre), %%% Usamos variable Padrepadre(Hermano2,Padre), %%% Usamos misma variable Padremadre(Hermano1,Madre1),madre(Hermano2,Madre2),Madre1&amp;#92;=Madre2.```As se aprovechan mejor las herramientas mencionadas, y redujimos un poco la imperatividad.*Que dos variables tengan el mismo nombre, es una restriccin implcita de igualdad*Por otro lado, en el caso de las variables `Madre1` y `Madre2`, como *las variables con nombres diferentes no representan una restriccin de diferencia*, tenemos que forzar dicha restriccin con el `&amp;#92;=`.### Variable = individuoTomemos el siguiente problema: &quot;Un instrumento suena lindo si es de cuerda y est afinado&quot;. Solucin:```PrologsuenaLindo(Instrumento):-tipo(Instrumento,Tipo), %%% Pido el tipoTipo = cuerda,          %%% comparo con cuerda.estaAfinado(Instrumento).```Eso funciona, pero est **conceptualmente mal**.Por qu? Veamos:-   **La unificacin de una variable se da una sola vez en la ejecucin.**Eso significa que, en un programa en lgico, los valores de las variables no cambian con el tiempo (una vez unificadas). En nuestro caso, una vez unificado con `cuerda`, la variable `Tipo` siempre es `cuerda`.-   **La unificacin se da para todas las ocurrencias de la misma, e instantneamente**Eso significa que, en un programa en lgico, la variable &quot;vale&quot; lo mismo en cualquier parte de la regla. En nuestro caso, al unificarse `Tipo` con algn tipo en la 2da lnea, eso &quot;llena&quot; la variable automticamente en la 3era lnea. Y no puede cambiar el valor!En consecuencia, decir `Tipo = cuerda` es *exactamente lo mismo* que escribir `cuerda` en todos los lugares donde escribimos `Tipo`. La solucin correcta:```PrologsuenaLindo(Instrumento):-tipo(Instrumento,`cuerda`),estaAfinado(Instrumento).```Es muy comn ver este tipo de errores en predicados polimrficos y con functores. sto funciona, pero est conceptualmente mal:```Prologpotencia(Habilidad,Potencia):-Habilidad = velocista(VelMax),Potencia = VelMax.```sta es la forma **correcta**:```Prologpotencia(velocista(VelMax),VelMax).```### ConclusinEl igual es necesario en contados casos. La mayora de las veces uno se puede arreglar con la metfora de identidad de lgico, y con un poquito de unificacin y pattern matching.Usemos con criterio las herramientas y conceptos que nos da el paradigma."

} ,

{

"title"    : "Super",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/super.html",
"date"     : "",
"content"  : "**super** es una [pseudovariable](pseudovariable.html) muy parecida a [self](self.html).**super** referencia (apunta) al objeto receptor del mensaje del mtodo que estamos analizando en un momento dado al igual que **self**. La diferencia entre **self** y **super** es que **super** afecta al [ method lookup](paradigma-de-objetos---method-lookup.html)Problema que resuelve---------------------Sin la existencia de super tendramos problemas para resolver ciertos problemas, por ejemplo si tenemos la siguiente jerarqua de clases `A  B`:```Smalltalk#A&gt;&gt;m&quot;lgicadefinidaporAparacuandoserecibeelmensajem&quot;^&#39;hola&#39;#B&gt;&gt;m&quot;queremosusarlalgicaquedefineAyademshacerotracosa&quot;^self m,&#39;mundo&#39;```Si a una instancia de B le mandamos el mensaje m ejecutar el mtodo m definido en B y en su definicin se manda a s mismo m, con lo cual se ejecuta ese mismo mtodo (no el de A) y as indefinidamente. Para solucionar este problema podemos usar super.```Smalltalk#A&gt;&gt;m&quot;lgicadefinidaporAparacuandoserecibeelmensajem&quot;^&#39;hola&#39;#B&gt;&gt;m&quot;queremosusarlalgicaquedefineAyademshacerotracosa&quot;^super m,&#39;mundo&#39;```Cuando en un mtodo se manda un mensaje a super el method lookup se ve modificado empezando la bsqueda del mtodo correspondiente a ese mensaje en la clase inmediatamente superior a donde est definido ese mtodo, en vez de en la clase de la cual es instancia el objeto. De esta forma podemos [redefinir](redefinicion.html) un mtodo de la superclase para agregar lgica nueva y a su vez reutilizar el comportamiento heredado.Supongamos que tenemos la siguiente jerarqua de clases `A  B  C` que definen:```Smalltalk#A&gt;&gt;m^selfn+4&gt;&gt;n^1#B&gt;&gt;m^superm+5#C&gt;&gt;n^3```Sabiendo que tanto **self** como **super** apuntan a **i**, o sea, ambos apuntan al objeto receptor del mensaje, analicemos lo que pasa si evaluamos lo siguiente:```Smalltalki:=Cnew.im.```Cuando i recibe el mensaje m busca un mtodo en su clase C con el mismo nombre y no lo encuentra, con lo cual lo sigue buscando en la superclase de C, que es B. All existe una definicin para ejecutar y vemos que al objeto referenciado por **super** (que es i) se le manda el mensaje m, haciendo que el method lookup para ese mensaje comience en la clase A (superclase de donde est definido el mtodo). La definicin de &amp;#92;#A&amp;gt;&amp;gt;m enva el mensaje n al objeto referenciado por **self** (que tambin es i), pero el method lookup para encontrar el mtodo n comienza desde la clase de la cual es instancia i (o sea en C).El resultado final del clculo sera: 3 + 4 + 5Si le mandramos el mensaje m a una instancia de B el resultado sera: 1 + 4 + 5, ya que se ejecutara &amp;#92;#B&amp;gt;&amp;gt;m que hace `self` `n`, se empieza a buscar n en B, no se encuentra, se lo busca en A y retorna 1.Resumen--------   Si el receptor del mensaje **NO** es **super**, se busca en la clase de la cual es instancia el objeto un mtodo con el mismo nombre del mensaje.-   Si el receptor del mensaje ES **super** entonces se busca la definicin en la superclase de la clase en donde est el mtodo que contiene a la pseudovariable **super**.Conclusin----------*super **slo** debe usarse para **redefinir** mtodos que envan el **mismo mensaje** que se est definiendo, para **evitar loops** que se provocaran en el method lookup usando self*Malos usos de super-------------------### Caso 1Supongamos que tenemos este cdigo para la jerarqua `A  B` (O sea B es subclase de A)Cdigo errneo:```Smalltalk#A&gt;&gt;m1&quot;hacealgo&quot;#B&gt;&gt;m1superm1```Esta redefinicin usando super es innecesaria, ya que si a una instancia de B se le manda m1 el mismo method lookup buscar la definicin en A en caso de no encontrarla en B. Es adems incorrecta, porque al redefinir un mtodo semnticamente estoy indicando que &quot;hago las cosas distintas a arriba&quot;, cuando ste no es el caso.Cdigo correcto:```Smalltalk#A&gt;&gt;m1&quot;hacealgo&quot;```No hace falta escribir nada, B ya entiende el mensaje m1!### Caso 2Otro error muy comn (y muy grave) es usar super para mandar un mensaje con nombre diferente al mtodo que se est definiendo: (C hereda de B, B hereda de A)Cdigo errneo:```Smalltalk#A&gt;&gt;m1^1#B&gt;&gt;m2^super m1+5#C&gt;&gt;m1^3```En este ejemplo se puede ver que se manda el mensaje m1 en B usando super en vez de self en el mtodo m2. Esto es un problema ya que se ignora el comportamiento que puedan tener para m1 las subclases de B as como una posible implementacin futura de m1 para B. Este mal uso de super suele llevar a un comportamiento inesperado del sistema que puede no resultar en un error como sucede en este caso (retornara 6 en vez de 8), con lo cual es muy difcil de detectar y corregir.Cdigo correcto:```Smalltalk#A&gt;&gt;m1^1#B&gt;&gt;m2^self m1+5#C&gt;&gt;m1^3```Si yo soy un B, quiero hacer m1 como un B! Siempre voy a querer comportarme como me corresponde a m. Que ese mtodo est definido en la superclase es *una coincidencia*. Si yo quiero hacer m1, entonces hago self m1. (Releer la conclusin)"

} ,

{

"title"    : "Instalacion de Entorno Svelte",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/svelte-instalacion.html",
"date"     : "",
"content"  : "# EntornoEs necesario que instales las siguientes herramientas, en este orden:- Si ests en entorno Windows te recomendamos instalarte [Git Bash](https://gitforwindows.org/)- Seguimos con [NodeJS](https://nodejs.org/en/).  - Si ests en entorno Linux/Mac recomendamos que descargues Node desde [nvm (Node Version Manager)](https://github.com/nvm-sh/nvm) y luego instales la versin lts/jod: `nvm install lts/jod` que es la que recomendaremos para 2025  - Si ests en Windows instalate la versin actual- Luego [NPM (Node Package Manager)](https://www.npmjs.com/), con el que vamos a hacer los builds de nuestras aplicaciones.  - Para familiarizarte con el manejo de dependencias, te dejamos [este artculo](npm-dependencias.html)    - Y como en realidad vamos a usar Yarn como manejador de dependencias, hay que instalarlo con npm```bashnpm install --global yarn```# Editor de Texto## Visual Studio Code- El editor de texto que vamos a soportar en la cursada es [**Visual Studio Code**](https://code.visualstudio.com/) (hay [una versin portable](https://sourceforge.net/projects/vscode-portable/) si ests en una mquina sin privilegios de administrador).Dentro de Visual Studio Code, te recomendamos que crees un perfil vaco y lo asocies a tus nuevos proyectos Svelte (pods ver [cmo se trabaja con perfiles en VSCode en este video](https://www.youtube.com/watch?v=_2F2Zt-_tUA). Tambin te dejamos [este tutorial muy piola - en ingls](https://www.youtube.com/watch?v=QjvvqR9KyVo) y [la documentacin oficial](https://code.visualstudio.com/docs/editor/profiles)).## Instalacin### Importar extensionesPods importar [este archivo que trae todas las extensiones para Svelte](https://github.com/algo3-unsam/proyecto-base-tp/blob/master/Svelte.code-profile)### Instalacin manualO si no, pods instalar las extensiones del Visual Studio Code manualmente. Para 2025 son los siguientes:### Necesarios ###- **Svelte for VS Code (Svelte)**: plugin para soportar Svelte en VSCode- **Vitest (Vitest)**: plugin para poder ejecutar los tests de frontend en el VSCode- **ESLint (Microsoft)**: para disparar el linter de la sintaxis de TS- **Github Actions (Github)**: te ayuda con el archivo de configuracin de CI para Github Actions- **Git Extension Pack - Don Jayamanne**: utilidades para el trabajo con Git- **Playwright Test for VSCode (Microsoft)**: plugin para ejecutar tests e2e de Playwright&gt; Evit la extensin `Svelte 3 Snippets` porque te sugerir cdigo desactualizado### Opcionales ###- **Svelte snippets**: autocompletado de cdigo para Svelte- **Svelte Dark**: tema oscuro de Svelte- **Playwright Snippets (Nitay Neeman)**: snippets de cdigo que expanden tests e2e de Playwright# Aprendiendo TypescriptTypescript es el lenguaje de programacin base en el que vamos a trabajar. Tranquilo, es muy similar a los lenguajes orientados a objetos en los que ya trabajaste. Para iniciarte o para hacer consultas te dejamos estos links:- [Documentacin oficial de Typescript](https://www.typescriptlang.org/docs/): tiene una intro de 5 minutos, otros tutoriales cortos y el Handbook para sacarse dudas- [Aprendiendo Typescript en 30 minutos](https://tutorialzine.com/2016/07/learn-typescript-in-30-minutes): muy buen tutorial para comenzar explicando los conceptos ms salientes- El [cheatsheet](https://rmolinamir.github.io/typescript-cheatsheet/) o gua rpida para tener a mano mientras programan- **Tips**: [Typing destructured objects parameters](https://mariusschulz.com/blog/typing-destructured-object-parameters-in-typescript)# Crear un proyecto Svelte desde cero```bashnpx sv create proyecto-svelte  Welcome to the Svelte CLI! (v0.6.5)  Which template would you like?  SvelteKit minimal  Add type checking with Typescript?  Yes, using Typescript syntax  Project created  What would you like to add to your project? (use arrow keys / space bar)   prettier   eslint   vitest   playwright (browser testing - https://playwright.dev)   tailwindcss   drizzle   lucia   mdsvex   paraglide   storybook  Which package manager do you want to install dependencies with?  yarn  Successfully setup add-ons  Installing dependencies with yarn...```Repasamos las opciones- Sveltekit minimal como biblioteca- usar Typescript (sin JSDoc)- agregamos eslint, vitest y playwright. Vitest es para hacer tests de frontend y Playwright para tests e2e- yarn como manejador de dependencias (es un poco ms rpido que npm)## Archivo de configuracin para Visual Studio CodeTe recomendamos que dentro del proyecto crees una carpeta `.vscode` y dentro un archivo `settings.json` que tenga este contenido:```js{    &quot;editor.codeActionsOnSave&quot;: {        &quot;source.fixAll.eslint&quot;: &quot;explicit&quot;,        &quot;source.removeUnusedImports&quot;: &quot;explicit&quot;,    },    &quot;editor.defaultFormatter&quot;: &quot;dbaeumer.vscode-eslint&quot;,    &quot;editor.formatOnSave&quot;: true,    &quot;editor.tabSize&quot;: 2,    &quot;eslint.validate&quot;: [        &quot;javascript&quot;,        &quot;javascriptreact&quot;,        &quot;typescript&quot;    ],    &quot;[svelte]&quot;: {        &quot;editor.defaultFormatter&quot;: &quot;svelte.svelte-vscode&quot;    }}```## Configuracin para TypescriptEl archivo `tsconfig.json` define cmo vamos a utilizar el intrprete de Typescript. Es conveniente agregar al final estas lneas:```ts    &quot;compilerOptions&quot;: {        ...,        &quot;module&quot;: &quot;ES2015&quot;,        &quot;lib&quot;: [            &quot;ES2015&quot;        ],        &quot;moduleResolution&quot;: ...```## Cambios al package.jsonDentro del archivo `package.json` del raz de tu proyecto hay que agregar `lint:fix` (para poder corregir errores simples del linter) y `test:ci` (para que al ejecutar el build de Github Actions tengas la cobertura):```js  &quot;scripts&quot;: {        &quot;lint&quot;: &quot;eslint src&quot;,        &quot;lint:fix&quot;: &quot;eslint src --fix&quot;,        &quot;test:unit&quot;: ...,        &quot;test:ci&quot;: &quot;npm run test:unit -- --run --coverage&quot;  },```Cuando agregues los tests e2e pods definir estos scripts:```js  &quot;scripts&quot;: {    ...,        &quot;test:e2e&quot;: &quot;playwright test --ui&quot;,        &quot;test&quot;: &quot;npm run test:e2e&quot;,        &quot;test:ci&quot;: &quot;npm run test:unit -- --run --coverage &amp;&amp; playwright test&quot;,    ...,    }```Con eso vas a correr tanto los test escritos con Vitest como los de Playwright (los veremos ms adelante).## Cambios al archivo de configuracin de SvelteEs conveniente hacer el siguiente cambio al archivo `svelte.config.js`:```ts...const config = {    // agregamos `{ script: true } al preprocesador para tener acceso a los syntactic sugar de TS    preprocess: vitePreprocess({ script: true }),    //```## Dependencias adicionalesEjecut este comando para agregar las siguientes dependencias:```bashyarn add @testing-library/jest-dom @testing-library/svelte @testing-library/user-event @types/eslint @vitest/coverage-v8 jsdom```Para agregar dependencias de los tests e2e:```bashyarn add @playwright/test```## Archivo .nvmrcTener un archivo `.nvmrc` es conveniente si todo el equipo trabaja con NVM (el versionador de Node). El contenido especifica qu versin de Node vamos a utilizar:```bashlts/jod```## Ejemplo de .gitignoreAgregamos estas lneas al archivo `.gitignore`:```bashvite.config.ts.timestamp-*# ... empezamos ac ...# Coveragecoverage# VSCode.history# Playwrighttest-results```## Configuracin del linterCada vez que grabamos un archivo se ejecuta automticamente el proceso que analiza el cdigo y diagnostica errores de sintaxis y oportunidades de mejora, proceso que se conoce como **Linter**. El archivo `eslint.config.js` debe tener el siguiente contenido:```js// eslint.config.cjs// import eslintPluginPrettierRecommended from &#39;eslint-plugin-prettier/recommended&#39;import eslintPluginSvelte from &#39;eslint-plugin-svelte&#39;import js from &#39;@eslint/js&#39;import svelteParser from &#39;svelte-eslint-parser&#39;import tsEslint from &#39;typescript-eslint&#39;import tsParser from &#39;@typescript-eslint/parser&#39;import globals from &#39;globals&#39;export default [  js.configs.recommended,  ...tsEslint.configs.strict,  ...eslintPluginSvelte.configs[&#39;flat/recommended&#39;],  {    languageOptions: {      globals: {        ...globals.browser,      },    },    rules: {      quotes: [        &#39;warn&#39;,        &#39;single&#39;,        { avoidEscape: true, allowTemplateLiterals: true },      ],      semi: [&#39;error&#39;, &#39;never&#39;],      indent: [&#39;warn&#39;, 2],      &#39;no-extra-parens&#39;: &#39;warn&#39;,      &#39;no-nested-ternary&#39;: &#39;error&#39;,      &#39;linebreak-style&#39;: [&#39;error&#39;, &#39;unix&#39;],      &#39;no-cond-assign&#39;: [&#39;error&#39;, &#39;always&#39;],      &#39;no-console&#39;: &#39;error&#39;,      &#39;@typescript-eslint/sort-type-constituents&#39;: &#39;error&#39;,    },  },  {    files: [&#39;**/*.svelte&#39;],    languageOptions: {      parser: svelteParser,      parserOptions: {        parser: tsParser,      },    },    rules: {      &#39;svelte/no-target-blank&#39;: &#39;error&#39;,      &#39;svelte/no-at-debug-tags&#39;: &#39;error&#39;,      &#39;svelte/no-reactive-functions&#39;: &#39;error&#39;,      &#39;svelte/no-reactive-literals&#39;: &#39;error&#39;,      &#39;@/semi&#39;: [&#39;error&#39;, &#39;never&#39;],      &#39;@/quotes&#39;: [&#39;warn&#39;, &#39;single&#39;],      &#39;@/indent&#39;: [&#39;warn&#39;, 2],    }  }]```## Configuracin de prettierIndirectamente el plugin de Svelte para VSCode utiliza [**Prettier**](https://prettier.io/), un formateador de cdigo. Agregamos entonces un archivo `.prettierrc` con el siguiente contenido:```js{    &quot;useTabs&quot;: false,    &quot;singleQuote&quot;: true,    &quot;tabWidth&quot;: 2,    &quot;semi&quot;: false,    &quot;trailingComma&quot;: &quot;none&quot;,    &quot;printWidth&quot;: 100,    &quot;plugins&quot;: [        &quot;prettier-plugin-svelte&quot;    ],    &quot;overrides&quot;: [        {            &quot;files&quot;: &quot;*.svelte&quot;,            &quot;options&quot;: {                &quot;parser&quot;: &quot;svelte&quot;            }        }    ]}```## Ejecutar el linterSi queremos ejecutar el proceso que corrige los errores del linter podemos hacerlo desde la lnea de comando:```bashyarn run lint:fix```Si al ejecutar este comando o `yarn run lint` te aparece este mensaje de error```bashTypeError: Error while loading rule &#39;@typescript-eslint/no-unused-expressions&#39;: Cannot read properties of undefined (reading &#39;allowShortCircuit&#39;)```la solucin es desinstalar e instalar la versin 8.15.0  superior de typescript-eslint:```bashyarn remove typescript-eslintyarn add typescript-eslint```## Vitest: configuracin del archivoEl archivo `vite.config.ts` tiene que incorporar el plugin de testing de Svelte. Te dejamos el archivo completo:```tsimport { defineConfig } from &#39;vitest/config&#39;import { svelteTesting } from &#39;@testing-library/svelte/vite&#39;import { sveltekit } from &#39;@sveltejs/kit/vite&#39;export default defineConfig({    plugins: [sveltekit(), svelteTesting()],    test: {        include: [&#39;src/**/*.{test,spec}.{js,ts}&#39;],        globals: true,        environment: &#39;jsdom&#39;,        setupFiles: [&#39;./vitest-setup.js&#39;],        coverage: {            include: [&#39;src&#39;]        }    }})```## Ejemplo de un archivo para Github ActionsTe dejamos [este archivo de ejemplo](./build_svelte.yml) que tens que guardar en `.github/workflows/build.yml`. Descargalo y reemplaz `XXXXXXXXX` por el nombre de la carpeta donde est tu proyecto. Despus veremos cmo agregar para que ejecuten los tests e2e.## Cmo configurar los badges en tu README- Para agregar el badge del build de Github Actions, segu [estas instrucciones](https://docs.github.com/es/actions/managing-workflow-runs/adding-a-workflow-status-badge)- Para agregar el badge del porcentaje de cobertura, tens que agregar la imagen que genera el mismo build de Github Actions (reemplazando `XXXXXXX` por el nombre de la carpeta donde est tu proyecto):```md![Coverage](./badges/XXXXXXX/coverage.svg)```## Levantar la appPara levantar la aplicacin Svelte ejecuts```bashyarn run dev```Luego en un navegador peds la siguiente url: `http://localhost:5173`.## Correr los tests de un proyectoPara ejecutar los tests de un proyecto, te posicions en el directorio raz y ejecuts desde la consola```bashyarn test```"

} ,

{

"title"    : "Tecnicas avanzadas de programacion",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/tecnicas-avanzadas-de-programacion.html",
"date"     : "",
"content"  : "Tcnicas Avanzadas de Programacin - Contenidos actuales--------------------------------------------------------### Modelado en objetos avanzado-   [Traits](traits.html)-   [Mixins](mixins.html)-   [Bloques como forma de modelar comportamiento](bloques-como-forma-de-modelar-comportamiento.html)-   [Modelar comportamiento como objetos](modelar-comportamiento-como-objetos.html)### Tipado dinmico vs esttico en objetos-   [Esquemas de Tipado](esquemas-de-tipado.html)-   [Binding, polimorfismo y sobrecarga](binding--polimorfismo-y-sobrecarga.html)### Metaprogramacin-   [Metaprogramacin](metaprogramacion.html)-   [Reflection: Introspection y Self-modification](reflection.html)-   [Uso de features de lenguajes dinmicos](uso-de-features-de-lenguajes-dinamicos.html)-   [Method missing](method-missing.html)### Declaratividad y DSLs-   [Declaratividad](declaratividad.html)-   [DSL](dsl.html)-   [Builder](builder.html)-   [Tiempo de creacin vs tiempo de uso](tiempo-de-creacion-vs-tiempo-de-uso.html)Tcnicas Avanzadas de Programacin - Contenidos heredados---------------------------------------------------------La materia cambi mucho sus contenidos en estos aos, sin embargo el material terico sigue siendo til aunque no est en la planificacin actual.### Material terico-   [Manejo de Errores](manejo-de-errores.html)-   [Ciclo de vida de un objeto](ciclo-de-vida-de-un-objeto.html)-   [Bibliografa](bibliografia-sobre-programacion-avanzada-orientada-a-objetos.html)-   [Double dispatch](double-dispatch.html)-   [Refactoring](refactoring.html)Arquitecturas--------------   [Arquitecturas](arquitecturas.html)-   [Home](home.html)### Tutoriales-   [Resolver problemas de dependencias maven dentro de Eclipse](resolver-problemas-de-dependencias-maven-dentro-de-eclipse.html)-   Documentacin de [Arena MVC](arena-mvc.html)### Consejos prcticos-   [Tips para la resolucin de un parcial de TADP](tips-para-la-resolucion-de-un-parcial-de-tadp.html)### Otros-   [Frases teadepeanas](frases-teadepeanas.html)Apuntes para revisar-   -   [Paper about Autofetch presented at ECOOP 2006](http://www.cs.utexas.edu/~wcook/papers/AutoFetch/autofetch.pdf)Una lectura interesante-   "

} ,

{

"title"    : "Template method",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/template-method.html",
"date"     : "",
"content"  : "Para calcular el precio de un producto, tenemos que considerar-   todos los productos tienen un precio de venta base-   los productos importados tienen un cargo extra determinado por el peso (300 $ x cada kilo)-   a los productos nacionales se les suma un adicional del 10% de impuestos internos-   y finalmente otros productos especiales incorporan un extra de 5 $ si el producto pesa ms de 4 kg.Si elegimos modelar los productos mediante una jerarqua de subclasificacin, tenemos-   Una superclase Producto, con 3 subclases    -   ProductoImportado    -   ProductoNacional    -   ProductoEspecialDnde ubicamos la responsabilidad de determinar el precio de un producto?Pensamos primero en cmo resolver el precio de venta de un producto Importado `metodoprecioVenta()``precioVentaBase+(300*peso)``fin`Y el producto nacional `metodoprecioVenta()``precioVentaBase+precioVentaBase*0.10``fin`El **template method** es una tcnica que permite agrupar algoritmos similares, donde-   la superclase define cmo es el algoritmo principal-   cada subclase define comportamiento especfico de una parte de ese algoritmoEntonces en la clase producto definimos que el precio de venta sale del precio de venta base, y le pedimos a cada subclase que implemente el costo adicional:`metodoprecioVenta()``precioVentaBase+selfcostoAdicional``fin`En lenguajes con chequeo de tipos, Producto debe tener definido un costoAdicional en su interfaz. Esto se puede implementar-   con un comportamiento default (por ejemplo, haciendo que costoAdicional devuelva 0)-   o bien con un **mtodo abstracto** (abstract method), que obliga a redefinir el mtodo en las subclasesVemos la implementacin en xtend:`defdoubleprecioVenta(){``precioVentaBase+this.costoAdicional``}``defdoublecostoAdicional()//abstractmethod`En lenguajes con tipado dinmico se puede definir un mtodo que explcitamente devuelva error para obligar a las subclases a implementar cada operacin primitiva. Vemos el ejemplo en Smalltalk:`precioVenta``^precioVentaBase+selfcostoAdicional``costoAdicional``selfsubclassResponsibility`"

} ,

{

"title"    : "Testeo unitario avanzado",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/testeo-unitario-avanzado.html",
"date"     : "",
"content"  : "Este artculo presenta algunas guas para desarrollar los casos de prueba, considerando que ya tienen una base de testeo unitario automatizado. Si ests buscando un apunte, te recomendamos el siguiente [apunte de Testing](https://docs.google.com/document/d/1zj-H_qPbUDvWsWhV2YLaPsnrI0MIkCuoeK_ilzSnxVI/edit?usp=sharing).Por otra parte, aqu explicamos la mecnica utilizando JUnit 5 como framework de testeo, si ests buscando una variante al estilo XSpec, como Kotest, pods ver [esta pgina](kotest-testeo-unitario-avanzado.html).# EjemploUn sistema de seguros de automotor define en qu casos se puede pagar un siniestro:- para los clientes normales, si no son morosos (la deuda debe ser 0)- para las flotas de autos, se soporta una deuda de hasta $ 10.000 si el cliente tiene ms de 5 vehculos  hasta $ 5.000 en caso contrario## Definiendo los escenariosEn base al ejemplo anterior, podemos considerar los siguientes escenarios:- un cliente normal moroso: si debe $ 1  $ 50.000 no nos importa, porque est en la misma [clase de equivalencia](https://es.wikipedia.org/wiki/Clase_de_equivalencia)- una flota con menos de 5 autos ( 5 autos) =&gt; seran &quot;pocos&quot; autos- una flota con ms de 5 autos =&gt; seran &quot;muchos&quot; autosElegimos cuntos autos en base al **valor lmite**: como a partir de los seis autos se considera mucho y menos de 6 son &quot;pocos&quot; autos, 6 es el valor de una flota con muchos autos, 5 es el valor de una flota con pocos autos.## Estructura de los testsLa estructura que tienen los tests en base a los escenarios propuestos podra ser:```dado un cliente normalque es moroso: no puede cobrar un siniestroque no es moroso: puede cobrar un siniestrodado un cliente de flota con muchos autos (6 autos)si el cliente debe ms de $ 10.000 no puede cobrar un siniestrosi el cliente debe $ 10.000 o menos, puede cobrar un siniestrodado un cliente de flota con pocos autos (5 autos)si el cliente debe ms de $ 5.000 no puede cobrar un siniestrosi el cliente debe $ 5.000 o menos puede cobrar un siniestro```## Definiendo las clases y las variables de los testsNecesitamos- un cliente normal- una flota de 6 autos- otra flota de 5 autosa los que podemos configurar diferentes grados de deuda. Podemos seguir algunas recomendaciones adicionales:### Agrupar los escenarios en clasesCuntas clases necesitamos para implementar los casos de prueba? Podramos considerar una clase sola para todos los tests, o bien tener dos clases: una para clientes normales y otra para clientes de flota, o bien podramos tener una clase para cada uno de los escenarios que planteamos ms arriba (cliente normal moroso, cliente que no debe nada, flota de 6 autos, etc.)Tener en una sola clase todos los tests no resulta ser una buena prctica, porque- dificulta diferenciar los escenarios, estarn todas las variables de los tests mezcladas- si construimos un fixture con cada uno de los tipos de cliente en el setup, estamos penalizando a cada uno de los tests por lo que necesitan los dems: tiene sentido crear un cliente de flota con 5 autos si estoy testeando un cliente que tiene 6?- la clase a testear pierde cohesin, est cubriendo todos los casos de pruebaVolviendo al ejemplo, hay varias opciones posibles:- tener una clase para clientes normales y otra para clientes de flota- tener una clase para clientes normales, otra para flota con pocos autos y otra para flota con muchos autosCrearemos entonces estas clases de test:- ClienteNormalTest- FlotaPocosAutosTest- FlotaMuchosAutosTestEs importante que no haya demasiados detalles de implementacin en los nombres: FlotaCon5AutosTest o FlotaCon6AutosTest est sujeto a que cualquier cambio del negocio respecto a lo que son &quot;muchos&quot; o &quot;pocos&quot; autos necesite modificar el nombre de la clase.### Intention revealing - parte 1Queremos expresar lo ms claramente posible la intencin de la clase: qu clase de equivalencia est testeando. El nombre ayuda, e incluso JUnit 5 nos permite incorporar la anotacin `@DisplayName` para describir el escenario en lenguaje castellano:```java@DisplayName(&quot;Dado un cliente de flota con muchos autos&quot;)class FlotaMuchosAutosTest {```recordando que las clases agrupan los tests, ms adelante veremos cmo juega a favor este encabezado escrito en lenguaje natural. Una vez ms recordamos: &quot;muchos autos&quot; es mejor que decir &quot;6 autos&quot;. En otras palabras, explicitar el caso de prueba y no el dato de prueba: 6 autos es un dato concreto, pero lo que representa es el caso de prueba de una flota con muchos autos.## Expresividad en los tests### Un primer approachPara crear nuestro fixture de una flota con muchos autos, los enunciados suelen traer ejemplos como: &quot;Lidia Pereyra tiene una flota con 6 autos&quot;. Es tentador escribir un test como el siguiente:```java    Flota pereyra        @BeforeEach    def void init() {        pereyra = new Flota =&gt; [            agregarAuto(new Auto(&quot;ab028122&quot;, 2008))      // ... se agregan ms autos ... //        ]    }    @Test    def void pereyraNoPuedeCobrarSiniestro() {        pereyra.generarDeuda(15000)        assertFalse(pereyra.puedeCobrarSiniestro)    }```Pero qu pasa si hay un error en el cdigo de negocio? Supongamos esta implementacin, donde la clase Cliente tiene la definicin de la deuda como un entero:```javaclass Flota extends Cliente {    List autos = newArrayList        override puedeCobrarSiniestro() {        this.deuda  5) 20000 else 5000 // debera ser 10.000 y no 20.000    }```Cuando ejecutamos el test tenemos muy poca informacin relevante:![mal nombre de variable](/img/wiki/testeo_mal_nombre_variable.png)- la variable `pereyra` no est revelando que es un cliente de flota con muchos autos- y tampoco est claro por qu no puede cobrar el siniestro el cliente. Al fallar la condicin tenemos que bucear en el cdigo y extraer este dato para determinar si el error est en el test o en el cdigo de negocio. ### Una segunda oportunidadVamos a mejorar la semntica del test, renombrando la variable `pereyra` por un nombre ms representativo de la clase de equivalencia que estamos modelando, agregando la anotacin `@DisplayName` para el test y definiendo un mensaje de error adicional en el assert:```javaclass FlotaMuchosAutosTest {        Flota flotaConMuchosAutos        @BeforeEach    def void init() {        flotaConMuchosAutos = new Flota =&gt; [            agregarAuto(new Auto(&quot;ab028122&quot;, 2008))      // ... agregamos ms autos ... //        ]    }    @Test    @DisplayName(&quot;si tiene una deuda grande no puede cobrar un siniestro&quot;)    def void conDeudaGrandeNoPuedeCobrarSiniestro() {        flotaConMuchosAutos.generarDeuda(15000)        assertFalse(flotaConMuchosAutos.puedeCobrarSiniestro,       &quot;una flota que tiene una deuda abultada no puede cobrar un siniestro&quot;)    }```Ahora al fallar el test sabemos ms cosas:![mas expresividad en los tests](/img/wiki/testeo_mas_expresivo_2.png)- el test con su stack trace, pero tambin- qu es lo que estamos testeando, tratando de no entrar en detalles para no duplicar lo que dice el cdigo- qu se esperaba que pasara y no pas, en un formato legible para un usuario: &quot;Dado un cliente de flota con muchos autos, si tiene una deuda grande no puede cobrar un siniestro&quot;## AAA PatternLos tests suelen estructurarse segn el patrn AAA: Arrange, Act y Assert.- **A**rrange: donde instanciamos los objetos a testear, con sus colaboradores: en el ejemplo son la flota y sus autos. Cuando los contextos son compartidos, los frameworks basados en xUnit (JUnit5 es uno de ellos) nos permiten ubicarlo en un mtodo `setup` (`@BeforeEach`). La desventaja de esta tcnica es que para tener una idea general de los elementos que participan en el test debemos mirar el test **y** el setup, por eso una alternativa suele ser tener mtodos en el test que construyen el escenario que se necesita:```java    @Test    def void conDeudaGrandeNoPuedeCobrarSiniestro() {    // Arrange        val flotaConMuchosAutos = this.crearFlotaDeAutos(6)    // Act    flotaConMuchosAutos.generarDeuda(15000)            // Assert    assertFalse(flotaConMuchosAutos.puedeCobrarSiniestro)    }```En el ejemplo tenemos un mtodo _helper_ del test que permite crear un objeto Flota pasndole la cantidad de autos a crear. De esa manera la configuracin de una flota ocurre en una sola lnea y se puede incluir dentro del test mismo.&gt; Una heurstica posible sobre el setup del test es tratar de mantenerlo simple y de alto nivel, ms cercano al lenguaje del dominio que con detalles de implementacin. En el ejemplo de arriba se logra con mensajes que se encargan de instanciar objetos de dominio y que esconden la complejidad de conocer la colaboracin entre la flota y sus autos). Una alternativa a tener mtodos en el test puede ser crear un objeto especfico que construya otro objeto, algo que dejaremos para ms adelante.- **A**ct: son las operaciones que tienen efecto. En el caso de la flota que tiene una deuda abultada, enviamos el mensaje que le genera la deuda. Hay tests que quizs no necesiten disparar acciones, y est bien que eso ocurra.- **A**ssert: qu esperamos que pase, generalmente asociado a las respuestas que da el envo de un mensaje al objeto testeado.### &quot;One assert per test&quot;Hay ciertas controversias respecto a si [podemos tener varios asserts en el mismo test](https://softwareengineering.stackexchange.com/questions/7823/is-it-ok-to-have-multiple-asserts-in-a-single-unit-test), ya que cuando el primer assert falla los siguientes no se siguen evaluando: esto en realidad depende del __runner__ de xUnit, podramos eventualmente trabajar con un framework que continue buscando asserts y discrimine cules anduvieron y cules no (RSpec, framework de testeo para Ruby, hace sto). En verdad, la heurstica que nos interesa recomendar es: **los tests deben fallar por exactamente un solo motivo**, esto relaja esa restriccin. Lo importante no es tener un solo assert, sino que todos los asserts estn relacionados con la misma funcionalidad. Dejamos un ejemplo concreto:```java@Test@DisplayName(&quot;el parser obtiene correctamente la parte numrica de la patente del auto vieja&quot;)def parsearNumerosPatenteVieja() {    val lista = new PatenteParser(&quot;ABC257&quot;).parsearNumeros()    assertEquals(3, lista.size)    assertEquals(2, lista.get(0))    assertEquals(5, lista.get(1))    assertEquals(7, lista.get(2))}```El lector puede profundizar con estos artculos:- [Multiple Asserts Are OK](https://www.industriallogic.com/blog/multiple-asserts-are-ok/)- [Good Unit Test - One Assert](https://mfranc.com/unit-testing/good-unit-test-one-assert/)## TL;DREste es el resumen de buenas prcticas a la hora de definir tus tests:- arm los escenarios que generalmente definen las clases de tests- utiliz anotaciones `@DisplayName` para la clase de test y para cada test, de manera de entender **qu** estamos testeando. El cmo lo termins de ver en el cdigo, **evit duplicidades** entre el texto que explica y el cdigo escrito- evit que una clase de test tenga muchos escenarios juntos, es ms difcil seguirlos- los nombres de las variables deben reflejar la clase de equivalencia que estn resolviendo, y no casos particulares que no revelan la intencin de lo que estamos modelando (s `flotaConPocosAutos`, no `flotinha` o `miFlota`)- los tests se suelen estructurar utilizando las tres A: Arrange (el setup que conviene mantenerlo simple), Act (operaciones con efecto cuando corresponde) y Assert (las aserciones que deben testear el mismo concepto en cada test)## Links relacionados- Si conocs Ruby, te recomendamos [Better specs](http://www.betterspecs.org/)- [Pgina principal de Algoritmos 2](algo2-temario.html)"

} ,

{

"title"    : "Testing",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/testing.html",
"date"     : "",
"content"  : "# Testing en SmalltalkProbar una aplicacin permite verificar que el sistema (o una parte de l) funciona de acuerdo a lo especificado. Los tests permiten bajar la incertidumbre y aumentar la confianza que tenemos sobre el software que desarrollamos.Hay diferentes formas de probar una aplicacin, por ejemplo si tiene una interfaz de usuario el testeo podra realizarse manualmente siguiendo los pasos necesarios (eligiendo opciones de algn men, llenando formularios, etc) para verificar que el sistema responde de la forma esperada. Programticamente estamos acostumbrados a probar el sistema usando la funcionalidad desarrollada desde el mismo entorno de desarrollo, por ejemplo escribiendo en un workspace de Smalltalk. Supongamos que tenemos este ejemplo:```Smalltalk#Golondrina&gt;&gt;puedeVolar^selfenergia&gt;20&gt;&gt;vola:unosKilometrosselfpuedeVolarifFalse:[NoPuedeVolarErrorsignal].selfenergia:selfenergia-(unosKilometros*2-8)pepita:=Golondrinanew.pepitaenergia:100.pepitavola:25.&quot;Leresta25*2+8deenerga&quot;pepitaenergia.&quot;Deberaretornar42&quot;pepitapuedeVolar.&quot;Medeberadecirquesporquetienemsde20deenerga&quot;pepitavola:10.&quot;Leresta10*2+8deenerga&quot;pepitapuedeVolar.&quot;Medeberadecirquenoporquetienemenosde20deenerga&quot;pepitavola:1.&quot;Deberaexplotarporquepepitanopuedevolar&quot;```Y al ejecutar ese workspace se puede verificar si el valor retornado por el mensaje energia luego de volar 20 kilmetros retorna el valor que esperamos que retorne, si pepita puede volar cuando tiene ms de 20 de energa y que no puede cuando tiene menos, y si efectivamente ocurre un error si se intenta volar cuando pepita no puede volar.Sin embargo existe otra forma de realizar pruebas de forma programtica que permite automatizar todo el proceso de testeo, ya que verificar que el valor de la energa de pepita sea el esperado es algo que hay que hacer manualmente. En Smalltalk vamos a usar un framework llamado SUnit (existe tambin para otros lenguajes con otro nombre, bsquenlo, aprovchenlo!) que lo que permite es codificar no slo los pasos que describen la prueba, sino tambin la validacin de los resultados esperados.Automatizar las pruebas requiere un esfuerzo extra, pero es una gran inversin porque esas pruebas quedan disponibles para ser ejecutadas N veces en el futuro. A medida que el sistema crece, la cantidad de casos a probar para verificar que el sistema completo est bien construido aumenta muchsimo, y poder asegurar que toda la funcionalidad que program ahora y que fue programada antes sigue funcionando es muy valioso.## Testing con SUnitVeamos cmo quedara el ejemplo anterior, que estaba suelto en un workspace, usando SUnit. En primer lugar, ya no va a estar suelto sino que tiene que estar en un mtodo de una clase de prueba, para indicar que es una clase de prueba y puede ser corrida como tal por la herramienta, la misma debe heredar de TestCase.```SmalltalkTestCasesubclass:#GolondrinaTestinstanceVariableNames:&#39;&#39;classVariableNames:&#39;&#39;poolDictionaries:&#39;&#39;category:&#39;Pepita-Testing&#39;```Luego podemos agregar el mtodo para verificar que cuando pepita vuela pierde energia en funcin de la cantidad de kilmetros volados. Lo que nos requiere el framework es que los nombres de los mtodos que yo quiera que se corran como pruebas empiecen con la palabra test, lo que nos requieren las buenas prcticas y nuestra salud mental es que el resto del nombre describa lo mejor posible qu es lo que ese mtodo pretende testear. Tambin es importante poder separar la lgica en unidades atmicas e independientes, de modo que cada mtodo de test tenga un nico objetivo.```Smalltalk#GolondrinaTest&gt;&gt;testCuandoPepitaVuelaPierdeEnergiaEnBaseALosKilometrosVolados|pepita|pepita:=Golondrinanew.pepitaenergia:100.pepitavola:25.**self assert: pepita energia equals: 42.**```El mensaje assert:equals: lo que hace es verificar que el resultado de una expresin sea igual a un objeto esperado.Si al correr este caso de prueba pepita efectivamente queda con una energa de 42, el resultado del test ser correcto (lo cual se muestra con algn indicador verde que depender de la herramienta, como ser una bolita al lado del mtodo).Si el resultado de pepita energia es otro valor, como por ejemplo 100 (porque nuestro mtodo vola: existe pero no hace nada) el test falla, indicndose con otro color como ser amarillo, lo cual debe interpretarse como que el cdigo se pudo ejecutar sin problemas pero el resultado obtenido fue distinto al esperado. Cuando esto sucede hay que corregir el problema que bien podra estar en el cdigo de vola: como en el mtodo de test porque no describe lo que realmente debera pasar, con lo cual lo que uno hace en estas situaciones por lo general es debuggear el mtodo de test y analizar qu sucede a medida que se ejecuta el cdigo para encontrar el problema.Finalmente otra cosa que podra pasar es que el cdigo no funcione, por ejemplo si pepita no entiende el mensaje vola: se genera un error y no se puede terminar la ejecucin del test, indicndose con color rojo.Continuemos con los casos de prueba que nos faltan. Si yo quiero testear cundo puede volar pepita podramos tener dos mtodos diferentes, uno para verificar cundo s puede, y otro para verificar cundo no.```Smalltalk#GolondrinaTest&gt;&gt;testPepitaPuedeVolarSiTieneMasDe20DeEnergia|pepita|pepita:=Golondrinanew.pepitaenergia:100.**self assert: pepita puedeVolar**```El mensaje assert: recibe una expresin booleana, si esa expresin retorna true se considera correcto. Para hacer el otro caso en donde queremos validar que no pueda volar podramos tambin usar assert: negando la condicin (pepita puedeVolar not) o alternativamente usar el mensaje deny: que se verifica si la condicin recibida es falsa.```Smalltalk#GolondrinaTest&gt;&gt;testPepitaNoPuedeVolarSiTieneMenosDe20DeEnergia|pepita|pepita:=Golondrinanew.pepitaenergia:10.**self deny: pepita puedeVolar**```Por ltimo queramos verificar que si pepita no puede volar y le pedimos que vuele tiene que tirar un error. Si tuviramos este cdigo:```Smalltalk#GolondrinaTest&gt;&gt;testSiPepitaDebeVolarYNoPuedeTiraError|pepita|pepita:=Golondrinanew.pepitaenergia:10.pepitavola:1.```Cuando corramos este test, si efectivamente tira error porque no puede volar, el resultado que nos va a mostrar la herramienta ser ROJO. Pero si nosotros queramos verificar que tire error, cmo hacemos para transformar ese ROJO en VERDE?```Smalltalk#GolondrinaTest&gt;&gt;testSiPepitaDebeVolarYNoPuedeTiraError|pepita|pepita:=Golondrinanew.pepitaenergia:10.**self should: [pepita vola: 1] raise: NoPuedeVolarError**```El mensaje should:raise: espera un bloque que podra tirar error al evaluarlo, y en el caso de que suceda y el error sea instancia de la clase NoPuedoVolarError (o de alguna subclase) el resultado ser verde. Si el error no sucede, el resultado ser amarillo para indicar que no sucedi lo que se esperaba. Tambin existe la versin contraria shouldnt:raise: que verifica que el bloque no tire error.## Armando un escenarioEn todos los casos anteriores lo primero que hacemos es crear la golondrina y settearle una cantidad de energa que corresponda (una con 100 para que pueda volar, otra con 10 para que no pueda). Suponiendo que por defecto vamos a querer usar una golondrina que puede volar, con lo cual tener a pepita con 100 de energa inicial, podramos definir que antes de correr cada mtodo de prueba de la clase GolondrinaTest hay que crear a pepita e inicializarla de esa forma. Para eso el framework nos pide que definamos un mtodo llamado setUp de modo que todo lo que quiera que suceda antes de cada test se haga ah, y luego slo uso lo que se haya generado en los mtodos de test.```Smalltalk#GolondrinaTest&gt;&gt;setUppepita:=Golondrinanew.&quot;NtesequepepitaesunavariabledeinstanciadelaclaseGolondrinaTest&quot;pepitaenergia:100.```Luego podemos slo hacer lo siguiente asumiento que pepita existe y tiene 100 de energa.```Smalltalk#GolondrinaTest&gt;&gt;testPepitaPuedeVolarSiTieneMasDe20DeEnergiaselfassert:pepitapuedeVolar```Pueden ver otros ejemplos usando tanto SUnit nativo como con LOOP en este apunte: [Apunte de Testing en Smalltalk (con y sin LOOP)](https://4924d24e-a-62cb3a1a-s-sites.googlegroups.com/site/paradigmasdeprogramacion/Cursos/sabados-a-la-manana-anual-2012/PruebasUnitariasEnSmalltalk.pdf?attachauth=ANoY7cr7qvrGe95WAgr7-ZrpqizA8HqB-2kPZ7kAk11zguNxsyp95NGD6aY9ol2dz9yT6hHVwGxE0sn4I4Ifo_Vm5K2BNYMo6WiFxa8fIYAkBhmrXUAKtsHBrjrQfcMVnaPzB-EP3dqcoFsbFC6tKTKondZAWfSDMr84oJdxnNSUJ4dNg9Ge2dziPVFRPtmeLT84gC8qvSzQ-PAYyU6yGmxqR8LzynBHC1nSwEtGSrQmFOQxt3-V7AsQF_fhhVp_k8V0Fn_1puBTyqOFg-CgZtcCvLrAD-w5jfYeulkPljDR2mQTUXpwhBRdkI7_NnDBCONjLzl9F5Ra&amp;attredirects=0)"

} ,

{

"title"    : "Tipo abstracto de datos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/tipo-abstracto-de-datos.html",
"date"     : "",
"content"  : "# Concepto-   -   # Implementaciones de TADs## En C-   Definir si se lo pasar por valor o por referencia-   Codificar el `.h` con las declaraciones de las funciones-   Si usa memoria dinmica, definir una operacin para la destruccin del TAD-   Definir la estructura a emplear. Si lo hacemos en el `.c` o en el `.h` depende del grado de desacoplamiento que busquemos y nivel de paranoia que tengamos. Tambien hace mas compleja la implementacin-   Definir sinnimos de tipos para la estructura.-   Implementar las funciones en `.c`### ConvencionesSi bien para implementar un TAD no es necesario seguir ninguna convencin en particular, dado que C no tiene un soporte nativo para los mismos, y por tanto hay varias formas de implementarlos, es recomendable seguir convenciones para mantener consistencia en sus implemenentaciones y facilitar la comprensin del cdigo a los dems programadores (o a uno mismo en el futuro). Nosotros aqu sugerimos la siguiente:-   Escribir los tipos en CamelCase. Por ejemplo *AerolineaLanchita*-   Escribir las operaciones en snake&amp;#92;_case.-   Dado que nuestros TADs no presentarn polimorfismo (al menos no el los ejemplos bsicos), las operaciones estarn prefijadas por el tipo de dato, en snake case. Esto se har as para evitar colisiones en el espacio de nombres, y facilitar el autocompletado por parte del IDE. Por ejemplo *areolinea&amp;#92;_lanchita&amp;#92;_comprar(char &amp;#92;* codigo&amp;#92;_pasaje)*-   Las operaciones privadas del TAD las declararemos y definiremos dentro del .c, prefijandolas con guin bajo, y declarandolas static-   Respetaremos todas las buenas prcticas de programacin que ya conocemos de paradigmas: delegacin, expresividad, declaratividad (hasta donde podamos)### Ejemplo: Un bfferUn bffer es una estructura de datos similar a una cola, diseada para permitir el agregado de elementos o lotes de elementos homogeneos de forma eficiente, al final del mismom controlando su capacidad y taza de expansin para reducir al mnimo las operaciones de gestin de memoria. A diferencia de una cola, los elementos del buffer no se sacan de a uno, sino que se extraen tambin en lotes. Buffers ms avanzados soportan tambin punteros internos para delimitar regiones dentro del mismo.Por sus caractersticas, los buffers son usados tpicamente para almacenar bytes o caracteres.Modelaremos un buffer de caracteres. Este soportar las siguientes operaciones:-   Creacin: se crear con un tamao inicial fijado por el usuario-   Concatenacin: ofrecer una operacin para agregar un solo caracter, y otra para agregar un conjunto de caracteres.-   Extraccin: expondr una operacin para extraer todos los caracteres como un char&amp;#92;*. Una vez devuelto, es importante que el buffer pierda toda referencia al array original-   Destruccin: expondr una operacin para destruir el buffer. Es importante que libere no solo la memoria usada por el buffer, sino tambin, la memoria del contenido del mismo, si no fue ya devuelto.#### Declaracin de las operacionesPensar las operaciones no se trata tan solo de pensar que funcionalidad expondr, sino tambin, y en particular cuando tenemos TADs con estado mutable, pensar cuales son las precondiciones y postcondiciones de las mismas, y las invariantes del TAD.Esta no es solo una buena prctica de diseo estructurado, sino que puede ser muy beneficiosa a la hora de trabajar en cualquier paradigma. Es decir, para especificar correctamente una operacin no basta con indicar su firma/tipo y su semntica, sino tambin sus restricciones operacionales.Estas declaraciones las colocaremos en un .h```CBuffer*buffer_new(intmax_size);voidbuffer_append_char(Buffer*self,charaChar);voidbuffer_append_chars(Buffer*self,char*chars,intcount);char*buffer_extract(Buffer*self);intbuffer_current_size(Buffer*self);voidbuffer_delete(Buffer**self);```#### Definicin de la estructura interna*Para mas detalles sobre la sintaxis, ver [Typedefs y tipos annimos](typedefs-y-tipos-anonimos.html)*Para modelar la estructura interna del buffer, utilizaremos un *struct*, que tendr un campo por cada atributo de nuestro TAD: contenido, tamao mximo y tamao actual.```Ctypedefstruct{char*content;intcurrent_size;intmax_size;}Buffer;```#### Definicin de las operaciones*Para mas detalles sobre las funciones de manejo de memoria, ver [Manejo de memoria en C](manejo-de-memoria-en-c.html)*La primera operacin que debemos soportar es la instanciacin del TAD. Esta operacin debe tomar un tamao mximo inicial, y reservar la memoria necesaria para el buffer en s mismo, y el vector de memoria donde se copiarn los contenidos. Tambin debe inicializar los atributos del TAD.Por convencin y analoga con objetos, llamaremos a esta operacin **new**:```CBuffer*buffer_new(intmax_size){Buffer*self=instance_new(Buffer);self-&gt;content=instance_new_array(char,max_size);self-&gt;current_size=0;self-&gt;max_size=max_size;returnself;}```La contrapartida de la instanciacin del TAD es la destruccin del mismo. En ambientes con Garbage Collector esto no es normalmente necesario, por lo que no existe operacin anloga en objetos. Por convencin, la llamaremos **delete**:```Cvoidbuffer_delete(Buffer**self){if((*self)-&gt;content!=NULL){instance_delete((*self)-&gt;content);}instance_delete(*self);}```Ntese que esta operacin toma como argumento una doble indireccin a un Buffer.En este caso particular, el enunciado nos plantea que solo se debe liberar la memoria del contenido del buffer, si y solo si no se ha devuelto el contenido al usuario del TAD. Para resolver esto, sealizaremos un contenido entregado al usuario setandolo en NULL.Esto mismo debemos considerarlo a la hora de justamente devolver ese contenido, mediante la operacin **extract**. Para cumplir con la precondicin de que el contenido no ha sido devuelto antes, agregaremos una asercin:```Cchar*buffer_extract(Buffer*self){assert(self-&gt;content!=NULL);buffer_append_char(self,&#39;&amp;#92;0&#39;);char*content=self-&gt;content;self-&gt;content=NULL;returncontent;}```Luego tenemos que encarar el problema de agregar caracteres. Llamaremos a esta operacin *&#39;apend&amp;#92;_chars*, que tomar como parmetro el vector de caracteres a copiar, y su longitud.La operacin no es trivial: debemos considerar que si no hay suficiente espacio en el buffer (es decir, la diferencia entre el tamao actual y el mximo es menor a la longitud del vector), deberemos redimesionar el buffer de forma eficiente.Sin embargo, an as podemos comenzar a atacar el problema, delegando apropiadamente:```Cvoidbuffer_append_chars(Buffer*self,char*chars,intcount){_buffer_expand(self,count);memcpy(self-&gt;content+self-&gt;current_size,chars,count);self-&gt;current_size+=count;}```Es decir, decimos que para copiar un vector de caracteres al final del buffer, debemos expandir nuestro buffer tanto como sea necesario para almacenar los caracteres, y luego procedemos a efectivamente realizar la copia y actualizar el tamao actual. Ahora, tenemos un problema un poco mas simple: solo debemos preocuparnos por redimensionar el buffer, de ser necesario.Dado que **&amp;#92;_buffer&amp;#92;_expand** no ser usada desde el exterior (es una operacin interna), no la colocamos en nuestro .h."

} ,

{

"title"    : "Tipos de haskell",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/tipos-de-haskell.html",
"date"     : "",
"content"  : "Tal vez convenga aclarar que esta no es una categorizacin terica, es ms bien una introduccin y vamos de lo ms simple a lo ms complejo.## Tipos SimplesLos tipos ms bsicos que tenemos en Haskell son los booleanos y los caracteres, que tiene los tipos y respectivamente:```HaskellPrelude&gt;:tTrueTrue::BoolPrelude&gt;:t&#39;a&#39;&#39;a&#39;::Char```Qu podemos hacer con ellos? Algunos ejemplos con booleanos y caracteres:```HaskellPrelude&gt;True&amp;&amp;FalseFalsePrelude&gt;True||FalseTruePrelude&gt;notTrueFalsePrelude&gt;Char.isLower&#39;a&#39;TruePrelude&gt;Char.isUpper&#39;a&#39;FalsePrelude&gt;Char.toLower&#39;A&#39;&#39;a&#39;Prelude&gt;Char.toUpper&#39;a&#39;&#39;A&#39;Prelude&gt;&#39;b&#39;&gt;&#39;a&#39;True```El tipo de los nmeros es un poquito ms complejo porque tenemos nmeros enteros, reales, racionales y muchas ms variantes, lo vamos a ver en ms detalle ms adelante. Algunas operaciones que podemos hacer:```HaskellPrelude&gt;4*624Prelude&gt;2+35Prelude&gt;9-45Prelude&gt;4`div`3 1Prelude&gt;4`mod`3 1Prelude&gt;4/60.6666666666666666```La divisin en ocasiones puede traer problemas de tipos, si tuviste problemas con esto le el [siguiente artculo](problemas-comunes-con-los-tipos-numericos-de-haskell.html)## Tipos Compuestos### Listas y StringsUn String es simplemente una lista de caracteres que puede escribirse con una sintaxis particular, los siguientes ejemplos son equivalentes:```HaskellPrelude&gt;:t&quot;Hola&quot;&quot;Hola&quot;::[Char]Prelude&gt; :t [&#39;H&#39;,&#39;o&#39;,&#39;l&#39;,&#39;a&#39;][&#39;H&#39;,&#39;o&#39;,&#39;l&#39;,&#39;a&#39;] :: [Char]```Para cualquier lista el tipo se escribe poniendo entre corchetes el tipo de los elementos la lista, por ejemplo una lista de booleanos:```HaskellPrelude&gt;:t[True,False][True,False]::[Bool]```Tambin una lista de Strings (o lista de listas de caracteres):```HaskellPrelude&gt;:t[&quot;Hola&quot;,&quot;Chau&quot;][&quot;Hola&quot;,&quot;Chau&quot;]::[[Char]]```### TuplasUna tupla es tambin un valor compuesto. A diferencia de las listas el nmero de componentes es fijo y los componentes pueden ser cada uno de un tipo distinto. (Esto est ms detallado en [Cul es la diferencia entre una tupla y una lista?](cual-es-la-diferencia-entre-una-tupla-y-una-lista-.html), pero antes te recomiendo mirar los ejemplos que siguen.)Una de las tuplas ms simples que se puede imaginar es:```HaskellPrelude&gt;:t(True,&#39;H&#39;)(True,&#39;H&#39;)::(Bool, Char)```es decir, una tupla compuesta por un booleano y un caracter. Sin embargo, los elementos de las tuplas tambin pueden ser compuestos, como un String:```HaskellPrelude&gt;:t(True,&quot;Hola&quot;)(True,&quot;Hola&quot;)::(Bool, [Char])```o inclusive el componente de una tupla puede ser otra tupla:```HaskellPrelude&gt;:t(False,(&#39;H&#39;,&quot;ola&quot;))(False,(&#39;H&#39;,&quot;ola&quot;))::(Bool, (Char, [Char]))```Tambin podemos tener tuplas de ms de dos componentes```HaskellPrelude&gt;:t(True,&#39;H&#39;,[False])(True,&#39;H&#39;,[False])::(Bool,Char,[Bool])```es decir, un booleano, un caracter y una lista de booleanos.Para finalizar podemos ver un ejemplo en el que combianmos todo lo anterior (no es trivial, tomate tu tiempo para leerlo!):```HaskellPrelude&gt;:t([True,False,True],&quot;Chau&quot;,[(True,&quot;True&quot;),(False,&quot;False&quot;)])([True,False,True],&quot;Chau&quot;,[(True,&quot;True&quot;),(False,&quot;False&quot;)])  ::([Bool],[Char],[(Bool,[Char])])```Es decir, una tupla de tres componentes, a saber:-   Una lista de booleanos-   Un string o lista de caracteres-   Una lista de tuplas cuyo primer componente es un booleano y su segundo componente es un string.### TypeHaskell nos permite definir sinnimos de tipos, o sea definir un alias para un tipo concreto que se use para modelar alguna abstraccin que nos interese.Por ejemplo si modelamos a los alumnos como tuplas de aridad 2 cuyo primer elemento es el nombre y el segundo una lista de nmeros que representa las notas que se sac, podramos definir un tipo Alumno como:```HaskelltypeAlumno=(String,[Int])```De hecho, String no es ms que un alias para el tipo &amp;#92;[Char&amp;#92;]. Sin embargo, es importante tener en cuenta que estos sinnimos slo son tiles a efectos de declarar los tipos de otros datos o de las funciones de nuestro programa, pero para el motor de inferencia de tipos, estos alias son ignorados con lo cual si preguntamos de qu tipo es una funcin en donde se espera un alumno por parmetro, nos dir (String,[Int]) y no Alumno.### DataEs posible [definir nuestros propios tipos de dato](data--definiendo-nuestros-tipos-en-haskell.html) usando data para poder mejorar las abstracciones de nuestros programas y evitar algunos problemas asociados al uso de tuplas. Esto puede hacerse de la siguiente forma:```HaskelldataNuevoTipo=ConstructorTipo1Tipo2...TipoN```Usamos el constructor, como su nombre lo indica, para construir nuestros datos de este tipo y para hacer pattern matching como hacamos con las tuplas.```HaskelldataAlumno=UnAlumnoString[Int]fede=UnAlumno&quot;Federico&quot;[2,3]nombreAlumno(UnAlumnonombrenotas)=nombre&gt;:tnombreAlumnonombreAlumno::Alumno-&gt;String&gt;nombreAlumnofede&quot;Federico&quot;```El nombre del constructor puede coincidir con el nombre del tipo de dato, en este caso usamos nombres distintos para denotar que son cosas distintas y en qu contexto se usa cada una.## Funciones### Funciones con un nico parmetroEl tipo de una funcin que tiene un parmetro se indica relacionando mediante el smbolo la entrada o dominio de la funcin con la salida o imagen. Por ejemplo la funcin not recibe un booleano y devuelve otro:```HaskellPrelude&gt;:tnotnot::Bool-&gt;Bool```La funcin isLower recibe un caracter y devuelve un booleano.```HaskellPrelude&gt;:tisLowerisLower::Char-&gt;Bool```(Ntese que la funcin isLower est en el mdulo Char, dependiendo de su versin de Haskell tal vez deban escribir para poder probar el ejemplo, o bien importar el mdulo correspondiente.)Y la funcin and recibe una lista de booleanos y devuelve un booleano (resultado de realizar la conjuncin entre todos los booleanos de la lista)```HaskellPrelude&gt;:tandand::[Bool]-&gt;Bool```### Funciones con ms de un parmetroLas funciones de ms de un parmetro tienen alguna sutileza porque en Haskell se trabaja con el concepto de [Currificacin](currificacion.html), entonces una funcin que nosotros en matemtica estaramos acostumbrados a verla como en Haskell la vamos a escribir . Las funciones de dos parmetros cuyo tipo tiene esa forma se denominan *currificadas*.(A los efectos de entender el sistema de tipos podemos pensarlo simplemente como una funcin que recibe dos booleanos, aunque en realidad la versin currificada es mucho ms poderosa. Para ms detalles ver la teora sobre [Currificacin](currificacion.html).)El tipo que usamos como ejemplo en el prrafo anterior corresponde (entre otros) a la funcin```HaskellPrelude&gt;:t(&amp;&amp;)(&amp;&amp;)::Bool-&gt;Bool-&gt;Bool```### AplicacinLa [aplicacin](aplicacion.html) es uno de los temas que tal vez ms confunden cuando se habla de tipos de datos. La confusin ms frecuente radica en no diferenciar correctamente *una expresin que tiene valor Booleano* de *una funcin que devuelve Booleanos*.Ya vimos dos ejemplos de funciones que devuelven booleanos, con uno y dos parmetros:```HaskellPrelude&gt;:tnotnot::Bool-&gt;BoolPrelude&gt;:tChar.isLowerChar.isLower::Char-&gt;BoolPrelude&gt;:tandand::[Bool]-&gt;BoolPrelude&gt;:t(&amp;&amp;)(&amp;&amp;)::Bool-&gt;Bool-&gt;Bool```En este punto es importante entender que ninguno de estos ejemplos es un *valor booleano*. Cuando veo el tipo eso se entiende como el tipo *de las funciones a las que si les aplico un parmetro de tipo Char producen un valor de tipo Bool*, que claramente no es lo mismo que el tipo Bool.Lo dicho, si le aplicamos los parmetros adecuados a esas funciones, podemos obtener valores booleanos:```Haskell*Main&gt;:tnotTruenotTrue::Bool*Main&gt;:tChar.isLower&#39;a&#39;Char.isLower&#39;a&#39;::Bool*Main&gt;:tand[True,False,True]and[True,False,True]::Bool*Main&gt;:tTrue&amp;&amp;FalseTrue&amp;&amp;False::Bool```En sntesis es un valor booleano, en cambio no es un valor booleano, es una funcin que devuelve booleanos. Tambin es *un valor*, pero es un valor de otro tipo y no se pueden mezclar.Si intentamos utilizar un valor funcin en un lugar donde se espera un valor booleano, obtendremos un error:```Haskell*Main&gt;notChar.isLower:1:4: Couldn&#39;tmatchexpectedtype`Bool&#39;  againstinferredtype`Char-&gt;Bool&#39;  Inthefirstargumentof`not&#39;... ```Es decir, el primer argumento de debe ser y en cambio se recibi un argumento de tipo .Similarmente:```Haskell*Main&gt;True&amp;&amp;not:1:8: Couldn&#39;tmatchexpectedtype`Bool&#39;  againstinferredtype`Bool-&gt;Bool&#39; Inthesecondargumentof`(&amp;&amp;)&#39;,namely`not&#39; Intheexpression:True&amp;&amp;not....```## TypeclassesSi en algn momento consultaste el tipo de una funcin y viste algo como: `Num a =&gt; ...`, `Ord a =&gt; ...` o `Eq a =&gt; ...`, significa que esa funcin puede trabajar con distintos tipos concretos (como ser Int o Float). Num, Ord y Eq (al igual que otras menos cotidianas) no son tipos, sino familias de tipos que imponen restricciones sobre qu valores pueden usarse para evaluar esa funcin. A las familias de tipos les vamos a llamar [Typeclasses](typeclasses.html)."

} ,

{

"title"    : "Tipos de mensajes en smalltalk",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/tipos-de-mensajes-en-smalltalk.html",
"date"     : "",
"content"  : "Primero arranquemos por lo bsico. Todo envo de mensaje sigue la siguiente regla: OBJETO MENSAJE PARAMETRO Lo primero que aparece es el objeto receptor, luego viene el mensaje que se le enva a dicho objeto el cual puede o no tener parmetros.Smalltalk es bastante particular en aspectos sintcticos, por eso es importante detenerse a entender cmo se interpreta. Hay 3 tipos de mensajes en Smalltalk.Los **mensajes unarios** son aquellos que no reciben parmetros, o sea que el receptor solito puede resolver lo pedido. Un ejemplo de esto sera la negacin de un booleano:`truenot``--&gt;retornafalse`Tambin existen los **mensajes binarios** que son los que reciben slo un parmetro y su nombre est compuesto por smbolos (no alfanumrico), por ejemplo la suma entre dos nmeros es un mensaje que recibe un parmetro solo (el nmero a sumar), el otro nmero es el receptor del mensaje.`2+5``--&gt;retorna7`Por ltimo estn los **mensajes de palabra clave** que pueden recibir tantos parmetros como sean necesarios. Estos mensajes se caracterizan por tener una o ms partes alfanumricas terminadas por el caracter : luego de los cuales se pasa cada parmetro (o sea, los parmetros van intercalados) como se muestra en los siguientes ejemplos:`5raisedTo:2``--&gt;esunmensajequerecibeelobjeto5conunnicoparmetro,el2,yretorna25``3between:10and:25``--&gt;esunmensajequerecibeelobjeto3conun2parmetros,el10eselprimerparmetroyel25eselsegundo,yretornafalse`Lo que tiene de simptico los parmetros intercalados es la expresividad, pero hay que ser cuidadosos de no cometer errores. Por ejemplo si quisiramos saber si el 3 est entre 10 y el 5 elevado al cuadrado debemos escribirlo de esta forma:`3between:10and:(5raisedTo:2)``--&gt;elsegundoparmetrodelmensajebetween:and:eselresultadodemandarleraisedTo:a5conelparmetro2,lgicamentetambinretornafalse`Esos parntesis son inportantes para que se interprete como queremos y no como un nico envo de mensajes, donde el mensaje sera between:and:raisedTo: de 3 parmetros, que los nmeros no entienden!La [Precedencia de Mensajes](precedencia-de-mensajes.html) en Smalltalk se basa en estos 3 tipos de mensajes, slo nos va a interesar esta diferenciacin por ese motivo."

} ,

{

"title"    : "Tips para aprobar un parcial de funcional",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/tips-para-aprobar-un-parcial-de-funcional.html",
"date"     : "",
"content"  : "Lo que tiene que estar seguro para aprobar el parcial de funcional es [Orden Superior](orden-superior.html), [Aplicacin Parcial](aplicacion-parcial.html) y [Composicin](composicion.html).Algunas consideraciones que te llevan para el lado de la aprobacin:-Entender que cuando se aplica una funcin parcialmente lo que se obtiene es otra funcin con n - m parmetros (siendo n los parmetros de tu funcin original y m los que le aplicaste).-Entender bien la diferencia entre aplicar funciones y componer funciones entre s (nunca intentar componer cosas que no sean funciones o que al no estar suficientemente aplicadas esperen ms de un parmetro)-Usar buenas [abstracciones](abstraccion.html) tanto propias (defininiendo funciones auxiliares que ayuden a dividir el problema el problemas ms chicos) como existentes, por ejemplo en vez de hacer una funcin recursiva para trabajar con una lista usar funciones como filter, map, all, any o algn fold que se adece al problema-Pensar en los tipos de las cosas que reciben y retornan las funciones para asegurarte de que lo que ests haciendo tiene sentido. Si te cuesta el proceso de inferir el tipo de una funcin ac hay un ejemplito que est bueno para entender cmo se hace: [Clculo del tipo de una funcin en Haskell&amp;#92;#Ejemplo un poco mas heavy](calculo-del-tipo-de-una-funcion-en-haskell-ejemplo-un-poco-mas-heavy.html)Es importante no cometer errores de los que aparecen ac: [Errores comunes al comenzar a trabajar con Haskell](errores-comunes-al-comenzar-a-trabajar-con-haskell.html). Estos errores vienen de la mano de no tener claros los conceptos de orden superior, aplicacin parcial y composicin, con lo cual se consideran invalidantes."

} ,

{

"title"    : "Tips para concursos docentes",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/tips-para-concursos-docentes.html",
"date"     : "",
"content"  : "Para un concurso hay varios consejos importantes a tener en cuenta:-   tens que dar una clase como si estuvieras ante estudiantes. Osea, olvidate que hay un jurado, y habl como si hubiera estudiantes. Un error comn es hablarle al jurado y decir &quot;ac hara tal cosa&quot;, o ms comn, saltarse partes y decir &quot;ac explicara que esto y esto&quot; en lugar de explicarlas. Da una clase como si hubiera estudiantes y nada ms. Otro error comn (y que a veces lo hacemos en clase tambin, pero ac es mortal) es pasar transparencias rpido y decir &quot;esto no importa&quot;... Si no importa, no lo pongas!!!!!-   antes de la clase, explic el contexto de la misma. O sea, qumaterias hay antes y despus en el plan, qu clases se dieron en esta materia antes que la que vas a dar, y todos los conocimientos que los estudiantes se supone que tienen para que vos des la clase. Explic los objetivos de la materia y de la clase, y cmo tu clase contribuye a los objetivos de la materia. Eso muestra que ests ubicado y que conocs de lo que habls y es muy valorado por los jurados. Pero esto **antes** de empezar tu clase. Durante la clase, aplica 1.-   prepar una clase como para 45 minutos, y est listo para darlacompleta. Lo ms probable es que el jurado te corte antes y te diga &quot;listo, gracias&quot; y ah cort y punto. O te dicen &quot;salt hasta las conclusiones&quot; y ah vos salts cosas. Tens que tener flexibilidad para hacer fast forward cuando te lo piden, pero siempre acordndote de 1 (o sea, es fastForward o saltear cosas, NO cambiar de modo a &quot;y ac hara tal y cual&quot;).-   El manejo del tiempo es escencial. Si te hacen ir hasta elfinal, que sean 45 minutos y no ms o menos! Adems, lo ideal es que tengas un recorrido de tu clase para 30 minutos (o sea, 15 minutos de material que no es 100% escencial, pero que contribuye). De esa manera, si al empezar te dicen &quot;tens media hora&quot;, no tens que correr con tus 45 comprimidos, y lo hacs eliminando este material. Ten en cuenta que visto el consejo 1., tendras que tener 2 cosas preparadas... :)-   Pens bien el uso de recursos y materiales de tu clase. Vas ausar transparencias? Pizarrn? Combinacin de ambos? El pizarrn, es de tiza o de fibrones? No asumas. Lo ideal es que tengas con vos borrador y fibrones (cargados) -- normalmente si es tiza, hay, pero los fibrones suelen estar chotos. Si uss transparencias, hay que avisar a concursos, y ellos te llevan el can. Pero si ests preparado para que eso no pase, mejor (en TPI tenemos caones y alguien siempre te puede alcanzar uno si aviss!) Tambin tens que estar listo para que se corte la luz y no haya can! Lo mejor para esto es tener las transparencias impresas, y repartir una copia. Es un backup muy de emergencia, pero paga. Incluso pods repartir las transparencias impresas igual, aunque puede sonar a sobreactuacin...-   Cuando uses el pizarrn, administralo. Si llens el pizarrn decosas intiles, nunca lo borrs y escribs en agujeritos, es malsimo! Yo suelo tener una franja en un costado donde voy dejando &quot;la traza&quot; de la clase, como para que los alumnos sepan siempre dnde estamos. Y el resto lo divido en cosas ms fijas y en espacio para ejemplos (este ltimo se borra ms seguido). Hac buena letra en el pizarrn (esforzate!!!!! :)) y no des vueltas. La mejor combinacin es usar transparencias y pizarrn, administrando cada una. Pero cada profe sabe cmo lo hace mejor... :)-   Respecto a la preparacin de la clase en s, ten siempre clarocul es el objetivo de la misma. Todo se arma en funcin de esto. Los ejemplos se eligen porque ilustran un concepto que contribuye al objetivo. No pongas ejemplos de ms o boludeces adicionales que no contribuyen al objetivo (a menos que el objetivo de la clase sea dar un potpurr de &quot;boludeces&quot;! :D). Cada transparencia debe contribuir de manera interesante al objetivo. Si arms transparencias, que haya una de ttulo, una de overview y una de conclusiones, para estructurar la clase. Que en cada transparencia quede claro de qu se habla (con un buen ttulo).-   Si tens que hacer alguna demo de soft o algo as, ten todoprobado y listo! Lo ideal en estos casos es llevar tu propia compu con todo andando. No confes en las compus que puedan estar en el aula tengan todo configurado como vos espers. Si no tens compu y depends de lo que haya, entonces trat de tener una versin portable del soft, o si esto no se puede, tener un videto de lo que quers mostrar o similar... Es importante no mostrar que uno pierde media hora tratando de que un ejemplo ande."

} ,

{

"title"    : "Tips para la resolucion de un parcial de tadp",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/tips-para-la-resolucion-de-un-parcial-de-tadp.html",
"date"     : "",
"content"  : "Herramientas a utilizar (o cosas que no pueden faltar)-------------------------------------------------------   Un diagrama de clases (que muestre una visin panormica del sistema)-   Cdigo (en el que se ven los detalles)-   Especificacin de interfaces    Interfaces entrantes: Indicar cules son todas las cosas que se le pueden pedir al sistema desde afuera y para cada uno de estos posibles pedidos especificar *qu mensaje debe llegarle a qu objeto* para que el sistema lleve a cabo la funcionalidad deseada.    Interfaces salientes: Definir una interfaz Java para cada una de ellas e indicar la forma en que un objeto externo que implmente esa interfaz se puede registrar en el sistema para comenzar a interactuar con l.  -   Diagramas adicionales    -   Si en alguna funcionalidad intervienen muchos objetos u ocurre una cadena larga de delegaciones, es interesante mostrar una visin global de la misma en un diagrama de secuencia o de colaboracin.    -   Si un objeto o una parte del sistema pasa por varios estados diferentes puede ser interesante hacer un diagrama de estados.: Es importante destacar que el diagrama no reemplaza al cdigo. El diagrama provee una visin de alto nivel de la solucin, para que quien tiene que leerlo tenga un primer pantallazo de la estrategia utilizada; luego es necesario bajar a los detalles y para eso es necesario verlos en el cdigo.-   Aclaraciones adicionales que puede ser til incluir    -   Justificar las decisiones, contando las alternativas que se tuvieron en cuenta y la motivacin para eleccin realizada.    -   Potenciales puntos dbiles detectados en la solucin propuesta; junto con la justificacin de por qu se propone esta solucin a pesar de esas dificultades sealadas.    -   Cualquier otro comentario que ayude a comprender la solucin propuesta."

} ,

{

"title"    : "Traits",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/traits.html",
"date"     : "",
"content"  : "Un trait permite definir un conjunto de mtodos que se pueden aplicar a cualquier clase, de modo que se puedan evitar los problemas asociados a la herencia mltiple en relacin a la solucin de conflictos.Caractersticas---------------En su definicin, el conocimiento colectivo asocia a los traits con las siguientes caracteristicas:-   Proveen un conjunto de mtodos que implementan comportamiento.-   Pueden requerir que el usuario provea un conjunto de mtodos requeridos para su funcionamiento.-   No pueden ser instanciados directamente.-   No permiten definir estado interno de ninguna naturaleza.-   No pueden acceder de forma directa al estado interno definido por el usuario.-   Pueden ser compuestos entre ellos para generar un nuevo Trait.-   La composicin de Traits es simtrica, asociativa y conmutativa y cualquier mtodo conflictivo es excluido de su resultado.-   Se espera que el lenguaje provea algn mecanismo para realizar la resolucin de conflictos.-   Se resuelven por [aplanamiento o flattening](flattening-vs-linearization.html).Sin embargo, a diferencia de las Clases (concepto que ha sido trasladado a varios lenguajes), el termino Trait es usado en varias tecnologas para referirse a construcciones similares, caracterizadas por un subconjunto de estas propiedades, lo cual vuelve borroso el concepto y hace difcil definir que puede o no esperarse de un Trait. Por ese motivo tomamos como implementacin de referencia a la que se encuentra en Smalltalk, desarrollada en base al paper [Traits: Composable Units of Behaviour](http://scg.unibe.ch/archive/papers/Scha03aTraits.pdf).lgebra de Traits-----------------A continuacin se detallan las operaciones que se encuentran implementadas en Smalltalk para usar traits:**+:** Combina dos Traits en uno nuevo, el cual contiene todas las implementaciones definidas en ambos Traits.**-:** Genera una copia del Trait destino, quitando la implementacin del mensaje recibido por parmetro.**@:** Realiza una copia de la implementacin de un mensaje, utilizando otro nombre.{% link_image Operaciones-de-Traits.png %}### Solucin de conflictosEn aquellos casos en los que una clase usa dos traits que presentan implementaciones diferentes del mismo mensaje, se produce un conflicto, que debe ser resuelto en la definicin de la clase en cuestin, de lo contrario si una instancia de la misma recibe este mensaje ocurrir un error por el conflicto sin resolver.Las herramientas provistas por el lenguaje para la resolucin de conflictos se basa en las operaciones - y @ definidas anteriormente y en la premisa de que si se define el mismo mensaje en la clase o trait en conflicto, esta definicin tendr mayor peso, con lo cual las otras definiciones dejan de usarse y el conflicto desaparece.Por ejemplo, si la clase A usa a los traits B y C, y tanto B como C definen &amp;#92;#m algunas posibilidades para resolver el conflicto de &amp;#92;#A&amp;gt;&amp;gt;m son:-   Restarle a uno de los traits el mensaje &amp;#92;#m, con lo cual slo existir una implementacin, por ejemplo:`Objectsubclass:#A``uses:B-#m+C``...`-   Definir la implementacin real para A usando un alias para los mtodos de traits, por ejemplo:`Objectsubclass:#A``uses:B@#{#mDeB-&gt;#m}+C@#{#mDeC-&gt;#m}``...`y luego...`#A&gt;&gt;m``selfmDeB.``selfmDeC.`Si no se define &amp;#92;#A&amp;gt;&amp;gt;m adems de definir los alias, el conflicto sigue existiendo.Cmo diseamos con Traits?---------------------------Algunas teoras dicen que todo el comportamiento debera estar en los Traits (ver paper de Ducasse citado), segn esas ideas una clase se define como:`Superclase+Traitcomposition(conjuncindevariostraits)+Estado+Gluecode`Por otro lado existe el enfoque opuesto de modo que los Traits slo se usan como *parches* para el modelo con herencia simple de modo que se eviten las repeticiones de cdigo. Si slo se busca extraer el cdigo repetido, el Trait extrado podra no tener consistencia semntica y no conformar una entidad representativa, volvindose difcil de reutilizar y generando abstracciones pobres.No hay ideas muy formadas an sobre cmo disear con traits y herencia simple dndoles igual peso a ambas herramientas, por lo tanto en principio, seguir el primer enfoque y a partir de ello poder descubrir mejores alternativas es una estrategia interesante para el aprendizaje.Traits y super--------------La meta-variable super se usa para modificar el Method Lookup de modo que sea posible redefinir mtodos heredados y a su vez reutilizar la definicin de la Clase padre.El uso de super en un mtodo de Trait es tcnicamente posible ya que estos mtodos sern invocados en el contexto de las Clases usuarias donde existe una superclase de la cual se heredan definiciones de mtodos. Sin embargo esto implica que el Trait slo pueda ser usado en contextos en los cuales la superclase tenga una implementacin del mensaje enviado en el mtodo de Trait, quedando altamente acoplado con los usuarios del mismo y por lo tanto disminuyendo su reutilizabilidad.Papers-------   [Traits: Composable Units of Behaviour &amp;lt;- **el paper de Ducasse**](http://scg.unibe.ch/archive/papers/Scha03aTraits.pdf)-   [Stateful Traits](http://scg.unibe.ch/archive/papers/Berg07aStatefulTraits.pdf)"

} ,

{

"title"    : "Transparencia referencial  efecto de lado y asignacion destructiva",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/transparencia-referencial--efecto-de-lado-y-asignacion-destructiva.html",
"date"     : "",
"content"  : "Definiciones------------**Operacin:** aplicar una funcin, evaluar un predicado, enviar un mensaje, etc.**Transparencia Referencial**Hay transparencia referencial si al reemplazar una operacin por su resultado se logra el mismo efecto.Una definicin alternativa dice: Hay transparencia referencial cuando al realizar una operacin con los mismos valores siempre da el mismo resultado. Si bien esta parece ms fcil de entender, no es tan precisa como la primera; puede ser til para dar los primeros pasos, pero para el final hay que terminar de entender la otra.Tambin se puede pensar en las propiedades necesarias para tener Transparencia Referencial.Decimos que una operacin tiene transparencia referencial si es:- Independiente: No dependen del estado de nada que este fuera de s misma- Sin estado/Stateless: No tiene un estado que se mantenga de llamada en llamada- Determinstica: Siempre devuelven el mismo valor dados los mismos argumentos- No produce efecto colateral**Efecto de Lado/Colateral (Side Effect)**Hay efecto cuando un cambio de estado sobrevive a la realizacin de una operacin. Por ejemplo, una operacin puede modificar una variable global, modificar uno de sus argumentos, escribir datos a la pantalla o a un archivo, o hacer uso de otras operaciones que tienen efecto de lado.Otra definicin vlida es: Si le sacs una foto al sistema (llammosla F1), despus realizas la operacin de tu inters, y le volvs a sacar una foto al sistema (F2). Si F1 y F2 son distintas =&amp;gt; la operacin que hiciste tiene efecto de lado.**Asignacin Destructiva**Asignar destructivamente es reemplazar el valor de una variable por otro valor.La [unificacin](unificacion-y-pattern-matching.html) no se considera asignacin (al momento de ligar no haba ningn valor anterior, sera ms bien una inicializacin?). Unificar es encontrar una sustitucin capaz de igualar 2 trminos. Cuando se efectiviza est sustitucin hablamos de ligado de variables (tal valor se lig a tal variable).Ejemplos--------Cuando hablamos de que &quot;algo&quot; tiene transparencia referencial, efecto colateral o asignacin destructiva, ese &quot;algo&quot; es la realizacin de una operacin, de un lenguaje en particular o de un paradigma.Estos tres conceptos suelen ir de la mano y si bien pueden darse relaciones entre ellas es saludable poder detectar la aparicin de cada uno de ellos individualmente. Una relacin que surge de la definicin de transparencia referencial es que para sta se d, no puede haber efecto colateral, ya que si el estado del sistema se modifica, o se escribe en un archivo por ejemplo, no es lo mismo ejecutar esa operacin que reemplazar por el resultado.A continuacin mostramos algunos ejemplos en el [paradigma orientado a objetos](paradigma-de-objetos.html), ya que permite la aparicin de todas estas caractersticas, para dejar ms en claro de qu manera podemos identificarlas.### Ejemplo 1: consulta no determinsticaEl siguiente cdigo crea una fecha, configurada para representar el da de hoy: `new Date()`-   Transparencia Referencial: NO (Con cualquiera de las 2 definiciones de transparencia referencial)-   Efecto: NO-   Asignacin Destructiva: NOEvaluarlo con los mismos parmetros (o sea ninguno) en das distintos va a dar resultados distintos. Reemplazar la operacin por el resultado una vez que cambia el da se rompe todo. Asignacin destructiva y efecto no hay, o al menos no es relevante (se est creando un nuevo objeto en el sistema, pero en general no lo vamos a considerar para nuestro anlisis, y tampoco tiene que ver con el hecho de que un da responda una cosa y otro da otra).Ejemplos como este hacen que transparencia referencial y efecto colateral no sean conceptos opuestos, ya que en este caso se debe a que la operacin depende de algo externo (la fecha de la computadora).### Ejemplo 2: mtodo con efectoDada la siguiente implementacin del objeto pepita:```object pepita {  var energia = 100  method vola(metros) {   energia = energia - (metros + 4)  }}```Analicemos el mensaje: `pepita.vola(20)`-   Efecto colateral: SI, porque la energa de pepita antes era 100 y luego es 76.-   Transparencia Referencial: NO, se est produciendo un efecto al disminuirse la energa de pepita. En este caso el mtodo no retorna un valor, con lo cual no tendra sentido intentar reemplazar ese envo de mensajes por su resultado.-   Asignacin destructiva: SI, al hacer energia = ... estamos cambiando a qu objeto referencia por esa variable.### Ejemplo 3: mtodo de consulta determinstica```object factorial {  method para(numero){    var resultado = 1    if(numero &gt; 0)       resultado = self.para(numero - 1) * numero    return resultado  }}```Analicemos el mensaje: `factorial.para(20)`-   Transparencia Referencial: SI, el resultado slo depende de sus argumentos, no importa en qu contexto, siempre dar el mismo resultado para el nmero 20.-   Asignaciones Destructivas: SI, podemos ver que la variable local resultado primero toma el valor 1, pero luego para nmeros mayores a 0 se modifica por el valor que corresponda.-   Efecto colateral: NO, a pesar de que hay una asignacin dentro del mtodo, al ser slo una variable local no se produce ningn efecto que perdure a la ejecucin de ese mensaje. Esa asignacin podra analizarse como efecto colateral dentro del mtodo. Probablemente en un mtodo tan pequeo como este no tenga importancia ese tipo de anlisis, pero en el caso de algoritmos ms complejos podra cobrar valor (y asumiendo que no sea posible partir un algoritmo complejo en operaciones ms pequeas que simplifiquen justamente el anlisis, pero eso ya es otra cuestin).Por qu nos interesa pensar en estos conceptos?------------------------------------------------Estos son algunos ejemplos concretos sobre cmo la existencia o no de efecto, asignacin destructiva y transparencia referencial afectan a la hora de programar.**Separar la lgica que hace cosas de la que consulta:** Muy seguido vemos mtodos (o procedimientos, dependiendo del paradigma) que tienen efecto y a su vez retornan algn valor relacionado con el mismo, estas prcticas pueden llevar a confusiones que producen un funcionamiento errneo del sistema, sobre todo cuando el nombre del mtodo elegido no denota que existe un efecto asociado a su ejecucin. Es una buena prctica tener separada la lgica que realiza modificaciones sobre el sistema de los que slo pretenden obtener el resultado de una consulta, que nuestros mtodos tengan un nico objetivo, lo cual simplifica su uso y la eleccin de un nombre suficientemente representativo.**Respetar los contratos blandos:** Un contrato blando es algo que cierta pieza de cdigo requiere que cumpla el usuario para que la misma funcione de la forma esperada, pero esos requisitos no son validados de ninguna forma. Un ejemplo tpico de esto est relacionado con los [mensajes de colecciones](mensajes-de-colecciones.html) que esperan recibir un bloque de cdigo que sea slo de consulta, o sea que no produzca ningn efecto.**Optimizaciones:** Tener asegurada la transparencia referencial permite hacer optimizaciones como las que tiene el motor de Haskell que afectan globalmente a los programas construidos con el mismo. La [evaluacin perezosa o lazy](estrategias-de-evaluacion.html) es posible gracias a esta caracterstica. Tambin lo podemos ver en Prolog que para buscar soluciones utiliza el mecanismo de [Backtracking](backtracking.html) de modo que se puedan encontrar mltiples respuestas a una consulta, as como descartar los caminos por los cuales no sea posible hayar alguna, de una forma eficiente.Otro ejemplo viene de la mano del procesamiento en paralelo. Si tenemos un conjunto con millones de elementos y queremos filtrarlo por un criterio, no puedo dividir ese conjunto en varios ms pequeos, filtrarlos por separado en distintos procesadores y juntar sus resultados? Si yo aseguro que evaluar el criterio de filtrado sobre cada elemento no va a provocar ningn efecto que pueda alterar mi resultado final, esta optimizacin podra permitir aprovechar mucho mejor el hardware disponible. Si te interesa el tema ac hay algo para leer al respecto: [Scala - Parallel Collection Framework](http://infoscience.epfl.ch/record/150220/files/pc.pdf)**[Testing](testing.html):** El testeo unitario se basa en la premisa de que cada test sea independiente del otro y eso se logra controlando que el estado del sistema antes y despus de correr cada test sea el mismo, por ese motivo es importante mantener el efecto controlado y poder revertir aquellos cambios que sobrevivan a la ejecucin de cada test particular. Tambin la transparencia referencial es importante para el testeo unitario ya que testear el resultado de una operacin que depende de algo no determinstico no es viable y hace falta usar estrategias de testeo ms avanzadas ([Mock Objects](http://es.wikipedia.org/wiki/Objeto_simulado)) para evitar este tipo de dependencia.Preguntas frecuentes--------------------Le una definicin de Transparencia Referencial: Hay transparencia referencial si al reemplazar una operacin por su resultado se logra el mismo efectoCon este criterio, aqu s habra transparencia referencial:```inta=1;intc;c=a++;```Ya que es lo mismo que hacer esto:```inta=1;intc;c=1;```Ya que el efecto en la variable c es el mismo: va a valer 1.Pero para m no es as, ya que no va a haber transparencia referencial, porque si bien se logra el mismo efecto con respecto a c, el sistema cambia (la variable a se incrementa en una unidad).Es correcto afirmar entonces que si no hay Efecto de Lado entonces tengo garantizada la Transparencia referencial y viceversa?&gt; En el ejemplo dado no hay transparencia referencial, es correcta la interpretacin. La expresin a++ tiene el efecto colateral de modificar el valor de a, por lo tanto no puede tener transparencia referencial. Sin embargo, no es correcto que si no hay efecto entonces est garantizada la transparencia referencial (como se pone en evidencia en el ejemplo de la consulta no determinstica)."

} ,

{

"title"    : "Interfaces y union types en Typescript",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ts-tipado.html",
"date"     : "",
"content"  : "# Un enunciado## Resolucin con interfaces## Resolucin con union types"

} ,

{

"title"    : "Tutorial de squeak y pharo",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/tutorial-de-squeak-y-pharo.html",
"date"     : "",
"content"  : "Empezar a usar el Squeak puede ser un poco complicado porque no es muy intuitivo, les dejamos una explicacin para poder arrancar con menos miedo. Pharo no es muy diferente, as que slo aclaramos cuando difiere para no armar todo de nuevo :DCrear una Clase---------------1) Abrir el Class Browser (System Browser): Hagan click sobre el fondo del squeak para que se les abr el men World -&amp;gt; open... y eligen Class Browser (en Pharo se llama System Browser)2) En la primer columna del Class Browser tienen las categoras, all deberan crear una nueva para agrupar las clases que vayan haciendo. Para eso hacen click derecho sobre esa columna y eligen add item... (en Pharo es Add Category) Les va a pedir que ingresen el nombre para la categora, por ejemplo, TPObjetos-grupoBle (no s si haba algn formato requerido, pero pongan algo que los identifique).Al darle OK les va a aparecer el template para crear clases dentro de esa categora:`Objectsubclass:#NameOfSubclass``instanceVariableNames:&#39;&#39;``classVariableNames:&#39;&#39;``poolDictionaries:&#39;&#39;``category:&#39;TPObjetos-grupoBle&#39;`3) Crear clases: Siempre que quieran crear una clase nueva hacen click sobre el nombre de la categora para que les aparezca el template anterior. Lo que tienen que hacer es cambiar NameOfSubclass por el nombre real, por ejemplo, Pelicula; despus para agregarle variables de instancias tienen que escribir los nombres entre las comillas simples de instanceVariableNames separadas por espacios. Si tuvieran variables de clase iran en el rengln de abajo. Recuerden que las de instancia empiezan con minscula y las de clase con mayscula por convencin. Finalmente, si quisieran que herede de otra clase que no sea Object, cambian Object por el nombre de la superclase.Para dar los ejemplos vamos a usar la parte ms bsica de un parcial/tp &quot;Salas de Cine&quot;:*Se desea hacer un sistema para una cadena de cines, en la cual guardar la informacin de las salas que administra la cadena y las pelculas que se dan en cada horario en cada una de esas salas. Para simplificar asumimos que todas las pelculas comienzan en punto y que duran una cantidad entera de horas. Adems de su duracin, de cada pelcula se sabe su gnero.*`Objectsubclass:#Pelicula``instanceVariableNames:&#39;duraciongenerotitulo&#39;``classVariableNames:&#39;&#39;``poolDictionaries:&#39;&#39;``category:&#39;TPObjetos-grupoBle&#39;`Una vez que completaron el template hacen click derecho -&amp;gt; Accept o simplemente Ctrl+S.Si quieren editar la definicin de la clase, por ejemplo para agregar/quitar variables o cosas as, clickeando sobre el nombre de la clase debera mostrarles el cdigo que guardaron y vuelven al paso 3.Para crear una subclase pueden cambiar el template para que use la superclase en vez de Object. Ms detalles, ac: [Cmo crear una subclase en Squeak](como-crear-una-subclase-en-squeak.html)Mtodos-------### Creando un Mtodo4) Agregar mtodos: Haciendo click sobre la 3er columna (donde tienen --all-- y no messages) les aparece un ejemplo de cmo quedara un mtodo:`messageselectorandargumentnames``&quot;commentstatingpurposeofmessage&quot;``|temporaryvariablenames|``statements`Eso lo borran y escriben el mtodo que tengan ganas. Por ejemplo:`verificarLongitud``&quot;Estodeabajoesfruta,peroparaqueseimaginencmopodraescribirseunmtodo&quot;``^selfgeneronombresize&gt;10ifTrue:[30]ifFalse:[20]`Ac se estn usando 2 mensajes an indefinidos: genero y nombre, que son los getters de las variables de instancia. Los accessors se pueden crear directamente haciendo click derecho en el nombre de la clase y... En Squeak: -&amp;gt; more... -&amp;gt; create inst var accessors En Pharo: -&amp;gt; Refactor Class -&amp;gt; Accessors (para crear todos los que falten)`-&gt;Refactorinstancevariable-&gt;Accessors(paraelegirunavariableparacualcrearlosaccessors)`Como todava no haba hecho eso al hacer Ctrl+S al mtodo verificarLongitud para aceptar y que se agregue efectivamente debera aparecer un cartelito diciendo que no conoce esos selectores porque no hay ninguna clase que defina genero y nombre, entonces les tira un par de opciones por si se confundieron, siendo la primera lo que tipearon, las siguientes algunas alternativas existentes y al final Cancel para seguir editando el mtodo sin aceptar los cambios.Mucho ms que eso no hay para lo que es definir las clases. Lo que quedara es armar el programita -&amp;gt; workspace (no main =P). Lo que tiene de copado es que tienen un ambiente vivo y pueden mandarles mensajes a los objetos como se les de la gana, no es necesario tener todo el programa armado y darle run, lo pueden ir armando a la par que le agregan los mtodos a las clases. As que...### Modificando un MtodoPara modificar un mtodo, si se equivocaron, pueden hacerlo seleccionando el mtodo, haciendo los cambios y apretando aceptar. Pero Ojo! &#39;&#39;&#39; No se puede modificar as noms el nombre de un mtodo. &#39;&#39;&#39; Si se quiere cambiar su **selector** (cualquier cosa del nombre  los parmetros) debern hacerlo as:-   Clck en la lista de mtodos sobre el que quieren modificar-   Botn derecho en el mtodo -&amp;gt; **refactor method**Y ah les ofrece varias cosas, eligen lo que quieren hacer.Escribir Un Workspace---------------------5) El Workspace: Volvemos al fondo del Squeak, hacen click para que aparezca World -&amp;gt; open... -&amp;gt; workspaceAh les aparece un cuadro de texto en blanco para que tiren cdigo. Lo primero que podemos hacer es instanciar una Pelicula y settearle un par de atributos. As que escribimos lo siguiente en el workspace:`saw:=Peliculanew.``sawtitulo:&#39;ElJuegodelMiedo&#39;.``sawduracion:2.`Si seleccionan esas tres lneas (para seleccionar todo tienen Ctrl+espacio) y hacen Ctrl+d (do it) se evalua ese cdigo. Para ver si anduvo todo bien pueden escribir lo siguiente en el workspace:`sawtitulo.`Si se paran al final de ese rengln (para evaluar una sola lnea no es necesario seleccionar, si seleccionan todo se va a evaluar todo desde el principio nuevamente y eso no tiene gracia, jeje) y le dan Ctrl+p (print it) les va a aparecer al final de la lnea y seleccionado para su conveniente borrado el string &#39;El Juego del Miedo&#39;Otra forma de ver qu onda con nuestros objetitos es pararse sobre la variable con la que lo referenciamos, en este caso saw, y hacer ctrl+i (inspect it). Eso les abre una ventanita donde pueden ver a qu est referenciando cada una de las variables. En este caso tendran lo siguiente:``**`self` `-&gt;` `a` `Pelicula`**``**`all` `inst` `vars:`**``**`duracion:` `2`**``**`titulo:` `&#39;El` `Juego` `del` `Miedo`**`&#39;```**`genero:` `nil`**Claro, el genero est en nil porque no le setteamos nada, de hecho ni siquiera creamos la clase Genero. Hagamos eso as probamos verificarLongitud...Creamos la clase Genero dentro de la categora TPObjetos-GrupoBle con las v.i. que quieran, incluyendo nombre. Despus create inst var accessors y listo.Volvemos al workspace... agregamos el siguiente cdigo:`terror:=Generonew.``terrornombre:&#39;Terror&#39;.``sawgenero:terror.````sawverificarLongitud.`Seleccionamos ese cdigo y le damos ctrl+p y al final de ese cdigo seleccionado aparece el nmero 20 que es lo que esperbamos.Mtodos de Clase----------------5) Mtodos de clase: supongamos que el gnero lo quieren instanciar directamente como:`terror:=GeneroconNombre:&#39;Terror&#39;yDuracionMaxima:1.5.`Ah habra que escribir el mtodo de clase conNombre: yDuracionMaxima: Para eso vamos a la clase Genero en el Class Browser y hacemos click en el botoncito que dice class (hasta ahora venamos trabajando del lado de las instancias). De manera anloga, hacemos click en la tercer columna para que nos aparezca el ejemplo de mtodo y escribimos lo siguiente:`conNombre:unNombreyDuracionMaxima:unaDuracion``^selfnew``nombre:unNombre;``duracionMaxima:unaDuracion.`Ah lo nico loco que hice fue usar un truquito que no contamos en clase me parece que es el de enviar mensajes en cascada. La forma de evaluacin de ese cdigo sera: primero self new por ser unario, eso me da una instancia de Genero, a esa instancia se le enva el mensaje nombre: con el parmetro que nos lleg de afuera unNombre. El punto y coma indica que la siguiente sentencia es un mensaje que se le enva al mismo objeto de antes, o sea al genero que instanciamos recin. Le mandamos duracionMaxima: y le setteamos la duracin correspondiente.Finalmente retorna al objeto ya inicializado (el ^ es lo que tiene menor precedencia) y lo que va a retornar es lo que haya retornado el ltimo envo de mensajes. Como duracionMaxima: es un setter por defecto que no tiene ningn ^ estamos seguros de que lo que va a retornar (porque TODOS los mensajes retornan un objeto) es al objeto receptor.A modo informativo, si duracionMaxima: retornara algo diferente de self habra que hacer lo siguiente:`conNombre:unNombreyDuracionMaxima:unaDuracion``^selfnew``nombre:unNombre;``duracionMaxima:unaDuracion;``yourself.`Para que nos retorne al objetito receptor.La otra alternativa que a m me resulta medio incmoda pero es la ms fcil es definirle un mensaje de instancia al gnero que sea nombre: yDuracionMaxima: que le settee internamete las dos variables al objeto. Con lo cual quedara lo siguiente:`conNombre:unNombreyDuracionMaxima:unaDuracion``^selfnewnombre:unNombreyDuracionMaxima:unaDuracion.`Y del lado de las instancias (hacemos click en instance) agregamos el mtodo nombre: yDuracionMaxima: que haga lo siguiente:`selfnombre:unNombre.``selfduracionMaxima:unaDuracion`Y no retornamos nada porque queremos que nos retorne self.Ahora podemos refactorizar nuestro workspace y nos quedara algo as:`saw:=Peliculanew.``sawtitulo:&#39;ElJuegodelMiedo&#39;.``sawduracion:2.````terror:=GeneroconNombre:&#39;Terror&#39;yDuracionMaxima:1.5.``sawgenero:terror.````sawverificarLongitud.`Hacemos Ctrl+space + Ctrl+p y mgicamente sigue dando 20 =D O sea que hicimos las cosas bien y no rompimos nada.Guardando nuestro trabajo-------------------------### Grabar la Imagen6) Guardar los cambios: Hagan click en el fondo para abrir World -&amp;gt; save### Grabar en un archivo .st7) FileOut: Para hacer la entrega tienen que hacer un fileOut de la categora. Para eso slo le dan click derecho al nombre de la categora -&amp;gt; fileOut. Cuando yo lo hice no me pregunt en dnde guardar ni con qu nombre, simplemente se guard en mi directorio de instalacin del Squeak con el nombre de la categora y extensin .stNo se preocupen si ven muchos !!!! en el archivo, es lo que tienen que pasar. Despus de todo no fue hecho para ser ledo por mortales, nada ms para ser importado en otro Squeak o para los paspados que prefieren la entrega en papel, jajajaj (mentira, es til tenerlo en papel, y con un poquito de cancha es hasta fcil de seguir)### Grabar el Workspace8) Guardar el Workspace: obviamente el fileOut slo les guarda el cdigo de las clases que estn en la categora, el ws hay que guardarlo aparte. Pueden hacer simplemente copy/paste y pegarlo a un txt normal o pueden usar la opcin de guardado que trae el Squeak. Para eso: click derecho sobre el workspace -&amp;gt; more... -&amp;gt; save contents to fileLe ponen el nombre que quieran y la extensin la pueden dejar como txt o cambiarla a st, que es como se guarda en la otra versin de Smalltalk. Se los va a guardar en la misma carpeta por default en la que se hizo el fileOut.### Importar un archivo .st-   Arrastrar el archivo .st y soltarlo sobre la imagen de Pharo. Le dan **FileIn Entire File** y Listo!-   Otra forma:  1) Botn derecho sobre el fondo. En el men **World** van a **Tools -&amp;gt; File Browser**.2) En el File Browser van a ver tres paneles:el de la izquierda muestra el arbol de directorios y carpetas de su sistema.3) Seleccionar la carpeta donde esta instalado Pharo, que es donde va a estar el archivo .st que quieren importar. En el panel de la derecha, van a ver la lista de los archivos incluidos en esa carpeta.4) Seleccionen el archivo .st. En el panel inferior van a ver el codigo que escribieron, y arriba de los paneles superiores van a aparecer varios botones, elijan **Install**Shortcuts / Atajos del Teclado / Fatalities--------------------------------------------   **Ctrl+b** seleccionando una clase&amp;#92;* para que se abra un Class Browser sobre esa clase.-   **Ctrl+n** seleccionando un selector&amp;#92;* para ver sus Senders (se abre una lista de mtodos desde donde se enva ese mensaje, tambin vale para cuando se usa un symbol igual al mensaje, onda &amp;#92;#size).-   **Ctrl+m** seleccionando un selector&amp;#92;* para ver sus Implementors (se abre una lista de mtodos para ese mensaje)-   **Ctrl+shift+n** sobre una clase&amp;#92;* para ver en dnde se usa (References)-   **Ctrl+i** sobre un objeto nos permite inspeccionarlo por adentro-   **Alt+punto** para mandar una interrupcin (til para cuando uno se la manda y queda ejecutando algo recursivamente, se interrumpe la ejecucin y se puede debuggear el stacktrace desde donde interrumpimos)&amp;#92;* En cualquiera de estos casos, &quot;seleccionar&quot; se puede entender como seleccionar un selector / nombre de clase dentro de un cacho de cdigo (workspace, definicin de un mtodo en el class browser, el debugger, etc), o bien seleccionarlo en un listado de cualquier browser (el Class Browser, la lista de variables de instancia y temporales que aparece en un debugger, una lista de senders que hayas abierto, etc).Por cierto, todas las cosas que se listan con Ctrl tambin funcionan con Alt en Windows (a veces slo funcionan con Alt)."

} ,

{

"title"    : "Tutorial de squeak",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/tutorial-de-squeak.html",
"date"     : "",
"content"  : "1.  REDIRECT [Tutorial de Squeak y Pharo](tutorial-de-squeak-y-pharo.html)"

} ,

{

"title"    : "Tutoriales para desarrollo java",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/tutoriales-para-desarrollo-java.html",
"date"     : "",
"content"  : "-   [Preparacin de un entorno de desarrollo Java](preparacion-de-un-entorno-de-desarrollo-java.html) (basado en Java, Eclipse, Svn y Maven)-   [Crear un proyecto en xp-dev](crear-un-proyecto-en-xp-dev.html)-   [Publicar un proyecto en svn](publicar-un-proyecto-en-svn.html)-   [Creacin de un proyecto maven bsico](creacion-de-un-proyecto-maven-basico.html)-   [Checkoutear un proyecto maven de un repositorio svn](checkoutear-un-proyecto-maven-de-un-repositorio-svn.html)-   [Resolver problemas de dependencias maven dentro de Eclipse](resolver-problemas-de-dependencias-maven-dentro-de-eclipse.html)"

} ,

{

"title"    : "Typeclasses",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/typeclasses.html",
"date"     : "",
"content"  : "# IntroduccinProblema--------Si tenemos la multiplicacion (&amp;#92;*) definida para tanto Int como Float, luego`squarex=x*x`debera transformarse en tiempo de compilacin en dos funciones distintassquare (para ints) square (para floats)Lo cual crece exponencialmente, por ejemplo con funciones como`squares(x,y,z)=(x*x,y*y,z*z)`que sera traducida en 8 funciones distintas, de modo que se pueda usar tanto con una tupla de tipo (Int, Float, Int) como (Float, Float, Float) o (Int, Int, Float)...Typeclasses al rescate----------------------Las typeclasses son un contrato o tipo de datos abstracto que agrupa las funciones sobrecargadas: es decir, definen una lista de funciones que un tipo deber implementar para considerarse de esa clase. Ejemplo: la typeclass Num dice que todos aquellos tipos que sean Num (Int o Float por ejemplo) van a definir las funciones (+) y (&amp;#92;*) y de que tipos son.Las typeclasses tienen como primer consecuencia que funciones como squares, que tena 8 tipos posibles, tenga uno solo:`squares::Numa,Numb,Numc=&gt;(a,b,c)-&gt;(a,b,c)`Donde Num es un typeclass que indica que **a** es un tipo concreto (como Int o Float) que cumple con ese contrato, y lo mismo para b y c.Es importante que quede claro que una typeclass **no es un tipo concreto**, sino una restriccin sobre una variable de tipo (que puede tomar como valores posibles por ejemplo Int o Float, que s son tipos concretos).# Las typeclasses de Haskell ms usadas## Num, Ord y EqNos gustara poder definir los siguientes tipos (a.k.a dominios e imgenes)(+) :: (Si asumimos que a es **numrico**) entonces a -&gt; a -&gt; a(&gt;) :: (Si asumimos que a es **ordenable**) entonces a -&gt; a -&gt; Bool(==) :: (Si asumimos que a es **equiparable**) entonces a -&gt; a -&gt; BoolEn Haskell eso se escribe de la siguiente manera```Haskell(+) :: (Num a) =&gt; a - &gt; a -&gt; a(&gt;) :: (Ord a) =&gt; a - &gt; a -&gt; Bool(==) :: (Eq a) =&gt; a - &gt; a -&gt; Bool```Num, Ord y Eq son **restricciones de tipo**, en Haskell se las conoce como Typeclasses (no confundan esto con el trmino Clase que usamos en el paradigma de objetos!!)En cada Typeclass se definen un conjunto de funciones que los tipos pertenecientes deben implementar. A continuacin mostramos algunos ejemplo de funciones que se definen en Num, Ord y Eq.```HaskellNum a:(+), (-), (*) :: a -&gt; a -&gt; anegate, abs, signum :: a -&gt; aetc.Ord a:(=), (&gt;) :: a -&gt; a -&gt; Boolmax, min :: a -&gt; a -&gt; aetc.Eq a:(==) :: a -&gt; a -&gt; Bool(/=) :: a -&gt; a -&gt; Bool```Veamos cmo impacta esto en la definicin de algunas funciones de listas por ejemplo:```Haskellelem :: (Eq a) =&gt; a -&gt; [ a ] -&gt; Boolelem unElemento unaLista = any (unElemento==) unaListamaximum :: (Ord a) =&gt; [a] -&gt; amaximum lista = foldl1 max lista```Lo que nos interesa ms que nada es que se note que gracias a que existen las typeclasses que explicitan cul es el conjunto mnimo de funciones que el tipo concreto debe definir para formar parte de ella, luego podemos construir otras cosas encima usando esas funciones y vamos a poder sacarle el mismo provecho. Las funciones `elem` y `maximum` van a funcionar tanto para &amp;#92;[Int&amp;#92;] como para &amp;#92;[Char&amp;#92;] (o sea, para strings).### Qu tipos pertenecen a cada restriccin?Num: Los tipos concretos ms comunes que integran esta familia son Int y Float.Ord: Adems de inclur a la mayora de los tipos numricos (como Int y Float) incluye a los caracteres, los booleanos (s, hay un orden preestablecido para los booleanos aunque no sea comn usarlo). Tambin incluye a las listas y las tuplas siempre y cuando los tipos que las compongan sean ordenables (por ejemplo los Strings, que son listas de caracteres, son ordenables). Las funciones **no son ordenables**.Eq: Todos los Ord y los Num son tambin esquiparables. Para las listas y tuplas, son equiparables si los tipos que las componen lo son. Las funciones **no son equiparables**.Y los data? Algo muy comn es que querramos que nuestros tipos de datos sean equiparables. Si los tipos de datos que componen a nuestros data lo son, alcanza con derivar Eq y no necesitaremos definir la igualdad. De lo contrario, para que sea Eq ser necesario dar un pasito ms avanzado y declarar que nuestro tipo de dato es instancia de la typeclass Eq e incluir una definicin para la funcin (==) como se explica en el artculo sobre [data](data--definiendo-nuestros-tipos-en-haskell.html).Tambin es muy comn querer que nuestros datos se puedan mostrar, y para eso existe otra typeclass que es## La restriccin ShowCuando utilizamos el intrprete, los resultados de nuestras funciones son valores (valores simples, compuestos o funciones), para que se puedan mostrar por pantalla esos valores tienen que tener una representacin en forma de cadena de caracteres (String).La magia la realiza una funcin llamada show```Haskell&gt; show 3&quot;3&quot;&gt; show True&quot;True&quot;&gt; show (2,3)&quot;(2,3)&quot;```Ahora bien, no todos los valores pueden ser parmetro de la funcin show. Por ejemplo las funciones no tienen una representacin en String```Haskell&gt; show lengthError```Debido a esto, cuando quieren mostrar por pantalla una lista de funciones (ej &amp;#92;[fst,snd&amp;#92;]), una funcin parcialmente aplicada como (3+), o en general una funcin que retorna una funcin les va a tirar un error.Veamos el tipo de la funcin show```Haskellshow :: (Show a) =&gt; a -&gt; String```La nica funcin que se define en la restriccin Show es la funcin showQu tipos pertenecen a la restriccin Show? Bool, Char, Double, Float, Int, Integer, (Show a) =&gt; &amp;#92;[ a &amp;#92;] --Listas, (Show a,b) =&gt; (a,b) --TuplasResumiendo: casi todos todos los tipos menos el tipo funcinAl igual que se mencion anteriormente para Eq, podemos hacer que un tipo de dato propio pueda ser mostrado con la funcin Show ya sea usando **deriving** si slo se compone de otros datos de tipo Show o haciendo que sea instancia de Show y definiendo la funcin Show como querramos.# Para cerrar: El truco detrs de la magiaLas typeclasses se pueden traducir/reescribir a un lenguaje sin typeclasses. Y por lo tanto, como pueden reutilizarse los mecanismos de inferencia de tipos de uno para el otro.Para esta traduccin, se usar la metfora de un method dictionary. Cada tipo va a tener un diccionario con sus funciones sobrecargadas. Luego, cada funcin con *polimorfismo paramtrico*, recibe como parmetro el method dictionary y usa la funcin adecuada:Ejemplo:`squarex=x*x`se transforma en algo como```Haskell--ambosdiccionariossondelmismotipo(queeseltipodefinidoenlatypeclass;))dictInt=...dictFloat=....multidict=dict!!1--suponiendoquelafuncinmultiplicacinestaeneldiccionarioenlaposicin1squaredictx=multidictxx```Y cuando ejecutamos`square3`se traduce, como 3 es un Int, en algo como`squaredictInt3`Alguien que ya tiene conocimientos sobre el [paradigma orientado a objetos](paradigma-de-objetos.html) podra encontrar similitudes con el polimorfismo de ese paradigma desde el punto de vista del uso, pero la realidad es que hay magia en el medio a nivel compilador de modo que siempre se sabe qu definicin de funcin se usar en tiempo de compilacin (no se hace un dispatch dinmico)."

} ,

{

"title"    : "Typedefs y tipos anonimos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/typedefs-y-tipos-anonimos.html",
"date"     : "",
"content"  : "# Descripcin*typedef* es una construccin del lenguaje C que nos permite darle alias a tipos existentes (sinnimos de tipos), de forma similar al *type* de Haskell.Esto es particularmente til a la hora de trabajar en ANSI C con estructuras. Por ejemplo, si definimos una estructura TanqueDeAgua de la siguiente forma:```CstructTanqueDeAgua{intcapacidad_maxima;inttemperatura_del_agua;//etc}```cada vez que querramos utilizar este tipo deberemos escribir:```CstructTanqueDeAguaun_tanque;```Lo cual es ciertamente verborrgico, y nos acopla mucho ms a la implementacin: cuando hablo de un tanque de agua, no me interesa si es un *struct*, un *union* u otra cosa.La solucin a este problema es usar un sinnimo de tipo:```Ctypedefstruct_TanqueDeAgua{intcapacidad_maxima;inttemperatura_del_agua;//etc}TanqueDeAgua```Es decir, *TanqueDeAgua* es ahora un sinnimo para *struct TanqueDeAgua*, con lo que puedo escribirTanqueDeAguaun_tanque.De hecho, dado que siempre referiremos a este tipo a travs de su sinnimo, no es necesario darle un nombre a la estructura &amp;#92;_TanqueDeAgua, ya que podemos definir una estructura annima:```Ctypedefstruct{intcapacidad_maxima;inttemperatura_del_agua;//etc}TanqueDeAgua```"

} ,

{

"title"    : "Integracion de la ui en una arquitectura de un sistema de software",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ui-arquitectura-general.html",
"date"     : "",
"content"  : "# Arquitectura usual de una aplicacin de softwarePara generar una aplicacin, podemos dividir lgicamente los componentes segn el rol que juegan dentro del sistema en s mismo:- **Presentacin**: son elementos que trabajan con la [interfaz de usuario](ui-definiciones-iniciales.html#tocAnchor-1-1), dependientes de la tecnologa- **[Dominio](ui-definiciones-iniciales.html#tocAnchor-1-2)**: son las abstracciones que tienen significado para el que conoce el negocio (una factura, un alumno, un proveedor, una encuesta de satisfaccin de servicio, etc.)- **Persistencia**: son elementos que trabajan en almacenar y recuperar la informacin del sistema en un medio que persista en el tiempo (que no sea voltil).# Formas de divisin de responsabilidades entre cada una de esas partesEsta divisin de responsabilidades se suele denotar como **capas** de una aplicacin. Aqu preferimos utilizar el trmino **concern** o al menos aclarar que la divisin no implica separacin fsica de los componentes. La clasificacin en presentacin, dominio y persistencia tiene que ver con el objetivo que cumple cada componente dentro de la aplicacin.# Interaccin entre la UI y el dominio del sistemaUna idea bastante instalada en el mercado es abstraer la presentacin del dominio tanto como sea posible. De hecho algunos piensan que lo mejor es que no se conozcan/ni se hablen.Entonces la presentacin habla con un objeto intermedio que no tiene comportamiento, solo alguno de los atributos a los que se accede mediante getters y setters. Como la caracterstica de estos objetos es transferir informacion del dominio a la vista se los denomina **Data Transfer Objects o DTO**.Un ejemplo podra ser: en la actualizacin de un empleado se ingresan nombre, apellido, DNI, fecha de ingreso y cargo. En lugar de que la vista conozca a un objeto Empleado que tenga mtodos de negocio (por ejemplo que calcule la antigedad, que sepa cunto cobra, que conteste cuntas horas trabaj un mes, etc.) generamos un EmpleadoDTO, que tiene solamente nombre, apellido, DNI, sueldo mensual en base al cargo y antigedad, stos ltimos dos atributos calculados. El EmpleadoDTO no sabe calcular su antigedad, ni tiene relacin con otros objetos. Esta tcnica puede ser til cuando estamos trabajando en ambientes distribuidos, es decir, en muchas VM que necesito sincronizar.**Pero al separar la presentacin y el negocio de esta manera poco feliz estoy metiendo una solucin que para comunicar dos ambientes OO descarta las principales ideas del paradigma** (el objeto como un ente que agrupa atributos y comportamiento). Incluso es un problema porque tenemos varios objetos que estn representando a un empleado:- el Empleado- el EmpleadoDTOEn definitiva pareciera que la vista no se mezcla con el negocio pero el [acoplamiento](conceptos-basicos-del-diseno.html#tocAnchor-1-5) es claro: para saber cundo fue la ltima vez que le pagu el sueldo necesito:1. generar un nuevo mtodo de negocio si no lo tengo, pero tambin2. agregar un atributo al EmpleadoConsultaDTO para que la vista lo pueda mostrarNuestra idea es que la presentacin no solo hable con el dominio sino que le pida todo lo que le tenga que pedir: en el ejemplo anterior sera muy bueno que la vista le pregunte directamente al empleado cul fue la ltima vez que le pagu.# Links relacionados- [Temario Algoritmos III](algo3-temario.html)"

} ,

{

"title"    : "Clasificacion de las UI",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ui-clasificacion.html",
"date"     : "",
"content"  : "# Concepto de cliente y servidorUna aplicacin puede pensarse desde la ptica del- **cliente**: el que realiza pedidos- **servidor**: el que responde a esos pedidosLa separacin puede ser:- lgica: ambos componentes residen en la misma mquina- lgica y fsica: adems de pensarse como componentes separados el usuario utiliza un cliente en su mquina y accede al servidor que concentra esos pedidos y se encarga de responderlos.Qu tipo de pedidos hace el cliente? Esto depende de la arquitectura sobre la cual trabajemos:# Arquitectura de las UI1. Aplicacin centralizada2. Aplicacin distribuida (Cliente/Servidor)## Aplicacin centralizada![centralizada](/img/wiki/centralized-application.png)El cliente tiene poca o nula inteligencia. El servidor tiene muchas responsabilidades, esto es:- recibe los parmetros del cliente, los valida y los transforma- procesa las acciones de negocio- transforma los resultados de esas acciones y- genera la visualizacin que va a obtener el cliente como respuesta.Del lado del cliente casi no hay lgica, ni de presentacin ni de negocio, es una &quot;terminal boba&quot;. Es el modelo que siguen las arquitecturas mainframe y la web en sus orgenes, donde el browser solo tena capacidades de mostrar la informacin y los controles que el servidor le enviaba.## Cliente / Servidor - Aplicaciones distribuidas![centralizada](/img/wiki/rich_client_application.jpg)En este tipo de aplicaciones, se asume que- los clientes tienen ms capacidad de procesamiento, por lo tanto suelen presentar una interfaz de usuario ms &quot;rica&quot; que las aplicaciones centralizadas (por eso tambin se las suele llamar RIA o _Rich Internet Applications_)- la comunicacin hacia el servidor suele ser un cuello de botella, as que se trata de minimizar la cantidad de informacin a pasar entre cliente y servidor. Por lo general el cliente hace un pedido, la consulta se procesa en el servidor y vuelve la informacin procesada para que el cliente la presente en un formato amigable.- las aplicaciones distribuidas son ms complejas arquitecturalmente: se dividen en 2, 3 hasta _n_ niveles## Peer to PeerOtra alternativa consiste en la red [peer-to-peer (P2P)](https://en.wikipedia.org/wiki/Peer-to-peer), donde cada equipo acta como cliente o servidor dependiendo de si hace un pedido o lo responde (consumer/producer). No existe el servidor como equipo de sincronizacin, sino que cada equipo mantiene su propio estado:![peer-to-peer](/img/wiki/peer-to-peer.png)Ejemplos de aplicaciones peer to peer son Skype, eMule, Torrent, entre otras.## Anlisis comparativo P2P vs. C/S### Ventajas de la visin Cliente/Servidor- **Centralizacin del control**: los accesos, recursos y la integridad de los datos son controlados por el servidor de forma que un programa cliente defectuoso o no autorizado no pueda daar el sistema. Esta centralizacin tambin facilita la tarea de poner al da datos u otros recursos (mejor que en las redes P2P).- **Escalabilidad**: se puede aumentar la capacidad de clientes y servidores por separado. Cualquier elemento puede ser aumentado (o mejorado) en cualquier momento, o se pueden aadir nuevos nodos a la red (clientes y/o servidores).- Dado que hay una cierta independencia entre clientes y servidores, es posible reemplazar, reparar, actualizar o trasladar alguno de ellos con un bajo impacto, siempre y cuando ciertas variables se mantengan estables (debe estar un servidor activo, hay que asegurar el enlace entre los nodos, etc.)- Hay muchas ms tecnologas desarrolladas para el paradigma de C/S.### Ventajas de la visin Peer to Peer- La **congestin del trfico** ha sido siempre un problema en el paradigma de C/S. Cuando una gran cantidad de clientes envan peticiones simultaneas al mismo servidor, puede ser que cause muchos problemas para ste (a mayor nmero de clientes, ms problemas para el servidor). Al contrario, en las redes P2P como cada nodo en la red hace tambin de servidor, cuanto ms nodos hay, mejor es el ancho de banda que se tiene.- El paradigma de C/S clsico no tiene la **robustez** de una red P2P. Cuando un servidor est cado, las peticiones de los clientes no pueden ser satisfechas. En la mayor parte de redes P2P, los recursos estn generalmente distribuidos en varios nodos de la red. Aunque algunos salgan o abandonen la descarga; otros pueden todava acabar de descargar consiguiendo datos del resto de los nodos en la red.- El software y el hardware de un servidor son generalmente muy determinantes: se necesita un buen &quot;fierro&quot; para que un servidor de soporte a una gran cantidad de clientes.- El cliente no dispone de los recursos que puedan existir en el servidor y viceversa. Por ejemplo, una aplicacin que ejecuta en el servidor no puede escribir en el disco local del cliente.# Interfaces orientadas a caracter y grficas- **Orientadas a caracter**: las consolas de configuracin de routers, o las consolas de administracin de herramientas como git, Maven o Travis, el intrprete de comandos de los sistemas operativos, el sistema de reserva de vuelos que trabaja con comandos especficos vs.- **las interfaces grficas**: las que vamos a trabajar mayoritariamente a lo largo de la materia.   Qu caractersticas tienen las interfaces orientadas a caracter?- son menos intuitivas, requiere memorizar comandos y cdigos internos - por esto se tarda ms en aprender las operaciones que con las interfaces grficas- una vez pasada la curva de aprendizaje los usuarios expertos trabajan mucho ms velozmente que en la modalidad grfica# Links relacionados- [Temario Algoritmos III](algo3-temario.html)- [Magic Ink - Information Software and the graphical interface](http://worrydream.com/MagicInk/)"

} ,

{

"title"    : "Definiciones iniciales de ui",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ui-definiciones-iniciales.html",
"date"     : "",
"content"  : "# Interfaz de usuarioEs todo lo que permite a un usuario interactuar con el sistema. Una interfaz se implementa por lo general con una pantalla, pero no es el nico dispositivo posible.Es todo lo que permite a un usuario interactuar con el sistema: esto incluye componentes lgicos (software) y fsicos (hardware). Interfaz de Usuario tambin se puede abreviar por sus siglas en ingls: [**UI (User Interface)**](https://en.wikipedia.org/wiki/User_interface) y en general se suele hablar de la interfaz grfica como la parte de **presentacin** de una aplicacin.# Objetivo de una materia que ensea UINaturalmente, el objetivo de la materia es aprender a programar y disear interfaces de usuario. Sin embargo, la construccin de interfaces de usuario presenta muchos aspectos distintos y por eso conviene entender en cules vamos a hacer foco.## Diseo grfico y diseo de sistemasEn primer lugar, cuando decimos &quot;diseo&quot;, nos referimos tanto al diseo de software como al diseo grfico:- el diseo de sistemas se preocupa por distribuir correctamente las responsabilidades de los componentes que forman una aplicacin, para lo cual necesitamos aplicar los conceptos y patrones de diseo que previamente incorporamos- el diseo grfico de una aplicacin trabaja la disposicin del contenido, la eleccin de colores (principal, secundario, de fondo, etc.), la iconografa, logos, imgenes, la _usabilidad_ de manera que sea cmoda e intuitiva para el usuario y ofrezca un mnimo de resistencia o de adaptacin.Si bien una materia del mbito de las TIC est ms relacionada con el primer punto, no es menor la preponderancia que adquiere ltimamente el diseo grfico, ya sea porque es una responsabilidad directamente delegada a quien construye la UI o bien constituye una actividad interdisciplinaria con un especialista.Nuestro objetivo tambin es concentrarnos en producir aplicaciones que se destaquen por sus cualidades de mantenibilidad, flexibilidad, claridad, robustez, entre otras. En el mbito especfico de las interfaces de usuario, un criterio importante ser separar la responsabilidad correspondiente a la interfaz de usuario de la lgica de dominio. Repasemos entonces de qu hablamos cuando hablamos de &quot;dominio&quot; o &quot;negocio&quot;.# Modelo de dominioCuando le pedimos al sistema que haga algo, hay reglas que rigen el negocio que manejamos.Si el cliente slo puede pagar con cheque a 30/60/90 das, hay una regla de negocio que lo dice. Si un alumno no puede anotarse en un final porque debe una correlativa, hay otra regla de negocio que lo dice. Si un empleado cobra un 10% del sueldo bsico por presentismo, hay otra regla de negocio que lo dice.Lo que forma parte del dominio de mi aplicacin es encontrar- un cliente que tenga un mtodo``` javapublic void pagar(TipoPago tipoPago, BigDecimal monto)```donde se resuelva esa responsabilidad- un alumno que tenga un mtodo``` javapublic void inscribirseAFinal(Materia materia)```donde se resuelva esa responsabilidad- etc.O sea,- si programamos con objetos, el modelo de dominio se compone de objetos con responsabilidades y relaciones que permiten definir los casos de uso del negocio.- si programamos en otro paradigma, el modelo de dominio sern las entidades + los procesos que resuelven las cosas que necesito para la aplicacin.## Complejidades del dominio y de la UIPongamos por caso esta interfaz conocida de Twitter:![twitter](/img/wiki/ui-twitter.gif)El caso de uso &quot;Twittear&quot; parecera no tener una UI tan compleja, aun as, la pgina chequea todo el tiempo la cantidad de caracteres que escribo y en una forma grfica est mostrando el estado de mi tweet, e incluso debe deshabilitar el botn de &quot;Enviar tweet&quot; si excedo el mximo permitido.Por otra parte, una vez validado, el mensaje que recibe el negocio es algo como:```javatwitter.agregarTweet(nuevoTweet)```que debera incorporar ese nuevo tweet a la coleccin (la persistencia requiere de un objeto arquitectural que normalmente est fuera del alcance del objeto de dominio).En general, la lgica de la presentacin **suele ser siempre mucho ms compleja** que la del negocio, aun cuando el negocio pueda (y debera) ayudar a la UI a agregar funcionalidades que mejoren la experiencia de usuario. &gt; **Corolario**: no es verdad que si el dominio est bien construido la presentacin se hace sola, y la implementacin de la presentacin debera estar a cargo de la gente con ms experiencia, algo que lamentablemente no siempre sucede# Qu objetivos nos proponemos al programar una interfaz de usuario?Por supuesto que ande, pero adems vamos a priorizar ciertas cualidades de diseo: mantenibilidad, flexibilidad, claridad, robustez, entre otras. En particular **tratar de no mezclar ideas de presentacin con negocio**. O sea, separar la lgica para definir la interaccin con el usuario y la lgica propia del dominio. Por qu?- porque no quiero que mi dominio se vea afectado por cuestiones tecnolgicas.- porque eso me lleva a perder cohesin en los objetos de presentacin, que adems de encargarse de mostrar la informacin tienen que atacar cuestiones de negocio. Entonces en dos pantallas distintas tengo que repetir la misma validacin o el mismo comportamiento.- porque tengo ms restricciones a nivel usuario y tecnolgicos del lado de la UI (es la parte ms compleja y la menos madura, cuesta encontrar buenas abstracciones)Volviendo al ejemplo de Twitter,- saber qu color de fondo mostrar en el texto ==&gt; es responsabilidad de la UI- determinar qu texto est excedido del tamao de un tweet ==&gt; es responsabilidad del dominio- saber la longitud de un tweet ==&gt; es responsabilidad del dominio- saber si un tweet est excedido ==&gt; es responsabilidad del dominio- saber si un tweet est cercano a excederse ==&gt; es responsabilidad del dominio- mostrar un color celeste, amarillo o rojo como indicador de que el tweet tiene el tamao apropiado, est cercano a excederse o definitivamente se excedi ==&gt; es responsabilidad de la UIMantener separados estos _concerns_ facilita el cambio de tecnologas de la UI, el testeo unitario de ese dominio, entre otras cosas.# Conceptos bsicos del diseo- [Cohesin](conceptos-basicos-del-diseno.html#tocAnchor-1-4)- [Acoplamiento](conceptos-basicos-del-diseno.html#tocAnchor-1-5)Dnde interviene el acoplamiento al programar la UI? El componente de UI va a tener que conocer al componente que maneja la lgica de dominio, de otra manera la aplicacin no va a funcionar. Pero tampoco es bueno que la interfaz defina lgica que es propia del cliente, o de la factura, o de un empleado o de un alumno (para ms informacin ver [Interaccin entre la UI y el dominio del sistema](integracion-de-la-ui-en-una-arquitectura-de-un-sistema-de-software.html)). Es cierto que agregar un atributo que el usuario deba visualizar o modificar a travs de la interfaz fuerza inevitablemente a un cambio en la UI, pero cambios en la lgica de negocio no deberan necesariamente afectar la UI. As que otro de nuestros objetivos ser minimizar el acoplamiento, no por ser puristas, sino porque nos traer como beneficio no vernos impactados por cualquier tipo de cambio.# Links relacionados- [Temario Algoritmos III](algo3-temario.html)"

} ,

{

"title"    : "Elementos a tener en cuenta al programar ui",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ui-elementos-a-tener-en-cuenta-al-programar-ui.html",
"date"     : "",
"content"  : "# ObjetivoAl trabajar con interfaces de usuario, aparecen muchos problemas nuevos que no suelen estar presentes en otro tipo de programas. Con el objetivo de establecer una visin global de la problemtica asociada a una interfaz de usuario, queremos determinar qu cosas deben tenerse en cuenta para producir una interfaz de usuario de calidad.Dividiremos las actividades de una interfaz de usuario en dos grandes grupos. El primero de ellos plantea un modelo de ciclo de interaccin, es decir, el conjunto de actividades que suelen ocurrir en cada **interaccin con el usuario**, en secuencia:- Mostrar al usuario las distintas **acciones que puede realizar** (por ejemplo mediante un men, botones, etc)- Permitir al usuario **iniciar una nueva tarea** o caso de uso.- Permitir al usuario **ingresar informacin** asociada a la tarea que desea realizar.- **Transformar** la informacin ingresada por el usuario al formato en el cual la aplicacin los puede manipular internamente.- Actualizar el modelo de dominio con la informacin recibida.- **Validar** la informacin ingresada por el usuario. Suele haber tres puntos distintos de validacin:    - Previa a la transformacin.    - Posterior a la transformacin y previa a la actualizacin del modelo.    - Luego de actualizado el modelo.- Ejecutar de una **accin de dominio** con la informacin recibida.- Manejar y presentar los **errores** si los hubiera.- Seleccionar la **siguiente vista** que se presentar al usuario y la informacin a mostrar en la nueva vista (por ejemplo, filtrado y/o proyeccin).- **Transformar los resultados** al formato en que pueden ser presentados al usuario.En forma transversal a este circuito bsico se presenta un segundo conjunto de actividades, que no depende de un flujo de interaccin sino que se entremezcla con el primero:- Navegacin de la aplicacin entre las diferentes acciones que permite realizar- Manejo de transacciones, concepto de transaccin desde el punto de vista de la aplicacin- Manejo de la sesin de usuario, es decir, en el contexto de una aplicacin multiusuario, la informacin relativa a la actividad de cada uno de los usuarios- Internacionalizacin- Distintas formas de verificacin# Criterios de calidad## Con respecto a la construccin- Consistencia, robustez.- Simplicidad, claridad.- Desacoplamiento entre dominio y UI- Desacoplamiento entre lgica y tecnologa- Testeabilidad o verificabilidad.## Con respecto a la usabilidad- Claridad- Consistencia.- Riqueza (richness)- Feedback- Perfomance y percepcin de performance.- Intuitividad, autoaprendizaje.# Links relacionados- [Temario Algoritmos III](algo3-temario.html)"

} ,

{

"title"    : "Formas de vincular una vista con el modelo de dominio",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ui-mvcpesado-formas-de-vincular-una-vista-con-el-modelo-de-dominio.html",
"date"     : "",
"content"  : "# Interacciones entre vista y modeloDado que el objetivo de la interfaz de usuario es permitir la interaccin con el modelo de dominio, cada uno de los elementos que conforman la interfaz de usuario tendr como tarea alguna parte de esta interaccin, ya sea mostrar al usuario una porcin del modelo de dominio, o bien permitirle realizar acciones que lo modifiquen.Una forma simple de ordenar una interfaz de usuario es considerar que cada vista (que puede ser una ventana, una pgina o bien una porcin bien delimitada de una vista ms grande) tiene como responsabilidad interactuar con un nico objeto de dominio. A este objeto de dominio lo denominaremos modelo de la vista.Desde esa premisa bsica podemos imaginar que cada vez que haya un control editable en una vista, ese control estar editando algn atributo del modelo. Luego, las modificaciones que realicemos sobre estos controles editables, de alguna manera debern ser *impactadas* sobre los atributos asociados. Al componente de software que toma la responsabilidad de impactar esos cambios lo denominamos controller.Los mecanismos para trasladar o impactar una modificacin hecha por el usuario sobre cualquier control editable se pueden dividir en dos grandes grupos:-   Vinculacin indirecta o manual-   Vinculacin directa o automtica (*binding*).# Vinculacin indirectaEn este tipo de estrategias los controles editables de la UI toman la responsabilidad de almacenar los valores que va ingresando el usuario a la espera de un evento que *dispare* la ejecucin de la operacin (en aplicaciones web este evento suele ser el *submit* de un formulario HTTP).Naturalmente, ante esta disociacin, el objeto de dominio asociado no se ve afectado por las acciones del usuario hasta que no se produzca el evento antes mencionado. En el momento que se produce el *submit*, el controller deber tomar la responsabilidad de leer todos los valores del formulario de los controles en los que fueron almacenados y recin ah impactarlos en el modelo de dominio.De esta forma, cualquier validacin o modificacin dinmica de los valores en la vista deber ser realizada sin la intervencin del dominio o bien esperar hasta el momento del submit para poder llevarse a cabo. Esto incluye a muchos de los comportamientos denominados *ricos* de una UI, por ejemplo:-   Validaciones realizadas a medida que se cargan los datos en un formulario-   Valores que dependen unos de otros (un caso tpico: combos anidados).-   Controles que se habilitan o deshabilitan dependiendo de los dems valores ingresados.La principal desventaja de este esquema radica en la no-intervencin del modelo de dominio durante la interaccin con el usuario, lo que impide aprovechar toda la lgica que contenga este objeto, que deber tomar uno de dos caminos:-   Esperar al momento de submit para intervenir, con lo cual se pierden muchas de las posibilidades de UI *rica* enunciadas en la enumeracin anterior.-   Duplicar la lgica ya contenida en el modelo de dominio, replicndola en la interfaz de usuario de forma de poder realizar validaciones y otros comportamientos dinmicos basndose en el contenido de los controles.La primera de las opciones produce una limitacin en las posibilidades que la UI le puede brindar al usuario, hacindolo en muchos casos inviable o en otros perdiendo calidad en la UI. La segunda produce una duplicacin de la lgica que podemos analizar desde dos perspectivas distintas.Por un lado, toda duplicacin de cdigo genera una potencial inconsistencia ante la posibilidad de que una de las dos partes se modifique quedando la otra desactualizada.Por el otro, la lgica propia del dominio metida dentro de la interfaz de usuario resulta mucho ms incmoda de programar ya que deberemos adaptarnos a las restricciones tecnolgicas de componentes que estn diseados prioritariamente para la interaccin con el usuario. Como un ejemplo de las dificultades que aparecen, podemos mencionar que en lugar de tener la informacin necesaria almacenada en variables que tengan un tipo y toda la potencia de nuestro lenguaje de eleccin, deberemos tener los valores contenidos en controles, en muchos casos sin poder exigir que sean de un tipo determinado. Y entonces lo que para nosotros en el dominio es un nmero o una fecha en la UI ser un String o lo que para nosotros es una referencia a otro objeto de dominio en la UI ser un cdigo (String) o un ndice numrico en una lista.Naturalmente todas estas restricciones hacen al cdigo ms complejo y ms propenso a errores, lo que nos lleva a evaluar la siguiente alternativa.# BindingEn este esquema, lo que se buscar es automatizar el pasaje de informacin entre la vista y el dominio. Es decir, se proveer una descripcin ([declarativa](declaratividad.html)) de la vinculacin entre los componentes visuales y el modelo de dominio para que un componente genrico se ocupe de mantenerlos mutuamente sincronizados.A esta descripcin de la vinculacin entre ambos la solemos llamar binding y puede incluir entre otras cosas:-   Un mapeo entre un componente visual y un elemento del dominio, tpicamente cada control de la vista estar asociado a un atributo de un objeto de domino.-   Conversiones a realizar (por ejemplo si el valor a ingresar es una fecha y se ingresa desde la UI como texto, deber proveerse el formato esperado y la lgica para convertir de ese formato a la representacin interna de fechas que use el modelo de dominio).-   Validaciones a realizar (dado que uno de los objetivos es aprovechar la lgica del modelo de dominio, normalmente las validaciones -salvo las propias de la conversin- sern delegadas en el modelo de dominio y por lo tanto la descripcin de la validacin consistir en algn mecanismo para indicar qu consulta realizar sobre el dominio para poder efectuar la validacin en cuestin).Esta estrategia busca fundamentalmente dos objetivos:-   Simplificar la sincronizacin entre ambas partes de la aplicacin, basndose en componentes reutilizables.-   Aprovechar la lgica contenida en el modelo del dominio para tomar acciones durante su propia edicin.El segundo de estos objetivos es el que suele proponer a veces algunas dificultades, ya que para aprovechar la lgica se necesita impactar las modificaciones realizadas sobre la UI directamente sobre el objeto de dominio. En los casos de aplicaciones que tienen un comportamiento transaccional desde el punto de vista del usuario, esta accin directa sobre el dominio implica algn mecanismo para garantizar que en caso de cancelar la operacin el objeto queda sin cambios, en su estado original antes de comenzar.Adicionalmente esta fuerte vinculacin entre la vista y el dominio nos puede presentar dificultades si la vista tiene requerimientos que no son fcilmente atribuibles a un objeto del dominio, es decir, comportamiento especfico de la vista. Ejemplos de comportamiento propios de la vista podran ser paginar una grilla o dividir la informacin del objeto entre mltiples vietas o *tabs*.Se necesitan entonces herramientas para manejar el nivel de acoplamiento entre la vista y el modelo de dominio, tanto por cuestiones de transaccionalidad como para poder asociar comportamiento no dependiente del dominio.## Binding transaccionalCitamos a continuacin algunos de los mecanismos utilizados para desvincular el dominio de la vista para proveer a nuestra aplicacin de un comportamiento transaccional:### Aprovechamiento de la transaccionalidad de la persistenciaEs frecuente encontrar aplicaciones donde la transaccionalidad est delegada en el mecanismo persistente, con frecuencia una base de datos relacional. Si el modelo de dominio de la aplicacin es persistido en un mecanismo con soporte transaccional y adems el ciclo de vida de los componentes de dominio est dominado por la persistencia (es decir, el objeto de dominio dura en memoria slo durante una transaccin y luego es descartado), entonces simplemente cancelando la transaccin de persistencia se logra descartar los cambios realizados al modelo de dominio. Esta estrategia es muchas veces la ms simple, y si bien tiene algunas limitaciones tcnicas, es una de las ms utilizadas.###  Postergacin del binding mediante copias o wrappersEsta estrategia se basa en bindear la vista contra un objeto que no sea exactamente el dominio, para luego volcar los datos sobre el dominio en un paso posterior (probablemente en el submit). Esto permite garantizar que el dominio no se ver modificado hasta finalizar la accin del usuario, al mismo tiempo que trabajar el comportamiento dinmico de la vista sobre un objeto independiente de la tecnologa de presentacin. De esta manera, esta estrategia presenta una alternativa intermedia entre una vinculacin manual y una automtica.Existen dos variantes a esta estrategia. La primera de ellas es utilizar una copia del objeto de dominio a editarse, que luego deber reemplazar al original en el dominio o bien trasvasar la informacin de un objeto a otro. La ventaja de esta estrategia es que permite reutilizar toda la lgica propia del objeto de dominio. El problema es que cuando se editan varios objetos relacionados desde la misma vista, impactar luego los cambios en el dominio puede resultar complejo.La segunda variante es utilizar un wrapper u otro objeto que no sea de la misma clase que el original. Lo interesante de esta tcnica es que provee un mayor desacoplamiento entre vista y modelo (ver *modelo de aplicacin* en el apartado siguiente). La desventaja es que obliga a duplicar la informacin del objeto original en este nuevo objeto (Al menos en un lenguaje basado en clases, en lenguajes con mecanismos de herencia ms flexibles esta problemtica puede ser resuelta de otras maneras, como mixins o traits. Lamentablemente, la mayora de los lenguajes ms populares hoy en da no proveen este tipo de mecanismos.)### Transaccionalidad a nivel de dominio  Otra posibilidad es permitir que los objetos de dominio manejen la transaccionalidad, es decir, permitir que sean modificados y, en caso de ser necesario, delegar en ellos mismos la responsabilidad de volver atrs los cambios cancelados por el usuario. Esto puede ser hecho manualmente (aunque puede resultar engorroso) o de forma automtica, por ejemplo mediante aspectos.# Comportamiento a nivel de vistaA veces es necesario tener comportamiento en la vista que no es atribuible a ningn objeto de dominio. En ese caso algunas de las estrategias posibles son:## Modelo de aplicacin  Llamamos modelo de aplicacin a un objeto que tiene lgica que no es atribuible a un objeto de dominio, sin embargo es independiente de la tecnologa, por lo tanto podemos considerarlo modelo. Un objeto de estas caractersticas nos provee de un espacio en donde colocar lgica utilizando las mismas herramientas del dominio pero sin tener que restringirnos a las limitaciones que solemos establecer sobre los objetos de domino.Tpicamente los casos de uso complejos de una aplicacin tendrn un modelo de este tipo que contemple la lgica necesaria para llevarlos a cabo. Pueden tener tanto lgica de navegacin como de visualizacin, aunque en algunos casos tambin se decide separar ambos tipos de lgica.## Value Models  Otra forma de desacoplar la vista y el modelo es proveyendo un almacenamiento intermedio para cada control, que guarda el valor manejado por el control hasta el momento del submit, en el cual ser volcado al modelo de dominio. Al objeto que contiene el valor durante ese tiempo se lo denomina ValueModel y la principal diferencia con la estrategia anterior es que en ese caso se tena un nico intermediario para toda la vista, mientras que ahora tenemos un intermediario por cada control.Un ValueModel provee de la posibilidad de definir trasnformaciones y validaciones a cada control. Una ventaja importante de este mecanismo es que provee de una forma sencilla de reutilizar la lgica de transformacin y validacin.Por otro lado, la atomizacin de estos objetos dificulta la posibilidad de establecer lgica sobre este modelo que dependa de ms de uno de los controles de la vista.En los casos en que la relacin entre la vista y el modelo de dominio es muy lejana, una solucin posible es descartar el binding y pasar a una estrategia de interaccin manual entre vista y dominio, aunque, claro, eso implica perder parte de las ventajas de automatizar este comportamiento.# Links relacionados-   [Ejemplos de Binding entre vista y modelo](ejemplos-de-binding-entre-vista-y-modelo.html)"

} ,

{

"title"    : "Intro a MVC",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ui-mvcpesado-intro-mvc.html",
"date"     : "",
"content"  : "# Qu necesitamos para construir una UIVamos a armar una lista de cosas que necesitamos para poder desarrollar una aplicacin que tenga interfaz de usuario. Sobre algunas (en negrita) vamos a hablar en este momento, las otras irn apareciendo prximamente:- Elementos grficos / controles / widgets.- Layout o forma de organizar visualmente los widgets.- Binding (de atributos y de acciones).- Navegacin (cmo es el flujo de una vista a otra y cmo se pasa informacin desde una vista a otra).- Manejo del estado conversacional de los datos que se cargan en la vista.# Elementos grficos o widgets (los controles)Podemos clasificar a los controles de la siguiente manera:- container: agrupan otros controles, siguiendo el pattern Composite. Son el formulario, el frame, el groupbox, las solapas, etc. - value holders o los que permiten ingresar un valor: calendars, textbox, checkbox, combo,- radiobutton, etc. - que trabajan sobre conjunto de datos: la grilla, el listbox, treeview (para mostrar - informacin jerrquica), etc.- que disparan acciones: button, link  # LayoutCmo disponer esos elementos grficos en la pantalla: ## **layout definido en forma visual**Eso suele generar cdigo por abajo que est pensado en pxeles x@y (un punto) sobre la pantalla. Tener herramientas visuales WYSIWYG nos ayuda a no tener que explicar &quot;quiero el botn ac&quot;, armar la pantalla con una toolbar de controles es ms fcil que tener que explicarlo programando, resulta ms intuitivo. Por otra parte lo visual me ata, la mayora de las decisiones que tomo al construir la pantalla no quedan registradas en ningn lado. Yo se que estoy alineando los controles pero no digo en ningn lado alineado a qu porcentaje: es un 40% del ancho de la pantalla? Y... &quot;ms o menos&quot;. Si tengo que agregar un campo nuevo a una pantalla con una herramienta visual tengo que volver a acomodar toda la pantalla, tirar para &quot;abajo&quot; los controles que ya estn, volver a respetar el margen, etc. etc.De la misma manera cada vez que me siento a disear una pantalla nueva tengo que tener en cuenta todas estas definiciones que no estn escritas (o pueden estar en un documento que yo me tengo que encargar de respetar: estilos de fuente, disposicin de controles, orden de la botonera: Cancelar primero y Aceptar despus, o al revs, etc.) Esto ocurre aun cuando las herramientas visuales me generen cdigo en Java (o bien generen cdigo propietario que luego se interpreta para armar la parte visual), porque el proceso de creacin de la pantalla queda en la cabeza del que la desarrolla... ## layout definido en forma programticaCuando en lugar de tener una herramienta visual lo codifico me puede pasar lo mismo si no encuentro formas de decir:- &quot;los labels siempre se alinean a la derecha&quot;,- &quot;todos los controles de carga de datos del formulario ocupan 70% de la pantalla&quot;, - &quot;la botonera se arma siempre: Cancelar, Aceptar y algunos botones configurables&quot;, etc. Qu buscamos al definir el layout de la interfaz? 1) que yo no hable en absoluto y trabaje sobre ideas relativas. 2) pero adems, yo tengo que poder decir de alguna manera y en un solo lugar &quot;esto va abajo&quot; , &quot;esto va arriba&quot;, &quot;el botn Cancelar va a la izquierda del Aceptar&quot;, &quot;todos los botones se agrupan abajo del formulario y centrado&quot;, de esa manera es ms fcil despus alinear las botoneras de todas las pantallas a la izquierda, o bien cambiar el layout de la botonera (por ejemplo para que los botones aparezcan a la derecha de la pantalla uno abajo del otro).![image](/img/wiki/thinking_layout.jpg)Lo que est dentro de la nube debera &quot;reificarse&quot; (llevar esa abstraccin al cdigo, esa abstraccin es el Layout).# BindingLo que hace que la pantalla tenga sentido es que los elementos grficos estn relacionados con el dominio. O sea, hay una relacin entre los elementos grficos y los de dominio: muchos elementos grficos son representaciones visuales de elementos de mi dominio,- que pueden mostrar informacin o permitir editarla (la fecha de un alquiler, el nombre de un actor),- o disparar acciones (el alta de un socio, la bsqueda de pelculas segn un criterio, etc.)# Intro a MVCEl binding relaciona parte visual y la informacin que est relacionada. A la primera se la suele llamar vista, a la segunda modelo.El binding se puede dar de dos maneras:- la vista es la nica que actualiza el modelo V &gt; M. Ejemplo: un procesador de texto. Entonces es claro que el flujo va solamente de pantalla a modelo.- la vista actualiza el modelo o el modelo puede actualizarse desde otro contexto y tonces el modelo dispara la notificacin a la vista. V  M. La segunda visin (la notificacin en ambos sentidos entre modelo y vista) es la que da sentido a separar modelo de vista para poder reutilizar el modelo en ms de un contexto (ej: si queremos tener una pantalla de Alta de un Socio para un videoclub o bien subir un Excel con un conjunto de socios y que dicha carga sea masiva)  Vamos a darle la responsabilidad a alguien (que llamaremos controller) para que se encargue de manejar el binding de atributos y acciones en forma bidireccional (o sea: hacia la vista y hacia el dominio). Para eso vamos a trabajar de la siguiente manera: la vista se va a registrar como interesada en el modelo. Entonces cada vez que alguien actualice el modelo, se va a disparar una notificacin hacia determinados interesados (esta sera una implementacin del Observer pattern).![mvc](/img/wiki/mvc.jpg)En definitiva, si la aplicacin est bien construida lo que pasa es:1. un cambio en la vista dispara un mensaje a un objeto de negocio2. el negocio modifica su estado interno y dispara la notificacin a la vista (en realidad, a todos los interesados, la vista es slo uno ms)3. la vista se actualiza con la informacin del objeto de negocio (esto puede significar que ahora un campo est deshabilitado o que mostremos el socio en color azul porque ya no debe plata)O sea: vista y negocio estn sincronizados todo el tiempo, cada uno sabe qu tiene que hacer:- el negocio sabe su lgica- la vista sabe cmo mostrar la informacin del negocio.# Links relacionados- [Temario Algoritmos III](algo3-temario.html)"

} ,

{

"title"    : "Application model. Extendiendo el MVC.",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ui-mvcpesado-mmvc.html",
"date"     : "",
"content"  : "# IntroduccinEn Arena cada vista requiere un modelo. Esto implica encontrar una abstraccin que pueda cumplir esa responsabilidad. Algunas pantallas como el conversor de millas a kilmetros utilizan un objeto de dominio como modelo; pero cuando la complejidad de la interaccin con el usuario crece, no nos alcanza con tratar de resolverlo con un objeto de dominio como Celular, Socio o Pelcula.Entonces nuestro objetivo es tener un objeto que sea totalmente independiente de la tecnologa, pero que tenga todo el comportamiento necesario de la aplicacin. Es la representacin del comportamiento global de la aplicacin sin la componente tecnolgica.# Algunos ejemplosUna pantalla de bsqueda de clientes de una compaa que vende celulares:![image](/img/wiki/mmvc-ejemplo1.png)Una ventana para crear un pedido, que selecciona cliente y producto (y tambin permite darlos de alta):![image](/img/wiki/mmvc-ejemplo2.png)E incluso podemos pensar que una pantalla de alta o edicin puede manejarse con un application model, esto permite no tener una referencia extra para conocer al home o repositorio:# ObjetivoConsideramos importante la separacin entre los componentes de la aplicacin que dependen de la tecnologa (vista, controller) y los que no (modelos de aplicacin o de dominio). Y el application model nos da la herramienta para lograr eso.Esta estrategia nos permite:- Tener un modelo rico, en el cual poder programar y disear libremente, sin dependencias tecnolgicas.- Por ser independientes de la vista pueden ser testeados unitariamente con herramientas sencillas (las que ya conocen, sin la complejidad de las herramientas de testeo automtico para interfaces de usuario, vean para eso los tests del ejemplo de los celulares).- Por adaptarse a las necesidades de la vista, simplifican el mapeo que realizan los controllers.El application model funciona como buffer entre la vista y el modelo de dominio y nos va a permitir construir esa parte de la aplicacin programando con objetos y en nuestro lenguaje de preferencia, en lugar de tener que adaptarse a un framework, tecnologa o lenguaje que no tiene la misma potencia. Algunas variantes de ese concepto se pueden ver en el artculo [formas de vincular una vista con el modelo de dominio](ui-mvcpesado-formas-de-vincular-una-vista-con-el-modelo-de-dominio.html).# Objeto de dominio vs. application modelPodemos encontrar dos diferencias importantes:- El application model tiene otra naturaleza en cuanto a la forma en que aparece, no est (a priori) entre los conceptos que maneja el usuario.- Tiene otro ciclo de vida. Los objetos del dominio se crean, se guardan (utilizando probablemente un repositorio persistente), luego se pueden consultar, modificar, etc. En cambio los objetos de aplicacin se usan una sola vez, suelen tener el estado conversacional entre un usuario y la aplicacin, representan un caso de uso.# Esquema MMVCEl objeto Application Model da origen al esquema MMVC [1]:- V - Vista: la pantalla `*Window`- C - Controller: adapta la vista con el modelo, en el caso de Arena son muchos objetos con responsabilidades bien definidas que se relacionan con el application model: binders, transformers, filters, etc.- M - Modelo de la vista/modelo de aplicacin/application model: modela al caso de uso, mantiene simple el binding con la vista- M - Modelo de dominio![image](/img/wiki/mmvc-grafico.png)"

} ,

{

"title"    : "Navegación",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ui-mvcpesado-navegacion.html",
"date"     : "",
"content"  : "# IntroduccinLa navegacin es un subconcepto de una incumbencia ms general de nuestra aplicacin, y en particular de nuestra interfaz de usuario: la **interaccin**. Toda accin del usuario sobre la interfaz es una interaccin. Navegacin se refiere en particular a esas interacciones que el usuario realizar para poder llevar acabo diferentes **tareas**. En general sern todas las interacciones relacionadas con el ciclo de vida de una **tarea**:- cmo **iniciar** una tarea- cmo **terminar** una tarea:  - exitsamente  - cancelndola- ser posible realizar tareas **en simultneo**?- podr el usuario **anidar tareas** (realizar una subtarea mientras an sigue con la tarea ms general)?Cmo vern aqu, tanto nombrar el concepto de tarea les dar la idea de que es un concepto importante, ya que la navegacin se define en base a ella. Pero entonces bajmoslo a algo concreto, qu sera una tarea?# Tarea / Caso de usoNos referimos a tarea aqu como una unidad de trabajo que comienza y realiza un usuario sobre el dominio.Por ejemplo, en un sistema de gestin de un videoclub:- Crear un nuevo usuario- Alquilar una pelcula- Buscar un usuario- Eliminar un usuario- Crear una nueva pelcula- Buscar una pelcula- etc.Esta definicin tiene cierta similitud con la idea de caso de uso del anlisis de requerimientos. Por eso a veces se utilizan ambos trminos intercambiablemente.Pero entonces, cmo se relacionan las tareas con la UI?# Relacin entre una tarea y los elementos de UILa relacin entre las tareas y la UI es justamente la navegacin.  Esta navegacin, o su implementacin va a depender de varios factores:- La arquitectura: por ejemplo,  - Aplicacin standalone de escritorio  - Aplicacin web distribuida  - Aplicacin mvil distribuida- Los dispositivos:  - PC  - Handhelds: PDA, Palm  - Mobile: android  - Dispositivos dedicados o de ciertas industrias particulares- La tecnologa que estemos usando: lase el framework que estemos usando. Las capacidades que nos brinde y sus limitaciones. Por ejemplo, Arena no les permite acceder a los controles propiamente dichos (ejemplo, acceder al texto actual de un TextBox, o a su propiedad `borderWith`).- Los requerimientos de usuario:  - La interfaz de usuario es un elemento ms de nuestro sistema, y como todo el usuario/cliente puede tener una idea preconcebida de lo que quiere de ella. De hecho, la interfaz es uno de los puntos centrales ya que es justamente la cara visible para el usuario.As como hemos visto previamente cmo vincular nuestro dominio con la interfaz de usuario (a travs de bindings, por citar un ejemplo), la manera de implementar una **tarea**  y su **navegacin** va a depender de todos estos factores que nombramos.# Un ejemplo concretoSi estamos en una aplicacin de facturacin minorista de cualquier negocio, pensemos la vista del caso de uso &quot;Crear factura&quot;, y en particular cmo sera la navegacin para seleccionar al cliente. Tenemos varias opciones:- el cliente se selecciona en un campo de autocompletado. El usuario no necesita salir de la pgina.- el cliente se selecciona navegando una bsqueda por diferentes criterios, lo que implica ir hacia una vista nueva (una ventana de dilogo).- adicionalmente, qu estrategia adoptamos si se trata de un cliente nuevo? necesitamos salir de la vista &quot;Crear factura&quot; y navegar a la vista del caso de uso &quot;Crear cliente&quot; o podemos cargar datos mnimos del cliente sin tener que perder el foco en lo que venimos haciendo? la vista que carga el cliente est como una ventana de dilogo o est embebida en el caso de uso actual?# Links relacionados- [Temario Algoritmos III](algo3-temario.html)"

} ,

{

"title"    : "Arena. Manejo de transacciones.",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ui-mvcpesado-transaccion.html",
"date"     : "",
"content"  : "# IntroduccinSi estamos modificando los datos de una entidad, es frecuente hacerlo en un formulario que tiene dos acciones posibles: aceptar o cancelar los cambios.![edicion-1](/img/wiki/arena_transaction.png)Cuando la UI tiene binding, cualquier modificacin que haga el usuario impacta directamente en el modelo. Qu alternativa tenemos entonces para volver atrs los cambios si el usuario desiste la accin?# Sincronizacin mediante repositorios persistentesSi estamos en un esquema distribuido, una opcin puede ser que nuestro repositorio trabaje con un **medio persistente**, con dos objetivos:- sincronizar la informacin de las distintas sesiones de usuario- proveer un ambiente donde las operaciones son transaccionales (todas las actualizaciones ocurren al mismo tiempo o si falla alguna se cancelan las restantes)En ese caso cuando el usuario presiona el botn Aceptar se enva un mensaje al repo para que actualice el objeto del formulario, caso contrario el repo no recibir ninguna notificacin. Cuando un usuario en otra VM diferente quiere actualizar el mismo cliente, el objeto repositorio toma la informacin del medio persistente para recrear los datos del cliente actualizados. El medio persistente acta como &quot;la nica fuente de verdad&quot;, y mientras que los objetos que estn en el ambiente son simplemente un _buffer_ o estado temporal antes de ser almacenados en el medio.![two_users](/img/wiki/arena_transactions_2.png)# Trabajo en una nica VM con bindingSi en nuestra aplicacin el repositorio considera la VM de objetos como la _single source of truth_, el mecanismo de binding puede traer efectos colaterales: **cada vez que el usuario modifique el nombre, eso tiene un impacto inmediato en el modelo** y tenemos que pensar qu debemos hacer si el usuario quiere cancelar la operacin de edicin para que efectivamente se deshagan los cambios.![single_vm](/img/wiki/arena_transactions_3.png)## Opcin 1: Manejo manual de los cambiosLa primera alternativa consiste en generar una copia del objeto original y asociarlo como modelo de nuestra ventana de modificacin.- al cancelar no necesitamos hacer nada, porque los cambios se hicieron contra un objeto que no est asociado al repositorio- al aceptar, pisamos el objeto original (referenciado desde el repositorio) con los nuevos atributos del objeto copia.![copy](/img/wiki/arena_transactions_4.png)## Opcin 2: Elementos transaccionales de ArenaArena propone un esquema para no tener que resolver esto manualmente:- todos los objetos que sean modelos de una vista se anotan como `@Transactional`, para indicar a Arena que participa dentro de una transacccin. Esto incluye a los objetos de dominio y tambin a los objetos que modelan un caso de uso (que llamamos application model, se explican en el formulario de bsqueda).- como adems queremos que disparen notificaciones a las vistas y dems interesados, debemos mantener la annotation `@Observable`- tambin existe la anotacin `@TransactionalAndObservable` (cualquiera de las dos variantes funciona exactamente igual)- la vista debe heredar de `TransactionalDialog`Y con esto nos alcanza, Arena utiliza la vista para delimitar el alcance de una transaccin: cuando el usuario presiona el botn Aceptar se finaliza (`commit`). En caso de error, o de presionar el botn Cancelar, la transaccin se deshace (`rollback`), y los cambios se pierden.El lector interesado puede consultar [el ejemplo de los celulares](https://github.com/uqbar-project/eg-celulares-ui-arena-xtend) que trabaja automticamente la transaccin.# Links relacionados- [Temario Algoritmos III](algo3-temario.html)"

} ,

{

"title"    : "Validaciones y manejo de errores en la UI",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ui-mvcpesado-validaciones-errores.html",
"date"     : "",
"content"  : "Podemos ver un repaso del tema excepciones en [esta pgina](excepciones-avanzadas.html)# IntroduccinConsideremos el ejemplo de los clientes de una empresa de celulares, donde tenemos un formulario que permite ingresar- nombre del cliente- nmero de celular- modelo de celular- si quiere recibir el resumen de cuenta en el domicilio# Validaciones a implementar1. El nmero debe contener slo dgitos numricos1. El modelo de celular debe ser un modelo vlido1. Los nmeros de celular deben ser mayores a 10001. No puede ingresarse el mismo nmero de telfono para dos clientes diferentes1. Algunos modelos de celular exigen que sus clientes reciban el resumen de cuenta en su domicilioQu hacemos en cada caso? Quin es responsable de cada validacin?# Momentos de la validacin## El nmero debe contener slo dgitos numricosSi el objeto de dominio Celular define el nmero de telfono como un Integer, no es posible hacer```scalacelular.numero = &quot;A&quot;```eso **no compila**. Pero la UI podra tener un cuadro de texto que permita ingresar caracteres alfanumricos: entonces tenemos que elegir cul va a ser el comportamiento del sistema1. permitir ingresar caracteres invlidos pero mostrar un mensaje de error: en Arena esto lo hace por defecto el controller que adapta lo que el usuario carga a lo que el dominio necesita. El panel de errores (ErrorsPanel) captura cualquier excepcin que ocurra en la conversin, ya sea que lo incluyamos manualmente o por una ventana que herede de `SimpleWindow`.1. podramos pensar: para qu dejamos que el usuario ingrese un caracter invlido si luego lo vamos a rechazar? La segunda variante consiste en definir un filtro que no permita que el usuario pueda ingresar caracteres alfabticos si queremos que ingrese nmeros. Para esto...### Opcin 1: Definimos un filterEsta es la versin en lenguaje Java:```javanew TextBox(form)    .withFilter(new TextFilter {        public boolean accept(TextInputEvent event) {            return StringUtils.isNumeric(event.getPotentialTextResult());        }    })    .bindValueToProperty(Celular.NUMERO);```La misma versin en lenguaje Xtend:```scalanew TextBox(form) =&gt; [    withFilter [ event | event.potentialTextResult.matches(&quot;[0-9,.]*&quot;) ]    bindValueToProperty(&quot;numero&quot;)    width = 100]```Qu es el TextFilter dentro del MVC? El TextFilter es un **controller**, porque se comunica con el dominio _(le manda un mensaje al modelo - en el caso de estar ok el input)_ y acta sobre la vista _(en la pantalla no aparece ese caracter, se filtra)_.### Opcin 2: Utilizamos un control especfico para ingresar nmerosDesde Arena 3.6.1 tenemos un control NumericField que se encarga de filtrar los caracteres alfabticos:```java// Javanew NumericField(form).setWidth(150).bindValueToProperty(&quot;numero&quot;);``````scala// Xtendnew NumericField(form) =&gt; [    value  &quot;numero&quot;    width = 100]```Internamente est utilizando un Filter, lo importante es que tenemos una abstraccin de alto nivel que est diciendo &quot;quiero un control donde slo se puedan cargar nmeros&quot;.Entonces la primera variante es impedir cualquier ingreso invlido por parte del usuario: Esto tiene como ventaja ser fail fast, evita ingresos incorrectos y esto para el usuario es ms beneficioso.## Otras formas de evitar acciones incorrectasSiguiendo la anterior linea de pensamiento, debera dejar que el usuario presione el botn Aceptar, solo para mostarle un mensaje de error despus? no debera habilitar el botn Aceptar solamente cuando todos los controles se hayan cumplido satisfactoriamente?Aqu vemos que esta estrategia tiene un lmite: en ciertos casos las validaciones del negocio pueden ser verdaderamente complejas como para poder dejarlas en forma explcita en la pantalla. Entonces el usuario sentir una lgica frustracin de no poder avanzar con el caso de uso cuando el botn Aceptar est inhabilitado y no quede claro por qu. **Una regla importante para la usabilidad de un sistema es que debe explicar claramente al usuario qu informacin no cumple las reglas de negocio y adems cmo debe continuar para llegar al caso exitoso**.# Implementando las validaciones restantes## El modelo de celular debe ser un modelo vlidoEl responsable es el celular? s, si lo pensamos como un dato obligatorio, pero claramente participan1. la UI que gua al usuario mostrndole un combo con las opciones vlidas, el usuario no puede elegir un modelo inexistente, a lo sumo puede dejarlo vaco2. si yo permito que el combo quede vaco, el dominio (el objeto celular) debera validar que el celular no deje en blanco el campo modelo. El form builder permite en sus opciones decirle &quot;este combo no tiene la opcin vaca&quot;.```java// JavaSelector selector = new Selector(form) //     .allowNull(false);``````scala// Xtendnew Selector(form) =&gt; [     allowNull(false)```El tema es que al dar de alta un celular el binding es contra un atributo nulo, entonces el combo queda igualmente vaco. Dnde voy a poner la validacin del celular? En la clase Celular, un mtodo validar() qu va a devolver? void, o exception si hubo error... nada de cdigos de error numricos, como saben. Porque si todo sale bien slo sigo enviando mensajes a los objetos que corresponden. Y si algo sale mal se que tengo que atrapar una excepcin en la vista.Entonces no acoplo innecesariamente las validaciones del modelo a la vista. La pantalla de edicin slo tiene que saber que pueden ocurrir dos tipos de error posibles:- **errores de negocio:** surgen de las restricciones que el negocio va poniendo (no pods ingresar un modelo inexistente, no pods poner caracteres alfabticos en la lnea del celular). Esto lo modelamos con una UserException.- **errores de sistema:** son errores propios de la programacin, o errores generales del sistema (algo se rompi). Estos no los modelamos, simplemente ocurren: son los NullPointerException, OutOfMemoryError, etc.Codificamos entonces el mtodo validar:```java// Javapublic void validar() {   ...   if (this.modeloCelular == null) {      throw new UserException(&quot;Debe ingresar un modelo de celular&quot;);   }}``````scala// Xtenddef void validar() {    ...    if (modeloCelular == null) {        throw new UserException(&quot;Debe ingresar un modelo de celular&quot;)    }}```Quin debe atrapar esta excepcin que tira el negocio? Eso tiene que estar del lado de la tecnologa de presentacin: en la vista o ms precisamente en el controller, all debe estar el bloque try/catch para trabajar tanto los errores de negocio como los de sistema:- si ocurre un error de usuario/negocio, el mensaje contiene informacin importante para el usuario. Entonces hay que mostrarle un cartel (o dejar una parte especfica del panel para mostrar errores) con lo que contenga la propiedad message de la excepcin de usuario/negocio- por el contrario, si el error se da dentro del programa, mostrar el mensaje de error al usuario le genera confusin: lo mejor que uno puede hacer es advertirle al usuario que hubo un error, que la operacin que solicit no va a poder completarse y sobre todo, registrar el problema para que un desarrollador lo analice luego.## Los nmeros de celular deben ser mayores a 1000Si ponemos la validacin en el setter```java// Javapublic void setNumero(Integer numero) {    if (numero ` donde T es un Celular (hereda de `Entity`):```javapublic void create(T object) {    this.validateCreate(object);    ...```Definimos la validacin en RepositorioCelulares:```java// Java@Override public void validateCreate(Celular celular) {    celular.validar();    validarClientesDuplicados(celular);}public void validarClientesDuplicados(Celular celular) {    int numero = celular.getNumero();    if (!this.search(numero).isEmpty()) {        throw new UserException(&quot;Ya existe un celular con el nmero: &quot; + numero);    }}``````scala// Xtendoverride validateCreate(Celular celular) {    celular.validar()    validarClientesDuplicados(celular)} def void validarClientesDuplicados(Celular celular) {    val numero = celular.numero    if (!this.search(numero).isEmpty) {        throw new UserException(&quot;Ya existe otro cliente con el mismo nmero&quot;)    }}```Qu pasa en la modificacin?- Actualizar una coleccin en memoria es simplemente borrar el objeto anterior y agregar el objeto editado, eso est definido en CollectionBasedRepo.- Arena no defini un mtodo validateUpdate() para incorporar validaciones. Esta limitacin suele ser comn al utilizar frameworks, eso no evita que podamos interceptar el mensaje update, de la siguiente manera:```scalaoverride update(Celular celular) {    validarClientesDuplicados(celular)    super.update(celular)}```Al fin y al cabo estamos trabajando con objetos.Y la validacin cundo se dispara? Cuando aceptamos el formulario, porque determinar si el nmero de celular se repite con otro tiene sentido cuando terminamos de definir el nmero, y adems esa operacin tiene un costo.## Obligatoriedad de recibir resumen de cuenta en domicilioCada celular pertenece a un modelo de celular que define si debe recibir el resumen de cuenta en domicilio. Cmo afecta eso a la ventana de edicin?- Una opcin es que la vista no sufra modificaciones: en el mtodo validar chequeamos que el usuario haya cargado una configuracin vlida para el modelo de celular y recepcin de resumen de cuenta en domicilio.- Pero para el usuario esta decisin puede resultar desconcertante: qu modelo ser el que me permita dejar destildado el check? Por eso para disear una buena UI necesitaramos hacer algunas modificaciones: si el modelo de celular obliga a que el cliente reciba el resumen de cuenta, debera   - automticamente ponerse en true el flag recibeResumenCuenta para el cliente  - deshabilitarse la opcin de modificar el checkEntonces vemos que la validacin original en el celular pierde sentido: la interfaz va guiando al usuario impidiendo que tome decisiones incorrectas y minimizando as las ventanas de error segn las restricciones que impone el negocio. Eso no implica sacar la validacin, pero s tener en mente la famosa experiencia de usuario para anticiparnos a ingresos incorrectos.Aunque no siempre es posible evitar los mensajes de error, como hemos visto con la duplicidad de nmeros de celular (no podemos saberlo sin consultar al repositorio), estas ideas de diseo en la UI mejoran notablemente su usabilidad.# Algunas conclusiones## Desventajas de las excepcionesComo las excepciones cortan el flujo normal de envo de mensajes entre objetos, la contra de tirar una excepcin por cada error de negocio es que no nos permite decirle al usuario todos los campos que tienen problemas (los errores van apareciendo de a uno). Por eso otra tcnica es &quot;recolectar&quot; los errores y asociarlos a campos, de manera de tener un listado de mensajes de error donde cada uno est asociado a un campo que se ingresa en el formulario.## Pop-ups y paneles de errorVolviendo al ejemplo de los celulares, vemos que la validacin tira User Exceptions:```scaladef void validar() {      if (!this.ingresoNumero) {            throw new UserException(&quot;Debe ingresar nmero&quot;)      }    ...}```Lo mismo ocurre con validaciones que hacen los repos:```scalaprivate void validarClientesDuplicados(Celular celular) {      val numero = celular.numero      if (!this.search(numero).isEmpty) {            throw new UserException(&quot;Ya existe un celular con el mismo nmero&quot;)      }}```Pero esa excepcin no est atrapada en el mtodo asociado al botn Aceptar de la pantalla de Edicin.```scalanew Button(actions)      .setCaption(&quot;Aceptar&quot;)      .onClick [ | this.accept]      .setAsDefault      .disableOnError```Cmo es entonces que funciona bien, que los errores se muestran con un popup?- cada control de arena tiene un realidad abajo un builder que crea finalmente los objetos de la tecnologa. En nuestro caso objetos swt + jface- por ejemplo, al crear un SimpleWindow nosotros estamos utilizando (sin saberlo) un JFaceWindowBuilder que le construye el ErrorViewer (esto no ocurre si nuestra ventana hereda de Window solamente)- Cuando se crea un botn, por ejemplo, y le seteamos un Action en el onClick, esta capa de Arena le agrega un listener (un observer) que envuelve el command que nosotros construimos incorporndole el manejo de errores:```java@Overridepublic void widgetSelected(SelectionEvent event) {      try {            this.action.execute();      } catch (UserException exception) {            this.context.getErrorViewer().showWarning(exception.getMessage());      } catch (RuntimeException exception) {            exception.printStackTrace();            this.context.getErrorViewer().showError(&quot;Se produjo un error de sistema. Puede revisar el log de la aplicacin para obtener ms detalles&quot;);      }}```El bloque catch puede variar dependiendo de la versin de Arena que estn usando. Pero ms all de algunos detalles de implementacin que pueden ver ustedes, lo importante es ver qu sucede con los dos tipos de excepcin:- errores de usuario/negocio: mostramos el error en una ventana de dilogo. Qu dice el mensaje de error? A la ventana no le interesa, sabe que cualquier accin que disparemos puede dar este tipo de error, y que el mensaje contiene informacin importante para el usuario. Pero no acoplamos la UI al resto de los componentes del sistema: nos da lo mismo si el nmero de celular debe comenzar con 15, si ya existe otro alumno con el mismo legajo o si no podemos cargar una fecha de nacimiento futura para los empleados.- los errores de programa los catcheamos despus, porque RuntimeException es ms general que UserException. Hay una decisin de diseo de no envolver las excepciones chequeadas, para respetar as a quienes quieran trabajar con este tipo de excepciones.- mientras que la excepcin de programa se &quot;loguea&quot; (haciendo un printStackTrace), las excepciones de negocio no tiene sentido registrarlas. Las excepciones de programa las leen los programadores, las de negocio le sirven al usuario para comprender que est tratando de usar el sistema de manera incorrecta, el mensaje de error le debe aportar una ayuda para solucionar este inconveniente y seguir adelante.- el log default hace un printStackTrace(), esto deja en el archivo standard output la pila de mensajes donde ocurri el error. Este archivo puede ser voluminoso, entonces  - se suele particionar los errores por aplicacin (y a veces por mdulo tambin)  - tambin se registran datos adicionales, como usuario logueado, fecha y hora en que ocurri el error, esto por lo general se puede parametrizar sin mucho esfuerzo  - otra cosa que se suele hacer es activar/desactivar niveles de logueo para ver cmo est funcionando una aplicacin (niveles debug/info/warning/error/fatal)  - y el ErrorViewer sabe mostrar un mensaje de error al usuario (showError), en este caso mediante una ventana de dilogo# Links relacionados- [Temario Algoritmos III](algo3-temario.html)"

} ,

{

"title"    : "Introducción a la Arquitectura web",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/ui-web-intro-arquitectura.html",
"date"     : "",
"content"  : "# Arquitectura distribuidaLa arquitectura web trabaja con dos nodos:- el **cliente** tiene un programa ejecutable (application client, el _web browser_ o navegador es el ms comn)- y el **servidor** tiene otro programa ejecutable: en la materia ser nuestro application server el que tendr una VM donde vivan los objetos de negocio.Estos nodos son lgicos: pueden estar ubicados fsicamente en la misma mquina, pero igualmente tendremos una separacin de componentes en cliente y servidor.El cliente hace pedidos a travs de un puerto contra el servidor, el servidor responde. El flujo de mensajes siempre comienza en el cliente:- cliente pide servicio (request)- servidor responde (response)![image](/img/wiki/ui-web-arquitectura.png)## Algunas consecuencias- Nuestra aplicacin pasa a ser una **aplicacin distribuida**: va a tener una parte corriendo en el servidor y otra parte corriendo en el cliente. Dependiendo de la arquitectura que elijamos  - podemos tener la mayor parte de la lgica en el servidor y tener un cliente liviano (thin) o ZAC (Zero Administration Client). Entonces lo que le llega al cliente es slo un documento HTML, y es fcil mantener la aplicacin cuando tengo muchos clientes ubicados  - o bien podemos poner gran parte de la lgica en el cliente y utilizar la parte server solamente para sincronizar la informacin entre sesiones de usuario- de todas maneras, por ms liviano que sea el cliente, los _browsers_ no son uniformes, entonces si queremos que una aplicacin ande en todos ellos muchas veces vamos a tener que manejar cdigo especfico para cada plataforma (browser, versin, sistema operativo y a veces hasta el hardware).- como el cliente es el que dispara los pedidos, todas las interacciones entre el usuario y la aplicacin deben ser iniciadas por el usuario, la aplicacin no puede tomar la iniciativa. Ej: si tengo una lista de tareas pendientes, para que aparezca una nueva tarea hay que obligar al cliente a que dispare el refresh.## Pedido/respuestaAntes de meternos ms de lleno, nos preguntamos: la tecnologa de objetos es consistente con la metfora &quot;pedido-respuesta&quot; (request/response)? S, en definitiva es la representacin de lo que es un mensaje.Lo que pasa es que en un sistema con objetos no pongo restricciones: cualquiera puede ser emisor y cualquiera receptor. En cambio en la tecnologa web siempre es el cliente el que pide y siempre el servidor el que responde.# Cmo se implementa la comunicacinEl cliente dice: &quot;necesito x&quot;. Esto se traduce en una direccin de una pgina en particular, esa direccin recibe el nombre de **URL** (Uniforme Resource Locator, o forma de encontrar un recurso en el servidor):```urlhttp://localhost:8080/html-css/index.html```donde- http es HyperText Transfer Protocol, el **protocolo de comunicacin** por defecto que usan los navegadores  - otros protocolos son https (donde los datos viajan encriptados), ftp, etc.- localhost es el **servidor web** hacia el que vamos a conectarnos  - en este caso `localhost` es el web server que est en la PC local, que equivale a la direccin IP 127.0.0.1  - el servidor web puede ser una direccin IP o un nombre que luego es convertido a una direccin IP a travs de un DNS (Domain Name Server)- 8080 es el puerto donde el servidor est &quot;escuchando&quot; pedidos- y finalmente la pgina que queremos cargar, que recibe el nombre de **recurso**La forma en que publicaremos las pginas como **rutas** depende de la tecnologa en la que trabajemos y lo veremos ms adelante, lo importante es entender que una pgina html es accesible para un usuario con una ruta nica llamada URL.# HTTP[Http](https://es.wikipedia.org/wiki/Protocolo_de_transferencia_de_hipertexto) es un protocolo **no orientado a conexin** que define la forma de comunicacin entre el cliente y el servidor.Recordemos que no-orientado a conexin significa que no guarda ninguna informacin sobre conexiones anteriores, por lo que no tenemos el concepto de sesin de usuario, es un protocolo sin estado (_stateless protocol_). Esto tiene varias implicancias, la ms fuerte es que requiere que la aplicacin mantenga la informacin necesaria para mantener una sesin (por ejemplo, sabiendo qu usuario es el que est haciendo una operacin).Un mensaje http tiene formato de texto, por lo que es legible al usuario y fcilmente depurable, como vemos en el siguiente video:![video](/img/wiki/ui-web-architecture-http-request.gif)Abrimos en un navegador las herramientas de desarrollo (por lo general es la tecla F12), y en la solapa _Network_ podemos inspeccionar las distintas respuestas que procesa el navegador, con el pedido http original que hace un mensaje de tipo `GET`.## Tipos de mensajeUn cliente puede enviar un pedido al servidor utilizando diferentes mtodos- `GET`: asociada a una operacin de lectura, sin ningn otro efecto- `HEAD`: es exactamente igual al pedido va GET pero enviando nicamente el resultado de la operacin en un header, sin el contenido o _body_- `POST`: se suele asociar a una operacin que tiene efecto colateral, no repetible- `PUT`: est pensado para agregar informacin o modificar una entidad existente- `DELETE`: se asocia con la posibilidad de eliminar un recurso existente- `OPTIONS`: permite ver todos los mtodos que soporta un determinado servidor web- `TRACE`: permite hacer el seguimiento y depuracin de un mensaje http (se agrega informacin de debug)- `CONNECT`: equivalente a un `ping`, permite saber si se tiene acceso a un hostMs adelante volveremos sobre esto al estudiar REST. Ahora veremos la diferencia entre hacer un pedido mediante GET vs. POST.### Envo mediante GET methodAqu los parmetros viajan dentro de la URL como par `clave=valor`: ```urlhttp://www.appdomain.com/users?size=20&amp;page=5```- `?` delimita el primer parmetro- `&amp;` delimita los siguientes parmetrosLa ventaja de utilizar este mtodo es que dado que http es un protocolo no orientado a conexin, podemos reconstruir todo el estado que necesita la pgina a partir de sus parmetros (es fcil navegar hacia atrs o adelante). Por otra parte es el mtodo sugerido para operaciones sin efecto, que recuperan datos de un recurso.Por otra parte, no es conveniente para pasar informacin sensible (como password o ciertos identificadores), algunos navegadores imponen un lmite mximo de caracteres para estos pedidos y necesita codificar los caracteres especiales (p. ej. el espacio a `%20`) dado que el request solamente trabaja con el conjunto de caracteres ASCII.### Envo mediante POST methodLos parmetros viajan en el BODY del mensaje HTML, no se ven en la URL del browser. Aqu no hay restricciones de tamao para pasaje de informacin y tampoco se visualizan los parmetros en la URL del browser.### GET vs. POSTLa [recomendacin W3C](https://www.w3.org/TR/html4/interact/forms.html#submit-format) (World Wide Web Consortium) dice que deberamos usar - GET cuando sepamos que se trata de consultas que no van a tener efecto colateral (no habr modificacin en el estado del sistema)- POST cuando sepamos que el procesamiento de la pgina causar una alteracin del estado del sistema (al registrar el alquiler de una pelcula, al modificar los datos de un socio o al eliminar un producto de la venta). Otros mtodos posibles que veremos son PUT y PATCH, para modificaciones y alteraciones parciales, respectivamente.# El camino de un pedido http- el browser se conecta con el servidor a partir del dominio o IP (localhost = 127.0.0.1) y puerto- se enva la peticin al servidor en base a direccin, mtodo, parmetros, etc.- el servidor responde a ese pedido: esa respuesta es una nueva pgina con un cdigo de estado HTTP:  - 200 : OK  - 401 : Unauthorized  - 403 : Forbidden  - 404 : Not Found  - 405 : Method not allowed  - 500 : Internal Server ErrorEl lector puede buscar la lista de [cdigos de error HTTP](https://es.wikipedia.org/wiki/Anexo:C%C3%B3digos_de_estado_HTTP) (las especificaciones [RFC 2616](https://tools.ietf.org/html/rfc2616) y [RFC 4918](https://tools.ietf.org/html/rfc4918)) y formas de resolverlos.- la aplicacin cliente o _user agent_ se desconecta del servidor una vez procesada la respuesta# Consecuencias del mensaje http para las aplicaciones webLa pgina es la mnima unidad de informacin entre cliente y servidor, lo que implica:- **problemas en la performance**: no siempre debera refrescar toda la pgina si slo necesito actualizar parcialmente la informacin de dicha pgina- **problemas en el diseo**: tengo dificultades para poder particionar una pantalla en componentes visuales- **problemas de usabilidad**: para que la pgina sea dinmica necesitamos forzar una comunicacin con el servidor**String oriented programming**: la comunicacin entre cliente y servidor involucra solo texto, necesitamos adaptar fechas, nmeros, booleanos y tambin los objetos de negocio (socios de un videoclub, alumnos, materias, vehculos de una flota, etc.) as como las colecciones.# Procesamiento de la respuesta en el clienteEl servidor contesta con un string que tiene- un _header_ donde indica el resultado del pedido- un contenido, que forma parte del body, que puede ser HTML, json o cualquier otro formato que el cliente entienda![](/img/wiki/ui-web-architecture-http-response.gif)Arriba vemos la respuesta del navegador al buscar &quot;Cuarteto de Nos&quot; y abajo cmo procesa la consulta el cliente Postman.![](/img/wiki/ui-web-architecture-http-response2.gif)# Resumen- Muchos clientes se conectan a un nico servidor a travs del protocolo HTTP- En el cliente corre un programa llamado _user agent_ que es el encargado de establecer la comunicacin con el web server. Se utiliza el concepto de thin client, es decir que se minimiza la lgica en los clientes, tendiendo a concentrarla en el servidor. **Consecuencias:**  - se simplifica la utilizacin de la aplicacin desde mltiples clientes sin costo de instalacin ni mantenimiento.  - se simplifica la lgica al mantener toda la aplicacin centralizada.- La descripcin de las pantallas se basa en [HTML](html.html). Es decir, una pgina dinmica es un programa que genera un String conteniendo cdigo HTML.- Progresivamente se ha incrementado la tendencia a describir las cuestiones estticas utilizando [CSS](css.html), por lo tanto la descripcin de una vista estar dada por una combinacin de HTML y CSS.- La comunicacin entre el cliente y el servidor est dada en la forma de pedido-respuesta (request-response).- Todas las interacciones entre el usuario y la aplicacin deben ser iniciadas por el usuario, la aplicacin no puede tomar la iniciativa.- La respuesta para cada pedido es una pgina nueva, la mnima unidad de comunicacin entre el cliente y el servidor es una pgina. Esto tiene consecuencias tanto de performance como de usabilidad y tambin de diseo. Existen muchos tipos de pedido pero los ms usuales son GET y POST. Los dos puntos anteriores limitan gravemente la posibilidad de utilizar mecanismos de binding.- Cada pedido es independiente de los anteriores, es decir, la tecnologa no provee de un soporte directo para manejar el estado de la conversacin entre ambos procesos (**stateless**). Para modelar procesos que requieran de una comunicacin ms poderosa que esa debern proveerse herramientas adicionales, frecuentemente manipuladas ad-hoc.# Links relacionados- [Temario Algoritmos III](algo3-temario.html)- [W3 - Web Architecture](https://www.w3.org/standards/webarch/)- [HTML](html.html)"

} ,

{

"title"    : "unexpected",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/unexpected-----.html",
"date"     : "",
"content"  : "Un error que puede aparecer al programar en haskell es:```scalaERROR[file:.&amp;#92;tp1](file:.&amp;#92;tp1)funcional:6-Syntaxerrorinexpression(unexpected ;&#39;,possiblyduetobadlayout)```Pero yo no puse ningn punto y coma! Qu onda?La respuesta corta es que hay que revisar la sintaxis y en particular la *indentacin*. El por qu de ese mensaje tan raro, a continuacin.Indentacin-----------El haskell usa una sintaxis &quot;bidimensional&quot; (no se asusten), eso quiere decir que si vos &quot;indents&quot; algo, eso tiene un significado. Entonces antes de continuar hay que entender el concepto de indentacin. Indentar algo es dejar espacios o tabs adelante del cdigo, generalmente uno lo hace para que se lea mejor, por ejemplo```pascalfunction fact(n: integer): longint; beginif(n=0)thenfact:=1elsefact:=n*fact(n-1);end;```Podemos ver que el programador dej algunos espacios antes de las palabras if y then, entonces visualmente es claro que todo eso queda dentro del bloque definido por begin/end. De la misma manera las lneas de cdigo que estn dentro del if y del else tienen an ms espacios (&quot;ms indentacin&quot;).Sintaxis &quot;bidimensional&quot;------------------------Como dijimos, el haskell utiliza una sintaxis bidimensional, es decir, en pascal o c la indentacin son opcionales, no tienen significado, es decir, uno los pone slo para entender mejor el programa; en cambio en haskell no hacen falta los / de pascal ni las llaves de C para demarcar un bloque de cdigo. En haskell un bloque es demarcado directamente con la indentacin.Entonces la funcin que en C se escribira:```cintsuma(inta,intb){returna+b;}```En haskell no necesita de las llaves, porque se da cuenta a partir de la indentacin:```haskellsumaab=a+b```Tampoco son necesarios los tipos ni el return, pero eso es otro tema, lo que nos interesa ac es que no son necesarias las llaves ni el punto y coma, porque con la indentacin y el fin de lnea es suficiente para que el compilador entienda dnde empieza y termina la funcin. (En este caso sera an ms simple poner todo en una sola lnea, pero algunas funciones complejas tienen ms de una lnea.)En resumen, si vos indents mal es anlogo a olvidarse una llave o un o un &#39;;&#39; en otro lenguaje.Por qu entonces dice *unexpected &#39;;*&#39;, si yo no puse ningn &#39;;&#39;?------------------------------------------------------------------Se puede entender como que el haskell a partir de la sintaxis bidimensional &quot;completa&quot; los demarcadores de comando y de bloque, de una forma similar al C, quedando algo parecido a:```haskellsumaab={a+b;}```De hecho, es posible escribir la funcin de esa manera si uno prefiere... pasa que obviamente uno prefiere la sintaxis con menos chirimbolos.Entonces, cuando dice &quot;unexpected &#39;;&#39;&quot; lo ms probable es que no est entendiendo el &quot;layout&quot; que ustedes le dieron a al funcin, es decir, la forma en que la indentaron. Ese &quot;bad layout&quot; hace que en su traduccin aparezca un &quot;;&quot; en algn lado que no tiene sentido. Saber dnde est ese &quot;;&quot; no es sencillo, hay que revisar el layout de la funcin.[Ejemplo de problemas de indentacin en Haskell](http://stackoverflow.com/questions/2223468/haskell-where-indentation-why-must-it-be-indented-past-identifier)"

} ,

{

"title"    : "Unificacion y pattern matching",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/unificacion-y-pattern-matching.html",
"date"     : "",
"content"  : "# UnificacinDentro de los conceptos del paradigma lgico no est incluido el concepto de **asignacin**. Para dejar en claro esto vamos a llamar a esta idea **[Asignacin Destructiva](transparencia-referencial--efecto-de-lado-y-asignacion-destructiva.html)**, esto se debe a que una asignacin me permite &quot;destruir&quot; el valor que tiene una variable en un momento dado y reemplazarlo por otro. Esta idea de asignacin no tiene sentido cuando pensamos en incgnitas (si en un momento dado decimos que una variable X vale 1, su valor ser 1 y ningn otro hasta que se empiece a buscar otra solucin a la misma consulta, en ese momento se desligan todas las variables y se empieza de nuevo). Las variables en el paradigma lgico se asemejan a la idea de variable matemtica, y el mecanismo por el cual se le dan valores a las variables se llama **unificacin**. Cuando una variable que no tiene ningn valor pasa a tenerlo vamos a decir que dicha variable a sido **ligada**, en caso contrario la variable se encuentra **sin ligar o no ligada**.Si nuestra base de conocimiento es```prologpadre(homero,bart).padre(homero,maggie).padre(homero,lisa).Y hago la consulta?- padre(X,lisa). X = homero```## Cmo obtuvo ese resultado Prolog?Bsicamente lo que hace Prolog es buscar un **consecuente** (revisar al principio de todo qu era eso de consecuente) dentro de todas las clusulas de nuestra base de conocimiento que unifique con la consulta. Podemos ver un poco la unificacin o falta de unificacin entre dos hechos (que seran la consulta y el consecuente) haciendo consultas en SWI que jueguen con el = (igual), para la consulta de recin tenemos:El consecuente de la primer clusula **NO** unifica con la consulta```prolog?- padre(X,lisa) = padre(homero,bart).No %El consecuente de la segunda clusula **NO** unifica con la consulta?- padre(X,lisa) = padre(homero,maggie).No %El consecuente de la tercer clusula **unifica** con la consulta?- padre(X,lisa) = padre(homero,lisa).X = homero```***OJO*** el = (igual) nooooo lo vamos a usar en los programas, lo usamos ac solamente porque nos ayuda a estudiar sobre la unificacin.Este ejemplo es fcil ya que todas las clusulas son hechos pero **no es nuestra intencin entender en profundidad el mecanismo de unificacin**. Si se tratara de reglas, tiene que pasar que se resuelvan los antecedentes de la clusula cuyo consecuente unific con la consulta; en el proceso **se agotan todas las posibles soluciones**.Entonces, se dice que 2 trminos unifican si existe algn reemplazo de todas las variables (de los 2 trminos) que haga a los trminos iguales; se dice que una consulta matchea con un consecuente si el predicado es el mismo y hay un reemplazo coherente que hace que todos los argumentos unifiquen. P.ej. con el reemplazo X/homero pasa que X queda igual que homero (primer argumento) y tambin que lisa es igual que lisa (segundo argumento), entonces la consulta padre(X,lisa) unifica con padre(homero,lisa) mediante el reemplazo X/homero.Nos alcanza pensar que un trmino es un individuo (simple o compuesto - estos ltimos pueden tener variables) o una consulta (como en el primer ejemplo).```prolog%Dos individuos iguales unifican ?- 1 = 1.Yes?- homero = homero.Yes?- fecha(1,1,1901) = fecha(1,1,1901).Yes?- [a,b,c] = [a,b,c].Yes%Existen reemplazos de variables que hagan los trminos iguales por lo tanto unifican ?- X = homero.X = homero.?- F = fecha(1,1,1901).F = fecha(1,1,1901).?- fecha(D,1,A) = fecha(1,M,1901).D= 1M= 1A = 1901%Dos individuos distintos no unifican ?- 1 = 2.No?- homero = marge.No?- fecha(1,1,1901) = fecha(1,1,2010).No?- [a,b,c] = [c,b,a].No%No existen reemplazos de variables que hagan los trminos iguales por lo tanto no unifican ?- fecha(D,1,2010) = fecha(1,M,1901). No ?- [1,2,X] = [2,2,3].No?- [1,2,3] = [X,X,3].No```## Y pattern-matching?Bueno, la diferencia entre decir pattern matching y unificacin es bastante gris (algunos autores lo consideran sinnimos). Es muy comn decir &quot;unifica&quot; o &quot;matchea&quot; indistintamente.Vamos a hablar de unificacin de variables en relacin al valor que las mismas toman en base a una consulta y de pattern matching cuando en el encabezado del predicado se determina la forma que tiene que tenerMayormente vamos a hablar de pattern matching al involucrar [individuos compuestos](paradigma-logico---individuos-compuestos.html), ya que a partir de los mismos se pueden definir patrones complejos con los cuales los valores usados en las consultas deberan coincidir.Los patrones ms bsicos que podemos encontrar son los que no limitan en absoluto qu valores pueden matchear (las variables) y los que slo matchean si son exactamente iguales (valores concretos). Por ejemplo, una solucin de factorial podra resolverse usando pattern matching de modo que existen dos definiciones: una que slo es vlida para el factorial de 0 y otra que es vlida para cualquier nmero.```factorial(0,1).factorial(N,F):-N&gt;0,MisN-1,factorial(M,FM),FisN*FM.```Si hacemos las siguientes consultas:```?-factorial(2,Factorial).```El 2 no matchea con el 0, pero s con la variable N, por ende slo la segunda clusula es considerada para responder a la consulta.```?-factorial(0,Factorial).```El 0 matchea con el 0 y tambin con la variable N, por ende ambas clusulas son usadas para responder. Sin embargo, si la variable N se unific con el valor 0, la consulta N &amp;gt; 0 da falso y no contina ejecutando porque ya fall.Al trabajar con individuos compuestos podemos usar otro tipo de patrones que restrinjan parcialmente qu valores pueden pueden matchear."

} ,

{

"title"    : "Uso de features de lenguajes dinamicos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/uso-de-features-de-lenguajes-dinamicos.html",
"date"     : "",
"content"  : "# TerminologaEl trmino &quot;lenguaje dinmico&quot; es usado en la industria con poca rigurosidad. En lugar de intentar de dar una definicin precisa, sealaremos dos caractersticas tpicas de estos lenguajes (aunque bien se podran incluir muchas ms):- Presentan [chequeo de tipos dinmico e implcito](esquemas-de-tipado.html)- Presentan facilidades para [metaprogramar](metaprogramacion.html), no limitndose a la [introspeccin](reflection-introspection.html) sino tambin haciendo uso intensivo de [auto-modificacin](reflection-self-modification.html)Es interesante marcar que la primera caracterstica no es suficiente para hacer dinmico al lenguaje: si pudieramos reemplazar el sistema de verificacin de tipos de Java para que fuera realizado enteramente en tiempo de ejecucin, pero mantuviramos su modelo de objetos y API de metaprogramacin tal como la conocemos, seguira siendo un lenguaje &quot;esttico&quot;: el tipado dinmico no es condicin suficiente.Por otro lado, el tipado dinmico no es en teora una condicin necesaria para la metaprogramacin, pero s lo simplifica notablemente: la auto-modificacin en lenguajes con tipado esttico requerira de sistemas de tipos mucho ms complejos que los que estamos acostumbrados a ver en la mayora de los lenguajes.# Features destacadosA continuacin mencionamos algunos features destacados por su utilidad para metaprogramar y hacer [DSLs](dsl.html).- Envo de mensajes &quot;dinmicos&quot;: mandar un mensaje a un objeto a partir de su nombre- Interceptores de cdigo: Los lenguajes dinmicos presentan interesantes capacidades de intercepcin de cdigo, ya que ofrecen puntos en los cuales uno puede &quot;colgarse&quot; del mecanismo de resolucin de mtodos (method lookup). El ms simple y usado de ellos es [method missing](method-missing.html) o does not understand: se evaluar este mtodo siempre que se le envie un mensaje a un objeto que este no entienda. En Groovy tambin existe el anlogo para los accessors (propertyMissing).- Clases abiertas (open classes): Que una clase sea abierta significa que puede ser modificada luego de ser definida, para agregar, quitar o modificar cualquier aspecto de la misma (mtodos, atributos, jerarqua de herencia...)- Autoclases (Eigen Class): una clase exclusiva de esa instancia y que no se comparte con las dems permitiendo modificar la estructura y comportamiento de una instancia especfica en vez de todas las de una determinada clase.- Sintaxis flexible: Algunos lenguajes como Ruby permiten jugar con la sintaxis de modo que se pueda incrementar la expresividad del cdigo. Algunos ejemplos de esto podra ser:    - omitir parntesis y puntos en el envo de mensajes    - redefinicin de operadores    - contextualizar bloques de cdigo de modo que se pueda elegir un receptor implcito de los mensajes# Para profundizar y ver algunos ejemplos- [Referencia para Ruby y Groovy](https://docs.google.com/viewer?a=v&amp;pid=sites&amp;srcid=ZGVmYXVsdGRvbWFpbnx1dG50YWRwfGd4OjczNjhhOWY1NjZmNDQxZjU)"

} ,

{

"title"    : "Value object",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/value-object.html",
"date"     : "",
"content"  : "# Introduccin*La definicin de Value Object vara bastante de autor en autor. Algunas visiones diferentes sobre este concepto estn plasmadas [aqu](http://c2.com/cgi/wiki?ValueObject).*Entendemos como Value Object a aquellos objetos que tienen una semntica de valor (en contraposicin con semntica de referencia), es decir cuya identidad no es importante. Dos value objects ser intercambiables, esperando iguales resultados, en tanto ambas instancias exhiban el mismo comportamiento desde el punto de vista del observador. Dicho de otra forma, son objetos para los que podra eventualmente tener una copia del mismo, y dara lo mismo enviarle un mensaje al original o su copia.Una consecuencia importante de que los Value Object no tengan identidad importante, es que no tienen estado visiblemente mutable.Los Value Object pueden ser tambin analizados como un patrn de diseo. Se recomienda el capitulo correspondiente en [este libro](http://homepages.mcs.vuw.ac.nz/~tk/fps/fps-sans-escher.pdf)Los Value Objects pueden tener un estado visible inmutable (por ejemplo, para modelar una fecha), aunque tambin puede darse el caso en que tal estado no exista (por ejemplo, para modelar la funcin identidad) o se encuentre comletamente encapsulado (por ejemplo, una funcin aplicada parcialmente encapsula complementanete el estado de las variables que que fueron encerradas en su contexto)Los Value Objet an puede tener un estado mutable interno, en tanto este no sea expuesto a travs de su interfaz, lo que habilita a que presenten evaluacin diferida en en sus variables de instancia.## Impacto en el diseo## Implementacin## Consideraciones sobre el subtipado y las relaciones de equivalencia### En Java```javapublicclassFinal{privatefinalStringfolio;privatefinalIntegerlibro;privatefinalIntegernota;privatefinalAlumnoalumno;publicFinal(Stringfolio,Stringlibro,Integernota,Alumnoalumno){this.libro=libro;this.folio=folio;this.nota=nota;this.alumno=alumno;}publicbooleanestaAprobado(){returnnota&gt;=4;}publicAlumnogetAlumno(){returnalumno;}//demasgetters}```Ntese que el estado, de existir, de un ValueObject no tiene porqu estar conformado exclusivamente por tipos primitivos (primitive obsession).Tampoco tiene porqu estar desprovisto de comportamiento (dto/anemic object), de hecho, normalmente lo tiene y es funcin de su estado.Un ValueObject puede exponer su estado interno, como tambin puede encapsularlo completamente (ej &amp;#92;[Function Object&amp;#92;])### Scala```scalaclassFinal(valfolio:String,vallibro:Int,valnota:Int,valalumno:Alumno){defestaAprobado=nota&gt;=4}caseclassFinal(valfolio:String,vallibro:Int,valnota:Int,valalumno:Alumno){defestaAprobado=nota&gt;=4}```## En lenguajes con tipado dinmico### en C (como un TAD)Si bien en C no tenemos objetos, podemos tambin implementar TADs con semntica de valor."

} ,

{

"title"    : "Variables locales en metodos",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/variables-locales-en-metodos.html",
"date"     : "",
"content"  : "Se pueden usar variables locales a los mtodos, lo cual puede ayudar la legibilidad o para evitar repetir la evaluacin de una misma consulta a lo largo del mtodo. Son anlogas a las variables locales de procedimientos que deberan conocer de Algoritmos.Cmo se definen y usan: ah va un ejemplo rpido (no importa mucho lo que hace)```smalltalkmiMetodoLoco:unNumero**| varLocal1 varLocal2 varLocal3 |**varLocal1:=4.varLocal2:=varLocal1+5.varLocal3:=varLocal1/unNumero.^(varLocal1max:varLocal2)min:varLocal3.```En este mtodo se definen tres variables locales entre pipes (|). Las primeras tres lneas luego de esta declaracin asignan las tres variables (o sea, hacen que referencien a un objeto). Luego puedo mandarle mensajes a los objetos referenciados por esas variables y usar esas referencias tantas veces como quiera."

} ,

{

"title"    : "Variables y metodos de clase",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/variables-y-metodos-de-clase.html",
"date"     : "",
"content"  : "# Mensajes y Mtodos de claseLas clases son objetos, y como todos los objetos pueden tener atributos y ademas les podemos mandar mensajes. Pero las clases son objetos con responsabilidades especiales, la ms comn es la de crear nuevos objetos. Cada vez que a le mando el mensaje **new** a una clase obtengo una nueva instancia de esa clase. Podemos crear nuevas instancias en cualquier momento de nuestro programa (en el workspace, dentro de un mtodo, etc).Entonces, los mensajes de clase son mensajes que entienden las clases, no las instancias de las mismas. El nombre (selector) de un mensaje de clase se escribe igual que siempre (empieza con minscula).Algunos ejemplos:Workspace:```smalltalkpepita:=Golondrinanew.```new es uno de los primeros mensajes de clase que aprendemos: nos devuelve una nueva instancia de la clase que recibe el mensaje. En este caso, devuelve una golondrina.Workspace:```smalltalkhoy:=Datetoday.```today es un mensaje de clase que le mando a la clase Date y me devuelve un objeto que representa la fecha de hoy.Workspace:```smalltalkitems:=Bagwith:&#39;brujula&#39;with:&#39;botellaDeGrogXD&#39;with:&#39;catalejo&#39;.```with:with:with: es un mensaje que entienden las clases de colecciones (en este caso Bag es la clase que recibe el mensaje). with:with:with: devuelve una nueva coleccin, que tiene los tres elementos adentro. En ste caso, devuelve un bag con la brjula, la botella y el catalejo.En general es deseable tener una forma de crear objetos que ya estn inicializados adecuadamente para poder usarlos inmediatamente, y no que arranquen en un estado invlido y requieran ser configurados a posteriori.## Cmo escribo mtodos de clase?Cada mensaje de clase debe tener asociado un mtodo de clase (su codificacin).-   En Pharo: En el segundo panel del System Browser, apretando el boton **class**, escriben el mtodo como hasta ahora. (No se olviden de volver a apretar **instance** para escribir metodos de instancia)-   En el parcial: simplemente pongan **(MC)** al lado del mtodo, para diferenciarlo de los mtodos de instancia.Workspace:barbanegra:=PiratanuevoConItems:itemsebriedad:100monedas:1500.El mensaje nuevoConItems:ebriedad:monedas: se lo mando a la clase Pirata y me devuelve un nuevo pirata ya inicializado con los items, la ebriedad y las monedas que le indiquemos.Codificacin:```smalltalk#Pirata(MC)&gt;&gt;nuevoConItems:losItemsebriedad:nivelEbriedadmonedas:unasMonedas|unPirata|unPirata:=selfnew.unPirataitems:losItems.unPirataebriedad:nivelEbriedad.unPiratamonedas:unasMonedas.^unPirata.```Recordemos que, como el que recibe este mensaje es una clase, ac **self es la clase**, no una instancia. El motivo por el cual es importante usar self en vez de escribir el nombre de la clase (en este caso Pirata) es porque estos mtodos tambin se heredan, y si subclaseamos Pirata no se va a comportar como queremos cuando le mandemos nuevoConItems:ebriedad:monedas: a la subclase. Al usar self indicamos que el mensaje debe enviarse al objeto que recibi nuevoConItems:ebriedad:monedas:, o sea que si se lo mandamos a una subclase de Pirata, la instancia creada ser de dicha clase.# Que son las variables de clase? Para que sirven?Las variables de clase nos sirven cuando queremos que nuestros objetos tengan alguna referencia a algn valor, que sea el mismo para todas las instancias de esa clase, y que ademas pueda cambiar (por eso usamos una variable y no hardcodeamos ese valor en el cdigo del programa, asumiendo que es posible).Si usramos una variable de instancia con la intencin de settear el mismo valor a todas las instancias de esa clase, y luego queremos cambiar el valor de modo de afectar a todas las instancias, tengo que poder encontrar todas las instancias ya existentes para poder mandarles el mensaje para que actualicen su referencia... Y si tengo muchos muchos objetos eso no esta bueno, no slo por la complejidad innecesaria del problema, sino tambin porque la performance puede verse afectada. Este problema desaparece si tengo un nico objeto que conozca este valor que quiero que varios objetos conozcan, y como todo objeto conoce la clase a la que pertenece, podemos dejar que sea responsabilidad de la clase recordar y manipular este estado, y que sus instancias usen ese valor cuando lo necesiten.Si tengo una variable de clase y cambio el valor al que referencia, automticamente todas las instancias que yo cree a partir de esa clase en la vida van a conocer ese nuevo valor, porque lo conoce su clase y ellas conocen a su clase :)# Diferencia con las variables de instanciaLas variables de instancia son propias de cada objeto, si cambio una referencia en un objeto la referencia de otro de la misma clase no cambia (aunque las variables se llamen igual). Si cambio la referencia de una variable de clase, todas las instancias van a verse afectadas, ya que no es una referencia propia.En Smalltalk, para declarar una variable de instancia (por ejemplo, dada una clase Pirata, para decir que cada pirata conoce cuntas monedas tiene) debamos indicarlo de esta forma:```smalltalkObjectsubclass:#PiratainstanceVariableNames:&#39;monedas&#39;classVariableNames:&#39;&#39;category:&#39;Yaaaar&#39;```Para declarar una variable de clase en cambio, el nombre de la variable debe ir entre las comillas que siguen a classVariableNames:, por convencin inician con mayscula. Suponiendo que el dinero mximo que tiene que tener un pirata para poder saquear un objetivo es igual para todas las misiones de saqueo es el mismo, podemos ponerlo en una variable de clase```smalltalkObjectsubclass:#SaqueoinstanceVariableNames:&#39;&#39;classVariableNames:&#39;DineroMaximo&#39;category:&#39;Yaaaar&#39;```# Como las usamos?Dentro de un mtodo de instancia de Saqueo podemos directamente usar una variable de clase definida para la clase Saqueo, por ejemplo:```smalltalk#Saqueo&gt;&gt;esUtil:unPirata^(unPiratadineroDisponible&gt;esUtil:unPirata^(unPiratadineroDisponible&gt; dineroMaximo****^DineroMaximo**```Por ltimo, una forma ms correcta sera poniendo **self class**, de esta manera:```smalltalk#Saqueo&gt;&gt;esUtil:unPirata^(unPiratadineroDisponible&gt;dineroMaximo^DineroMaximo```La razn por la que es ms correcta, tiene que ver con la existencia de [Herencia](herencia.html) como se mencion anteriormente. As damos la posibilidad a una subclase a redefinir dineroMaximo."

} ,

{

"title"    : "Variables",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/variables.html",
"date"     : "",
"content"  : "# ReferenciasEn objetos una variable es una **referencia** a un objeto. La mayora de las referencias pueden ser reapuntadas a otros objetos mediante la operacin de [asignacin](transparencia-referencial--efecto-de-lado-y-asignacion-destructiva.html). Al hacerlo eso no modifica al objeto previamente referenciado.Hay distintos tipos de referencias, dependiendo del contexto en el cual son declaradas:- atributos: se usan para que el objeto mantenga un estado propio.- locales: se declaran dentro de un mtodo, slo son visibles desde el mismo, y no sobreviven a su ejecucin.- parmetros: forman parte de la firma del mtodo, no pueden ser reapuntadas a otros objetos dentro del mtodo.## Asignacin de variablesLa asignacin de variables se logra de la siguiente forma:```scalavariable=expresion-que-devuelve-un-objeto```y debe interpretarse que cuando se evala esta lnea, la variable referencia al objeto resultado de la expresin de la derecha.Entonces, al asignar una variable **no estoy creando ningn objeto** ni estoy cambiando al objeto referenciado anteriormente por dicha variable, slo se cambia cul es el objeto al que est apuntando esa referencia.### var y constEn Wollok, las referencias pueden declararse como variables (con la palabra reservada `var`) o como constantes (con la palabra reservada `const`). Las constantes estn pensadas para ser usadas siempre que no se espere que la referencia pueda cambiar de valor, con lo cual intentar asignar una constante luego de su inicializacin no est permitido.```scalavar edad = 15const iva = 21edad = 16 // esto anda perfectoiva = 19 // esto tira error en tiempo de compilacin```Error comn: qu significa &quot;cambiar un objeto&quot;? - Lo cambio **por otro**?- O le cambio **sus atributos**?Miremos el siguiente ejemplo:```scalaconst laPreferida = pepita // atentos al constlaPreferida.volar() // Qu sucede en este caso? Da error? laPreferida = pepona // Y en este caso?````laPreferida.volar()` no da error. Esto es porque al enviar el mensaje `volar()`, `laPreferida` (que apunta al mismo objeto que `pepita`) est cambiando su **estado interno**, su energa. Pero la **flecha** `laPreferida` no se modifica! Se modifica slo la energa de pepita al volar.En cambio, en `laPreferida = pepona` s hay un error de compilacin. Estoy intentando modificar a dnde apunta `laPreferida`, pero como esa referencia es `const` nunca podr dejar de apuntar a pepita.Es importante entender que `const laPreferida` **no significa que el objeto no pueda modificar su estado interno, sino que no puedo hacer que la flecha laPreferida apunte a otro objeto**.## InicializacinUn problema comn que suele darse con atributos de los objetos es olvidarse de inicializarlos.Lo que sucede cuando una variable no ha sido inicializada puede variar de un lenguaje a otro: algunos (por ejemplo Smalltalk) tienen un objeto especial para representar la nada que entienden muy poquitos mensajes, otros (como Java o Wollok) directamente usan un valor primitivo. Pero lo importante es que para poder usar una variable de forma razonable, la misma debera referenciar a un objeto que entienda los mensajes que esperamos mandarle, de lo contrario se generar un error.Cul es el momento adecuado para inicializar un atributo? Si bien podran darse situaciones en las cuales se quiera o necesite postergar la inicializacin de un atributo, lo ms comn es querer inicializar los atributos al momento de la creacin del objeto, de esa forma nunca se llegar a un estado en el cual el se le mande un mensaje al objeto y el mismo falle porque no se haya inicializado un atributo previamente.En Wollok podemos inicializar las variables al momento de declararlas. Eso en general es suficiente para trabajar con objetos bien conocidos (como en el ejemplo que se muestra ms adelante). En caso de trabajar con objetos instanciados a partir de [clases](clases.html), es posible inicializar los atributos con valores distintos para cada instancia usando las [herramientas de instanciacin](herramientas-de-instanciacion.html) disponibles (en otros lenguajes en los cuales las clases son objetos, como Smalltalk, esto se logra mediante mensajes a las clases).## Ejemplo completoDado el siguiente cdigo Wollok:```scalaobjectpepita{varenergia = 100methodenergia(cantidad) {energia=cantidad}}```... yluegolemando el mensaje...```scalapepita.energia(50)```Cuando el objeto se crea, la variable energa se inicializa apuntando al objeto 100. Al mandar el mensaje para settearle la energa, el atributo energia que tiene pepita pasa de apuntar a 100 a apuntar a 50. O sea que slo cambia a quin conoce pepita mediante la referencia energia.SIEMPRE lo que se encuentre a la izquierda de la asignacin debe ser una variable, no se puede asignar un objeto (y por el mismo motivo no se puede asignar un envo de mensajes). Las siguientes expresiones son invlidas:```scala3=5                // &lt;---3esunobjeto,nounareferencia!!!pepita.energia()=10 // &lt;---pepita.energia()esunenvodemensajes,nounareferencia!!!```En ningn caso vamos a poder modificar desde fuera del objeto que tiene una referencia el valor de la misma, siempre hay que mandarle un mensaje a ese objeto para que la cambie. Esto est relacionado con la idea de [encapsulamiento](encapsulamiento.html), que es una de las bases del paradigma de objetos.# Atributos: errores comunesLos atributos son obviamente muy tiles, ya que permiten que un objeto recuerde toda la informacin que necesita para poder usarla en cualquier momento. Sin embargo, hay que ser criteriosos respecto a cundo usarlos, ya que pueden ser el motivo de inconsistencias y dificultad para mantener nuestros programas.Los siguientes son los algunos errores comunes de ver respecto al uso de atributos:- Atributos redundantes: si cierta pieza de informacin puede ser calculada a partir de otra, no uses un atributo que tenga que ser mantenido consistente, us un mtodo que calcule lo que necesits a partir de la otra informacin disponible. Para ms informacin pods leer [este artculo](oo-temporary-variable.html)- Atributos innecesarios: no hay que perder de vista que nuestro programa es un **modelo**, y por ende no hace falta que el objeto recuerde informacin que luego no va a ser usada.- Uso de atributos en vez de locales: si necesitamos recordar cierta informacin slo dentro de la ejecucin de un mtodo, lo correcto es usar una local, no un atributo.Como regla general para evitar estos problemas, preguntate: hay alguna forma de no usar un atributo para lo que ests haciendo? si la hay, ***no uses un atributo***.Y las referencias circulares? Es perfectamente vlido que dos objetos se conozcan entre ellos, en el caso de que sea necesario obviamente, las reglas anteriores valen tambin para esto. El nico recaudo que hay que tener es asegurar la consistencia del estado de ambos objetos, lo cual puede simplificarse asegurando que esas referencias se modifiquen dentro de una misma operacin, y no de forma independiente."

} ,

{

"title"    : "Warning  singleton variables",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/warning--singleton-variables.html",
"date"     : "",
"content"  : "Las singleton variables son variables que vos escribiste en tu predicado pero no se usan. Por ejemplo:&quot;Soy feliz si tengo algun amigo&quot;```prologesFeliz(Alguien):-amigoDe(Alguien,**UnAmigo**).```Ah la variable UnAmigo no la uss en otro lado, por lo que te dice que es Singleton. Como a vos no te interesa &quot;usar&quot; a ese UnAmigo (Slo te interesa saber si existe, no quin es), pods poner una variable annima:```prologesFeliz(Alguien):-amigoDe(Alguien,**_**).```Y as ya no te chilla.Ojo, a veces pasa que escribs mal una variable, entonces te dice &quot;eh, singleton, sta no la ests usando en otro lado&quot; Por ejemplo:```prologesFeliz(**Alguin**):-amigoDe(**Alguien**,_).```Y ah slo tens que arreglar tu error de tipeo.En resumen, si tens un Warning,-   puede ser que tu programa igual ande perfecto (en el primer caso la variable annima funciona igual que una comn),  bien-   puede ser que por un error de tipeo tu programa no ande (qu bueno que nos avise).-   En general, los warnings nos deberan hacer pensar si escribimos bien las variables, y si lo hicimos bien, deberamos entonces revisar la lgica del predicado (pifiarla en eso es un error ms grave)"

} ,

{

"title"    : "Xtend - control de versiones",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/xtend-amigandonos-git.html",
"date"     : "",
"content"  : "No todos los archivos deben subirse al repo. Como regla general no deberan subir archivos que se puedan generar a partir de otros, por ejemplo:- los archivos `.java` que se generan a partir del cdigo Xtend (en `target/xtend-gen/main`)- los binarios que se generan a partir del cdigo fuente de ustedes (en `target/classes`). Ocupan espacio en el repositorio y se corre el riesgo de estar trabajando con versiones desactualizadas.- archivos de configuracin propios de Eclipse, como `.project`, `.classpath` y el directorio `.settings`. Todos estos se generan a partir del `pom.xml` cuando hacemos Maven &gt; Update, y por este motivo no es bueno trabajar con los archivos de Eclipse ni tenerlos en cuenta en el control de versiones.# Cmo no subir esos archivosDebemos crear un archivo `.gitignore` (que en Wollok se los cre el propio entorno), en la carpeta raz del proyecto, que debe tener al menos esta lista:```bash/target/.classpath.projectbingenerated*.settings```Fjense que hemos eliminado todos los archivos que se pueden generar en base a definiciones originales. Esto da como resultado un repositorio con menos cantidad de archivos y mayor calidad de los mismos. Por lo general, deberamos evitar subir archivos binarios (salvo imgenes o archivos encriptados con informacin sensible), dado que ocupan ms espacio y no se puede comparar diferencias entre versiones, solo saber si cambi.# Recomendaciones para trabajar con mi grupo- Cuando empiezo el da primero sincronizo el repositorio para ver los cambios que no tengo en el cdigo. Si no hay cambios, simplemente corro los tests y empiezo a codear como un campen. Si no...  - Acepto los cambios entrantes y en caso de ser necesario resuelvo conflictos  - Corro los tests y veo que todo anda sobre ruedas  - Vuelvo a sincronizar y veo que ya no quedan ni conflictos ni cambios sin aceptar  - Subo mis cambios al repositorio remoto para que mis compaeros lo vean- Ahora s, a programo, programo, programo... y cuando termino, corro los tests- Y vuelvo a sincronizar contra el repositorio remotoEn resumen:- No pasa un da de trabajo sin hacer un commit y push al repositorio remoto. Esto implica planificar mi trabajo para que pueda subir algo al repositorio sin que rompa todo: **hay que partir un cambio grande en pequeos pasos** (iterativo, incremental).- Nunca deberan subir nuevos fuentes al repositorio sin explicar brevemente qu cambiaron. Si los mensajes son descriptivos (y &quot;fix&quot;, &quot;asdsadsa&quot; o &quot;arreglo una cosita&quot; definitivamente no lo son) rpidamente puedo detectar qu modificaron mis compaeros con slo leer lo que escribieron en los commits. Una buena descripcin me ayuda tambin a entender qu es lo que se modific y por qu razn, especialmente til a la hora de solucionar un conflicto o entender por qu se rompieron los tests.- El que rompe los tests paga las facturas.# Metodologa para trabajar en grupo- los tests tienen que estar en verde **siempre**- los tests son de todos y todos somos responsables por mantenerlos- si encontramos un bug y no haba un test que lo probaba agregamos uno- los tests son rpidos de correr (no pueden tardar 10 minutos)# Git por consola o Git con una herramienta visual?Da lo mismo, eleg la herramienta que mejor te resulte. eGit no es la gran cosa y hay otras opciones (tens los links en la pgina), lo importante es cmo te organizs con tus compaeros.___- [Siguiente paso: Gua rpida de Xtend](xtend-guia-rapida.html)- [Volver al men principal del entorno Xtend](xtend-principal.html)"

} ,

{

"title"    : "Cómo generar un proyecto Xtend nuevo",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/xtend-creacion-proyecto.html",
"date"     : "",
"content"  : "Para realizar las prcticas, vas a crear un proyecto desde cero. Como ahora hay muchas ms opciones, te dejamos una gua simple de cmo iniciarte.# Crear proyecto MavenTodos los ejemplos que vas a descargar de la materia, as como los proyectos en los que vas a trabajar, se basan en la tecnologa Maven. Para crear un proyecto Maven, te dejamos esta animacin:![image](/img/languages/creatingNewProject.gif)- Seleccionamos New &gt; Project... Maven Project- Chequeamos &quot;Skip archetype selection&quot; ya que no lo usaremos, y luego Next- En la siguiente pantalla, escribimos cualquier cosa en &quot;groupId&quot;, que es un valor que luego borraremos, pero que si lo dejamos vaco Eclipse nos mostrar un error. Y el nombre de nuestro proyecto o `artifactId`, ste s es importante, seguimos la nomenclatura de paquetes de Java, para que no haya confusiones en los nombres: `ar.edu.unsam.prueba` identifica nuestro proyecto en todo el mundo- cuando finalizamos, se genera un proyecto con un archivo pom.xml, que es fundamental para que Eclipse regenere el proyecto en otra mquina y descargue las dependencias#  Configuracin de un proyecto MavenEl acrnimo POM es por &quot;Project Object Model&quot;. El archivo `pom.xml` es el core de la configuracin de un proyecto maven. Es un solo archivo de configuracin que contiene la mayora de la informacin requerida para el build de un proyecto.## Pom, pom, pom, pom...Para comenzar a escribir la configuracin del proyecto en un archivo `pom.xml` existen algunas opciones:- Inicializar un proyecto maven desde 0 desde la terminal con el comando `mvn archetype:generate`. Al hacer esto maven nos pedir los datos iniciales para inicializar el proyecto (artifactId, groupId, etc) y nos dejar un `pom.xml` creado y listo para usar/modificar.- Crear un proyecto maven desde eclipse u algn otro IDE.- Copiarse un `pom.xml` de un proyecto maven existente y adecuar los valores de los campos que identifican el proyecto.Te dejamos entonces el modelo de proyecto Maven por defecto para la cursada de Algoritmos 2 (UNSAM) del ao 2021: [pom.xml de ejemplo](pom-algo2.xml). Luego tendrs que- renombrar el archivo a `pom.xml`- copiarlo dentro del directorio raz de tu proyecto ya creado- actualizar en base a los nombres de tu proyecto (el _artifactId_ y _groupId_)- revisar las dependenciasPara profundizar un poco ms sobre lo que contiene un archivo de Maven, te recomendamos [este artculo](maven.html).# Sincronizacin entre Eclipse y MavenCada vez que hagamos un cambio en el archivo `pom.xml`, nos aparecer un mensaje de error en la solapa **Problems**, que se soluciona forzando la sincronizacin entre Eclipse y Maven (dado que cada uno maneja su propia estructura de proyectos Java). Como regla general, **siempre que necesitemos agregar alguna biblioteca, o dependencia, debemos hacerlo en el archivo pom y no desde las opciones que ofrece el Eclipse, porque nuestros compaeros o los docentes no tendrn esa biblioteca**. Para sincronizar Maven y Eclipse, nos paramos en el proyecto y con un botn derecho elegimos &quot;Maven &gt; Update Project&quot;.# Primeros pasos![image](/img/languages/firstClass.gif)Ahora solo nos queda eliminar la lnea groupId (con Ctrl + D), formatear el pom.xml (con Ctrl + Shift + F) y crear nuestra primera clase Perro. Es importante notar que tendremos dos carpetas donde ubicaremos los fuentes:- `src/main/java`: donde irn las clases- `src/test/java`: donde irn los testsPor eso, nos ubicamos en `src/main/java` y con un botn derecho, New &gt; Xtend Class (es importante que hayas configurado el Eclipse para que no est escondida esta opcin).## Generacin de archivos .javaEn `src/main/generated-sources` vas a tener los archivos `.java` que se generan en base a los archivos de xtend. No los toques! Porque cada cambio que hagas en tu clase xtend va a pisar los cambios de los archivos `.java`. En general no deberas mirar nunca el java que genera, porque adems utiliza construcciones menos simples que si programaras directamente en java.# RecomendacionesA continuacin te dejamos algunas recomendaciones para que tu estada en Eclipse + Xtend sea ms feliz:- Formatear el cdigo! Nunca nos olvidemos de que nuestro cdigo tiene que ser entendible para el resto de la humanidad. Adems, el Eclipse lo hace solo (Ctrl + Shift + F).![image](/img/languages/formattingCode.gif)- Utilizacin de packages (paquetes). Es una buena prctica agrupar las clases afines en paquetes para organizar semnticamente el cdigo. No hay una gua firme a seguir con respecto a cmo organizar nuestro cdigo, ya que suele depender del contexto en el cual estamos trabajando, pero a medida que veas nuestros ejemplos y vayas haciendo las prcticas notars que hay clases que se pueden agrupar en contextos similares. Te dejamos un ejemplo```bashproyectohomeregistrationProfile.xtendUser.xtendsettingsCustomPrivacy.xtendDefaultPrivacy.xtendPrivacy.xtendSetting.xtend```De esta manera, logramos mayor granularidad en la organizacin de nuestras clases.___* [Siguiente paso: Sobre el control de versiones](xtend-amigandonos-git.html)* [Volver al men principal del entorno Xtend](xtend-principal.html)"

} ,

{

"title"    : "Guia rapida de Xtend",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/xtend-guia-rapida.html",
"date"     : "",
"content"  : "La siguiente es una gua de _syntactic sugars_ de Xtend, algunos de los cuales trabajan conceptos ms profundos que veremos a lo largo de la materia.# Definicin de una claseNo tenemos objetos en Xtend, slo clases. Aqu dejamos un ejemplo```scalaclass Ave {    static int ENERGIA_MINIMA = 10    @Accessors int energia = 0    def volar() { energia = energia - 10 }    def comer(int cuanto) { energia = energia + (cuanto * 2) }    def esFeliz() { energia &gt; ENERGIA_MINIMA }    def resetearEnergia() { energia = 0 }}```* podemos escribir mltiples clases en un archivo Xtend* la definicin de la clase se encierra entre llaves* la variable ENERGIA_MINIMA es esttica, esto significa que **todas las instancias comparten la misma variable** (lo que tambin se llama variable de clase), suele usarse como constantes o valores que difcilmente cambien.* la variable energia **es una variable de instancia** porque cada objeto Ave tiene su propio valor.* las variables de instancia y de clase deben anotarse con el tipo, en este caso ambos son int* la variable `energia` tiene la anotacin `@Accessors`, que permite definir getters y setters automticos* los mtodos volar, comer y esFeliz necesitan la palabra `def` para indicar que son mtodos. Algunos producen efecto (volar y comer) y otros simplemente devuelven un valor (esFeliz)* no es necesaria la palabra `return` al final de cada mtodo, pero en algunos casos veremos que es necesaria* no siempre es necesario hacer anotaciones de tipo sobre los mtodos, como veremos ms adelante# Referencias variables y valoresEn Xtend, al igual que muchos otros lenguajes, se diferencian las referencias como* **Variables**: son referencias que pueden inicializarse apuntando a un objeto, y luego reasignarse a otro. Justamente &quot;varan&quot;:```scalavar String unString = &quot;Pepito&quot;unString = &quot;Otro String&quot;```* **Constantes**: son referencias que nacen apuntando a un valor y no pueden ser modificadas para apuntar a otro objeto. Seran como &quot;constantes&quot;.```scalaval String constante = &quot;Constante&quot;constante = &quot;Otro&quot;  //  **Tip**: para que te aparezcan los smbolos `` que son difciles de encontrar en el teclado, simplemente utiliz las teclas `Ctrl` + `Espacio` dentro de la definicin del string y aparecern solas## NmerosExisten muchos tipos de datos diferentes para nmeros:* **int**: es un nmero entero que admite negativos pero sin decimales* **double**, **float**: son nmeros reales que admiten decimales pero con errores en las operaciones, es por ello que no debemos usarlo para operaciones sensibles (como transacciones bancarias o que requieran clculos exactos)* **BigDecimal**: es el tipo de dato que conviene utilizar ya que no produce errores de redondeo (permite trabajar con una cantidad exacta de decimales y truncarlos o redondearlos en caso de ser necesario)* Tambin existen las variantes &quot;objetosas&quot; de int, double y float que son Integer, Double y Float. La principal ventaja es que son objetos, y podemos enviarle mensajes (concretamente ms mensajes) que a las versiones en minscula, que son _tipos primitivos_. Es posible &quot;envolver&quot; en una variable Integer cualquier int, la conversin se da automticamente por el compilador de Java y se llama &quot;autoboxing&quot;:```scalavar i = 0                         // intvar pi = 3.14d                    // doublevar saldo = new BigDecimal(1500)  // BigDecimalvar Integer otroI = i             // otroI es un enterootroI.bitwiseNot                  // puedo enviar un mensajes```## ColeccionesExisten literales para definir listas, conjuntos y mapas (dictionaries):```scala// Lista inmutable:val myList = #[&#39;Hello&#39;, &#39;World&#39;]// Set inmutableval mySet = #{&#39;Hello&#39;, &#39;World&#39;}// Mapa/Diccionario inmutableval myMap = #{&#39;a&#39; -&gt; 1 , &#39;b&#39; -&gt;2}```Recordemos que* **listas**: respetan el orden en el que se agregan (como una fila) y admiten duplicados.* **conjuntos**: no tienen orden y tampoco admiten duplicados. Dos objetos son iguales en base a la definicin de equals() y hashCode().* **mapas**: tambin llamados dictionaries, son un conjunto de pares clave/valor. Se acceden por clave.## RangeEs posible generar un rango de nmeros, por ejemplo para iterar una cantidad de veces:```scala#[1 .. 10].forEach [ ... ]      // [1..10] genera la lista de 1 a 10#[1 .... 10].forEach [ ... ]     // [1&gt;..10] genera la lista de 2 a 10````.. facturas = newArrayListSet domicilios = newHashSetList nombres = newArrayList(&quot;nahuel&quot;, &quot;rodrigo&quot;, &quot;marina&quot;)```Pods utilizar `newLinkedList`, `emptyList`, `emptySet`, `emptyMap`, `newInmutableMap`, `newImmutableSet`, `newImmutableList`, `newLinkedHashSet`, `newTreeSet`, `newHashMap`, `newLinkedHashMap`, `newTreeMap`. La ventaja que tienen es que permiten pasarle parmetros variables (tantos como elementos necesites) y trae implementaciones por defecto para algunas colecciones que necesitan comparators (tens que estudiar ms a fondo [**Colecciones en Xtend**](https://docs.google.com/document/d/1lzOStySb8i94oVvZUIxkgymf2tuCDuXzqSTnClPqKSM/edit?usp=sharing))## Inferencia de tiposXtend cuenta con inferencia de tipos, lo que permite* que existan chequeo de tipos* pero que la mayora de las veces no sea necesario definir los tipos de las expresionesVemos un ejemplo en vivo, mostrando cmo cambia la solapa &quot;Outline&quot; cuando modificamos el cdigo:![image](/img/languages/xtendTypeInference.gif)Aqu vemos que incluso Xtend detecta expresiones que no tienen sentido, como cuando hicimos:```scaladef esFeliz() {    energia &gt; ENERGIA_MINIMA    &quot;si&quot;}```El hecho de generar una expresin `energia &gt; ENERGIA_MINIMA` no causa efecto en el objeto y tampoco se devuelve (porque se pisa por la expresin &quot;si&quot; que es devuelta como retorno del mtodo).Volviendo a la inferencia de tipos, es fundamental poder contar con un lenguaje que tenga chequeo de tipos para detectar errores en forma temprana pero **que no me obligue a definir los tipos todo el tiempo**. La definicin de tipos es obligatoria para las variables de instancia y de clase de los objetos, y en algunos casos cuando la definicin de mtodos polimrficos puede resultar ambigua para Xtend. En cualquiera de esos casos vas a ver un mensaje de error o de advertencia para que definas el tipo que mejor se ajuste.## CasteosSi bien toda expresin tiene un tipo y Xtend suele inferirlo bastante bien, a veces es necesario hacer _downcasting_ o forzar que una expresin pase por un tipo de datos:```scala(42 as Integer)(cliente as Cliente)```En general la expresin es, entre parntesis: (`valor/variable` as `tipo`)# Definicin de propiedadesLa anotacin @Accessors puede hacerse sobre una variable, como hemos visto antes:```scalaclass Ave {    @Accessors int energia = 0```En este caso se crean getters y setters para energia, **transformndolo en una propiedad**.```scalaclass Ave {    @Accessors(PUBLIC_GETTER) int energia = 0```En este caso se crea un getter pblico para la variable energia. Otras variantes son: crear slo un setter pblico o crear getters o setters con diferentes visibilidad.Por ltimo, podemos anotar la clase con @Accessors```scala@Accessorsclass Ave {    int energia = 0    int vecesQueVolo = 0```en este caso, se crean getters y setters para todas las variables de dicha clase.# Shortcut para acceder a propiedadesCuando usamos un objeto que tiene propiedades (par getter y setter), podemos cambiar un poco la sintaxis para que se vea ms simple. En el ejemplo anterior del Ave:```scalaval pepita = new Ave()pepita.energia = 100    //  ENERGIA_MINIMA }}class Golondrina extends Ave {    override esFeliz() { true }}class Torcaza extends Ave {    int vecesQueVolo = 0    override volar() {        super.volar()        vecesQueVolo++    }}```Aqu vemos que* Golondrina y Torcaza heredan de Ave, indicado mediante la palabra clave `extends`* Golondrina **redefine** el comportamiento de esFeliz, lo pisa, y esto requiere la palabra clave `override` (no funciona si intentamos definirlo con `def`)* Torcaza tambin lo redefine, pero fuerza a llamar al comportamiento de la superclase mediante la palabra clave `super`, indicando luego el mensaje a aplicar. Como regla general solo deben utilizar `super` cuando no puedan utilizar `self`, como en este caso (entraran en loop infinito)# Clases y mtodos abstractosPodemos definir a Ave como clase abstracta, esto producir que no podamos instanciar objetos Ave. Una clase abstracta puede definir solo la interfaz de un mtodo, lo que se conoce como mtodo abstracto. Veamos el siguiente ejemplo:![image](/img/languages/xtendAbstractClassesAndMethods.gif)En el ejemplo:* primero definimos Ave como abstracta* eso provoca que el compilador Xtend tire un error cuando queremos instanciar un Ave en la clase Ornitologo* lo corregimos instanciando una Golondrina* luego, queremos definir un mtodo abstracto: esFeliz. Para ello reemplazamos la definicin por una cscara que solo dice que esFeliz debe devolver un booleano. Dado que no hay cdigo Xtend nos fuerza a definir el tipo de retorno del mtodo (y de sus parmetros) porque no puede inferirlo.* todos los mtodos abstractos deben estar implementados en las subclases: el compilador nos avisa que falta la definicin de esFeliz() en Torcaza. Con un botn derecho &quot;Add unimplemented methods&quot; pegamos la definicin copiada.* como nos falta la constante que estaba en Ave, la bajamos mediante `Alt` + `Flecha abajo`y finalmente todo compila.# ConstructoresUn constructor se define con la palabra reservada `new` (equivalente al `constructor` de Wollok):```scala@Accessorsclass Golondrina {    int energia    new() {        this(100)   // llama al constructor con parmetros        // para llamar al constructor de la superclase es necesario utilizar super(params)    }    new(int energia) {        this.energia = energia    }}```* Por defecto, si no hay constructores se genera uno por defecto sin parmetros y no hace falta definirlo* Es posible definir mltiples constructores, como vemos en el ejemplo, con diferente cantidad de parmetros o de tipos* Cuando definimos constructores sobre una clase, se pierde el constructor por defecto* **Los constructores de Xtend no se heredan**# BloquesUn bloque permite definir una porcin de cdigo, tambin llamada expresin lambda:```scalaval cuadrado = [ int num | num ** 2 ]cuadrado.apply(5)```De esta manera podemos enviar bloques como parmetros, algo muy til para trabajar entre otras cosas con las colecciones (`map`, `filter`, `fold`, etc.)La sintaxis general es```scala[ | ... ]                // bloque sin parmetros[ elem | ... ]           // bloque con un parmetro[ int a, int b | a + b ] // bloque con dos parmetros```## Variable implcita itDe la misma manera que cuando estamos dentro de una clase, podemos acceder a una variable de instancia con `this````scalathis.energia```o sin l:```scalaenergia```tambin podemos usar una variable implcita `it` dentro de un mtodo.```scalaval it = new Ave()volar       // equivale a it.volar()comer(2)    // equivale a it.comer(2)```Dentro de una expresin lambda, `it` es la variable implcita del primer parmetro, por lo tanto todas estas expresiones son equivalentes:```scalaalumnos.filter [ alumno | alumno.estudioso() ]alumnos.filter [ it | it.estudioso() ]alumnos.filter [ it.estudioso() ]alumnos.filter [ it.estudioso ]alumnos.filter [ estudioso ]```![image](/img/languages/xtendItImplicitVariable.png)# Manejo de nullsLos valores nulos son siempre un dolor de cabeza, Xtend tiene algunos trucos para facilitar un poco ms el trabajo con ellos.## Elvis operatorParece un emoticn, pero `?:` es un shortcut para utilizar un valor por defecto cuando una expresin pueda ser nula:```scalaval nombre = person.firstName ?: &#39;You&#39;```Si la expresin que est a la izquierda se evala como null, `nombre` se asigna a la segunda expresin.## Null safe operatorTambin podemos resolver envos de mensajes a referencias que potencialmente podran ser nulas:```scalaval mejorAlumno = alumnos.find [ ... ]...mejorAlumno?.felicitar()```En este caso, el operador `?.` es equivalente a preguntar `if (mejorAlumno) mejorAlumno.felicitar()`## Comparar referenciasDespus de varios cambios, Xtend dej las cosas como la mayora de los lenguajes. Tenemos dos formas de comparar referencias:```scalaref1 == ref2     // compara por igualdad, esto significa que son iguales si son las referencias                 // apuntan al mismo objeto o bien, en base a la definicin del mtodo equals                 // en la clase ref1 (sabiendo que ref1 no es nulo)                 // en la clase asociada a ref1ref1 === ref2    // compara por identidad, esto significa que son iguales si las referencias                 // apuntan al mismo objeto en memoria, determinado por la VM y no se puede cambiar```**Tener especial atencin a los strings**, ya que dos strings con el mismo contenido pueden ser iguales pero no idnticos, dependiendo de las estrategias de optimizacin de la VM. Siempre es conveniente utilizar ==, que adems se puede modificar.# Mtodos avanzados## Obligatoriedad del return en mtodosPor lo general, los mtodos devuelven la ltima expresin que contienen. Pero a veces es necesario cortar el flujo de envo de mensajes, como por ejemplo aqu:```scaladef gradoDeFelicidad() {    if (!esFeliz) {       return 0    }    ... clculo complejo ...}```Para determinar el grado de felicidad de alguien, tenemos como precondicin que sea feliz. Y para simplificar la definicin, escribimos el `if` y forzamos el return (dado que escribir nicamente `0` no tendr efecto, porque Xtend seguir evaluando el resto de las expresiones hasta terminar la ltima y nosotros queremos justamente cortar el flujo).En el caso de un mtodo que solo busque producir un efecto (`void`), es necesario utilizar `return;` con punto y coma...```scaladef metodoConEfecto() {    ... cambios ...    if (!situacion) {       return;    }    ... otros cambios ...}```Igualmente, siempre es preferible tratar de extraer mtodos ms pequeos para simplificar la lgica.## Extension methodsUna de las herramientas ms poderosas consiste en definir **extension methods**. Supongamos que un negocio tiene un horario de apertura y de cierre y queremos saber, dada una hora, si est abierto.```scalaclass Negocio {    int horarioApertura    int horarioCierre    def estaAbierto(int horaActual) {        horaActual.between(horarioApertura, horarioCierre)    }}```Por supuesto, no compila. No existe el mtodo between asociado a los enteros. Pero en otro archivo vamos a definir un mtodo esttico (no asociado a un objeto):```scalaclass NumberUtils {    static def between(int num, int from, int to) {        num &gt;= from &amp;&amp; num `, algo muy til cuando estamos instanciando objetos:```scalaval ventaNacional = new Venta =&gt; [    cantidadKilos = 12    fechaVenta = new Date    parcela = parcela50    comprador = new CompradorNacional]```De esta manera, todos los mensajes se apuntan al objeto que resulta de evaluar la expresin `new Venta`, y simplifica el envo de mensajes: ```scalaventaNacional.cantidadKilos = 12ventaNacional.fechaVenta = new DateventaNacional....```## Links relacionados* [Colecciones](https://docs.google.com/document/d/1lzOStySb8i94oVvZUIxkgymf2tuCDuXzqSTnClPqKSM/edit?usp=sharing)* [Intro a manejo de errores con excepciones](https://docs.google.com/document/d/1G0a9j-OA0rIEA5cdvEhIMbztJVo86ssvZKBK8HL9akg/edit?usp=sharing)* [Ejercicio del Monedero](https://docs.google.com/document/d/1vVW91adl0p-NxGNpe8fqmC_5YmBkrxaLDFKyZ0xZb9Y/edit?usp=sharing) para ver cmo interactan la UI y el dominio a partir de errores del dominio y del sistema* [Testing](https://docs.google.com/document/d/11mVR-4wEZhlQMDEqrfQeYLypEsrSqXv98dr78SA0Oq4/edit?usp=sharing)"

} ,

{

"title"    : "Preparacion de un entorno de desarrollo xtend",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/xtend-preparacion-de-un-entorno-de-desarrollo.html",
"date"     : "",
"content"  : "# Download e instalacin base## Git Bash (slo para Windows)Para simplificar el uso de Git en entornos Windows, existe la herramienta **Git Bash** que pods descargar a partir de [esta pgina](https://gitforwindows.org/), haciendo click en el link &quot;Download&quot;.Si ests en Mac o Linux, pods saltear este paso.## JDK: Java Development KitPrimero instalaremos el compilador de Java.Ingresamos a [esta direccin](https://jdk.java.net/java-se-ri/11), y descargamos la **Open JDK 11**, que es la versin oficial que manejamos desde 2020 y cuya licencia es [GPL](https://es.wikipedia.org/wiki/GNU_General_Public_License). ### Pasos de instalacinUna vez descargado el binario en una carpeta (supongamos que es `C:&amp;#92;jdk11`), hay que configurar dos variables de entorno de tu sistema operativo:- JAVA_HOME: tiene que apuntar a `C:&amp;#92;jdk11`)- PATH: hay que incorporarle `C:&amp;#92;jdk11&amp;#92;bin` (cuidando de no borrar lo que ya est)Te dejamos [un video que explica cmo hacerlo para Windows](https://www.youtube.com/watch?v=Cr_mwn67kFs) (el procedimiento es similar para MacOS / Linux)### Chequeos posteriores a la instalacin- Dentro de las variables de entorno de tu sistema operativo debe estar JAVA_HOME asignada. En Linux / Mac esto es `env | grep JAVA_HOME`, y en Windows `SET JAVA_HOME`. **Si la variable no est seteada, eso significa que te salteaste un paso, lo mismo si la carpeta que muestra JAVA_HOME no es la que contiene la versin que vos descargaste**. En ese caso volv al punto anterior y segu nuevamente las instrucciones para encontrar lo que est faltando. - En una ventana de lnea de comandos, verificar la versin de java instalada con `java -version`, y el compilador mediante `javac -version`. En ambos casos mostrar la versin por defecto para tu mquina. **Si no aparece la versin que descargaste, el sistema operativo asume por defecto otra instalacin, que podra ser incluso de una JRE (ver ms abajo)**. En ese caso, revis el link del punto anterior para ver qu puede estar faltando y repet los pasos.### JDK s, JRE no&gt; **IMPORTANTE:** tens que instalar una JDK, no una JRE (Java Runtime Environment) que solo te permite ejecutar programas Java ya compilados. Para saber si tens una JDK, deberas ir al directorio de instalacin y en la carpeta `bin` debe estar un programa llamado `javac`, que es el compilador de Java.![image](/img/languages/jdkVsJre.png)Si no tens ese programa, no vas a poder pasar tus objetos a cdigo ejecutable en el entorno Xtend: la solucin es muy simple, descarg e instal una JDK. Para ms informacin te recomendamos [esta pgina](jdkVsJre.html)## EclipseNuestro entorno integrado de desarrollo (IDE) permite que en una misma herramienta editemos nuestro cdigo fuente, compilemos, hagamos pruebas, y muchas cosas ms. En Algoritmos 1 ya conociste Eclipse, con un entorno modificado especialmente para soportar el lenguaje Wollok. Aqu lo utilizaremos con diferentes plugins, pero seguramente te resultar familiar la forma de trabajar.### Pasos de instalacinTens que descargarlo desde [esta pgina](https://www.eclipse.org/downloads/) utilizando el link ms reciente de Eclipse (al 01/03 es **Get Eclipse IDE 202012**)&gt; **NOTA:** pods visitar [la pgina histrica de descarga de Eclipses anteriores](https://wiki.eclipse.org/Older_Versions_Of_Eclipse) por si hay versiones ms nuevas y te interesa usar la versin 2020-12 que es con la que desarrollamos los ejemplos. Normalmente las actualizaciones de Eclipse siguen funcionando sin mayores problemas con el plugin de Xtend, Java y Maven.Eso te descarga un eclipse-installer, que es el primer paso. Lo abrs con un doble click, y luego seleccions- si ests cursando Programacin con Herramientas Modernas: &quot;Eclipse IDE for Enterprise Java Developers&quot;- cualquier otra cursada: &quot;Eclipse for Java Developers&quot;, seleccionando la carpeta de destino.### Chequeos de instalacinUna vez que lo hayas descomprimido en una carpeta, pods hacer un acceso directo al `eclipse` o `eclipse.exe` y ejecutarlo con doble click. Necesitars definir un espacio de trabajo o _workspace_, que es la carpeta donde vas a ubicar todos tus proyectos.### Configuraciones adicionalesPor lo general no es necesario hacer nada ms, pero en caso de necesitarlo, en la carpeta raz donde descargaste el Eclipse vas a encontrar un archivo `eclipse.ini` que permite configurarf- cul es la versin de Java requerida (por defecto es 1.11 y no debera ser necesario modificarla)- cul es la ubicacin donde est el ejecutable de Java: es importante que apunte a una JDK y no a una JRE, como hemos comentado en la instalacin de la JDK. Si por defecto instalaste una JRE, tu Eclipse no ser capaz de compilar, recomendamos volver a la pgina JDK y reinstalar Java. De la misma manera, la JDK a la que apunte Eclipse debera ser la misma que vos instalaste: asegurate de que estn sincronizadas.A continuacin te dejamos un archivo `.ini` de ejemplo, ignorando las primeras lneas:```ini...--launcher.appendVmargs-vm/usr/lib/jvm/java-11-openjdk-amd64/bin-vmargs-Dosgi.instance.area.default=@user.home/eclipse-workspace-XX:+UseG1GC-XX:+UseStringDeduplication--add-modules=ALL-SYSTEM-Dosgi.requiredJavaVersion=1.11-Dosgi.dataAreaRequiresExplicitInit=true-Xms512m-Xmx1768m--add-modules=ALL-SYSTEM-Declipse.p2.max.threads=10-Doomph.update.url=http://download.eclipse.org/oomph/updates/milestone/latest-Doomph.redirection.index.redirection=index:/-&gt;http://git.eclipse.org/c/oomph/org.eclipse.oomph.git/plain/setups/```En el ejemplo estamos configurando una memoria inicial de 512 MB y una memoria mxima de 1768 MB, una JDK 1.11 requerida. El resto son valores por defecto que te va a crear el instalador de Eclipse.## MavenSegu los pasos de instalacin de [esta pgina](guia-de-instalacion-de-maven.html)## Plugin XtendInstal el plugin de Xtend desde el Update Site, siguiendo estos pasos:- En el men de Eclipse, Help &gt; Install New Software ... botn Add- En la ventana de dilogo Add Repository, en el nombre escribir algo como &quot;Xtend Plugin&quot; y en Location copiar esta URL: [http://download.eclipse.org/modeling/tmf/xtext/updates/milestones/](http://download.eclipse.org/modeling/tmf/xtext/updates/milestones/)- A partir del 2021 se estar usando la versin **2.25**, en caso de que vayan saliendo nuevas versiones, se puede elegir qu versin instalar destildando la opcin &quot;Show only the latest versions of available software&quot; (ms abajo est resaltado en la imagen). En caso de duda sobre qu versin instalar, aconsejamos consultar por la lista de difusin al docente responsable.- Seleccionar el check Xtext, y luego Xtend IDE, hacer click en Next y luego en Finish![image](/img/wiki/Xtend-installation-2020-2.png)- Reiniciar el Eclipse# Configuraciones default del eclipseAntes que nada cheque las [Configuraciones generales para cualquier Eclipse](configuraciones-generales-para-cualquier-eclipse.html)# Cmo empezar?- Crear un proyecto Maven (si no instalaste Maven hacelo como se sugiere [aqu](guia-de-instalacion-de-maven.html)  - en la primera ventana, clickear en la opcin &quot;Create a simple project (Skip archetype selection)&quot;, luego Next...  - definir un groupId, que puede ser el *materia* . Ej: algo2, phm, etc.  - definir un artifactId, que se asocia al nombre de tu proyecto- Para definir el archivo `pom.xml` de Maven con el que vas a configurar tu proyecto, pods basarte en el modelo de ejemplo de [esta pgina](xtend-creacion-proyecto.html) # Tips- Para que cuando hagas New &gt; File te aparezcan las clases y las interfaces Xtend, Window &gt; Customize Perspective... &gt; solapa Menu Visibility &gt; expands File &gt; New &gt; y seleccions las de Xtend (Xtend class, inteface, annotation y enum).# Documentacin- [Documentacin oficial](http://www.eclipse.org/xtend/documentation/)# Links tiles- [Siguiente paso: Creacin de un proyecto en Xtend](xtend-creacion-proyecto.html)- [Volver al men principal del entorno Xtend](xtend-principal.html)"

} ,

{

"title"    : "Xtend - pagina principal",
"category" : "",
"tags"     : "",
"url"      : "/wiki/articles/xtend-principal.html",
"date"     : "",
"content"  : "![image](/img/languages/Xtend.png)A continuacin te vamos a dejar los pasos de instalacin del entorno Xtend para las materias Algoritmos 2, Algoritmos 3 y Programacin con Herramientas Modernas. Segu metdicamente los puntos y no saltees las verificaciones para asegurarte que en tu mquina tengas todas las herramientas necesarias para trabajar.* [Instalacin del entorno base](xtend-preparacion-de-un-entorno-de-desarrollo.html)* Configuracin del entorno  * [Configuraciones default de Eclipse](configuraciones-generales-para-cualquier-eclipse.html)* Recomendaciones para trabajar en la materia  * [Cmo generar un proyecto Xtend nuevo](xtend-creacion-proyecto.html)  * [Sobre el control de versiones](xtend-amigandonos-git.html)* Ayudas para manejarte con el lenguaje  * [Gua rpida de Xtend](xtend-guia-rapida.html)  * [Colecciones](https://docs.google.com/document/d/1lzOStySb8i94oVvZUIxkgymf2tuCDuXzqSTnClPqKSM/edit?usp=sharing)  * [Intro a manejo de errores con excepciones](https://docs.google.com/document/d/1G0a9j-OA0rIEA5cdvEhIMbztJVo86ssvZKBK8HL9akg/edit?usp=sharing)  * [Ejercicio del Monedero](https://docs.google.com/document/d/1vVW91adl0p-NxGNpe8fqmC_5YmBkrxaLDFKyZ0xZb9Y/edit?usp=sharing) para ver cmo interactan la UI y el dominio a partir de errores del dominio y del sistema  * [Testing](https://docs.google.com/document/d/11mVR-4wEZhlQMDEqrfQeYLypEsrSqXv98dr78SA0Oq4/edit?usp=sharing)"

} ,

{

"title"    : "Articles in &amp;#8220;Java&amp;#8221;",
"category" : "java",
"tags"     : "",
"url"      : "/categories/java/",
"date"     : "",
"content"  : "Articles for category: {{ page.category | capitalize }}        {% for article in site.pages %}        {% if article.url contains &#39;wiki/articles/&#39; %}            {% for category in article.categories %}                {% if category == page.category %}                    {{ article.title }}                {% endif %}            {% endfor %}        {% endif %}    {% endfor %}    "

} ,

{

"title"    : "Articles in &amp;#8220;Enviroment&amp;#8221;",
"category" : "enviroment",
"tags"     : "",
"url"      : "/categories/enviroment/",
"date"     : "",
"content"  : "Articles for category: {{ page.category | capitalize }}        {% for article in site.pages %}        {% if article.url contains &#39;wiki/articles/&#39; %}            {% for category in article.categories %}                {% if category == page.category %}                    {{ article.title }}                {% endif %}            {% endfor %}        {% endif %}    {% endfor %}    "

} ,

{

"title"    : "Articles in &amp;#8220;Scala&amp;#8221;",
"category" : "scala",
"tags"     : "",
"url"      : "/categories/scala/",
"date"     : "",
"content"  : "Articles for category: {{ page.category | capitalize }}        {% for article in site.pages %}        {% if article.url contains &#39;wiki/articles/&#39; %}            {% for category in article.categories %}                {% if category == page.category %}                    {{ article.title }}                {% endif %}            {% endfor %}        {% endif %}    {% endfor %}    "

} ,

{

"title"    : "Articles in &amp;#8220;Haskell&amp;#8221;",
"category" : "haskell",
"tags"     : "",
"url"      : "/categories/haskell/",
"date"     : "",
"content"  : "Articles for category: {{ page.category | capitalize }}        {% for article in site.pages %}        {% if article.url contains &#39;wiki/articles/&#39; %}            {% for category in article.categories %}                {% if category == page.category %}                    {{ article.title }}                {% endif %}            {% endfor %}        {% endif %}    {% endfor %}    "

} ,

{

"title"    : "Articles in &amp;#8220;Python&amp;#8221;",
"category" : "python",
"tags"     : "",
"url"      : "/categories/python/",
"date"     : "",
"content"  : "Articles for category: {{ page.category | capitalize }}        {% for article in site.pages %}        {% if article.url contains &#39;wiki/articles/&#39; %}            {% for category in article.categories %}                {% if category == page.category %}                    {{ article.title }}                {% endif %}            {% endfor %}        {% endif %}    {% endfor %}    "

} ,

{

"title"    : "Articles in &amp;#8220;Ruby&amp;#8221;",
"category" : "ruby",
"tags"     : "",
"url"      : "/categories/ruby/",
"date"     : "",
"content"  : "Articles for category: {{ page.category | capitalize }}        {% for article in site.pages %}        {% if article.url contains &#39;wiki/articles/&#39; %}            {% for category in article.categories %}                {% if category == page.category %}                    {{ article.title }}                {% endif %}            {% endfor %}        {% endif %}    {% endfor %}    "

} ,

{

"title"    : "Articles in &amp;#8220;Dds&amp;#8221;",
"category" : "dds",
"tags"     : "",
"url"      : "/categories/dds/",
"date"     : "",
"content"  : "Articles for category: {{ page.category | capitalize }}        {% for article in site.pages %}        {% if article.url contains &#39;wiki/articles/&#39; %}            {% for category in article.categories %}                {% if category == page.category %}                    {{ article.title }}                {% endif %}            {% endfor %}        {% endif %}    {% endfor %}    "

} ,

{

"title"    : "Articles in &amp;#8220;Paradigmas&amp;#8221;",
"category" : "paradigmas",
"tags"     : "",
"url"      : "/categories/paradigmas/",
"date"     : "",
"content"  : "Articles for category: {{ page.category | capitalize }}        {% for article in site.pages %}        {% if article.url contains &#39;wiki/articles/&#39; %}            {% for category in article.categories %}                {% if category == page.category %}                    {{ article.title }}                {% endif %}            {% endfor %}        {% endif %}    {% endfor %}    "

} ,

{

"title"    : "Articles in &amp;#8220;Tadp&amp;#8221;",
"category" : "tadp",
"tags"     : "",
"url"      : "/categories/tadp/",
"date"     : "",
"content"  : "Articles for category: {{ page.category | capitalize }}        {% for article in site.pages %}        {% if article.url contains &#39;wiki/articles/&#39; %}            {% for category in article.categories %}                {% if category == page.category %}                    {{ article.title }}                {% endif %}            {% endfor %}        {% endif %}    {% endfor %}    "

} ,

{

"title"    : "Articles in &amp;#8220;Algo3&amp;#8221;",
"category" : "algo3",
"tags"     : "",
"url"      : "/categories/algo3/",
"date"     : "",
"content"  : "Articles for category: {{ page.category | capitalize }}        {% for article in site.pages %}        {% if article.url contains &#39;wiki/articles/&#39; %}            {% for category in article.categories %}                {% if category == page.category %}                    {{ article.title }}                {% endif %}            {% endfor %}        {% endif %}    {% endfor %}    "

} ,

{

"title"    : "Articles in &amp;#8220;Reliability_engineering&amp;#8221;",
"category" : "reliability_engineering",
"tags"     : "",
"url"      : "/categories/reliability_engineering/",
"date"     : "",
"content"  : "Articles for category: {{ page.category | capitalize }}        {% for article in site.pages %}        {% if article.url contains &#39;wiki/articles/&#39; %}            {% for category in article.categories %}                {% if category == page.category %}                    {{ article.title }}                {% endif %}            {% endfor %}        {% endif %}    {% endfor %}    "

} ,

{

} ,

{

} 

]